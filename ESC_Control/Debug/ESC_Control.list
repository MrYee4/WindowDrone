
ESC_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800e460  0800e460  0001e460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9b8  0800e9b8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9b8  0800e9b8  0001e9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9c0  0800e9c0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9c0  0800e9c0  0001e9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9c4  0800e9c4  0001e9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e9c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  200001e8  0800ebb0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  0800ebb0  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017cc0  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b09  00000000  00000000  00037f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0003aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001192  00000000  00000000  0003c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a22d  00000000  00000000  0003d20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fd3  00000000  00000000  00067437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b1a0  00000000  00000000  0008140a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007948  00000000  00000000  0018c5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00193ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e444 	.word	0x0800e444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e444 	.word	0x0800e444

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0d4      	sub	sp, #336	; 0x150
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f001 feeb 	bl	8002dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 fa3d 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 fe0d 	bl	8001c1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001002:	f000 fddb 	bl	8001bbc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001006:	f000 fa89 	bl	800151c <MX_ADC1_Init>
  MX_TIM4_Init();
 800100a:	f000 fc2d 	bl	8001868 <MX_TIM4_Init>
  MX_TIM3_Init();
 800100e:	f000 fbb3 	bl	8001778 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001012:	f000 fb39 	bl	8001688 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001016:	f000 fcbb 	bl	8001990 <MX_TIM8_Init>
  MX_TIM15_Init();
 800101a:	f000 fd23 	bl	8001a64 <MX_TIM15_Init>
  MX_TIM6_Init();
 800101e:	f000 fc7f 	bl	8001920 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001022:	f000 fda5 	bl	8001b70 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001026:	f000 faef 	bl	8001608 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Start ADC
  HAL_ADC_Start(&hadc1);
 800102a:	48ad      	ldr	r0, [pc, #692]	; (80012e0 <main+0x2f0>)
 800102c:	f002 fa5e 	bl	80034ec <HAL_ADC_Start>

  // Start Timer PWM Generation
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001030:	2100      	movs	r1, #0
 8001032:	48ac      	ldr	r0, [pc, #688]	; (80012e4 <main+0x2f4>)
 8001034:	f005 fd4e 	bl	8006ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8001038:	2104      	movs	r1, #4
 800103a:	48ab      	ldr	r0, [pc, #684]	; (80012e8 <main+0x2f8>)
 800103c:	f005 fd4a 	bl	8006ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001040:	2108      	movs	r1, #8
 8001042:	48aa      	ldr	r0, [pc, #680]	; (80012ec <main+0x2fc>)
 8001044:	f005 fd46 	bl	8006ad4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001048:	210c      	movs	r1, #12
 800104a:	48a9      	ldr	r0, [pc, #676]	; (80012f0 <main+0x300>)
 800104c:	f005 fd42 	bl	8006ad4 <HAL_TIM_PWM_Start>

  // Initialize and zero out Gyro/Accel chips
  MPU_6050_Init();
 8001050:	f000 fea2 	bl	8001d98 <MPU_6050_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Initialize PWM values for motor control
  Remote_Roll_Command = 600;
 8001054:	4ba7      	ldr	r3, [pc, #668]	; (80012f4 <main+0x304>)
 8001056:	f44f 7216 	mov.w	r2, #600	; 0x258
 800105a:	601a      	str	r2, [r3, #0]
  Remote_Pitch_Command = 600;
 800105c:	4ba6      	ldr	r3, [pc, #664]	; (80012f8 <main+0x308>)
 800105e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001062:	601a      	str	r2, [r3, #0]
  Remote_Yaw_Command = 600;
 8001064:	4ba5      	ldr	r3, [pc, #660]	; (80012fc <main+0x30c>)
 8001066:	f44f 7216 	mov.w	r2, #600	; 0x258
 800106a:	601a      	str	r2, [r3, #0]
  int STM_Throttle_PWM = 80;
 800106c:	2350      	movs	r3, #80	; 0x50
 800106e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  int STM_Roll_PWM = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  int STM_Pitch_PWM = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  int STM_Yaw_PWM = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  {
	/**************************************************/
	/**************** reset Control *******************/
	/**************************************************/

	FL_Motor = 0;
 8001084:	4b9e      	ldr	r3, [pc, #632]	; (8001300 <main+0x310>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
	FR_Motor = 0;
 800108a:	4b9e      	ldr	r3, [pc, #632]	; (8001304 <main+0x314>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
	BL_Motor = 0;
 8001090:	4b9d      	ldr	r3, [pc, #628]	; (8001308 <main+0x318>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
	BR_Motor = 0;
 8001096:	4b9d      	ldr	r3, [pc, #628]	; (800130c <main+0x31c>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

	/**************************************************/
	/**************** Remote_Throttle_Command Control ****************/
	/**************************************************/

	if (Remote_Throttle_Command < 400)
 800109c:	4b9c      	ldr	r3, [pc, #624]	; (8001310 <main+0x320>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010a4:	da03      	bge.n	80010ae <main+0xbe>
	{
		Remote_Throttle_Command = 400;
 80010a6:	4b9a      	ldr	r3, [pc, #616]	; (8001310 <main+0x320>)
 80010a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80010ac:	601a      	str	r2, [r3, #0]
	}
	STM_Throttle_PWM = Min_Throttle + ((Remote_Throttle_Command - 400) / 5.7);
 80010ae:	4b98      	ldr	r3, [pc, #608]	; (8001310 <main+0x320>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa34 	bl	8000524 <__aeabi_i2d>
 80010bc:	a386      	add	r3, pc, #536	; (adr r3, 80012d8 <main+0x2e8>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fbc3 	bl	800084c <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b90      	ldr	r3, [pc, #576]	; (8001314 <main+0x324>)
 80010d4:	f7ff f8da 	bl	800028c <__adddf3>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fd3a 	bl	8000b58 <__aeabi_d2iz>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	FL_Motor = STM_Throttle_PWM;
 80010ea:	4a85      	ldr	r2, [pc, #532]	; (8001300 <main+0x310>)
 80010ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010f0:	6013      	str	r3, [r2, #0]
	FR_Motor = STM_Throttle_PWM;
 80010f2:	4a84      	ldr	r2, [pc, #528]	; (8001304 <main+0x314>)
 80010f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010f8:	6013      	str	r3, [r2, #0]
	BL_Motor = STM_Throttle_PWM;
 80010fa:	4a83      	ldr	r2, [pc, #524]	; (8001308 <main+0x318>)
 80010fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001100:	6013      	str	r3, [r2, #0]
	BR_Motor = STM_Throttle_PWM;
 8001102:	4a82      	ldr	r2, [pc, #520]	; (800130c <main+0x31c>)
 8001104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001108:	6013      	str	r3, [r2, #0]

	/**************************************************/
	/****************** Remote_Roll_Command Control ******************/
	/**************************************************/

	STM_Roll_PWM = ((Remote_Roll_Command - 400) / 5.7);
 800110a:	4b7a      	ldr	r3, [pc, #488]	; (80012f4 <main+0x304>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa06 	bl	8000524 <__aeabi_i2d>
 8001118:	a36f      	add	r3, pc, #444	; (adr r3, 80012d8 <main+0x2e8>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fb95 	bl	800084c <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd15 	bl	8000b58 <__aeabi_d2iz>
 800112e:	4603      	mov	r3, r0
 8001130:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	if(STM_Roll_PWM > 40)
 8001134:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001138:	2b28      	cmp	r3, #40	; 0x28
 800113a:	dd29      	ble.n	8001190 <main+0x1a0>
	{
		int Temp_Motor_Roll_PWM = STM_Roll_PWM - 40;
 800113c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001140:	3b28      	subs	r3, #40	; 0x28
 8001142:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

		if(STM_Throttle_PWM + Temp_Motor_Roll_PWM < Max_Throttle)
 8001146:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800114a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800114e:	4413      	add	r3, r2
 8001150:	2b9f      	cmp	r3, #159	; 0x9f
 8001152:	dc16      	bgt.n	8001182 <main+0x192>
		{
			FL_Motor += (Temp_Motor_Roll_PWM/2);
 8001154:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001158:	0fda      	lsrs	r2, r3, #31
 800115a:	4413      	add	r3, r2
 800115c:	105b      	asrs	r3, r3, #1
 800115e:	461a      	mov	r2, r3
 8001160:	4b67      	ldr	r3, [pc, #412]	; (8001300 <main+0x310>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4413      	add	r3, r2
 8001166:	4a66      	ldr	r2, [pc, #408]	; (8001300 <main+0x310>)
 8001168:	6013      	str	r3, [r2, #0]
			BL_Motor += (Temp_Motor_Roll_PWM/2);
 800116a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800116e:	0fda      	lsrs	r2, r3, #31
 8001170:	4413      	add	r3, r2
 8001172:	105b      	asrs	r3, r3, #1
 8001174:	461a      	mov	r2, r3
 8001176:	4b64      	ldr	r3, [pc, #400]	; (8001308 <main+0x318>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a62      	ldr	r2, [pc, #392]	; (8001308 <main+0x318>)
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e038      	b.n	80011f4 <main+0x204>
		}
		else
		{
			FL_Motor = Max_Throttle;
 8001182:	4b5f      	ldr	r3, [pc, #380]	; (8001300 <main+0x310>)
 8001184:	22a0      	movs	r2, #160	; 0xa0
 8001186:	601a      	str	r2, [r3, #0]
			BL_Motor = Max_Throttle;
 8001188:	4b5f      	ldr	r3, [pc, #380]	; (8001308 <main+0x318>)
 800118a:	22a0      	movs	r2, #160	; 0xa0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e031      	b.n	80011f4 <main+0x204>
		}
	}
	else if(STM_Roll_PWM < 30)
 8001190:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001194:	2b1d      	cmp	r3, #29
 8001196:	dc2d      	bgt.n	80011f4 <main+0x204>
	{
		int Temp_Motor_Roll_PWM = STM_Roll_PWM - 30;
 8001198:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800119c:	3b1e      	subs	r3, #30
 800119e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		Temp_Motor_Roll_PWM *= -1;
 80011a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011a6:	425b      	negs	r3, r3
 80011a8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

		if(STM_Throttle_PWM + Temp_Motor_Roll_PWM < Max_Throttle)
 80011ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011b4:	4413      	add	r3, r2
 80011b6:	2b9f      	cmp	r3, #159	; 0x9f
 80011b8:	dc16      	bgt.n	80011e8 <main+0x1f8>
		{
			FR_Motor += (Temp_Motor_Roll_PWM/2);
 80011ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011be:	0fda      	lsrs	r2, r3, #31
 80011c0:	4413      	add	r3, r2
 80011c2:	105b      	asrs	r3, r3, #1
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b4f      	ldr	r3, [pc, #316]	; (8001304 <main+0x314>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <main+0x314>)
 80011ce:	6013      	str	r3, [r2, #0]
			BR_Motor += (Temp_Motor_Roll_PWM/2);
 80011d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80011d4:	0fda      	lsrs	r2, r3, #31
 80011d6:	4413      	add	r3, r2
 80011d8:	105b      	asrs	r3, r3, #1
 80011da:	461a      	mov	r2, r3
 80011dc:	4b4b      	ldr	r3, [pc, #300]	; (800130c <main+0x31c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a4a      	ldr	r2, [pc, #296]	; (800130c <main+0x31c>)
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e005      	b.n	80011f4 <main+0x204>
		}
		else
		{
			FR_Motor = Max_Throttle;
 80011e8:	4b46      	ldr	r3, [pc, #280]	; (8001304 <main+0x314>)
 80011ea:	22a0      	movs	r2, #160	; 0xa0
 80011ec:	601a      	str	r2, [r3, #0]
			BR_Motor = Max_Throttle;
 80011ee:	4b47      	ldr	r3, [pc, #284]	; (800130c <main+0x31c>)
 80011f0:	22a0      	movs	r2, #160	; 0xa0
 80011f2:	601a      	str	r2, [r3, #0]

	/**************************************************/
	/****************** Remote_Pitch_Command Control *****************/
	/**************************************************/

	STM_Pitch_PWM = ((Remote_Pitch_Command - 400) / 5.7);
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <main+0x308>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f991 	bl	8000524 <__aeabi_i2d>
 8001202:	a335      	add	r3, pc, #212	; (adr r3, 80012d8 <main+0x2e8>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fb20 	bl	800084c <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fca0 	bl	8000b58 <__aeabi_d2iz>
 8001218:	4603      	mov	r3, r0
 800121a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	if(STM_Pitch_PWM > 40)
 800121e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001222:	2b28      	cmp	r3, #40	; 0x28
 8001224:	dd29      	ble.n	800127a <main+0x28a>
	{
		int Temp_Motor_Pitch_PWM = STM_Pitch_PWM - 40;
 8001226:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800122a:	3b28      	subs	r3, #40	; 0x28
 800122c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

		if(STM_Throttle_PWM + Temp_Motor_Pitch_PWM < Max_Throttle)
 8001230:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001234:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001238:	4413      	add	r3, r2
 800123a:	2b9f      	cmp	r3, #159	; 0x9f
 800123c:	dc16      	bgt.n	800126c <main+0x27c>
		{
			BL_Motor += (Temp_Motor_Pitch_PWM/2);
 800123e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001242:	0fda      	lsrs	r2, r3, #31
 8001244:	4413      	add	r3, r2
 8001246:	105b      	asrs	r3, r3, #1
 8001248:	461a      	mov	r2, r3
 800124a:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <main+0x318>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a2d      	ldr	r2, [pc, #180]	; (8001308 <main+0x318>)
 8001252:	6013      	str	r3, [r2, #0]
			BR_Motor += (Temp_Motor_Pitch_PWM/2);
 8001254:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001258:	0fda      	lsrs	r2, r3, #31
 800125a:	4413      	add	r3, r2
 800125c:	105b      	asrs	r3, r3, #1
 800125e:	461a      	mov	r2, r3
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <main+0x31c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4413      	add	r3, r2
 8001266:	4a29      	ldr	r2, [pc, #164]	; (800130c <main+0x31c>)
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e05b      	b.n	8001324 <main+0x334>
		}
		else
		{
			BL_Motor = Max_Throttle;
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <main+0x318>)
 800126e:	22a0      	movs	r2, #160	; 0xa0
 8001270:	601a      	str	r2, [r3, #0]
			BR_Motor = Max_Throttle;
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <main+0x31c>)
 8001274:	22a0      	movs	r2, #160	; 0xa0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e054      	b.n	8001324 <main+0x334>
		}
	}
	else if(STM_Pitch_PWM < 30)
 800127a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800127e:	2b1d      	cmp	r3, #29
 8001280:	dc50      	bgt.n	8001324 <main+0x334>
	{
		int Temp_Motor_Pitch_PWM = STM_Pitch_PWM - 30;
 8001282:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001286:	3b1e      	subs	r3, #30
 8001288:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		Temp_Motor_Pitch_PWM *= -1;
 800128c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001290:	425b      	negs	r3, r3
 8001292:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

		if(STM_Throttle_PWM + Temp_Motor_Pitch_PWM < Max_Throttle)
 8001296:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800129a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800129e:	4413      	add	r3, r2
 80012a0:	2b9f      	cmp	r3, #159	; 0x9f
 80012a2:	dc39      	bgt.n	8001318 <main+0x328>
		{
			FL_Motor += (Temp_Motor_Pitch_PWM/2);
 80012a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012a8:	0fda      	lsrs	r2, r3, #31
 80012aa:	4413      	add	r3, r2
 80012ac:	105b      	asrs	r3, r3, #1
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <main+0x310>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <main+0x310>)
 80012b8:	6013      	str	r3, [r2, #0]
			FR_Motor += (Temp_Motor_Pitch_PWM/2);
 80012ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80012be:	0fda      	lsrs	r2, r3, #31
 80012c0:	4413      	add	r3, r2
 80012c2:	105b      	asrs	r3, r3, #1
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <main+0x314>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <main+0x314>)
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e028      	b.n	8001324 <main+0x334>
 80012d2:	bf00      	nop
 80012d4:	f3af 8000 	nop.w
 80012d8:	cccccccd 	.word	0xcccccccd
 80012dc:	4016cccc 	.word	0x4016cccc
 80012e0:	20000204 	.word	0x20000204
 80012e4:	20000354 	.word	0x20000354
 80012e8:	20000438 	.word	0x20000438
 80012ec:	200002bc 	.word	0x200002bc
 80012f0:	20000308 	.word	0x20000308
 80012f4:	2000055c 	.word	0x2000055c
 80012f8:	20000560 	.word	0x20000560
 80012fc:	20000564 	.word	0x20000564
 8001300:	20000568 	.word	0x20000568
 8001304:	2000056c 	.word	0x2000056c
 8001308:	20000570 	.word	0x20000570
 800130c:	20000574 	.word	0x20000574
 8001310:	20000558 	.word	0x20000558
 8001314:	40540000 	.word	0x40540000
		}
		else
		{
			FL_Motor = Max_Throttle;
 8001318:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <main+0x468>)
 800131a:	22a0      	movs	r2, #160	; 0xa0
 800131c:	601a      	str	r2, [r3, #0]
			FR_Motor = Max_Throttle;
 800131e:	4b4f      	ldr	r3, [pc, #316]	; (800145c <main+0x46c>)
 8001320:	22a0      	movs	r2, #160	; 0xa0
 8001322:	601a      	str	r2, [r3, #0]
	}

	/**************************************************/
	/******************* Remote_Yaw_Command Control ******************/
	/**************************************************/
	STM_Yaw_PWM = ((Remote_Yaw_Command - 400) / 5.7);
 8001324:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <main+0x470>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f8f9 	bl	8000524 <__aeabi_i2d>
 8001332:	a347      	add	r3, pc, #284	; (adr r3, 8001450 <main+0x460>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff fa88 	bl	800084c <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fc08 	bl	8000b58 <__aeabi_d2iz>
 8001348:	4603      	mov	r3, r0
 800134a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	if(STM_Yaw_PWM > 40)
 800134e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001352:	2b28      	cmp	r3, #40	; 0x28
 8001354:	dd21      	ble.n	800139a <main+0x3aa>
	{
		STM_Yaw_PWM -= 40;
 8001356:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800135a:	3b28      	subs	r3, #40	; 0x28
 800135c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		if(STM_Throttle_PWM + STM_Yaw_PWM < Max_Throttle)
 8001360:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001364:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001368:	4413      	add	r3, r2
 800136a:	2b9f      	cmp	r3, #159	; 0x9f
 800136c:	dc0e      	bgt.n	800138c <main+0x39c>
		{
			BL_Motor += STM_Yaw_PWM;
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <main+0x474>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001376:	4413      	add	r3, r2
 8001378:	4a3a      	ldr	r2, [pc, #232]	; (8001464 <main+0x474>)
 800137a:	6013      	str	r3, [r2, #0]
			FR_Motor += STM_Yaw_PWM;
 800137c:	4b37      	ldr	r3, [pc, #220]	; (800145c <main+0x46c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001384:	4413      	add	r3, r2
 8001386:	4a35      	ldr	r2, [pc, #212]	; (800145c <main+0x46c>)
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e030      	b.n	80013ee <main+0x3fe>
		}
		else
		{
			BL_Motor = Max_Throttle;
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <main+0x474>)
 800138e:	22a0      	movs	r2, #160	; 0xa0
 8001390:	601a      	str	r2, [r3, #0]
			FR_Motor = Max_Throttle;
 8001392:	4b32      	ldr	r3, [pc, #200]	; (800145c <main+0x46c>)
 8001394:	22a0      	movs	r2, #160	; 0xa0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e029      	b.n	80013ee <main+0x3fe>
		}
	}
	else if(STM_Yaw_PWM < 30)
 800139a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800139e:	2b1d      	cmp	r3, #29
 80013a0:	dc25      	bgt.n	80013ee <main+0x3fe>
	{
		STM_Yaw_PWM -= 30;
 80013a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013a6:	3b1e      	subs	r3, #30
 80013a8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		STM_Yaw_PWM *= -1;
 80013ac:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013b0:	425b      	negs	r3, r3
 80013b2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		if(STM_Throttle_PWM + STM_Yaw_PWM < Max_Throttle)
 80013b6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013ba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013be:	4413      	add	r3, r2
 80013c0:	2b9f      	cmp	r3, #159	; 0x9f
 80013c2:	dc0e      	bgt.n	80013e2 <main+0x3f2>
		{
			FL_Motor += STM_Yaw_PWM;
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <main+0x468>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013cc:	4413      	add	r3, r2
 80013ce:	4a22      	ldr	r2, [pc, #136]	; (8001458 <main+0x468>)
 80013d0:	6013      	str	r3, [r2, #0]
			BR_Motor += STM_Yaw_PWM;
 80013d2:	4b25      	ldr	r3, [pc, #148]	; (8001468 <main+0x478>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013da:	4413      	add	r3, r2
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <main+0x478>)
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e005      	b.n	80013ee <main+0x3fe>
		}
		else
		{
			FL_Motor = Max_Throttle;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <main+0x468>)
 80013e4:	22a0      	movs	r2, #160	; 0xa0
 80013e6:	601a      	str	r2, [r3, #0]
			BR_Motor = Max_Throttle;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <main+0x478>)
 80013ea:	22a0      	movs	r2, #160	; 0xa0
 80013ec:	601a      	str	r2, [r3, #0]

	/**************************************************/
	/********* Adjust Motor Values per Accel **********/
	/**************************************************/

	if (30 < STM_Roll_PWM && STM_Roll_PWM < 40 && STM_Throttle_PWM > 90)
 80013ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80013f2:	2b1e      	cmp	r3, #30
 80013f4:	dd09      	ble.n	800140a <main+0x41a>
 80013f6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80013fa:	2b27      	cmp	r3, #39	; 0x27
 80013fc:	dc05      	bgt.n	800140a <main+0x41a>
 80013fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001402:	2b5a      	cmp	r3, #90	; 0x5a
 8001404:	dd01      	ble.n	800140a <main+0x41a>
	{
		Motor_Adjust_Roll();
 8001406:	f000 ff59 	bl	80022bc <Motor_Adjust_Roll>
	}
	if (30 < STM_Pitch_PWM && STM_Pitch_PWM < 40 && STM_Throttle_PWM > 90)
 800140a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800140e:	2b1e      	cmp	r3, #30
 8001410:	dd09      	ble.n	8001426 <main+0x436>
 8001412:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001416:	2b27      	cmp	r3, #39	; 0x27
 8001418:	dc05      	bgt.n	8001426 <main+0x436>
 800141a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800141e:	2b5a      	cmp	r3, #90	; 0x5a
 8001420:	dd01      	ble.n	8001426 <main+0x436>
	{
		Motor_Adjust_Pitch();
 8001422:	f000 ffe3 	bl	80023ec <Motor_Adjust_Pitch>

	/**************************************************/
	/**************** Set Motor Values ****************/
	/**************************************************/

	TIM2->CCR3 = BR_Motor;
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <main+0x478>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = FL_Motor;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <main+0x468>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <main+0x47c>)
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR1 = FR_Motor;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <main+0x46c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <main+0x480>)
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = BL_Motor;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <main+0x474>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <main+0x484>)
 8001446:	639a      	str	r2, [r3, #56]	; 0x38


	// Convert to string and prints
	Get_Pos();
 8001448:	f000 fdd6 	bl	8001ff8 <Get_Pos>
	FL_Motor = 0;
 800144c:	e61a      	b.n	8001084 <main+0x94>
 800144e:	bf00      	nop
 8001450:	cccccccd 	.word	0xcccccccd
 8001454:	4016cccc 	.word	0x4016cccc
 8001458:	20000568 	.word	0x20000568
 800145c:	2000056c 	.word	0x2000056c
 8001460:	20000564 	.word	0x20000564
 8001464:	20000570 	.word	0x20000570
 8001468:	20000574 	.word	0x20000574
 800146c:	40000400 	.word	0x40000400
 8001470:	40000800 	.word	0x40000800
 8001474:	40014000 	.word	0x40014000

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b096      	sub	sp, #88	; 0x58
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	2244      	movs	r2, #68	; 0x44
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f008 fa9b 	bl	80099c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800149a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800149e:	f003 ff59 	bl	8005354 <HAL_PWREx_ControlVoltageScaling>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014a8:	f001 f8ac 	bl	8002604 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014ac:	2302      	movs	r3, #2
 80014ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b6:	2310      	movs	r3, #16
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014be:	2302      	movs	r3, #2
 80014c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014c6:	230a      	movs	r3, #10
 80014c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014ca:	2307      	movs	r3, #7
 80014cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 ff90 	bl	8005400 <HAL_RCC_OscConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014e6:	f001 f88d 	bl	8002604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
 80014ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ee:	2303      	movs	r3, #3
 80014f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	2104      	movs	r1, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fb58 	bl	8005bb8 <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800150e:	f001 f879 	bl	8002604 <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3758      	adds	r7, #88	; 0x58
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001522:	f107 031c 	add.w	r3, r7, #28
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001540:	4a2f      	ldr	r2, [pc, #188]	; (8001600 <MX_ADC1_Init+0xe4>)
 8001542:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <MX_ADC1_Init+0xe0>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001556:	4b29      	ldr	r3, [pc, #164]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <MX_ADC1_Init+0xe0>)
 800155e:	2204      	movs	r2, #4
 8001560:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001564:	2200      	movs	r2, #0
 8001566:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <MX_ADC1_Init+0xe0>)
 800156a:	2200      	movs	r2, #0
 800156c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001570:	2201      	movs	r2, #1
 8001572:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_ADC1_Init+0xe0>)
 800157e:	2200      	movs	r2, #0
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001584:	2200      	movs	r2, #0
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_ADC1_Init+0xe0>)
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001592:	2200      	movs	r2, #0
 8001594:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_ADC1_Init+0xe0>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800159e:	4817      	ldr	r0, [pc, #92]	; (80015fc <MX_ADC1_Init+0xe0>)
 80015a0:	f001 fe54 	bl	800324c <HAL_ADC_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80015aa:	f001 f82b 	bl	8002604 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4810      	ldr	r0, [pc, #64]	; (80015fc <MX_ADC1_Init+0xe0>)
 80015ba:	f002 fcef 	bl	8003f9c <HAL_ADCEx_MultiModeConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015c4:	f001 f81e 	bl	8002604 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_ADC1_Init+0xe8>)
 80015ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015cc:	2306      	movs	r3, #6
 80015ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015d4:	237f      	movs	r3, #127	; 0x7f
 80015d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015d8:	2304      	movs	r3, #4
 80015da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_ADC1_Init+0xe0>)
 80015e6:	f002 f83b 	bl	8003660 <HAL_ADC_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80015f0:	f001 f808 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000204 	.word	0x20000204
 8001600:	50040000 	.word	0x50040000
 8001604:	14f00020 	.word	0x14f00020

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_I2C1_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_I2C1_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_I2C1_Init+0x74>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <MX_I2C1_Init+0x7c>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_I2C1_Init+0x74>)
 8001620:	2201      	movs	r2, #1
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_I2C1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_I2C1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <MX_I2C1_Init+0x74>)
 8001644:	f003 f85e 	bl	8004704 <HAL_I2C_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164e:	f000 ffd9 	bl	8002604 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_I2C1_Init+0x74>)
 8001656:	f003 fdd7 	bl	8005208 <HAL_I2CEx_ConfigAnalogFilter>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001660:	f000 ffd0 	bl	8002604 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_I2C1_Init+0x74>)
 8001668:	f003 fe19 	bl	800529e <HAL_I2CEx_ConfigDigitalFilter>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 ffc7 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000268 	.word	0x20000268
 8001680:	40005400 	.word	0x40005400
 8001684:	10909cec 	.word	0x10909cec

08001688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	615a      	str	r2, [r3, #20]
 80016b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <MX_TIM2_Init+0xec>)
 80016bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <MX_TIM2_Init+0xec>)
 80016c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <MX_TIM2_Init+0xec>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <MX_TIM2_Init+0xec>)
 80016d2:	f240 623f 	movw	r2, #1599	; 0x63f
 80016d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <MX_TIM2_Init+0xec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <MX_TIM2_Init+0xec>)
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016e4:	4823      	ldr	r0, [pc, #140]	; (8001774 <MX_TIM2_Init+0xec>)
 80016e6:	f005 f947 	bl	8006978 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80016f0:	f000 ff88 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016fe:	4619      	mov	r1, r3
 8001700:	481c      	ldr	r0, [pc, #112]	; (8001774 <MX_TIM2_Init+0xec>)
 8001702:	f005 fd03 	bl	800710c <HAL_TIM_ConfigClockSource>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800170c:	f000 ff7a 	bl	8002604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001710:	4818      	ldr	r0, [pc, #96]	; (8001774 <MX_TIM2_Init+0xec>)
 8001712:	f005 f988 	bl	8006a26 <HAL_TIM_PWM_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800171c:	f000 ff72 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <MX_TIM2_Init+0xec>)
 8001730:	f006 fae2 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800173a:	f000 ff63 	bl	8002604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173e:	2360      	movs	r3, #96	; 0x60
 8001740:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8001742:	231e      	movs	r3, #30
 8001744:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	2208      	movs	r2, #8
 8001752:	4619      	mov	r1, r3
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <MX_TIM2_Init+0xec>)
 8001756:	f005 fbc5 	bl	8006ee4 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001760:	f000 ff50 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <MX_TIM2_Init+0xec>)
 8001766:	f001 f8f3 	bl	8002950 <HAL_TIM_MspPostInit>

}
 800176a:	bf00      	nop
 800176c:	3738      	adds	r7, #56	; 0x38
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200002bc 	.word	0x200002bc

08001778 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001798:	463b      	mov	r3, r7
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	611a      	str	r2, [r3, #16]
 80017a6:	615a      	str	r2, [r3, #20]
 80017a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <MX_TIM3_Init+0xe8>)
 80017ac:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <MX_TIM3_Init+0xec>)
 80017ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <MX_TIM3_Init+0xe8>)
 80017b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <MX_TIM3_Init+0xe8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <MX_TIM3_Init+0xe8>)
 80017c0:	f240 623f 	movw	r2, #1599	; 0x63f
 80017c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <MX_TIM3_Init+0xe8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <MX_TIM3_Init+0xe8>)
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017d2:	4823      	ldr	r0, [pc, #140]	; (8001860 <MX_TIM3_Init+0xe8>)
 80017d4:	f005 f8d0 	bl	8006978 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80017de:	f000 ff11 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ec:	4619      	mov	r1, r3
 80017ee:	481c      	ldr	r0, [pc, #112]	; (8001860 <MX_TIM3_Init+0xe8>)
 80017f0:	f005 fc8c 	bl	800710c <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80017fa:	f000 ff03 	bl	8002604 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <MX_TIM3_Init+0xe8>)
 8001800:	f005 f911 	bl	8006a26 <HAL_TIM_PWM_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800180a:	f000 fefb 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4810      	ldr	r0, [pc, #64]	; (8001860 <MX_TIM3_Init+0xe8>)
 800181e:	f006 fa6b 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001828:	f000 feec 	bl	8002604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	; 0x60
 800182e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 60;
 8001830:	233c      	movs	r3, #60	; 0x3c
 8001832:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	220c      	movs	r2, #12
 8001840:	4619      	mov	r1, r3
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_TIM3_Init+0xe8>)
 8001844:	f005 fb4e 	bl	8006ee4 <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800184e:	f000 fed9 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <MX_TIM3_Init+0xe8>)
 8001854:	f001 f87c 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8001858:	bf00      	nop
 800185a:	3738      	adds	r7, #56	; 0x38
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000308 	.word	0x20000308
 8001864:	40000400 	.word	0x40000400

08001868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800187a:	463b      	mov	r3, r7
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_TIM4_Init+0xb0>)
 800188e:	4a23      	ldr	r2, [pc, #140]	; (800191c <MX_TIM4_Init+0xb4>)
 8001890:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_TIM4_Init+0xb0>)
 8001894:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001898:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_TIM4_Init+0xb0>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1600-1;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <MX_TIM4_Init+0xb0>)
 80018a2:	f240 623f 	movw	r2, #1599	; 0x63f
 80018a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_TIM4_Init+0xb0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <MX_TIM4_Init+0xb0>)
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80018b4:	4818      	ldr	r0, [pc, #96]	; (8001918 <MX_TIM4_Init+0xb0>)
 80018b6:	f005 f8b6 	bl	8006a26 <HAL_TIM_PWM_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80018c0:	f000 fea0 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4811      	ldr	r0, [pc, #68]	; (8001918 <MX_TIM4_Init+0xb0>)
 80018d4:	f006 fa10 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80018de:	f000 fe91 	bl	8002604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e2:	2360      	movs	r3, #96	; 0x60
 80018e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 120;
 80018e6:	2378      	movs	r3, #120	; 0x78
 80018e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	2200      	movs	r2, #0
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_TIM4_Init+0xb0>)
 80018fa:	f005 faf3 	bl	8006ee4 <HAL_TIM_PWM_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001904:	f000 fe7e 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <MX_TIM4_Init+0xb0>)
 800190a:	f001 f821 	bl	8002950 <HAL_TIM_MspPostInit>

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000354 	.word	0x20000354
 800191c:	40000800 	.word	0x40000800

08001920 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_TIM6_Init+0x68>)
 8001932:	4a16      	ldr	r2, [pc, #88]	; (800198c <MX_TIM6_Init+0x6c>)
 8001934:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000-1;
 8001936:	4b14      	ldr	r3, [pc, #80]	; (8001988 <MX_TIM6_Init+0x68>)
 8001938:	f240 32e7 	movw	r2, #999	; 0x3e7
 800193c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <MX_TIM6_Init+0x68>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1600-1;
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_TIM6_Init+0x68>)
 8001946:	f240 623f 	movw	r2, #1599	; 0x63f
 800194a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_TIM6_Init+0x68>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001952:	480d      	ldr	r0, [pc, #52]	; (8001988 <MX_TIM6_Init+0x68>)
 8001954:	f005 f810 	bl	8006978 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800195e:	f000 fe51 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	4619      	mov	r1, r3
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <MX_TIM6_Init+0x68>)
 8001970:	f006 f9c2 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800197a:	f000 fe43 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200003a0 	.word	0x200003a0
 800198c:	40001000 	.word	0x40001000

08001990 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <MX_TIM8_Init+0xcc>)
 80019c0:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <MX_TIM8_Init+0xd0>)
 80019c2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <MX_TIM8_Init+0xcc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <MX_TIM8_Init+0xcc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <MX_TIM8_Init+0xcc>)
 80019d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MX_TIM8_Init+0xcc>)
 80019da:	2200      	movs	r2, #0
 80019dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019de:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <MX_TIM8_Init+0xcc>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <MX_TIM8_Init+0xcc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019ea:	481c      	ldr	r0, [pc, #112]	; (8001a5c <MX_TIM8_Init+0xcc>)
 80019ec:	f004 ffc4 	bl	8006978 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 80019f6:	f000 fe05 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4619      	mov	r1, r3
 8001a06:	4815      	ldr	r0, [pc, #84]	; (8001a5c <MX_TIM8_Init+0xcc>)
 8001a08:	f005 fb80 	bl	800710c <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8001a12:	f000 fdf7 	bl	8002604 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001a16:	2305      	movs	r3, #5
 8001a18:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4619      	mov	r1, r3
 8001a24:	480d      	ldr	r0, [pc, #52]	; (8001a5c <MX_TIM8_Init+0xcc>)
 8001a26:	f005 fc3a 	bl	800729e <HAL_TIM_SlaveConfigSynchro>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001a30:	f000 fde8 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_TIM8_Init+0xcc>)
 8001a46:	f006 f957 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001a50:	f000 fdd8 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3730      	adds	r7, #48	; 0x30
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200003ec 	.word	0x200003ec
 8001a60:	40013400 	.word	0x40013400

08001a64 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b096      	sub	sp, #88	; 0x58
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
 8001a86:	615a      	str	r2, [r3, #20]
 8001a88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	222c      	movs	r2, #44	; 0x2c
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 ff96 	bl	80099c2 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001a96:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001a98:	4a34      	ldr	r2, [pc, #208]	; (8001b6c <MX_TIM15_Init+0x108>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1000-1;
 8001a9c:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001a9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1600-1;
 8001aaa:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001aac:	f240 623f 	movw	r2, #1599	; 0x63f
 8001ab0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001ac4:	4828      	ldr	r0, [pc, #160]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001ac6:	f004 ffae 	bl	8006a26 <HAL_TIM_PWM_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8001ad0:	f000 fd98 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001adc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4821      	ldr	r0, [pc, #132]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001ae4:	f006 f908 	bl	8007cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8001aee:	f000 fd89 	bl	8002604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af2:	2360      	movs	r3, #96	; 0x60
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 145;
 8001af6:	2391      	movs	r3, #145	; 0x91
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001afe:	2300      	movs	r3, #0
 8001b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b12:	2204      	movs	r2, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001b18:	f005 f9e4 	bl	8006ee4 <HAL_TIM_PWM_ConfigChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8001b22:	f000 fd6f 	bl	8002604 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001b4a:	f006 f95d 	bl	8007e08 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8001b54:	f000 fd56 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <MX_TIM15_Init+0x104>)
 8001b5a:	f000 fef9 	bl	8002950 <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3758      	adds	r7, #88	; 0x58
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000438 	.word	0x20000438
 8001b6c:	40014000 	.word	0x40014000

08001b70 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_TIM16_Init+0x44>)
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <MX_TIM16_Init+0x48>)
 8001b78:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 100-1;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_TIM16_Init+0x44>)
 8001b7c:	2263      	movs	r2, #99	; 0x63
 8001b7e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_TIM16_Init+0x44>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3200-1;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_TIM16_Init+0x44>)
 8001b88:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001b8c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_TIM16_Init+0x44>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <MX_TIM16_Init+0x44>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_TIM16_Init+0x44>)
 8001b9c:	2280      	movs	r2, #128	; 0x80
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_TIM16_Init+0x44>)
 8001ba2:	f004 fee9 	bl	8006978 <HAL_TIM_Base_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001bac:	f000 fd2a 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000484 	.word	0x20000484
 8001bb8:	40014400 	.word	0x40014400

08001bbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <MX_USART2_UART_Init+0x5c>)
 8001bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001be2:	220c      	movs	r2, #12
 8001be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART2_UART_Init+0x58>)
 8001c00:	f006 f99e 	bl	8007f40 <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c0a:	f000 fcfb 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200004d0 	.word	0x200004d0
 8001c18:	40004400 	.word	0x40004400

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	4a48      	ldr	r2, [pc, #288]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3e:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	4a42      	ldr	r2, [pc, #264]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c56:	4b40      	ldr	r3, [pc, #256]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a3c      	ldr	r2, [pc, #240]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4a36      	ldr	r2, [pc, #216]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <MX_GPIO_Init+0x13c>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f002 fd02 	bl	80046a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ca6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4829      	ldr	r0, [pc, #164]	; (8001d5c <MX_GPIO_Init+0x140>)
 8001cb8:	f002 fb32 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : Pitch_PWM_IN_Pin */
  GPIO_InitStruct.Pin = Pitch_PWM_IN_Pin;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Pitch_PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4822      	ldr	r0, [pc, #136]	; (8001d5c <MX_GPIO_Init+0x140>)
 8001cd2:	f002 fb25 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : Roll_PWM_IN_Pin */
  GPIO_InitStruct.Pin = Roll_PWM_IN_Pin;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Roll_PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	481c      	ldr	r0, [pc, #112]	; (8001d5c <MX_GPIO_Init+0x140>)
 8001cea:	f002 fb19 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : Yaw_PWM_IN_Pin */
  GPIO_InitStruct.Pin = Yaw_PWM_IN_Pin;
 8001cee:	2310      	movs	r3, #16
 8001cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Yaw_PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d04:	f002 fb0c 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : Throttle_PWM_IN_Pin */
  GPIO_InitStruct.Pin = Throttle_PWM_IN_Pin;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Throttle_PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4811      	ldr	r0, [pc, #68]	; (8001d60 <MX_GPIO_Init+0x144>)
 8001d1c:	f002 fb00 	bl	8004320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d3c:	f002 faf0 	bl	8004320 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2100      	movs	r1, #0
 8001d44:	2006      	movs	r0, #6
 8001d46:	f002 fab4 	bl	80042b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d4a:	2006      	movs	r0, #6
 8001d4c:	f002 facd 	bl	80042ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	48000800 	.word	0x48000800
 8001d60:	48000400 	.word	0x48000400

08001d64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	return;
 8001d6c:	bf00      	nop
}
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d102      	bne.n	8001d8e <HAL_GPIO_EXTI_Callback+0x16>
		Get_Pulses();
 8001d88:	f000 fbc6 	bl	8002518 <Get_Pulses>
	} else {
	   __NOP();
	}
}
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_EXTI_Callback+0x18>
	   __NOP();
 8001d8e:	bf00      	nop
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <MPU_6050_Init>:

void MPU_6050_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	76fb      	strb	r3, [r7, #27]
	uint8_t data = PM1_No_Reset;
 8001da2:	2300      	movs	r3, #0
 8001da4:	71fb      	strb	r3, [r7, #7]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, POWER_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	9302      	str	r3, [sp, #8]
 8001daa:	2301      	movs	r3, #1
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2301      	movs	r3, #1
 8001db4:	226b      	movs	r2, #107	; 0x6b
 8001db6:	21d0      	movs	r1, #208	; 0xd0
 8001db8:	4882      	ldr	r0, [pc, #520]	; (8001fc4 <MPU_6050_Init+0x22c>)
 8001dba:	f002 fd3f 	bl	800483c <HAL_I2C_Mem_Write>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	76fb      	strb	r3, [r7, #27]
	if (ret != HAL_OK)
 8001dc2:	7efb      	ldrb	r3, [r7, #27]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <MPU_6050_Init+0x3e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nError Initializing MPU_6050\r\n", strlen("\r\nError Initializing MPU_6050\r\n"), I2C_DELAY);
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	221f      	movs	r2, #31
 8001dcc:	497e      	ldr	r1, [pc, #504]	; (8001fc8 <MPU_6050_Init+0x230>)
 8001dce:	487f      	ldr	r0, [pc, #508]	; (8001fcc <MPU_6050_Init+0x234>)
 8001dd0:	f006 f904 	bl	8007fdc <HAL_UART_Transmit>
 8001dd4:	e039      	b.n	8001e4a <MPU_6050_Init+0xb2>
	}
	else
	{
		data = Gyro_500_Sens;
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	71fb      	strb	r3, [r7, #7]
		ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, GYRO_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 8001dda:	2364      	movs	r3, #100	; 0x64
 8001ddc:	9302      	str	r3, [sp, #8]
 8001dde:	2301      	movs	r3, #1
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2301      	movs	r3, #1
 8001de8:	221b      	movs	r2, #27
 8001dea:	21d0      	movs	r1, #208	; 0xd0
 8001dec:	4875      	ldr	r0, [pc, #468]	; (8001fc4 <MPU_6050_Init+0x22c>)
 8001dee:	f002 fd25 	bl	800483c <HAL_I2C_Mem_Write>
 8001df2:	4603      	mov	r3, r0
 8001df4:	76fb      	strb	r3, [r7, #27]
		if (ret != HAL_OK)
 8001df6:	7efb      	ldrb	r3, [r7, #27]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <MPU_6050_Init+0x72>
		{
			HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nError Initializing Gyro\r\n", strlen("\r\nError Initializing Gyro\r\n"), I2C_DELAY);
 8001dfc:	2364      	movs	r3, #100	; 0x64
 8001dfe:	221b      	movs	r2, #27
 8001e00:	4973      	ldr	r1, [pc, #460]	; (8001fd0 <MPU_6050_Init+0x238>)
 8001e02:	4872      	ldr	r0, [pc, #456]	; (8001fcc <MPU_6050_Init+0x234>)
 8001e04:	f006 f8ea 	bl	8007fdc <HAL_UART_Transmit>
 8001e08:	e01f      	b.n	8001e4a <MPU_6050_Init+0xb2>
		}
		else
		{
			data = Accel_4g_Sens;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	71fb      	strb	r3, [r7, #7]
			ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, ACCEL_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 8001e0e:	2364      	movs	r3, #100	; 0x64
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	2301      	movs	r3, #1
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	221c      	movs	r2, #28
 8001e1e:	21d0      	movs	r1, #208	; 0xd0
 8001e20:	4868      	ldr	r0, [pc, #416]	; (8001fc4 <MPU_6050_Init+0x22c>)
 8001e22:	f002 fd0b 	bl	800483c <HAL_I2C_Mem_Write>
 8001e26:	4603      	mov	r3, r0
 8001e28:	76fb      	strb	r3, [r7, #27]
			if (ret != HAL_OK)
 8001e2a:	7efb      	ldrb	r3, [r7, #27]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <MPU_6050_Init+0xa6>
			{
				HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nError Initializing Accel\r\n", strlen("\r\nError Initializing Accel\r\n"), I2C_DELAY);
 8001e30:	2364      	movs	r3, #100	; 0x64
 8001e32:	221c      	movs	r2, #28
 8001e34:	4967      	ldr	r1, [pc, #412]	; (8001fd4 <MPU_6050_Init+0x23c>)
 8001e36:	4865      	ldr	r0, [pc, #404]	; (8001fcc <MPU_6050_Init+0x234>)
 8001e38:	f006 f8d0 	bl	8007fdc <HAL_UART_Transmit>
 8001e3c:	e005      	b.n	8001e4a <MPU_6050_Init+0xb2>
			}
			else
			{
				HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nInitialized MPU_6050!\r\n", strlen("\r\nInitialized MPU_6050!\r\n"), I2C_DELAY);
 8001e3e:	2364      	movs	r3, #100	; 0x64
 8001e40:	2219      	movs	r2, #25
 8001e42:	4965      	ldr	r1, [pc, #404]	; (8001fd8 <MPU_6050_Init+0x240>)
 8001e44:	4861      	ldr	r0, [pc, #388]	; (8001fcc <MPU_6050_Init+0x234>)
 8001e46:	f006 f8c9 	bl	8007fdc <HAL_UART_Transmit>
			}
		}
	}

	int x = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
	AccelErrorX = 0;
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <MPU_6050_Init+0x244>)
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
	AccelErrorY = 0;
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <MPU_6050_Init+0x248>)
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
	AccelErrorZ = 0;
 8001e5e:	4b61      	ldr	r3, [pc, #388]	; (8001fe4 <MPU_6050_Init+0x24c>)
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
	int16_t dAccX;
	int16_t dAccY;
	int16_t dAccZ;
	while (x < Number_of_Calibrations)
 8001e66:	e086      	b.n	8001f76 <MPU_6050_Init+0x1de>
	{
		HAL_I2C_Mem_Read(&hi2c1, MPU_6050_ADDR, ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, Accel_buffer_in, 6, I2C_DELAY);
 8001e68:	2364      	movs	r3, #100	; 0x64
 8001e6a:	9302      	str	r3, [sp, #8]
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <MPU_6050_Init+0x250>)
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2301      	movs	r3, #1
 8001e76:	223b      	movs	r2, #59	; 0x3b
 8001e78:	21d0      	movs	r1, #208	; 0xd0
 8001e7a:	4852      	ldr	r0, [pc, #328]	; (8001fc4 <MPU_6050_Init+0x22c>)
 8001e7c:	f002 fdf2 	bl	8004a64 <HAL_I2C_Mem_Read>
		dAccX = ((int16_t)Accel_buffer_in[0] << 8) | (Accel_buffer_in[1]);
 8001e80:	4b59      	ldr	r3, [pc, #356]	; (8001fe8 <MPU_6050_Init+0x250>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b21a      	sxth	r2, r3
 8001e88:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <MPU_6050_Init+0x250>)
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	833b      	strh	r3, [r7, #24]
		dAccY = ((int16_t)Accel_buffer_in[2] << 8) | (Accel_buffer_in[3]);
 8001e92:	4b55      	ldr	r3, [pc, #340]	; (8001fe8 <MPU_6050_Init+0x250>)
 8001e94:	789b      	ldrb	r3, [r3, #2]
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <MPU_6050_Init+0x250>)
 8001e9c:	78db      	ldrb	r3, [r3, #3]
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	82fb      	strh	r3, [r7, #22]
		dAccZ = ((int16_t)Accel_buffer_in[4] << 8) | (Accel_buffer_in[5]);
 8001ea4:	4b50      	ldr	r3, [pc, #320]	; (8001fe8 <MPU_6050_Init+0x250>)
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	4b4e      	ldr	r3, [pc, #312]	; (8001fe8 <MPU_6050_Init+0x250>)
 8001eae:	795b      	ldrb	r3, [r3, #5]
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	82bb      	strh	r3, [r7, #20]

		float AccX = dAccX / Accel_4g_LSB_Divide;
 8001eb6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb32 	bl	8000524 <__aeabi_i2d>
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b49      	ldr	r3, [pc, #292]	; (8001fec <MPU_6050_Init+0x254>)
 8001ec6:	f7fe fcc1 	bl	800084c <__aeabi_ddiv>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe89 	bl	8000be8 <__aeabi_d2f>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	613b      	str	r3, [r7, #16]
		float AccY = dAccY / Accel_4g_LSB_Divide;
 8001eda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fb20 	bl	8000524 <__aeabi_i2d>
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b40      	ldr	r3, [pc, #256]	; (8001fec <MPU_6050_Init+0x254>)
 8001eea:	f7fe fcaf 	bl	800084c <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fe77 	bl	8000be8 <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	60fb      	str	r3, [r7, #12]
		float AccZ = (dAccZ / Accel_4g_LSB_Divide) - 1;
 8001efe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb0e 	bl	8000524 <__aeabi_i2d>
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <MPU_6050_Init+0x254>)
 8001f0e:	f7fe fc9d 	bl	800084c <__aeabi_ddiv>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <MPU_6050_Init+0x258>)
 8001f20:	f7fe f9b2 	bl	8000288 <__aeabi_dsub>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fe5c 	bl	8000be8 <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	60bb      	str	r3, [r7, #8]
		AccelErrorX += AccX;
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <MPU_6050_Init+0x244>)
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <MPU_6050_Init+0x244>)
 8001f44:	edc3 7a00 	vstr	s15, [r3]
		AccelErrorY += AccY;
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <MPU_6050_Init+0x248>)
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
 8001f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <MPU_6050_Init+0x248>)
 8001f58:	edc3 7a00 	vstr	s15, [r3]
		AccelErrorZ += AccZ;
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <MPU_6050_Init+0x24c>)
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <MPU_6050_Init+0x24c>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
		x++;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3301      	adds	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
	while (x < Number_of_Calibrations)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b63      	cmp	r3, #99	; 0x63
 8001f7a:	f77f af75 	ble.w	8001e68 <MPU_6050_Init+0xd0>
	}

	AccelErrorX = AccelErrorX / Number_of_Calibrations;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MPU_6050_Init+0x244>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001ff4 <MPU_6050_Init+0x25c>
 8001f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <MPU_6050_Init+0x244>)
 8001f8e:	edc3 7a00 	vstr	s15, [r3]
	AccelErrorY = AccelErrorY / Number_of_Calibrations;
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <MPU_6050_Init+0x248>)
 8001f94:	ed93 7a00 	vldr	s14, [r3]
 8001f98:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001ff4 <MPU_6050_Init+0x25c>
 8001f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MPU_6050_Init+0x248>)
 8001fa2:	edc3 7a00 	vstr	s15, [r3]
	AccelErrorZ = AccelErrorZ / Number_of_Calibrations;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <MPU_6050_Init+0x24c>)
 8001fa8:	ed93 7a00 	vldr	s14, [r3]
 8001fac:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001ff4 <MPU_6050_Init+0x25c>
 8001fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <MPU_6050_Init+0x24c>)
 8001fb6:	edc3 7a00 	vstr	s15, [r3]
	return;
 8001fba:	bf00      	nop
}
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000268 	.word	0x20000268
 8001fc8:	0800e460 	.word	0x0800e460
 8001fcc:	200004d0 	.word	0x200004d0
 8001fd0:	0800e480 	.word	0x0800e480
 8001fd4:	0800e49c 	.word	0x0800e49c
 8001fd8:	0800e4bc 	.word	0x0800e4bc
 8001fdc:	20000580 	.word	0x20000580
 8001fe0:	20000584 	.word	0x20000584
 8001fe4:	20000588 	.word	0x20000588
 8001fe8:	2000058c 	.word	0x2000058c
 8001fec:	40c00000 	.word	0x40c00000
 8001ff0:	3ff00000 	.word	0x3ff00000
 8001ff4:	42c80000 	.word	0x42c80000

08001ff8 <Get_Pos>:

void Get_Pos(void)
{
 8001ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ffc:	b08a      	sub	sp, #40	; 0x28
 8001ffe:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MPU_6050_ADDR, ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, Accel_buffer_in, 6, I2C_DELAY);
 8002000:	2364      	movs	r3, #100	; 0x64
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	2306      	movs	r3, #6
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	4ba3      	ldr	r3, [pc, #652]	; (8002298 <Get_Pos+0x2a0>)
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2301      	movs	r3, #1
 800200e:	223b      	movs	r2, #59	; 0x3b
 8002010:	21d0      	movs	r1, #208	; 0xd0
 8002012:	48a2      	ldr	r0, [pc, #648]	; (800229c <Get_Pos+0x2a4>)
 8002014:	f002 fd26 	bl	8004a64 <HAL_I2C_Mem_Read>
	int16_t dAccX = ((int16_t)Accel_buffer_in[0] << 8) | (Accel_buffer_in[1]);
 8002018:	4b9f      	ldr	r3, [pc, #636]	; (8002298 <Get_Pos+0x2a0>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	b21a      	sxth	r2, r3
 8002020:	4b9d      	ldr	r3, [pc, #628]	; (8002298 <Get_Pos+0x2a0>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	82fb      	strh	r3, [r7, #22]
	int16_t dAccY = ((int16_t)Accel_buffer_in[2] << 8) | (Accel_buffer_in[3]);
 800202a:	4b9b      	ldr	r3, [pc, #620]	; (8002298 <Get_Pos+0x2a0>)
 800202c:	789b      	ldrb	r3, [r3, #2]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21a      	sxth	r2, r3
 8002032:	4b99      	ldr	r3, [pc, #612]	; (8002298 <Get_Pos+0x2a0>)
 8002034:	78db      	ldrb	r3, [r3, #3]
 8002036:	b21b      	sxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	82bb      	strh	r3, [r7, #20]
	int16_t dAccZ = ((int16_t)Accel_buffer_in[4] << 8) | (Accel_buffer_in[5]);
 800203c:	4b96      	ldr	r3, [pc, #600]	; (8002298 <Get_Pos+0x2a0>)
 800203e:	791b      	ldrb	r3, [r3, #4]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	b21a      	sxth	r2, r3
 8002044:	4b94      	ldr	r3, [pc, #592]	; (8002298 <Get_Pos+0x2a0>)
 8002046:	795b      	ldrb	r3, [r3, #5]
 8002048:	b21b      	sxth	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	827b      	strh	r3, [r7, #18]

	float AccX = (dAccX / Accel_4g_LSB_Divide) - AccelErrorX;
 800204e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa66 	bl	8000524 <__aeabi_i2d>
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	4b90      	ldr	r3, [pc, #576]	; (80022a0 <Get_Pos+0x2a8>)
 800205e:	f7fe fbf5 	bl	800084c <__aeabi_ddiv>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4614      	mov	r4, r2
 8002068:	461d      	mov	r5, r3
 800206a:	4b8e      	ldr	r3, [pc, #568]	; (80022a4 <Get_Pos+0x2ac>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa6a 	bl	8000548 <__aeabi_f2d>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4620      	mov	r0, r4
 800207a:	4629      	mov	r1, r5
 800207c:	f7fe f904 	bl	8000288 <__aeabi_dsub>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fdae 	bl	8000be8 <__aeabi_d2f>
 800208c:	4603      	mov	r3, r0
 800208e:	60fb      	str	r3, [r7, #12]
	float AccY = (dAccY / Accel_4g_LSB_Divide) - AccelErrorY;
 8002090:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa45 	bl	8000524 <__aeabi_i2d>
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	4b80      	ldr	r3, [pc, #512]	; (80022a0 <Get_Pos+0x2a8>)
 80020a0:	f7fe fbd4 	bl	800084c <__aeabi_ddiv>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4614      	mov	r4, r2
 80020aa:	461d      	mov	r5, r3
 80020ac:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <Get_Pos+0x2b0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa49 	bl	8000548 <__aeabi_f2d>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4620      	mov	r0, r4
 80020bc:	4629      	mov	r1, r5
 80020be:	f7fe f8e3 	bl	8000288 <__aeabi_dsub>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7fe fd8d 	bl	8000be8 <__aeabi_d2f>
 80020ce:	4603      	mov	r3, r0
 80020d0:	60bb      	str	r3, [r7, #8]
	float AccZ = (dAccZ / Accel_4g_LSB_Divide) - AccelErrorZ;
 80020d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa24 	bl	8000524 <__aeabi_i2d>
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4b6f      	ldr	r3, [pc, #444]	; (80022a0 <Get_Pos+0x2a8>)
 80020e2:	f7fe fbb3 	bl	800084c <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4614      	mov	r4, r2
 80020ec:	461d      	mov	r5, r3
 80020ee:	4b6f      	ldr	r3, [pc, #444]	; (80022ac <Get_Pos+0x2b4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa28 	bl	8000548 <__aeabi_f2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe f8c2 	bl	8000288 <__aeabi_dsub>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fd6c 	bl	8000be8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	607b      	str	r3, [r7, #4]

	Positional_Pitch = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / M_PI);
 8002114:	68b8      	ldr	r0, [r7, #8]
 8002116:	f7fe fa17 	bl	8000548 <__aeabi_f2d>
 800211a:	4604      	mov	r4, r0
 800211c:	460d      	mov	r5, r1
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7fe fa12 	bl	8000548 <__aeabi_f2d>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8002288 <Get_Pos+0x290>
 800212c:	ec43 2b10 	vmov	d0, r2, r3
 8002130:	f00b f882 	bl	800d238 <pow>
 8002134:	ec59 8b10 	vmov	r8, r9, d0
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7fe fa05 	bl	8000548 <__aeabi_f2d>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8002288 <Get_Pos+0x290>
 8002146:	ec43 2b10 	vmov	d0, r2, r3
 800214a:	f00b f875 	bl	800d238 <pow>
 800214e:	ec53 2b10 	vmov	r2, r3, d0
 8002152:	4640      	mov	r0, r8
 8002154:	4649      	mov	r1, r9
 8002156:	f7fe f899 	bl	800028c <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	ec43 2b17 	vmov	d7, r2, r3
 8002162:	eeb0 0a47 	vmov.f32	s0, s14
 8002166:	eef0 0a67 	vmov.f32	s1, s15
 800216a:	f00b f8d5 	bl	800d318 <sqrt>
 800216e:	ec53 2b10 	vmov	r2, r3, d0
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f7fe fb69 	bl	800084c <__aeabi_ddiv>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	ec43 2b17 	vmov	d7, r2, r3
 8002182:	eeb0 0a47 	vmov.f32	s0, s14
 8002186:	eef0 0a67 	vmov.f32	s1, s15
 800218a:	f00b f8f1 	bl	800d370 <atan>
 800218e:	ec51 0b10 	vmov	r0, r1, d0
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <Get_Pos+0x2b8>)
 8002198:	f7fe fa2e 	bl	80005f8 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	a33a      	add	r3, pc, #232	; (adr r3, 8002290 <Get_Pos+0x298>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fb4f 	bl	800084c <__aeabi_ddiv>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe fd17 	bl	8000be8 <__aeabi_d2f>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a3d      	ldr	r2, [pc, #244]	; (80022b4 <Get_Pos+0x2bc>)
 80021be:	6013      	str	r3, [r2, #0]
	Positional_Roll = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / M_PI);
 80021c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c4:	eef1 7a67 	vneg.f32	s15, s15
 80021c8:	ee17 3a90 	vmov	r3, s15
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f9bb 	bl	8000548 <__aeabi_f2d>
 80021d2:	4604      	mov	r4, r0
 80021d4:	460d      	mov	r5, r1
 80021d6:	68b8      	ldr	r0, [r7, #8]
 80021d8:	f7fe f9b6 	bl	8000548 <__aeabi_f2d>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8002288 <Get_Pos+0x290>
 80021e4:	ec43 2b10 	vmov	d0, r2, r3
 80021e8:	f00b f826 	bl	800d238 <pow>
 80021ec:	ec59 8b10 	vmov	r8, r9, d0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7fe f9a9 	bl	8000548 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002288 <Get_Pos+0x290>
 80021fe:	ec43 2b10 	vmov	d0, r2, r3
 8002202:	f00b f819 	bl	800d238 <pow>
 8002206:	ec53 2b10 	vmov	r2, r3, d0
 800220a:	4640      	mov	r0, r8
 800220c:	4649      	mov	r1, r9
 800220e:	f7fe f83d 	bl	800028c <__adddf3>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	ec43 2b17 	vmov	d7, r2, r3
 800221a:	eeb0 0a47 	vmov.f32	s0, s14
 800221e:	eef0 0a67 	vmov.f32	s1, s15
 8002222:	f00b f879 	bl	800d318 <sqrt>
 8002226:	ec53 2b10 	vmov	r2, r3, d0
 800222a:	4620      	mov	r0, r4
 800222c:	4629      	mov	r1, r5
 800222e:	f7fe fb0d 	bl	800084c <__aeabi_ddiv>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	ec43 2b17 	vmov	d7, r2, r3
 800223a:	eeb0 0a47 	vmov.f32	s0, s14
 800223e:	eef0 0a67 	vmov.f32	s1, s15
 8002242:	f00b f895 	bl	800d370 <atan>
 8002246:	ec51 0b10 	vmov	r0, r1, d0
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <Get_Pos+0x2b8>)
 8002250:	f7fe f9d2 	bl	80005f8 <__aeabi_dmul>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	a30c      	add	r3, pc, #48	; (adr r3, 8002290 <Get_Pos+0x298>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f7fe faf3 	bl	800084c <__aeabi_ddiv>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f7fe fcbb 	bl	8000be8 <__aeabi_d2f>
 8002272:	4603      	mov	r3, r0
 8002274:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <Get_Pos+0x2c0>)
 8002276:	6013      	str	r3, [r2, #0]

	return;
 8002278:	bf00      	nop
}
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002282:	bf00      	nop
 8002284:	f3af 8000 	nop.w
 8002288:	00000000 	.word	0x00000000
 800228c:	40000000 	.word	0x40000000
 8002290:	54442d18 	.word	0x54442d18
 8002294:	400921fb 	.word	0x400921fb
 8002298:	2000058c 	.word	0x2000058c
 800229c:	20000268 	.word	0x20000268
 80022a0:	40c00000 	.word	0x40c00000
 80022a4:	20000580 	.word	0x20000580
 80022a8:	20000584 	.word	0x20000584
 80022ac:	20000588 	.word	0x20000588
 80022b0:	40668000 	.word	0x40668000
 80022b4:	2000057c 	.word	0x2000057c
 80022b8:	20000578 	.word	0x20000578

080022bc <Motor_Adjust_Roll>:

void Motor_Adjust_Roll(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
	/**************************************************/
	/****************** Remote_Roll_Command Control ******************/
	/**************************************************/

	if(Positional_Roll > 2)
 80022c0:	4b45      	ldr	r3, [pc, #276]	; (80023d8 <Motor_Adjust_Roll+0x11c>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80022ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d2:	dd38      	ble.n	8002346 <Motor_Adjust_Roll+0x8a>
	{
		FL_Motor -= (Positional_Roll / Adujst_Value);
 80022d4:	4b41      	ldr	r3, [pc, #260]	; (80023dc <Motor_Adjust_Roll+0x120>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <Motor_Adjust_Roll+0x11c>)
 80022e2:	edd3 6a00 	vldr	s13, [r3]
 80022e6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80022ea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80022ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f6:	ee17 2a90 	vmov	r2, s15
 80022fa:	4b38      	ldr	r3, [pc, #224]	; (80023dc <Motor_Adjust_Roll+0x120>)
 80022fc:	601a      	str	r2, [r3, #0]
		BL_Motor -= (Positional_Roll / Adujst_Value);
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <Motor_Adjust_Roll+0x124>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <Motor_Adjust_Roll+0x11c>)
 800230c:	edd3 6a00 	vldr	s13, [r3]
 8002310:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002314:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800231c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002320:	ee17 2a90 	vmov	r2, s15
 8002324:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <Motor_Adjust_Roll+0x124>)
 8002326:	601a      	str	r2, [r3, #0]

		if (FL_Motor < Min_Throttle)
 8002328:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <Motor_Adjust_Roll+0x120>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b4f      	cmp	r3, #79	; 0x4f
 800232e:	dc02      	bgt.n	8002336 <Motor_Adjust_Roll+0x7a>
		{
			FL_Motor = Min_Throttle;
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <Motor_Adjust_Roll+0x120>)
 8002332:	2250      	movs	r2, #80	; 0x50
 8002334:	601a      	str	r2, [r3, #0]
		}
		if (BL_Motor < Min_Throttle)
 8002336:	4b2a      	ldr	r3, [pc, #168]	; (80023e0 <Motor_Adjust_Roll+0x124>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b4f      	cmp	r3, #79	; 0x4f
 800233c:	dc46      	bgt.n	80023cc <Motor_Adjust_Roll+0x110>
		{
			BL_Motor = Min_Throttle;
 800233e:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <Motor_Adjust_Roll+0x124>)
 8002340:	2250      	movs	r2, #80	; 0x50
 8002342:	601a      	str	r2, [r3, #0]
			BR_Motor = Min_Throttle;
		}

	}

}
 8002344:	e042      	b.n	80023cc <Motor_Adjust_Roll+0x110>
	else if (Positional_Roll < -2)
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <Motor_Adjust_Roll+0x11c>)
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	d400      	bmi.n	800235c <Motor_Adjust_Roll+0xa0>
}
 800235a:	e037      	b.n	80023cc <Motor_Adjust_Roll+0x110>
		FR_Motor += (Positional_Roll / Adujst_Value);
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <Motor_Adjust_Roll+0x128>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <Motor_Adjust_Roll+0x11c>)
 800236a:	edd3 6a00 	vldr	s13, [r3]
 800236e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002372:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237e:	ee17 2a90 	vmov	r2, s15
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <Motor_Adjust_Roll+0x128>)
 8002384:	601a      	str	r2, [r3, #0]
		BR_Motor += (Positional_Roll / Adujst_Value);
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <Motor_Adjust_Roll+0x12c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <Motor_Adjust_Roll+0x11c>)
 8002394:	edd3 6a00 	vldr	s13, [r3]
 8002398:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800239c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80023a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a8:	ee17 2a90 	vmov	r2, s15
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <Motor_Adjust_Roll+0x12c>)
 80023ae:	601a      	str	r2, [r3, #0]
		if (FR_Motor < Min_Throttle)
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <Motor_Adjust_Roll+0x128>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b4f      	cmp	r3, #79	; 0x4f
 80023b6:	dc02      	bgt.n	80023be <Motor_Adjust_Roll+0x102>
			FR_Motor = Min_Throttle;
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <Motor_Adjust_Roll+0x128>)
 80023ba:	2250      	movs	r2, #80	; 0x50
 80023bc:	601a      	str	r2, [r3, #0]
		if (BR_Motor < Min_Throttle)
 80023be:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <Motor_Adjust_Roll+0x12c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b4f      	cmp	r3, #79	; 0x4f
 80023c4:	dc02      	bgt.n	80023cc <Motor_Adjust_Roll+0x110>
			BR_Motor = Min_Throttle;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <Motor_Adjust_Roll+0x12c>)
 80023c8:	2250      	movs	r2, #80	; 0x50
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000578 	.word	0x20000578
 80023dc:	20000568 	.word	0x20000568
 80023e0:	20000570 	.word	0x20000570
 80023e4:	2000056c 	.word	0x2000056c
 80023e8:	20000574 	.word	0x20000574

080023ec <Motor_Adjust_Pitch>:

void Motor_Adjust_Pitch(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
	/**************************************************/
	/****************** Remote_Pitch_Command Control *****************/
	/**************************************************/

	// Check if the pitch stick is centered
	if(Positional_Pitch > 2)
 80023f0:	4b44      	ldr	r3, [pc, #272]	; (8002504 <Motor_Adjust_Pitch+0x118>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80023fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	dd37      	ble.n	8002474 <Motor_Adjust_Pitch+0x88>
	{
		FL_Motor -= (Positional_Pitch / Adujst_Value);
 8002404:	4b40      	ldr	r3, [pc, #256]	; (8002508 <Motor_Adjust_Pitch+0x11c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <Motor_Adjust_Pitch+0x118>)
 8002412:	edd3 6a00 	vldr	s13, [r3]
 8002416:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800241a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800241e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002426:	ee17 2a90 	vmov	r2, s15
 800242a:	4b37      	ldr	r3, [pc, #220]	; (8002508 <Motor_Adjust_Pitch+0x11c>)
 800242c:	601a      	str	r2, [r3, #0]
		FR_Motor -= (Positional_Pitch / Adujst_Value);
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <Motor_Adjust_Pitch+0x120>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <Motor_Adjust_Pitch+0x118>)
 800243c:	edd3 6a00 	vldr	s13, [r3]
 8002440:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002444:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800244c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002450:	ee17 2a90 	vmov	r2, s15
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <Motor_Adjust_Pitch+0x120>)
 8002456:	601a      	str	r2, [r3, #0]

		// Check if the Front Left Motor is out of the Min throttle ranges
		if (FL_Motor < Min_Throttle)
 8002458:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <Motor_Adjust_Pitch+0x11c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b4f      	cmp	r3, #79	; 0x4f
 800245e:	dc02      	bgt.n	8002466 <Motor_Adjust_Pitch+0x7a>
		{
			FL_Motor = Min_Throttle;
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <Motor_Adjust_Pitch+0x11c>)
 8002462:	2250      	movs	r2, #80	; 0x50
 8002464:	601a      	str	r2, [r3, #0]
		}
		// Check if the Front Right Motor is out of the Min throttle ranges
		if (FR_Motor < Min_Throttle)
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <Motor_Adjust_Pitch+0x120>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b4f      	cmp	r3, #79	; 0x4f
 800246c:	dc02      	bgt.n	8002474 <Motor_Adjust_Pitch+0x88>
		{
			FR_Motor = Min_Throttle;
 800246e:	4b27      	ldr	r3, [pc, #156]	; (800250c <Motor_Adjust_Pitch+0x120>)
 8002470:	2250      	movs	r2, #80	; 0x50
 8002472:	601a      	str	r2, [r3, #0]
		}
	}
	if(Positional_Pitch < -2)
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <Motor_Adjust_Pitch+0x118>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800247e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002486:	d400      	bmi.n	800248a <Motor_Adjust_Pitch+0x9e>
		if (BR_Motor < Min_Throttle)
		{
			BR_Motor = Min_Throttle;
		}
	}
}
 8002488:	e037      	b.n	80024fa <Motor_Adjust_Pitch+0x10e>
		BL_Motor += (Positional_Pitch / Adujst_Value);
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <Motor_Adjust_Pitch+0x124>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <Motor_Adjust_Pitch+0x118>)
 8002498:	edd3 6a00 	vldr	s13, [r3]
 800249c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80024a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ac:	ee17 2a90 	vmov	r2, s15
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <Motor_Adjust_Pitch+0x124>)
 80024b2:	601a      	str	r2, [r3, #0]
		BR_Motor += (Positional_Pitch / Adujst_Value);
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <Motor_Adjust_Pitch+0x128>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <Motor_Adjust_Pitch+0x118>)
 80024c2:	edd3 6a00 	vldr	s13, [r3]
 80024c6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80024ca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d6:	ee17 2a90 	vmov	r2, s15
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <Motor_Adjust_Pitch+0x128>)
 80024dc:	601a      	str	r2, [r3, #0]
		if (BL_Motor < Min_Throttle)
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <Motor_Adjust_Pitch+0x124>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b4f      	cmp	r3, #79	; 0x4f
 80024e4:	dc02      	bgt.n	80024ec <Motor_Adjust_Pitch+0x100>
			BL_Motor = Min_Throttle;
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <Motor_Adjust_Pitch+0x124>)
 80024e8:	2250      	movs	r2, #80	; 0x50
 80024ea:	601a      	str	r2, [r3, #0]
		if (BR_Motor < Min_Throttle)
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <Motor_Adjust_Pitch+0x128>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b4f      	cmp	r3, #79	; 0x4f
 80024f2:	dc02      	bgt.n	80024fa <Motor_Adjust_Pitch+0x10e>
			BR_Motor = Min_Throttle;
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <Motor_Adjust_Pitch+0x128>)
 80024f6:	2250      	movs	r2, #80	; 0x50
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	2000057c 	.word	0x2000057c
 8002508:	20000568 	.word	0x20000568
 800250c:	2000056c 	.word	0x2000056c
 8002510:	20000570 	.word	0x20000570
 8002514:	20000574 	.word	0x20000574

08002518 <Get_Pulses>:

void Get_Pulses(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
	TIM16->CNT = 0;
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <Get_Pulses+0xd0>)
 8002520:	2200      	movs	r2, #0
 8002522:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t time_count = TIM16->CNT;
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <Get_Pulses+0xd0>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	607b      	str	r3, [r7, #4]
	Remote_Throttle_Command = 0;
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <Get_Pulses+0xd4>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
	Remote_Roll_Command = 0;
 8002530:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <Get_Pulses+0xd8>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
	Remote_Pitch_Command = 0;
 8002536:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <Get_Pulses+0xdc>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
	Remote_Yaw_Command = 0;
 800253c:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <Get_Pulses+0xe0>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
	while ((TIM16->CNT - time_count) < 2400)
 8002542:	e044      	b.n	80025ce <Get_Pulses+0xb6>
	{
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8002544:	2101      	movs	r1, #1
 8002546:	482d      	ldr	r0, [pc, #180]	; (80025fc <Get_Pulses+0xe4>)
 8002548:	f002 f894 	bl	8004674 <HAL_GPIO_ReadPin>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <Get_Pulses+0x46>
		{
			Remote_Throttle_Command += 1;
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <Get_Pulses+0xd4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <Get_Pulses+0xd4>)
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e003      	b.n	8002566 <Get_Pulses+0x4e>
		}
		else
		{
			Remote_Throttle_Command = Remote_Throttle_Command;
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <Get_Pulses+0xd4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a22      	ldr	r2, [pc, #136]	; (80025ec <Get_Pulses+0xd4>)
 8002564:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 8002566:	2102      	movs	r1, #2
 8002568:	4825      	ldr	r0, [pc, #148]	; (8002600 <Get_Pulses+0xe8>)
 800256a:	f002 f883 	bl	8004674 <HAL_GPIO_ReadPin>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <Get_Pulses+0x68>
		{
			Remote_Roll_Command += 1;
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <Get_Pulses+0xd8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <Get_Pulses+0xd8>)
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e003      	b.n	8002588 <Get_Pulses+0x70>
		}
		else
		{
			Remote_Roll_Command = Remote_Roll_Command;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <Get_Pulses+0xd8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1a      	ldr	r2, [pc, #104]	; (80025f0 <Get_Pulses+0xd8>)
 8002586:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 8002588:	2101      	movs	r1, #1
 800258a:	481d      	ldr	r0, [pc, #116]	; (8002600 <Get_Pulses+0xe8>)
 800258c:	f002 f872 	bl	8004674 <HAL_GPIO_ReadPin>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <Get_Pulses+0x8a>
		{
			Remote_Pitch_Command += 1;
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <Get_Pulses+0xdc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3301      	adds	r3, #1
 800259c:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <Get_Pulses+0xdc>)
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	e003      	b.n	80025aa <Get_Pulses+0x92>
		}
		else
		{
			Remote_Pitch_Command = Remote_Pitch_Command;
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <Get_Pulses+0xdc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <Get_Pulses+0xdc>)
 80025a8:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 80025aa:	2110      	movs	r1, #16
 80025ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b0:	f002 f860 	bl	8004674 <HAL_GPIO_ReadPin>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <Get_Pulses+0xae>
		{
			Remote_Yaw_Command += 1;
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <Get_Pulses+0xe0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <Get_Pulses+0xe0>)
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	e003      	b.n	80025ce <Get_Pulses+0xb6>
		}
		else
		{
			Remote_Yaw_Command = Remote_Yaw_Command;
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <Get_Pulses+0xe0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <Get_Pulses+0xe0>)
 80025cc:	6013      	str	r3, [r2, #0]
	while ((TIM16->CNT - time_count) < 2400)
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <Get_Pulses+0xd0>)
 80025d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80025da:	d3b3      	bcc.n	8002544 <Get_Pulses+0x2c>
	}
	//char message[100];
	//sprintf(message, "Read Channel\r\n");
	//HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), UART_DELAY);

}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40014400 	.word	0x40014400
 80025ec:	20000558 	.word	0x20000558
 80025f0:	2000055c 	.word	0x2000055c
 80025f4:	20000560 	.word	0x20000560
 80025f8:	20000564 	.word	0x20000564
 80025fc:	48000400 	.word	0x48000400
 8002600:	48000800 	.word	0x48000800

08002604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
}
 800260a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800260c:	e7fe      	b.n	800260c <Error_Handler+0x8>
	...

08002610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_MspInit+0x44>)
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <HAL_MspInit+0x44>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6613      	str	r3, [r2, #96]	; 0x60
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_MspInit+0x44>)
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_MspInit+0x44>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_MspInit+0x44>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6593      	str	r3, [r2, #88]	; 0x58
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_MspInit+0x44>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b0ac      	sub	sp, #176	; 0xb0
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2288      	movs	r2, #136	; 0x88
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f007 f9a2 	bl	80099c2 <memset>
  if(hadc->Instance==ADC1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a27      	ldr	r2, [pc, #156]	; (8002720 <HAL_ADC_MspInit+0xc8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d147      	bne.n	8002718 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002688:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800268c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800268e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002696:	2302      	movs	r3, #2
 8002698:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800269a:	2301      	movs	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800269e:	2308      	movs	r3, #8
 80026a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80026a2:	2307      	movs	r3, #7
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80026aa:	2302      	movs	r3, #2
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80026ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fca1 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80026c4:	f7ff ff9e 	bl	8002604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_ADC_MspInit+0xcc>)
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	4a15      	ldr	r2, [pc, #84]	; (8002724 <HAL_ADC_MspInit+0xcc>)
 80026ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <HAL_ADC_MspInit+0xcc>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	4b10      	ldr	r3, [pc, #64]	; (8002724 <HAL_ADC_MspInit+0xcc>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_ADC_MspInit+0xcc>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ec:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_ADC_MspInit+0xcc>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80026fe:	230b      	movs	r3, #11
 8002700:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800270e:	4619      	mov	r1, r3
 8002710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002714:	f001 fe04 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002718:	bf00      	nop
 800271a:	37b0      	adds	r7, #176	; 0xb0
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	50040000 	.word	0x50040000
 8002724:	40021000 	.word	0x40021000

08002728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0ac      	sub	sp, #176	; 0xb0
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2288      	movs	r2, #136	; 0x88
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f007 f93a 	bl	80099c2 <memset>
  if(hi2c->Instance==I2C1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <HAL_I2C_MspInit+0xc8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d147      	bne.n	80027e8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002758:	2340      	movs	r3, #64	; 0x40
 800275a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800275c:	2300      	movs	r3, #0
 800275e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fc4b 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002770:	f7ff ff48 	bl	8002604 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <HAL_I2C_MspInit+0xcc>)
 8002776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002778:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <HAL_I2C_MspInit+0xcc>)
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002780:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <HAL_I2C_MspInit+0xcc>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800278c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002794:	2312      	movs	r3, #18
 8002796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800279a:	2301      	movs	r3, #1
 800279c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a0:	2303      	movs	r3, #3
 80027a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027a6:	2304      	movs	r3, #4
 80027a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027b0:	4619      	mov	r1, r3
 80027b2:	4811      	ldr	r0, [pc, #68]	; (80027f8 <HAL_I2C_MspInit+0xd0>)
 80027b4:	f001 fdb4 	bl	8004320 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_I2C_MspInit+0xd4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <HAL_I2C_MspInit+0xd4>)
 80027be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027c2:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_I2C_MspInit+0xd4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_I2C_MspInit+0xd4>)
 80027ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027ce:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_I2C_MspInit+0xcc>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <HAL_I2C_MspInit+0xcc>)
 80027d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027da:	6593      	str	r3, [r2, #88]	; 0x58
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_I2C_MspInit+0xcc>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027e8:	bf00      	nop
 80027ea:	37b0      	adds	r7, #176	; 0xb0
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40005400 	.word	0x40005400
 80027f4:	40021000 	.word	0x40021000
 80027f8:	48000400 	.word	0x48000400
 80027fc:	40010000 	.word	0x40010000

08002800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002810:	d10c      	bne.n	800282c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002812:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6593      	str	r3, [r2, #88]	; 0x58
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800282a:	e04e      	b.n	80028ca <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <HAL_TIM_Base_MspInit+0xd8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d114      	bne.n	8002860 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002836:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	6593      	str	r3, [r2, #88]	; 0x58
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	201d      	movs	r0, #29
 8002854:	f001 fd2d 	bl	80042b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002858:	201d      	movs	r0, #29
 800285a:	f001 fd46 	bl	80042ea <HAL_NVIC_EnableIRQ>
}
 800285e:	e034      	b.n	80028ca <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <HAL_TIM_Base_MspInit+0xdc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10c      	bne.n	8002884 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 8002870:	f043 0310 	orr.w	r3, r3, #16
 8002874:	6593      	str	r3, [r2, #88]	; 0x58
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
}
 8002882:	e022      	b.n	80028ca <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <HAL_TIM_Base_MspInit+0xe0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10c      	bne.n	80028a8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 8002894:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002898:	6613      	str	r3, [r2, #96]	; 0x60
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
}
 80028a6:	e010      	b.n	80028ca <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <HAL_TIM_Base_MspInit+0xe4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10b      	bne.n	80028ca <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 80028b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b6:	4a07      	ldr	r2, [pc, #28]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 80028b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028bc:	6613      	str	r3, [r2, #96]	; 0x60
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_TIM_Base_MspInit+0xd4>)
 80028c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
}
 80028ca:	bf00      	nop
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40000400 	.word	0x40000400
 80028dc:	40001000 	.word	0x40001000
 80028e0:	40013400 	.word	0x40013400
 80028e4:	40014400 	.word	0x40014400

080028e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <HAL_TIM_PWM_MspInit+0x5c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10c      	bne.n	8002914 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_TIM_PWM_MspInit+0x60>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	4a12      	ldr	r2, [pc, #72]	; (8002948 <HAL_TIM_PWM_MspInit+0x60>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6593      	str	r3, [r2, #88]	; 0x58
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_TIM_PWM_MspInit+0x60>)
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002912:	e010      	b.n	8002936 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0c      	ldr	r2, [pc, #48]	; (800294c <HAL_TIM_PWM_MspInit+0x64>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10b      	bne.n	8002936 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_TIM_PWM_MspInit+0x60>)
 8002920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002922:	4a09      	ldr	r2, [pc, #36]	; (8002948 <HAL_TIM_PWM_MspInit+0x60>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6613      	str	r3, [r2, #96]	; 0x60
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <HAL_TIM_PWM_MspInit+0x60>)
 800292c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40000800 	.word	0x40000800
 8002948:	40021000 	.word	0x40021000
 800294c:	40014000 	.word	0x40014000

08002950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08c      	sub	sp, #48	; 0x30
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 031c 	add.w	r3, r7, #28
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002970:	d11d      	bne.n	80029ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	4a43      	ldr	r2, [pc, #268]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
 8002988:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = BR_Motor_PWM_Pin;
 800298a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800299c:	2301      	movs	r3, #1
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BR_Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	4619      	mov	r1, r3
 80029a6:	4838      	ldr	r0, [pc, #224]	; (8002a88 <HAL_TIM_MspPostInit+0x138>)
 80029a8:	f001 fcba 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80029ac:	e066      	b.n	8002a7c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a36      	ldr	r2, [pc, #216]	; (8002a8c <HAL_TIM_MspPostInit+0x13c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d11d      	bne.n	80029f4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	4a31      	ldr	r2, [pc, #196]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c4:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = FL_Motor_PWM_Pin;
 80029d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d6:	2302      	movs	r3, #2
 80029d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029e2:	2302      	movs	r3, #2
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FL_Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	4828      	ldr	r0, [pc, #160]	; (8002a90 <HAL_TIM_MspPostInit+0x140>)
 80029ee:	f001 fc97 	bl	8004320 <HAL_GPIO_Init>
}
 80029f2:	e043      	b.n	8002a7c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a26      	ldr	r2, [pc, #152]	; (8002a94 <HAL_TIM_MspPostInit+0x144>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d11c      	bne.n	8002a38 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 8002a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FR_Motor_PWM_Pin;
 8002a16:	2340      	movs	r3, #64	; 0x40
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a26:	2302      	movs	r3, #2
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FR_Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4815      	ldr	r0, [pc, #84]	; (8002a88 <HAL_TIM_MspPostInit+0x138>)
 8002a32:	f001 fc75 	bl	8004320 <HAL_GPIO_Init>
}
 8002a36:	e021      	b.n	8002a7c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM15)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <HAL_TIM_MspPostInit+0x148>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d11c      	bne.n	8002a7c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_TIM_MspPostInit+0x134>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BL_Motor_PWM_Pin;
 8002a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002a6c:	230e      	movs	r3, #14
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BL_Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4619      	mov	r1, r3
 8002a76:	4804      	ldr	r0, [pc, #16]	; (8002a88 <HAL_TIM_MspPostInit+0x138>)
 8002a78:	f001 fc52 	bl	8004320 <HAL_GPIO_Init>
}
 8002a7c:	bf00      	nop
 8002a7e:	3730      	adds	r7, #48	; 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	48000400 	.word	0x48000400
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	48000800 	.word	0x48000800
 8002a94:	40000800 	.word	0x40000800
 8002a98:	40014000 	.word	0x40014000

08002a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b0ac      	sub	sp, #176	; 0xb0
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2288      	movs	r2, #136	; 0x88
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f006 ff80 	bl	80099c2 <memset>
  if(huart->Instance==USART2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <HAL_UART_MspInit+0xb0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d13b      	bne.n	8002b44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002acc:	2302      	movs	r3, #2
 8002ace:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 fa91 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ae4:	f7ff fd8e 	bl	8002604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_UART_MspInit+0xb4>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <HAL_UART_MspInit+0xb4>)
 8002aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af2:	6593      	str	r3, [r2, #88]	; 0x58
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_UART_MspInit+0xb4>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_UART_MspInit+0xb4>)
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_UART_MspInit+0xb4>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_UART_MspInit+0xb4>)
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b18:	230c      	movs	r3, #12
 8002b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b30:	2307      	movs	r3, #7
 8002b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b40:	f001 fbee 	bl	8004320 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b44:	bf00      	nop
 8002b46:	37b0      	adds	r7, #176	; 0xb0
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40004400 	.word	0x40004400
 8002b50:	40021000 	.word	0x40021000

08002b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <NMI_Handler+0x4>

08002b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5e:	e7fe      	b.n	8002b5e <HardFault_Handler+0x4>

08002b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b64:	e7fe      	b.n	8002b64 <MemManage_Handler+0x4>

08002b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b6a:	e7fe      	b.n	8002b6a <BusFault_Handler+0x4>

08002b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b70:	e7fe      	b.n	8002b70 <UsageFault_Handler+0x4>

08002b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba0:	f000 f972 	bl	8002e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Pitch_PWM_IN_Pin);
 8002bac:	2001      	movs	r0, #1
 8002bae:	f001 fd91 	bl	80046d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bbc:	4802      	ldr	r0, [pc, #8]	; (8002bc8 <TIM3_IRQHandler+0x10>)
 8002bbe:	f004 f88f 	bl	8006ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000308 	.word	0x20000308

08002bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return 1;
 8002bd0:	2301      	movs	r3, #1
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <_kill>:

int _kill(int pid, int sig)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002be6:	f006 ff3f 	bl	8009a68 <__errno>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2216      	movs	r2, #22
 8002bee:	601a      	str	r2, [r3, #0]
  return -1;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_exit>:

void _exit (int status)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c04:	f04f 31ff 	mov.w	r1, #4294967295
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff ffe7 	bl	8002bdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c0e:	e7fe      	b.n	8002c0e <_exit+0x12>

08002c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e00a      	b.n	8002c38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c22:	f3af 8000 	nop.w
 8002c26:	4601      	mov	r1, r0
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	60ba      	str	r2, [r7, #8]
 8002c2e:	b2ca      	uxtb	r2, r1
 8002c30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf0      	blt.n	8002c22 <_read+0x12>
  }

  return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e009      	b.n	8002c70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	60ba      	str	r2, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	dbf1      	blt.n	8002c5c <_write+0x12>
  }
  return len;
 8002c78:	687b      	ldr	r3, [r7, #4]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <_close>:

int _close(int file)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002caa:	605a      	str	r2, [r3, #4]
  return 0;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_isatty>:

int _isatty(int file)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <_sbrk+0x5c>)
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <_sbrk+0x60>)
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d102      	bne.n	8002d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <_sbrk+0x64>)
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <_sbrk+0x68>)
 8002d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d207      	bcs.n	8002d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d1c:	f006 fea4 	bl	8009a68 <__errno>
 8002d20:	4603      	mov	r3, r0
 8002d22:	220c      	movs	r2, #12
 8002d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e009      	b.n	8002d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <_sbrk+0x64>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <_sbrk+0x64>)
 8002d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20018000 	.word	0x20018000
 8002d4c:	00000400 	.word	0x00000400
 8002d50:	20000594 	.word	0x20000594
 8002d54:	200006e8 	.word	0x200006e8

08002d58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <SystemInit+0x20>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <SystemInit+0x20>)
 8002d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d80:	f7ff ffea 	bl	8002d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d84:	480c      	ldr	r0, [pc, #48]	; (8002db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d86:	490d      	ldr	r1, [pc, #52]	; (8002dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d88:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <LoopForever+0xe>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d8c:	e002      	b.n	8002d94 <LoopCopyDataInit>

08002d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d92:	3304      	adds	r3, #4

08002d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d98:	d3f9      	bcc.n	8002d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	; (8002dc8 <LoopForever+0x16>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da0:	e001      	b.n	8002da6 <LoopFillZerobss>

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da4:	3204      	adds	r2, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002daa:	f006 fe63 	bl	8009a74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dae:	f7fe f91f 	bl	8000ff0 <main>

08002db2 <LoopForever>:

LoopForever:
    b LoopForever
 8002db2:	e7fe      	b.n	8002db2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002db4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002dc0:	0800e9c8 	.word	0x0800e9c8
  ldr r2, =_sbss
 8002dc4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002dc8:	200006e8 	.word	0x200006e8

08002dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <ADC1_2_IRQHandler>
	...

08002dd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_Init+0x3c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <HAL_Init+0x3c>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de6:	2003      	movs	r0, #3
 8002de8:	f001 fa58 	bl	800429c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dec:	2000      	movs	r0, #0
 8002dee:	f000 f80f 	bl	8002e10 <HAL_InitTick>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	71fb      	strb	r3, [r7, #7]
 8002dfc:	e001      	b.n	8002e02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dfe:	f7ff fc07 	bl	8002610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e02:	79fb      	ldrb	r3, [r7, #7]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40022000 	.word	0x40022000

08002e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_InitTick+0x6c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d023      	beq.n	8002e6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_InitTick+0x70>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <HAL_InitTick+0x6c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fa63 	bl	8004306 <HAL_SYSTICK_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d809      	bhi.n	8002e60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f001 fa2d 	bl	80042b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_InitTick+0x74>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e007      	b.n	8002e70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
 8002e64:	e004      	b.n	8002e70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	e001      	b.n	8002e70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000008 	.word	0x20000008
 8002e80:	20000000 	.word	0x20000000
 8002e84:	20000004 	.word	0x20000004

08002e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_IncTick+0x20>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x24>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4413      	add	r3, r2
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <HAL_IncTick+0x24>)
 8002e9a:	6013      	str	r3, [r2, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	20000598 	.word	0x20000598

08002eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_GetTick+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000598 	.word	0x20000598

08002ec8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3360      	adds	r3, #96	; 0x60
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <LL_ADC_SetOffset+0x44>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	03fff000 	.word	0x03fff000

08002f78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3360      	adds	r3, #96	; 0x60
 8002f86:	461a      	mov	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3360      	adds	r3, #96	; 0x60
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b087      	sub	sp, #28
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3330      	adds	r3, #48	; 0x30
 8002fea:	461a      	mov	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	4413      	add	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	211f      	movs	r1, #31
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	401a      	ands	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	f003 011f 	and.w	r1, r3, #31
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 031f 	and.w	r3, r3, #31
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	431a      	orrs	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003032:	b480      	push	{r7}
 8003034:	b087      	sub	sp, #28
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3314      	adds	r3, #20
 8003042:	461a      	mov	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	0e5b      	lsrs	r3, r3, #25
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	4413      	add	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	0d1b      	lsrs	r3, r3, #20
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2107      	movs	r1, #7
 8003060:	fa01 f303 	lsl.w	r3, r1, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	401a      	ands	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	0d1b      	lsrs	r3, r3, #20
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	431a      	orrs	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800307c:	bf00      	nop
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	43db      	mvns	r3, r3
 80030a2:	401a      	ands	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0318 	and.w	r3, r3, #24
 80030aa:	4908      	ldr	r1, [pc, #32]	; (80030cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80030ac:	40d9      	lsrs	r1, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	400b      	ands	r3, r1
 80030b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b6:	431a      	orrs	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	0007ffff 	.word	0x0007ffff

080030d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 031f 	and.w	r3, r3, #31
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6093      	str	r3, [r2, #8]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003124:	d101      	bne.n	800312a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003148:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800314c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003174:	d101      	bne.n	800317a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <LL_ADC_IsEnabled+0x18>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <LL_ADC_IsEnabled+0x1a>
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031ea:	f043 0204 	orr.w	r2, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d101      	bne.n	8003216 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d101      	bne.n	800323c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b089      	sub	sp, #36	; 0x24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e130      	b.n	80034c8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff f9ef 	bl	8002658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff3f 	bl	8003110 <LL_ADC_IsDeepPowerDownEnabled>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff25 	bl	80030ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff ff5a 	bl	8003160 <LL_ADC_IsInternalRegulatorEnabled>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d115      	bne.n	80032de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff3e 	bl	8003138 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032bc:	4b84      	ldr	r3, [pc, #528]	; (80034d0 <HAL_ADC_Init+0x284>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	4a84      	ldr	r2, [pc, #528]	; (80034d4 <HAL_ADC_Init+0x288>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	099b      	lsrs	r3, r3, #6
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032d0:	e002      	b.n	80032d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f9      	bne.n	80032d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ff3c 	bl	8003160 <LL_ADC_IsInternalRegulatorEnabled>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10d      	bne.n	800330a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f043 0210 	orr.w	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fe:	f043 0201 	orr.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ff75 	bl	80031fe <LL_ADC_REG_IsConversionOngoing>
 8003314:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 80c9 	bne.w	80034b6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 80c5 	bne.w	80034b6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003334:	f043 0202 	orr.w	r2, r3, #2
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff35 	bl	80031b0 <LL_ADC_IsEnabled>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d115      	bne.n	8003378 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800334c:	4862      	ldr	r0, [pc, #392]	; (80034d8 <HAL_ADC_Init+0x28c>)
 800334e:	f7ff ff2f 	bl	80031b0 <LL_ADC_IsEnabled>
 8003352:	4604      	mov	r4, r0
 8003354:	4861      	ldr	r0, [pc, #388]	; (80034dc <HAL_ADC_Init+0x290>)
 8003356:	f7ff ff2b 	bl	80031b0 <LL_ADC_IsEnabled>
 800335a:	4603      	mov	r3, r0
 800335c:	431c      	orrs	r4, r3
 800335e:	4860      	ldr	r0, [pc, #384]	; (80034e0 <HAL_ADC_Init+0x294>)
 8003360:	f7ff ff26 	bl	80031b0 <LL_ADC_IsEnabled>
 8003364:	4603      	mov	r3, r0
 8003366:	4323      	orrs	r3, r4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4619      	mov	r1, r3
 8003372:	485c      	ldr	r0, [pc, #368]	; (80034e4 <HAL_ADC_Init+0x298>)
 8003374:	f7ff fda8 	bl	8002ec8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7e5b      	ldrb	r3, [r3, #25]
 800337c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003382:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003388:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800338e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003396:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d106      	bne.n	80033b4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	3b01      	subs	r3, #1
 80033ac:	045b      	lsls	r3, r3, #17
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	4b44      	ldr	r3, [pc, #272]	; (80034e8 <HAL_ADC_Init+0x29c>)
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	69b9      	ldr	r1, [r7, #24]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff1b 	bl	8003224 <LL_ADC_INJ_IsConversionOngoing>
 80033ee:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d13d      	bne.n	8003472 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d13a      	bne.n	8003472 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003400:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003408:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003418:	f023 0302 	bic.w	r3, r3, #2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	69b9      	ldr	r1, [r7, #24]
 8003422:	430b      	orrs	r3, r1
 8003424:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800342c:	2b01      	cmp	r3, #1
 800342e:	d118      	bne.n	8003462 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800344c:	4311      	orrs	r1, r2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003452:	430a      	orrs	r2, r1
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	611a      	str	r2, [r3, #16]
 8003460:	e007      	b.n	8003472 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0201 	bic.w	r2, r2, #1
 8003470:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10c      	bne.n	8003494 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	f023 010f 	bic.w	r1, r3, #15
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	1e5a      	subs	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
 8003492:	e007      	b.n	80034a4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 020f 	bic.w	r2, r2, #15
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
 80034b4:	e007      	b.n	80034c6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	f043 0210 	orr.w	r2, r3, #16
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3724      	adds	r7, #36	; 0x24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}
 80034d0:	20000000 	.word	0x20000000
 80034d4:	053e2d63 	.word	0x053e2d63
 80034d8:	50040000 	.word	0x50040000
 80034dc:	50040100 	.word	0x50040100
 80034e0:	50040200 	.word	0x50040200
 80034e4:	50040300 	.word	0x50040300
 80034e8:	fff0c007 	.word	0xfff0c007

080034ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034f4:	4857      	ldr	r0, [pc, #348]	; (8003654 <HAL_ADC_Start+0x168>)
 80034f6:	f7ff fdeb 	bl	80030d0 <LL_ADC_GetMultimode>
 80034fa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fe7c 	bl	80031fe <LL_ADC_REG_IsConversionOngoing>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 809c 	bne.w	8003646 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_ADC_Start+0x30>
 8003518:	2302      	movs	r3, #2
 800351a:	e097      	b.n	800364c <HAL_ADC_Start+0x160>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fc8d 	bl	8003e44 <ADC_Enable>
 800352a:	4603      	mov	r3, r0
 800352c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f040 8083 	bne.w	800363c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800353e:	f023 0301 	bic.w	r3, r3, #1
 8003542:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a42      	ldr	r2, [pc, #264]	; (8003658 <HAL_ADC_Start+0x16c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d002      	beq.n	800355a <HAL_ADC_Start+0x6e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	e000      	b.n	800355c <HAL_ADC_Start+0x70>
 800355a:	4b40      	ldr	r3, [pc, #256]	; (800365c <HAL_ADC_Start+0x170>)
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	4293      	cmp	r3, r2
 8003562:	d002      	beq.n	800356a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d106      	bne.n	8003592 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	f023 0206 	bic.w	r2, r3, #6
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	659a      	str	r2, [r3, #88]	; 0x58
 8003590:	e002      	b.n	8003598 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	221c      	movs	r2, #28
 800359e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <HAL_ADC_Start+0x16c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d002      	beq.n	80035b8 <HAL_ADC_Start+0xcc>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	e000      	b.n	80035ba <HAL_ADC_Start+0xce>
 80035b8:	4b28      	ldr	r3, [pc, #160]	; (800365c <HAL_ADC_Start+0x170>)
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	4293      	cmp	r3, r2
 80035c0:	d008      	beq.n	80035d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	d002      	beq.n	80035d4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b09      	cmp	r3, #9
 80035d2:	d114      	bne.n	80035fe <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fded 	bl	80031d6 <LL_ADC_REG_StartConversion>
 80035fc:	e025      	b.n	800364a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <HAL_ADC_Start+0x16c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d002      	beq.n	800361a <HAL_ADC_Start+0x12e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	e000      	b.n	800361c <HAL_ADC_Start+0x130>
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_ADC_Start+0x170>)
 800361c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00f      	beq.n	800364a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003632:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
 800363a:	e006      	b.n	800364a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003644:	e001      	b.n	800364a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003646:	2302      	movs	r3, #2
 8003648:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800364a:	7dfb      	ldrb	r3, [r7, #23]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	50040300 	.word	0x50040300
 8003658:	50040100 	.word	0x50040100
 800365c:	50040000 	.word	0x50040000

08003660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0b6      	sub	sp, #216	; 0xd8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x22>
 800367e:	2302      	movs	r3, #2
 8003680:	e3c9      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x7b6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff fdb5 	bl	80031fe <LL_ADC_REG_IsConversionOngoing>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	f040 83aa 	bne.w	8003df0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d824      	bhi.n	80036f6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	3b02      	subs	r3, #2
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d81b      	bhi.n	80036ee <HAL_ADC_ConfigChannel+0x8e>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_ADC_ConfigChannel+0x5c>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036d5 	.word	0x080036d5
 80036c4:	080036dd 	.word	0x080036dd
 80036c8:	080036e5 	.word	0x080036e5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80036cc:	230c      	movs	r3, #12
 80036ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036d2:	e010      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80036d4:	2312      	movs	r3, #18
 80036d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036da:	e00c      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80036dc:	2318      	movs	r3, #24
 80036de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036e2:	e008      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80036e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036ec:	e003      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80036ee:	2306      	movs	r3, #6
 80036f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80036f4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003704:	f7ff fc69 	bl	8002fda <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fd76 	bl	80031fe <LL_ADC_REG_IsConversionOngoing>
 8003712:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff fd82 	bl	8003224 <LL_ADC_INJ_IsConversionOngoing>
 8003720:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 81a4 	bne.w	8003a76 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800372e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 819f 	bne.w	8003a76 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	461a      	mov	r2, r3
 8003746:	f7ff fc74 	bl	8003032 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	08db      	lsrs	r3, r3, #3
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b04      	cmp	r3, #4
 800376a:	d00a      	beq.n	8003782 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6919      	ldr	r1, [r3, #16]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800377c:	f7ff fbd8 	bl	8002f30 <LL_ADC_SetOffset>
 8003780:	e179      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fbf5 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 800378e:	4603      	mov	r3, r0
 8003790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x14e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fbea 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 80037a4:	4603      	mov	r3, r0
 80037a6:	0e9b      	lsrs	r3, r3, #26
 80037a8:	f003 021f 	and.w	r2, r3, #31
 80037ac:	e01e      	b.n	80037ec <HAL_ADC_ConfigChannel+0x18c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff fbdf 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037c4:	fa93 f3a3 	rbit	r3, r3
 80037c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e004      	b.n	80037ea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80037e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037e4:	fab3 f383 	clz	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x1a4>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	0e9b      	lsrs	r3, r3, #26
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	e018      	b.n	8003836 <HAL_ADC_ConfigChannel+0x1d6>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800381c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003820:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e004      	b.n	8003836 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800382c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003836:	429a      	cmp	r2, r3
 8003838:	d106      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fbae 	bl	8002fa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff fb92 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003854:	4603      	mov	r3, r0
 8003856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x214>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fb87 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 800386a:	4603      	mov	r3, r0
 800386c:	0e9b      	lsrs	r3, r3, #26
 800386e:	f003 021f 	and.w	r2, r3, #31
 8003872:	e01e      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x252>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fb7c 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003880:	4603      	mov	r3, r0
 8003882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003892:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800389a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80038a2:	2320      	movs	r3, #32
 80038a4:	e004      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80038a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x26a>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	0e9b      	lsrs	r3, r3, #26
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	e018      	b.n	80038fc <HAL_ADC_ConfigChannel+0x29c>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80038de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80038e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80038ee:	2320      	movs	r3, #32
 80038f0:	e004      	b.n	80038fc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80038f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d106      	bne.n	800390e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2200      	movs	r2, #0
 8003906:	2101      	movs	r1, #1
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fb4b 	bl	8002fa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2102      	movs	r1, #2
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff fb2f 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 800391a:	4603      	mov	r3, r0
 800391c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <HAL_ADC_ConfigChannel+0x2da>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2102      	movs	r1, #2
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fb24 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003930:	4603      	mov	r3, r0
 8003932:	0e9b      	lsrs	r3, r3, #26
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	e01e      	b.n	8003978 <HAL_ADC_ConfigChannel+0x318>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2102      	movs	r1, #2
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff fb19 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800395c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003968:	2320      	movs	r3, #32
 800396a:	e004      	b.n	8003976 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800396c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003970:	fab3 f383 	clz	r3, r3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x330>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	0e9b      	lsrs	r3, r3, #26
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	e014      	b.n	80039ba <HAL_ADC_ConfigChannel+0x35a>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003998:	fa93 f3a3 	rbit	r3, r3
 800399c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800399e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80039a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80039ac:	2320      	movs	r3, #32
 80039ae:	e004      	b.n	80039ba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80039b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039b4:	fab3 f383 	clz	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d106      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	2102      	movs	r1, #2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff faec 	bl	8002fa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2103      	movs	r1, #3
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff fad0 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 80039d8:	4603      	mov	r3, r0
 80039da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10a      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x398>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2103      	movs	r1, #3
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fac5 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 80039ee:	4603      	mov	r3, r0
 80039f0:	0e9b      	lsrs	r3, r3, #26
 80039f2:	f003 021f 	and.w	r2, r3, #31
 80039f6:	e017      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x3c8>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2103      	movs	r1, #3
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff faba 	bl	8002f78 <LL_ADC_GetOffsetChannel>
 8003a04:	4603      	mov	r3, r0
 8003a06:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a12:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	e003      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x3e0>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	0e9b      	lsrs	r3, r3, #26
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	e011      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x404>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a48:	fa93 f3a3 	rbit	r3, r3
 8003a4c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a50:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003a52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003a58:	2320      	movs	r3, #32
 8003a5a:	e003      	b.n	8003a64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a5e:	fab3 f383 	clz	r3, r3
 8003a62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d106      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2103      	movs	r1, #3
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fa97 	bl	8002fa4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fb98 	bl	80031b0 <LL_ADC_IsEnabled>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 8140 	bne.w	8003d08 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	461a      	mov	r2, r3
 8003a96:	f7ff faf7 	bl	8003088 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	4a8f      	ldr	r2, [pc, #572]	; (8003cdc <HAL_ADC_ConfigChannel+0x67c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	f040 8131 	bne.w	8003d08 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x46e>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	0e9b      	lsrs	r3, r3, #26
 8003abc:	3301      	adds	r3, #1
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2b09      	cmp	r3, #9
 8003ac4:	bf94      	ite	ls
 8003ac6:	2301      	movls	r3, #1
 8003ac8:	2300      	movhi	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e019      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x4a2>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ad6:	fa93 f3a3 	rbit	r3, r3
 8003ada:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003ae6:	2320      	movs	r3, #32
 8003ae8:	e003      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	3301      	adds	r3, #1
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2b09      	cmp	r3, #9
 8003afa:	bf94      	ite	ls
 8003afc:	2301      	movls	r3, #1
 8003afe:	2300      	movhi	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d079      	beq.n	8003bfa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x4c2>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	0e9b      	lsrs	r3, r3, #26
 8003b18:	3301      	adds	r3, #1
 8003b1a:	069b      	lsls	r3, r3, #26
 8003b1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b20:	e015      	b.n	8003b4e <HAL_ADC_ConfigChannel+0x4ee>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2a:	fa93 f3a3 	rbit	r3, r3
 8003b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b32:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	e003      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	3301      	adds	r3, #1
 8003b48:	069b      	lsls	r3, r3, #26
 8003b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x50e>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	0e9b      	lsrs	r3, r3, #26
 8003b60:	3301      	adds	r3, #1
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	e017      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x53e>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b76:	fa93 f3a3 	rbit	r3, r3
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003b86:	2320      	movs	r3, #32
 8003b88:	e003      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	3301      	adds	r3, #1
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2101      	movs	r1, #1
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x564>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	0e9b      	lsrs	r3, r3, #26
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f003 021f 	and.w	r2, r3, #31
 8003bba:	4613      	mov	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4413      	add	r3, r2
 8003bc0:	051b      	lsls	r3, r3, #20
 8003bc2:	e018      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x596>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	e003      	b.n	8003be8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	3301      	adds	r3, #1
 8003bea:	f003 021f 	and.w	r2, r3, #31
 8003bee:	4613      	mov	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	e081      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d107      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x5b6>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	0e9b      	lsrs	r3, r3, #26
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	069b      	lsls	r3, r3, #26
 8003c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c14:	e015      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x5e2>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003c2e:	2320      	movs	r3, #32
 8003c30:	e003      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	fab3 f383 	clz	r3, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	069b      	lsls	r3, r3, #26
 8003c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x602>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	0e9b      	lsrs	r3, r3, #26
 8003c54:	3301      	adds	r3, #1
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	e017      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x632>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	61bb      	str	r3, [r7, #24]
  return result;
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	e003      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	ea42 0103 	orr.w	r1, r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x65e>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	0e9b      	lsrs	r3, r3, #26
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f003 021f 	and.w	r2, r3, #31
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b1e      	subs	r3, #30
 8003cb6:	051b      	lsls	r3, r3, #20
 8003cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	e01e      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x69c>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	60fb      	str	r3, [r7, #12]
  return result;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	e006      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x688>
 8003cda:	bf00      	nop
 8003cdc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f003 021f 	and.w	r2, r3, #31
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3b1e      	subs	r3, #30
 8003cf6:	051b      	lsls	r3, r3, #20
 8003cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cfc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d02:	4619      	mov	r1, r3
 8003d04:	f7ff f995 	bl	8003032 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b44      	ldr	r3, [pc, #272]	; (8003e20 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d07a      	beq.n	8003e0a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d14:	4843      	ldr	r0, [pc, #268]	; (8003e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8003d16:	f7ff f8fd 	bl	8002f14 <LL_ADC_GetCommonPathInternalCh>
 8003d1a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a41      	ldr	r2, [pc, #260]	; (8003e28 <HAL_ADC_ConfigChannel+0x7c8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d12c      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d126      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a3c      	ldr	r2, [pc, #240]	; (8003e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <HAL_ADC_ConfigChannel+0x6e8>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a3b      	ldr	r2, [pc, #236]	; (8003e30 <HAL_ADC_ConfigChannel+0x7d0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d15d      	bne.n	8003e04 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d50:	4619      	mov	r1, r3
 8003d52:	4834      	ldr	r0, [pc, #208]	; (8003e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8003d54:	f7ff f8cb 	bl	8002eee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d58:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_ADC_ConfigChannel+0x7d4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	099b      	lsrs	r3, r3, #6
 8003d5e:	4a36      	ldr	r2, [pc, #216]	; (8003e38 <HAL_ADC_ConfigChannel+0x7d8>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d72:	e002      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f9      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d80:	e040      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2d      	ldr	r2, [pc, #180]	; (8003e3c <HAL_ADC_ConfigChannel+0x7dc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d118      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d112      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d004      	beq.n	8003dac <HAL_ADC_ConfigChannel+0x74c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a22      	ldr	r2, [pc, #136]	; (8003e30 <HAL_ADC_ConfigChannel+0x7d0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d12d      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db4:	4619      	mov	r1, r3
 8003db6:	481b      	ldr	r0, [pc, #108]	; (8003e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8003db8:	f7ff f899 	bl	8002eee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dbc:	e024      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <HAL_ADC_ConfigChannel+0x7e0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d120      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11a      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a14      	ldr	r2, [pc, #80]	; (8003e2c <HAL_ADC_ConfigChannel+0x7cc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d115      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003de6:	4619      	mov	r1, r3
 8003de8:	480e      	ldr	r0, [pc, #56]	; (8003e24 <HAL_ADC_ConfigChannel+0x7c4>)
 8003dea:	f7ff f880 	bl	8002eee <LL_ADC_SetCommonPathInternalCh>
 8003dee:	e00c      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f043 0220 	orr.w	r2, r3, #32
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003e02:	e002      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e12:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	37d8      	adds	r7, #216	; 0xd8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	80080000 	.word	0x80080000
 8003e24:	50040300 	.word	0x50040300
 8003e28:	c7520000 	.word	0xc7520000
 8003e2c:	50040000 	.word	0x50040000
 8003e30:	50040200 	.word	0x50040200
 8003e34:	20000000 	.word	0x20000000
 8003e38:	053e2d63 	.word	0x053e2d63
 8003e3c:	cb840000 	.word	0xcb840000
 8003e40:	80000001 	.word	0x80000001

08003e44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff f9ab 	bl	80031b0 <LL_ADC_IsEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d169      	bne.n	8003f34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <ADC_Enable+0xfc>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	f043 0210 	orr.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e055      	b.n	8003f36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f97a 	bl	8003188 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003e94:	482b      	ldr	r0, [pc, #172]	; (8003f44 <ADC_Enable+0x100>)
 8003e96:	f7ff f83d 	bl	8002f14 <LL_ADC_GetCommonPathInternalCh>
 8003e9a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d013      	beq.n	8003ecc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ea4:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <ADC_Enable+0x104>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	4a28      	ldr	r2, [pc, #160]	; (8003f4c <ADC_Enable+0x108>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ebe:	e002      	b.n	8003ec6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f9      	bne.n	8003ec0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ecc:	f7fe fff0 	bl	8002eb0 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ed2:	e028      	b.n	8003f26 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff f969 	bl	80031b0 <LL_ADC_IsEnabled>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff f94d 	bl	8003188 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003eee:	f7fe ffdf 	bl	8002eb0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d914      	bls.n	8003f26 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d00d      	beq.n	8003f26 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f043 0210 	orr.w	r2, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f043 0201 	orr.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e007      	b.n	8003f36 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d1cf      	bne.n	8003ed4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	8000003f 	.word	0x8000003f
 8003f44:	50040300 	.word	0x50040300
 8003f48:	20000000 	.word	0x20000000
 8003f4c:	053e2d63 	.word	0x053e2d63

08003f50 <LL_ADC_IsEnabled>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <LL_ADC_IsEnabled+0x18>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <LL_ADC_IsEnabled+0x1a>
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d101      	bne.n	8003f8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b09f      	sub	sp, #124	; 0x7c
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e093      	b.n	80040e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a47      	ldr	r2, [pc, #284]	; (80040ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d102      	bne.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fd4:	4b46      	ldr	r3, [pc, #280]	; (80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	e001      	b.n	8003fde <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e072      	b.n	80040e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ffb9 	bl	8003f76 <LL_ADC_REG_IsConversionOngoing>
 8004004:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ffb3 	bl	8003f76 <LL_ADC_REG_IsConversionOngoing>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d154      	bne.n	80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004018:	2b00      	cmp	r3, #0
 800401a:	d151      	bne.n	80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800401c:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800401e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d02c      	beq.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800403a:	035b      	lsls	r3, r3, #13
 800403c:	430b      	orrs	r3, r1
 800403e:	431a      	orrs	r2, r3
 8004040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004042:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004044:	4829      	ldr	r0, [pc, #164]	; (80040ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004046:	f7ff ff83 	bl	8003f50 <LL_ADC_IsEnabled>
 800404a:	4604      	mov	r4, r0
 800404c:	4828      	ldr	r0, [pc, #160]	; (80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800404e:	f7ff ff7f 	bl	8003f50 <LL_ADC_IsEnabled>
 8004052:	4603      	mov	r3, r0
 8004054:	431c      	orrs	r4, r3
 8004056:	4828      	ldr	r0, [pc, #160]	; (80040f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004058:	f7ff ff7a 	bl	8003f50 <LL_ADC_IsEnabled>
 800405c:	4603      	mov	r3, r0
 800405e:	4323      	orrs	r3, r4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d137      	bne.n	80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800406c:	f023 030f 	bic.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	6811      	ldr	r1, [r2, #0]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	430a      	orrs	r2, r1
 800407a:	431a      	orrs	r2, r3
 800407c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004080:	e028      	b.n	80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800408a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800408e:	4817      	ldr	r0, [pc, #92]	; (80040ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004090:	f7ff ff5e 	bl	8003f50 <LL_ADC_IsEnabled>
 8004094:	4604      	mov	r4, r0
 8004096:	4816      	ldr	r0, [pc, #88]	; (80040f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004098:	f7ff ff5a 	bl	8003f50 <LL_ADC_IsEnabled>
 800409c:	4603      	mov	r3, r0
 800409e:	431c      	orrs	r4, r3
 80040a0:	4815      	ldr	r0, [pc, #84]	; (80040f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80040a2:	f7ff ff55 	bl	8003f50 <LL_ADC_IsEnabled>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4323      	orrs	r3, r4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d112      	bne.n	80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040b6:	f023 030f 	bic.w	r3, r3, #15
 80040ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040be:	e009      	b.n	80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80040d2:	e000      	b.n	80040d6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	377c      	adds	r7, #124	; 0x7c
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd90      	pop	{r4, r7, pc}
 80040ea:	bf00      	nop
 80040ec:	50040000 	.word	0x50040000
 80040f0:	50040100 	.word	0x50040100
 80040f4:	50040300 	.word	0x50040300
 80040f8:	50040200 	.word	0x50040200

080040fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <__NVIC_SetPriorityGrouping+0x44>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004118:	4013      	ands	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800412e:	4a04      	ldr	r2, [pc, #16]	; (8004140 <__NVIC_SetPriorityGrouping+0x44>)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	60d3      	str	r3, [r2, #12]
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <__NVIC_GetPriorityGrouping+0x18>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	f003 0307 	and.w	r3, r3, #7
}
 8004152:	4618      	mov	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	e000ed00 	.word	0xe000ed00

08004160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416e:	2b00      	cmp	r3, #0
 8004170:	db0b      	blt.n	800418a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	f003 021f 	and.w	r2, r3, #31
 8004178:	4907      	ldr	r1, [pc, #28]	; (8004198 <__NVIC_EnableIRQ+0x38>)
 800417a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	2001      	movs	r0, #1
 8004182:	fa00 f202 	lsl.w	r2, r0, r2
 8004186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	e000e100 	.word	0xe000e100

0800419c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	6039      	str	r1, [r7, #0]
 80041a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	db0a      	blt.n	80041c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	490c      	ldr	r1, [pc, #48]	; (80041e8 <__NVIC_SetPriority+0x4c>)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	0112      	lsls	r2, r2, #4
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	440b      	add	r3, r1
 80041c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c4:	e00a      	b.n	80041dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4908      	ldr	r1, [pc, #32]	; (80041ec <__NVIC_SetPriority+0x50>)
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	3b04      	subs	r3, #4
 80041d4:	0112      	lsls	r2, r2, #4
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	440b      	add	r3, r1
 80041da:	761a      	strb	r2, [r3, #24]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000e100 	.word	0xe000e100
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b089      	sub	sp, #36	; 0x24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f1c3 0307 	rsb	r3, r3, #7
 800420a:	2b04      	cmp	r3, #4
 800420c:	bf28      	it	cs
 800420e:	2304      	movcs	r3, #4
 8004210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3304      	adds	r3, #4
 8004216:	2b06      	cmp	r3, #6
 8004218:	d902      	bls.n	8004220 <NVIC_EncodePriority+0x30>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3b03      	subs	r3, #3
 800421e:	e000      	b.n	8004222 <NVIC_EncodePriority+0x32>
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	401a      	ands	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004238:	f04f 31ff 	mov.w	r1, #4294967295
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	43d9      	mvns	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004248:	4313      	orrs	r3, r2
         );
}
 800424a:	4618      	mov	r0, r3
 800424c:	3724      	adds	r7, #36	; 0x24
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
	...

08004258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004268:	d301      	bcc.n	800426e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800426a:	2301      	movs	r3, #1
 800426c:	e00f      	b.n	800428e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800426e:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <SysTick_Config+0x40>)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3b01      	subs	r3, #1
 8004274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004276:	210f      	movs	r1, #15
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	f7ff ff8e 	bl	800419c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <SysTick_Config+0x40>)
 8004282:	2200      	movs	r2, #0
 8004284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004286:	4b04      	ldr	r3, [pc, #16]	; (8004298 <SysTick_Config+0x40>)
 8004288:	2207      	movs	r2, #7
 800428a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	e000e010 	.word	0xe000e010

0800429c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ff29 	bl	80040fc <__NVIC_SetPriorityGrouping>
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042c4:	f7ff ff3e 	bl	8004144 <__NVIC_GetPriorityGrouping>
 80042c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	6978      	ldr	r0, [r7, #20]
 80042d0:	f7ff ff8e 	bl	80041f0 <NVIC_EncodePriority>
 80042d4:	4602      	mov	r2, r0
 80042d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff5d 	bl	800419c <__NVIC_SetPriority>
}
 80042e2:	bf00      	nop
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff31 	bl	8004160 <__NVIC_EnableIRQ>
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff ffa2 	bl	8004258 <SysTick_Config>
 8004314:	4603      	mov	r3, r0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800432e:	e17f      	b.n	8004630 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2101      	movs	r1, #1
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fa01 f303 	lsl.w	r3, r1, r3
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 8171 	beq.w	800462a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d005      	beq.n	8004360 <HAL_GPIO_Init+0x40>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f003 0303 	and.w	r3, r3, #3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d130      	bne.n	80043c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	2203      	movs	r2, #3
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4013      	ands	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004396:	2201      	movs	r2, #1
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43db      	mvns	r3, r3
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f003 0201 	and.w	r2, r3, #1
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d118      	bne.n	8004400 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043d4:	2201      	movs	r2, #1
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	08db      	lsrs	r3, r3, #3
 80043ea:	f003 0201 	and.w	r2, r3, #1
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b03      	cmp	r3, #3
 800440a:	d017      	beq.n	800443c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d123      	bne.n	8004490 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	08da      	lsrs	r2, r3, #3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3208      	adds	r2, #8
 8004450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004454:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	220f      	movs	r2, #15
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	43db      	mvns	r3, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4013      	ands	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	08da      	lsrs	r2, r3, #3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3208      	adds	r2, #8
 800448a:	6939      	ldr	r1, [r7, #16]
 800448c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	2203      	movs	r2, #3
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4013      	ands	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0203 	and.w	r2, r3, #3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 80ac 	beq.w	800462a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d2:	4b5f      	ldr	r3, [pc, #380]	; (8004650 <HAL_GPIO_Init+0x330>)
 80044d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d6:	4a5e      	ldr	r2, [pc, #376]	; (8004650 <HAL_GPIO_Init+0x330>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6613      	str	r3, [r2, #96]	; 0x60
 80044de:	4b5c      	ldr	r3, [pc, #368]	; (8004650 <HAL_GPIO_Init+0x330>)
 80044e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044ea:	4a5a      	ldr	r2, [pc, #360]	; (8004654 <HAL_GPIO_Init+0x334>)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	3302      	adds	r3, #2
 80044f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	220f      	movs	r2, #15
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4013      	ands	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004514:	d025      	beq.n	8004562 <HAL_GPIO_Init+0x242>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4f      	ldr	r2, [pc, #316]	; (8004658 <HAL_GPIO_Init+0x338>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01f      	beq.n	800455e <HAL_GPIO_Init+0x23e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a4e      	ldr	r2, [pc, #312]	; (800465c <HAL_GPIO_Init+0x33c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d019      	beq.n	800455a <HAL_GPIO_Init+0x23a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a4d      	ldr	r2, [pc, #308]	; (8004660 <HAL_GPIO_Init+0x340>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <HAL_GPIO_Init+0x236>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4c      	ldr	r2, [pc, #304]	; (8004664 <HAL_GPIO_Init+0x344>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00d      	beq.n	8004552 <HAL_GPIO_Init+0x232>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4b      	ldr	r2, [pc, #300]	; (8004668 <HAL_GPIO_Init+0x348>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d007      	beq.n	800454e <HAL_GPIO_Init+0x22e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4a      	ldr	r2, [pc, #296]	; (800466c <HAL_GPIO_Init+0x34c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <HAL_GPIO_Init+0x22a>
 8004546:	2306      	movs	r3, #6
 8004548:	e00c      	b.n	8004564 <HAL_GPIO_Init+0x244>
 800454a:	2307      	movs	r3, #7
 800454c:	e00a      	b.n	8004564 <HAL_GPIO_Init+0x244>
 800454e:	2305      	movs	r3, #5
 8004550:	e008      	b.n	8004564 <HAL_GPIO_Init+0x244>
 8004552:	2304      	movs	r3, #4
 8004554:	e006      	b.n	8004564 <HAL_GPIO_Init+0x244>
 8004556:	2303      	movs	r3, #3
 8004558:	e004      	b.n	8004564 <HAL_GPIO_Init+0x244>
 800455a:	2302      	movs	r3, #2
 800455c:	e002      	b.n	8004564 <HAL_GPIO_Init+0x244>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <HAL_GPIO_Init+0x244>
 8004562:	2300      	movs	r3, #0
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	f002 0203 	and.w	r2, r2, #3
 800456a:	0092      	lsls	r2, r2, #2
 800456c:	4093      	lsls	r3, r2
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004574:	4937      	ldr	r1, [pc, #220]	; (8004654 <HAL_GPIO_Init+0x334>)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	089b      	lsrs	r3, r3, #2
 800457a:	3302      	adds	r3, #2
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004582:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <HAL_GPIO_Init+0x350>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43db      	mvns	r3, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045a6:	4a32      	ldr	r2, [pc, #200]	; (8004670 <HAL_GPIO_Init+0x350>)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <HAL_GPIO_Init+0x350>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045d0:	4a27      	ldr	r2, [pc, #156]	; (8004670 <HAL_GPIO_Init+0x350>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045d6:	4b26      	ldr	r3, [pc, #152]	; (8004670 <HAL_GPIO_Init+0x350>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	43db      	mvns	r3, r3
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045fa:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <HAL_GPIO_Init+0x350>)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_GPIO_Init+0x350>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	43db      	mvns	r3, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004624:	4a12      	ldr	r2, [pc, #72]	; (8004670 <HAL_GPIO_Init+0x350>)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	3301      	adds	r3, #1
 800462e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	f47f ae78 	bne.w	8004330 <HAL_GPIO_Init+0x10>
  }
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	40010000 	.word	0x40010000
 8004658:	48000400 	.word	0x48000400
 800465c:	48000800 	.word	0x48000800
 8004660:	48000c00 	.word	0x48000c00
 8004664:	48001000 	.word	0x48001000
 8004668:	48001400 	.word	0x48001400
 800466c:	48001800 	.word	0x48001800
 8004670:	40010400 	.word	0x40010400

08004674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	887b      	ldrh	r3, [r7, #2]
 8004686:	4013      	ands	r3, r2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	e001      	b.n	8004696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
 80046b0:	4613      	mov	r3, r2
 80046b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046b4:	787b      	ldrb	r3, [r7, #1]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ba:	887a      	ldrh	r2, [r7, #2]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046c0:	e002      	b.n	80046c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046c2:	887a      	ldrh	r2, [r7, #2]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d006      	beq.n	80046f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046ea:	4a05      	ldr	r2, [pc, #20]	; (8004700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fd fb40 	bl	8001d78 <HAL_GPIO_EXTI_Callback>
  }
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40010400 	.word	0x40010400

08004704 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e08d      	b.n	8004832 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd fffc 	bl	8002728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004754:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004764:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	e006      	b.n	800478c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800478a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d108      	bne.n	80047a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a2:	605a      	str	r2, [r3, #4]
 80047a4:	e007      	b.n	80047b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69d9      	ldr	r1, [r3, #28]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1a      	ldr	r2, [r3, #32]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	4603      	mov	r3, r0
 800484c:	817b      	strh	r3, [r7, #10]
 800484e:	460b      	mov	r3, r1
 8004850:	813b      	strh	r3, [r7, #8]
 8004852:	4613      	mov	r3, r2
 8004854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b20      	cmp	r3, #32
 8004860:	f040 80f9 	bne.w	8004a56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_I2C_Mem_Write+0x34>
 800486a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004876:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0ed      	b.n	8004a58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_I2C_Mem_Write+0x4e>
 8004886:	2302      	movs	r3, #2
 8004888:	e0e6      	b.n	8004a58 <HAL_I2C_Mem_Write+0x21c>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004892:	f7fe fb0d 	bl	8002eb0 <HAL_GetTick>
 8004896:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2319      	movs	r3, #25
 800489e:	2201      	movs	r2, #1
 80048a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 fac3 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0d1      	b.n	8004a58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2221      	movs	r2, #33	; 0x21
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2240      	movs	r2, #64	; 0x40
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a3a      	ldr	r2, [r7, #32]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048dc:	88f8      	ldrh	r0, [r7, #6]
 80048de:	893a      	ldrh	r2, [r7, #8]
 80048e0:	8979      	ldrh	r1, [r7, #10]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	4603      	mov	r3, r0
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f9d3 	bl	8004c98 <I2C_RequestMemoryWrite>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e0a9      	b.n	8004a58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	2bff      	cmp	r3, #255	; 0xff
 800490c:	d90e      	bls.n	800492c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	22ff      	movs	r2, #255	; 0xff
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	b2da      	uxtb	r2, r3
 800491a:	8979      	ldrh	r1, [r7, #10]
 800491c:	2300      	movs	r3, #0
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 fc3d 	bl	80051a4 <I2C_TransferConfig>
 800492a:	e00f      	b.n	800494c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	b2da      	uxtb	r2, r3
 800493c:	8979      	ldrh	r1, [r7, #10]
 800493e:	2300      	movs	r3, #0
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fc2c 	bl	80051a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fabc 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e07b      	b.n	8004a58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d034      	beq.n	8004a04 <HAL_I2C_Mem_Write+0x1c8>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d130      	bne.n	8004a04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	2200      	movs	r2, #0
 80049aa:	2180      	movs	r1, #128	; 0x80
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fa3f 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e04d      	b.n	8004a58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2bff      	cmp	r3, #255	; 0xff
 80049c4:	d90e      	bls.n	80049e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	8979      	ldrh	r1, [r7, #10]
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fbe1 	bl	80051a4 <I2C_TransferConfig>
 80049e2:	e00f      	b.n	8004a04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	8979      	ldrh	r1, [r7, #10]
 80049f6:	2300      	movs	r3, #0
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fbd0 	bl	80051a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d19e      	bne.n	800494c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 faa2 	bl	8004f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e01a      	b.n	8004a58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2220      	movs	r2, #32
 8004a28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <HAL_I2C_Mem_Write+0x224>)
 8004a36:	400b      	ands	r3, r1
 8004a38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	fe00e800 	.word	0xfe00e800

08004a64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	461a      	mov	r2, r3
 8004a72:	4603      	mov	r3, r0
 8004a74:	817b      	strh	r3, [r7, #10]
 8004a76:	460b      	mov	r3, r1
 8004a78:	813b      	strh	r3, [r7, #8]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	f040 80fd 	bne.w	8004c86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_I2C_Mem_Read+0x34>
 8004a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0f1      	b.n	8004c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_I2C_Mem_Read+0x4e>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e0ea      	b.n	8004c88 <HAL_I2C_Mem_Read+0x224>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aba:	f7fe f9f9 	bl	8002eb0 <HAL_GetTick>
 8004abe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	2319      	movs	r3, #25
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f9af 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0d5      	b.n	8004c88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2222      	movs	r2, #34	; 0x22
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a3a      	ldr	r2, [r7, #32]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b04:	88f8      	ldrh	r0, [r7, #6]
 8004b06:	893a      	ldrh	r2, [r7, #8]
 8004b08:	8979      	ldrh	r1, [r7, #10]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4603      	mov	r3, r0
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f913 	bl	8004d40 <I2C_RequestMemoryRead>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0ad      	b.n	8004c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2bff      	cmp	r3, #255	; 0xff
 8004b34:	d90e      	bls.n	8004b54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	22ff      	movs	r2, #255	; 0xff
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	8979      	ldrh	r1, [r7, #10]
 8004b44:	4b52      	ldr	r3, [pc, #328]	; (8004c90 <HAL_I2C_Mem_Read+0x22c>)
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fb29 	bl	80051a4 <I2C_TransferConfig>
 8004b52:	e00f      	b.n	8004b74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	8979      	ldrh	r1, [r7, #10]
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <HAL_I2C_Mem_Read+0x22c>)
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 fb18 	bl	80051a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2104      	movs	r1, #4
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 f956 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07c      	b.n	8004c88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	b2d2      	uxtb	r2, r2
 8004b9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d034      	beq.n	8004c34 <HAL_I2C_Mem_Read+0x1d0>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d130      	bne.n	8004c34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2180      	movs	r1, #128	; 0x80
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f927 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e04d      	b.n	8004c88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2bff      	cmp	r3, #255	; 0xff
 8004bf4:	d90e      	bls.n	8004c14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	22ff      	movs	r2, #255	; 0xff
 8004bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	8979      	ldrh	r1, [r7, #10]
 8004c04:	2300      	movs	r3, #0
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fac9 	bl	80051a4 <I2C_TransferConfig>
 8004c12:	e00f      	b.n	8004c34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	8979      	ldrh	r1, [r7, #10]
 8004c26:	2300      	movs	r3, #0
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fab8 	bl	80051a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d19a      	bne.n	8004b74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f98a 	bl	8004f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e01a      	b.n	8004c88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2220      	movs	r2, #32
 8004c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <HAL_I2C_Mem_Read+0x230>)
 8004c66:	400b      	ands	r3, r1
 8004c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e000      	b.n	8004c88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	80002400 	.word	0x80002400
 8004c94:	fe00e800 	.word	0xfe00e800

08004c98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	817b      	strh	r3, [r7, #10]
 8004caa:	460b      	mov	r3, r1
 8004cac:	813b      	strh	r3, [r7, #8]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	8979      	ldrh	r1, [r7, #10]
 8004cb8:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <I2C_RequestMemoryWrite+0xa4>)
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fa6f 	bl	80051a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc6:	69fa      	ldr	r2, [r7, #28]
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f8ff 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e02c      	b.n	8004d34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d105      	bne.n	8004cec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce0:	893b      	ldrh	r3, [r7, #8]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	629a      	str	r2, [r3, #40]	; 0x28
 8004cea:	e015      	b.n	8004d18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cec:	893b      	ldrh	r3, [r7, #8]
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f8e5 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e012      	b.n	8004d34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d0e:	893b      	ldrh	r3, [r7, #8]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2180      	movs	r1, #128	; 0x80
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f884 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	80002000 	.word	0x80002000

08004d40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	4608      	mov	r0, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	4603      	mov	r3, r0
 8004d50:	817b      	strh	r3, [r7, #10]
 8004d52:	460b      	mov	r3, r1
 8004d54:	813b      	strh	r3, [r7, #8]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	8979      	ldrh	r1, [r7, #10]
 8004d60:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <I2C_RequestMemoryRead+0xa4>)
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa1c 	bl	80051a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	69b9      	ldr	r1, [r7, #24]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f8ac 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e02c      	b.n	8004dda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d86:	893b      	ldrh	r3, [r7, #8]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d90:	e015      	b.n	8004dbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d92:	893b      	ldrh	r3, [r7, #8]
 8004d94:	0a1b      	lsrs	r3, r3, #8
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	69b9      	ldr	r1, [r7, #24]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f892 	bl	8004ece <I2C_WaitOnTXISFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e012      	b.n	8004dda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004db4:	893b      	ldrh	r3, [r7, #8]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2140      	movs	r1, #64	; 0x40
 8004dc8:	68f8      	ldr	r0, [r7, #12]
 8004dca:	f000 f831 	bl	8004e30 <I2C_WaitOnFlagUntilTimeout>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	80002000 	.word	0x80002000

08004de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d103      	bne.n	8004e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d007      	beq.n	8004e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	619a      	str	r2, [r3, #24]
  }
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e40:	e031      	b.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d02d      	beq.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fe f831 	bl	8002eb0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d122      	bne.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	699a      	ldr	r2, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	79fb      	ldrb	r3, [r7, #7]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d113      	bne.n	8004ea6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e00f      	b.n	8004ec6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699a      	ldr	r2, [r3, #24]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	bf0c      	ite	eq
 8004eb6:	2301      	moveq	r3, #1
 8004eb8:	2300      	movne	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d0be      	beq.n	8004e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004eda:	e033      	b.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f87f 	bl	8004fe4 <I2C_IsErrorOccurred>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e031      	b.n	8004f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef6:	d025      	beq.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef8:	f7fd ffda 	bl	8002eb0 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d302      	bcc.n	8004f0e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d11a      	bne.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d013      	beq.n	8004f44 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e007      	b.n	8004f54 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d1c4      	bne.n	8004edc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f68:	e02f      	b.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f838 	bl	8004fe4 <I2C_IsErrorOccurred>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e02d      	b.n	8004fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f7e:	f7fd ff97 	bl	8002eb0 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d302      	bcc.n	8004f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11a      	bne.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d013      	beq.n	8004fca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e007      	b.n	8004fda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d1c8      	bne.n	8004f6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d068      	beq.n	80050e2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2210      	movs	r2, #16
 8005016:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005018:	e049      	b.n	80050ae <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d045      	beq.n	80050ae <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005022:	f7fd ff45 	bl	8002eb0 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	d302      	bcc.n	8005038 <I2C_IsErrorOccurred+0x54>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d13a      	bne.n	80050ae <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005042:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800504a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505a:	d121      	bne.n	80050a0 <I2C_IsErrorOccurred+0xbc>
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005062:	d01d      	beq.n	80050a0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b20      	cmp	r3, #32
 8005068:	d01a      	beq.n	80050a0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005078:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800507a:	f7fd ff19 	bl	8002eb0 <HAL_GetTick>
 800507e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005080:	e00e      	b.n	80050a0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005082:	f7fd ff15 	bl	8002eb0 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b19      	cmp	r3, #25
 800508e:	d907      	bls.n	80050a0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	f043 0320 	orr.w	r3, r3, #32
 8005096:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800509e:	e006      	b.n	80050ae <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d1e9      	bne.n	8005082 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d003      	beq.n	80050c4 <I2C_IsErrorOccurred+0xe0>
 80050bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0aa      	beq.n	800501a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2220      	movs	r2, #32
 80050d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	f043 0304 	orr.w	r3, r3, #4
 80050da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	f043 0308 	orr.w	r3, r3, #8
 800511c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005126:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	f043 0302 	orr.w	r3, r3, #2
 800513e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005148:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005154:	2b00      	cmp	r3, #0
 8005156:	d01c      	beq.n	8005192 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff fe45 	bl	8004de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <I2C_IsErrorOccurred+0x1bc>)
 800516a:	400b      	ands	r3, r1
 800516c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	431a      	orrs	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005196:	4618      	mov	r0, r3
 8005198:	3728      	adds	r7, #40	; 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	fe00e800 	.word	0xfe00e800

080051a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	460b      	mov	r3, r1
 80051b0:	817b      	strh	r3, [r7, #10]
 80051b2:	4613      	mov	r3, r2
 80051b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051b6:	897b      	ldrh	r3, [r7, #10]
 80051b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051bc:	7a7b      	ldrb	r3, [r7, #9]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051c4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051d2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	0d5b      	lsrs	r3, r3, #21
 80051de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <I2C_TransferConfig+0x60>)
 80051e4:	430b      	orrs	r3, r1
 80051e6:	43db      	mvns	r3, r3
 80051e8:	ea02 0103 	and.w	r1, r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	03ff63ff 	.word	0x03ff63ff

08005208 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b20      	cmp	r3, #32
 800521c:	d138      	bne.n	8005290 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005228:	2302      	movs	r3, #2
 800522a:	e032      	b.n	8005292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2224      	movs	r2, #36	; 0x24
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0201 	bic.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800525a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6819      	ldr	r1, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2220      	movs	r2, #32
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
 80052a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d139      	bne.n	8005328 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052be:	2302      	movs	r3, #2
 80052c0:	e033      	b.n	800532a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2224      	movs	r2, #36	; 0x24
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0201 	bic.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
	...

08005338 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800533c:	4b04      	ldr	r3, [pc, #16]	; (8005350 <HAL_PWREx_GetVoltageRange+0x18>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40007000 	.word	0x40007000

08005354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005362:	d130      	bne.n	80053c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005364:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800536c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005370:	d038      	beq.n	80053e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005372:	4b20      	ldr	r3, [pc, #128]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800537a:	4a1e      	ldr	r2, [pc, #120]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800537c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005380:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005382:	4b1d      	ldr	r3, [pc, #116]	; (80053f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2232      	movs	r2, #50	; 0x32
 8005388:	fb02 f303 	mul.w	r3, r2, r3
 800538c:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	0c9b      	lsrs	r3, r3, #18
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005398:	e002      	b.n	80053a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3b01      	subs	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053a0:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ac:	d102      	bne.n	80053b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1f2      	bne.n	800539a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053b4:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c0:	d110      	bne.n	80053e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e00f      	b.n	80053e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80053c6:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d2:	d007      	beq.n	80053e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053dc:	4a05      	ldr	r2, [pc, #20]	; (80053f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40007000 	.word	0x40007000
 80053f8:	20000000 	.word	0x20000000
 80053fc:	431bde83 	.word	0x431bde83

08005400 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e3ca      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005412:	4b97      	ldr	r3, [pc, #604]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800541c:	4b94      	ldr	r3, [pc, #592]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0303 	and.w	r3, r3, #3
 8005424:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80e4 	beq.w	80055fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <HAL_RCC_OscConfig+0x4a>
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b0c      	cmp	r3, #12
 800543e:	f040 808b 	bne.w	8005558 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b01      	cmp	r3, #1
 8005446:	f040 8087 	bne.w	8005558 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800544a:	4b89      	ldr	r3, [pc, #548]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_RCC_OscConfig+0x62>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e3a2      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1a      	ldr	r2, [r3, #32]
 8005466:	4b82      	ldr	r3, [pc, #520]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d004      	beq.n	800547c <HAL_RCC_OscConfig+0x7c>
 8005472:	4b7f      	ldr	r3, [pc, #508]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547a:	e005      	b.n	8005488 <HAL_RCC_OscConfig+0x88>
 800547c:	4b7c      	ldr	r3, [pc, #496]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005488:	4293      	cmp	r3, r2
 800548a:	d223      	bcs.n	80054d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fd55 	bl	8005f40 <RCC_SetFlashLatencyFromMSIRange>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e383      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054a0:	4b73      	ldr	r3, [pc, #460]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a72      	ldr	r2, [pc, #456]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054a6:	f043 0308 	orr.w	r3, r3, #8
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	4b70      	ldr	r3, [pc, #448]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	496d      	ldr	r1, [pc, #436]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054be:	4b6c      	ldr	r3, [pc, #432]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	4968      	ldr	r1, [pc, #416]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	604b      	str	r3, [r1, #4]
 80054d2:	e025      	b.n	8005520 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d4:	4b66      	ldr	r3, [pc, #408]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a65      	ldr	r2, [pc, #404]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054da:	f043 0308 	orr.w	r3, r3, #8
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b63      	ldr	r3, [pc, #396]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	4960      	ldr	r1, [pc, #384]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054f2:	4b5f      	ldr	r3, [pc, #380]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	495b      	ldr	r1, [pc, #364]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005502:	4313      	orrs	r3, r2
 8005504:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fd15 	bl	8005f40 <RCC_SetFlashLatencyFromMSIRange>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e343      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005520:	f000 fc4a 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	4b52      	ldr	r3, [pc, #328]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	091b      	lsrs	r3, r3, #4
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	4950      	ldr	r1, [pc, #320]	; (8005674 <HAL_RCC_OscConfig+0x274>)
 8005532:	5ccb      	ldrb	r3, [r1, r3]
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
 800553c:	4a4e      	ldr	r2, [pc, #312]	; (8005678 <HAL_RCC_OscConfig+0x278>)
 800553e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005540:	4b4e      	ldr	r3, [pc, #312]	; (800567c <HAL_RCC_OscConfig+0x27c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f7fd fc63 	bl	8002e10 <HAL_InitTick>
 800554a:	4603      	mov	r3, r0
 800554c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d052      	beq.n	80055fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	e327      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d032      	beq.n	80055c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005560:	4b43      	ldr	r3, [pc, #268]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a42      	ldr	r2, [pc, #264]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800556c:	f7fd fca0 	bl	8002eb0 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005574:	f7fd fc9c 	bl	8002eb0 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e310      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005586:	4b3a      	ldr	r3, [pc, #232]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005592:	4b37      	ldr	r3, [pc, #220]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a36      	ldr	r2, [pc, #216]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005598:	f043 0308 	orr.w	r3, r3, #8
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b34      	ldr	r3, [pc, #208]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	4931      	ldr	r1, [pc, #196]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055b0:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	492c      	ldr	r1, [pc, #176]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]
 80055c4:	e01a      	b.n	80055fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055c6:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a29      	ldr	r2, [pc, #164]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055d2:	f7fd fc6d 	bl	8002eb0 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055da:	f7fd fc69 	bl	8002eb0 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e2dd      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055ec:	4b20      	ldr	r3, [pc, #128]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f0      	bne.n	80055da <HAL_RCC_OscConfig+0x1da>
 80055f8:	e000      	b.n	80055fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	d074      	beq.n	80056f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b08      	cmp	r3, #8
 800560c:	d005      	beq.n	800561a <HAL_RCC_OscConfig+0x21a>
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	d10e      	bne.n	8005632 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b03      	cmp	r3, #3
 8005618:	d10b      	bne.n	8005632 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d064      	beq.n	80056f0 <HAL_RCC_OscConfig+0x2f0>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d160      	bne.n	80056f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e2ba      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800563a:	d106      	bne.n	800564a <HAL_RCC_OscConfig+0x24a>
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a0b      	ldr	r2, [pc, #44]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	e026      	b.n	8005698 <HAL_RCC_OscConfig+0x298>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005652:	d115      	bne.n	8005680 <HAL_RCC_OscConfig+0x280>
 8005654:	4b06      	ldr	r3, [pc, #24]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a05      	ldr	r2, [pc, #20]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 800565a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	4b03      	ldr	r3, [pc, #12]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a02      	ldr	r2, [pc, #8]	; (8005670 <HAL_RCC_OscConfig+0x270>)
 8005666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e014      	b.n	8005698 <HAL_RCC_OscConfig+0x298>
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000
 8005674:	0800e4d8 	.word	0x0800e4d8
 8005678:	20000000 	.word	0x20000000
 800567c:	20000004 	.word	0x20000004
 8005680:	4ba0      	ldr	r3, [pc, #640]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a9f      	ldr	r2, [pc, #636]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4b9d      	ldr	r3, [pc, #628]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a9c      	ldr	r2, [pc, #624]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d013      	beq.n	80056c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fd fc06 	bl	8002eb0 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a8:	f7fd fc02 	bl	8002eb0 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b64      	cmp	r3, #100	; 0x64
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e276      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ba:	4b92      	ldr	r3, [pc, #584]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x2a8>
 80056c6:	e014      	b.n	80056f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fd fbf2 	bl	8002eb0 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d0:	f7fd fbee 	bl	8002eb0 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e262      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056e2:	4b88      	ldr	r3, [pc, #544]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x2d0>
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d060      	beq.n	80057c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d005      	beq.n	8005710 <HAL_RCC_OscConfig+0x310>
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b0c      	cmp	r3, #12
 8005708:	d119      	bne.n	800573e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d116      	bne.n	800573e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005710:	4b7c      	ldr	r3, [pc, #496]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCC_OscConfig+0x328>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e23f      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005728:	4b76      	ldr	r3, [pc, #472]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	061b      	lsls	r3, r3, #24
 8005736:	4973      	ldr	r1, [pc, #460]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005738:	4313      	orrs	r3, r2
 800573a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800573c:	e040      	b.n	80057c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d023      	beq.n	800578e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005746:	4b6f      	ldr	r3, [pc, #444]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a6e      	ldr	r2, [pc, #440]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 800574c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005752:	f7fd fbad 	bl	8002eb0 <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005758:	e008      	b.n	800576c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800575a:	f7fd fba9 	bl	8002eb0 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e21d      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800576c:	4b65      	ldr	r3, [pc, #404]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f0      	beq.n	800575a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005778:	4b62      	ldr	r3, [pc, #392]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	061b      	lsls	r3, r3, #24
 8005786:	495f      	ldr	r1, [pc, #380]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005788:	4313      	orrs	r3, r2
 800578a:	604b      	str	r3, [r1, #4]
 800578c:	e018      	b.n	80057c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800578e:	4b5d      	ldr	r3, [pc, #372]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a5c      	ldr	r2, [pc, #368]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579a:	f7fd fb89 	bl	8002eb0 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a2:	f7fd fb85 	bl	8002eb0 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e1f9      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057b4:	4b53      	ldr	r3, [pc, #332]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f0      	bne.n	80057a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d03c      	beq.n	8005846 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01c      	beq.n	800580e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057d4:	4b4b      	ldr	r3, [pc, #300]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80057d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057da:	4a4a      	ldr	r2, [pc, #296]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e4:	f7fd fb64 	bl	8002eb0 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ec:	f7fd fb60 	bl	8002eb0 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e1d4      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057fe:	4b41      	ldr	r3, [pc, #260]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ef      	beq.n	80057ec <HAL_RCC_OscConfig+0x3ec>
 800580c:	e01b      	b.n	8005846 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800580e:	4b3d      	ldr	r3, [pc, #244]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005814:	4a3b      	ldr	r2, [pc, #236]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581e:	f7fd fb47 	bl	8002eb0 <HAL_GetTick>
 8005822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005826:	f7fd fb43 	bl	8002eb0 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e1b7      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005838:	4b32      	ldr	r3, [pc, #200]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 800583a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1ef      	bne.n	8005826 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 80a6 	beq.w	80059a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005854:	2300      	movs	r3, #0
 8005856:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005858:	4b2a      	ldr	r3, [pc, #168]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10d      	bne.n	8005880 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005864:	4b27      	ldr	r3, [pc, #156]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	4a26      	ldr	r2, [pc, #152]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586e:	6593      	str	r3, [r2, #88]	; 0x58
 8005870:	4b24      	ldr	r3, [pc, #144]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800587c:	2301      	movs	r3, #1
 800587e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005880:	4b21      	ldr	r3, [pc, #132]	; (8005908 <HAL_RCC_OscConfig+0x508>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d118      	bne.n	80058be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800588c:	4b1e      	ldr	r3, [pc, #120]	; (8005908 <HAL_RCC_OscConfig+0x508>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <HAL_RCC_OscConfig+0x508>)
 8005892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005896:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005898:	f7fd fb0a 	bl	8002eb0 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a0:	f7fd fb06 	bl	8002eb0 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e17a      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058b2:	4b15      	ldr	r3, [pc, #84]	; (8005908 <HAL_RCC_OscConfig+0x508>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0f0      	beq.n	80058a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d108      	bne.n	80058d8 <HAL_RCC_OscConfig+0x4d8>
 80058c6:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80058c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058cc:	4a0d      	ldr	r2, [pc, #52]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80058ce:	f043 0301 	orr.w	r3, r3, #1
 80058d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058d6:	e029      	b.n	800592c <HAL_RCC_OscConfig+0x52c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b05      	cmp	r3, #5
 80058de:	d115      	bne.n	800590c <HAL_RCC_OscConfig+0x50c>
 80058e0:	4b08      	ldr	r3, [pc, #32]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	4a07      	ldr	r2, [pc, #28]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058f0:	4b04      	ldr	r3, [pc, #16]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	4a03      	ldr	r2, [pc, #12]	; (8005904 <HAL_RCC_OscConfig+0x504>)
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005900:	e014      	b.n	800592c <HAL_RCC_OscConfig+0x52c>
 8005902:	bf00      	nop
 8005904:	40021000 	.word	0x40021000
 8005908:	40007000 	.word	0x40007000
 800590c:	4b9c      	ldr	r3, [pc, #624]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005912:	4a9b      	ldr	r2, [pc, #620]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005914:	f023 0301 	bic.w	r3, r3, #1
 8005918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800591c:	4b98      	ldr	r3, [pc, #608]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005922:	4a97      	ldr	r2, [pc, #604]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005924:	f023 0304 	bic.w	r3, r3, #4
 8005928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d016      	beq.n	8005962 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005934:	f7fd fabc 	bl	8002eb0 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800593a:	e00a      	b.n	8005952 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593c:	f7fd fab8 	bl	8002eb0 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f241 3288 	movw	r2, #5000	; 0x1388
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e12a      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005952:	4b8b      	ldr	r3, [pc, #556]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0ed      	beq.n	800593c <HAL_RCC_OscConfig+0x53c>
 8005960:	e015      	b.n	800598e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005962:	f7fd faa5 	bl	8002eb0 <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005968:	e00a      	b.n	8005980 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800596a:	f7fd faa1 	bl	8002eb0 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	f241 3288 	movw	r2, #5000	; 0x1388
 8005978:	4293      	cmp	r3, r2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e113      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005980:	4b7f      	ldr	r3, [pc, #508]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ed      	bne.n	800596a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800598e:	7ffb      	ldrb	r3, [r7, #31]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d105      	bne.n	80059a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005994:	4b7a      	ldr	r3, [pc, #488]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	4a79      	ldr	r2, [pc, #484]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 800599a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800599e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80fe 	beq.w	8005ba6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	f040 80d0 	bne.w	8005b54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059b4:	4b72      	ldr	r3, [pc, #456]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f003 0203 	and.w	r2, r3, #3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d130      	bne.n	8005a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	3b01      	subs	r3, #1
 80059d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d127      	bne.n	8005a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d11f      	bne.n	8005a2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059f4:	2a07      	cmp	r2, #7
 80059f6:	bf14      	ite	ne
 80059f8:	2201      	movne	r2, #1
 80059fa:	2200      	moveq	r2, #0
 80059fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d113      	bne.n	8005a2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d109      	bne.n	8005a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	3b01      	subs	r3, #1
 8005a24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d06e      	beq.n	8005b08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b0c      	cmp	r3, #12
 8005a2e:	d069      	beq.n	8005b04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a30:	4b53      	ldr	r3, [pc, #332]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d105      	bne.n	8005a48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a3c:	4b50      	ldr	r3, [pc, #320]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0ad      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a4c:	4b4c      	ldr	r3, [pc, #304]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a4b      	ldr	r2, [pc, #300]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a58:	f7fd fa2a 	bl	8002eb0 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a60:	f7fd fa26 	bl	8002eb0 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e09a      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a72:	4b43      	ldr	r3, [pc, #268]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a7e:	4b40      	ldr	r3, [pc, #256]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	4b40      	ldr	r3, [pc, #256]	; (8005b84 <HAL_RCC_OscConfig+0x784>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a8e:	3a01      	subs	r2, #1
 8005a90:	0112      	lsls	r2, r2, #4
 8005a92:	4311      	orrs	r1, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a98:	0212      	lsls	r2, r2, #8
 8005a9a:	4311      	orrs	r1, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aa0:	0852      	lsrs	r2, r2, #1
 8005aa2:	3a01      	subs	r2, #1
 8005aa4:	0552      	lsls	r2, r2, #21
 8005aa6:	4311      	orrs	r1, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005aac:	0852      	lsrs	r2, r2, #1
 8005aae:	3a01      	subs	r2, #1
 8005ab0:	0652      	lsls	r2, r2, #25
 8005ab2:	4311      	orrs	r1, r2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ab8:	0912      	lsrs	r2, r2, #4
 8005aba:	0452      	lsls	r2, r2, #17
 8005abc:	430a      	orrs	r2, r1
 8005abe:	4930      	ldr	r1, [pc, #192]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ac4:	4b2e      	ldr	r3, [pc, #184]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a2d      	ldr	r2, [pc, #180]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ace:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ad0:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ada:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005adc:	f7fd f9e8 	bl	8002eb0 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae4:	f7fd f9e4 	bl	8002eb0 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e058      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af6:	4b22      	ldr	r3, [pc, #136]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f0      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b02:	e050      	b.n	8005ba6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e04f      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b08:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d148      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b14:	4b1a      	ldr	r3, [pc, #104]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b20:	4b17      	ldr	r3, [pc, #92]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b2c:	f7fd f9c0 	bl	8002eb0 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b34:	f7fd f9bc 	bl	8002eb0 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e030      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b46:	4b0e      	ldr	r3, [pc, #56]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x734>
 8005b52:	e028      	b.n	8005ba6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	d023      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a08      	ldr	r2, [pc, #32]	; (8005b80 <HAL_RCC_OscConfig+0x780>)
 8005b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b66:	f7fd f9a3 	bl	8002eb0 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b6c:	e00c      	b.n	8005b88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6e:	f7fd f99f 	bl	8002eb0 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d905      	bls.n	8005b88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e013      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
 8005b80:	40021000 	.word	0x40021000
 8005b84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b88:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <HAL_RCC_OscConfig+0x7b0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1ec      	bne.n	8005b6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005b94:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <HAL_RCC_OscConfig+0x7b0>)
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	4905      	ldr	r1, [pc, #20]	; (8005bb0 <HAL_RCC_OscConfig+0x7b0>)
 8005b9a:	4b06      	ldr	r3, [pc, #24]	; (8005bb4 <HAL_RCC_OscConfig+0x7b4>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60cb      	str	r3, [r1, #12]
 8005ba0:	e001      	b.n	8005ba6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	feeefffc 	.word	0xfeeefffc

08005bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0e7      	b.n	8005d9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bcc:	4b75      	ldr	r3, [pc, #468]	; (8005da4 <HAL_RCC_ClockConfig+0x1ec>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d910      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bda:	4b72      	ldr	r3, [pc, #456]	; (8005da4 <HAL_RCC_ClockConfig+0x1ec>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 0207 	bic.w	r2, r3, #7
 8005be2:	4970      	ldr	r1, [pc, #448]	; (8005da4 <HAL_RCC_ClockConfig+0x1ec>)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bea:	4b6e      	ldr	r3, [pc, #440]	; (8005da4 <HAL_RCC_ClockConfig+0x1ec>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0cf      	b.n	8005d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d010      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	4b66      	ldr	r3, [pc, #408]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d908      	bls.n	8005c2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c18:	4b63      	ldr	r3, [pc, #396]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4960      	ldr	r1, [pc, #384]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d04c      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c3e:	4b5a      	ldr	r3, [pc, #360]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d121      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e0a6      	b.n	8005d9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d107      	bne.n	8005c66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c56:	4b54      	ldr	r3, [pc, #336]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d115      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e09a      	b.n	8005d9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d107      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c6e:	4b4e      	ldr	r3, [pc, #312]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e08e      	b.n	8005d9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c7e:	4b4a      	ldr	r3, [pc, #296]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e086      	b.n	8005d9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c8e:	4b46      	ldr	r3, [pc, #280]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 0203 	bic.w	r2, r3, #3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	4943      	ldr	r1, [pc, #268]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fd f906 	bl	8002eb0 <HAL_GetTick>
 8005ca4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca8:	f7fd f902 	bl	8002eb0 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e06e      	b.n	8005d9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbe:	4b3a      	ldr	r3, [pc, #232]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 020c 	and.w	r2, r3, #12
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d1eb      	bne.n	8005ca8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d010      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	4b31      	ldr	r3, [pc, #196]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d208      	bcs.n	8005cfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cec:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	492b      	ldr	r1, [pc, #172]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cfe:	4b29      	ldr	r3, [pc, #164]	; (8005da4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d210      	bcs.n	8005d2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0c:	4b25      	ldr	r3, [pc, #148]	; (8005da4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f023 0207 	bic.w	r2, r3, #7
 8005d14:	4923      	ldr	r1, [pc, #140]	; (8005da4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1c:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <HAL_RCC_ClockConfig+0x1ec>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d001      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e036      	b.n	8005d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d3a:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	4918      	ldr	r1, [pc, #96]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d58:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	4910      	ldr	r1, [pc, #64]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d6c:	f000 f824 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8005d70:	4602      	mov	r2, r0
 8005d72:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <HAL_RCC_ClockConfig+0x1f0>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	091b      	lsrs	r3, r3, #4
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	490b      	ldr	r1, [pc, #44]	; (8005dac <HAL_RCC_ClockConfig+0x1f4>)
 8005d7e:	5ccb      	ldrb	r3, [r1, r3]
 8005d80:	f003 031f 	and.w	r3, r3, #31
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
 8005d88:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <HAL_RCC_ClockConfig+0x1f8>)
 8005d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <HAL_RCC_ClockConfig+0x1fc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fd f83d 	bl	8002e10 <HAL_InitTick>
 8005d96:	4603      	mov	r3, r0
 8005d98:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40022000 	.word	0x40022000
 8005da8:	40021000 	.word	0x40021000
 8005dac:	0800e4d8 	.word	0x0800e4d8
 8005db0:	20000000 	.word	0x20000000
 8005db4:	20000004 	.word	0x20000004

08005db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b089      	sub	sp, #36	; 0x24
 8005dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc6:	4b3e      	ldr	r3, [pc, #248]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dd0:	4b3b      	ldr	r3, [pc, #236]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <HAL_RCC_GetSysClockFreq+0x34>
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	d121      	bne.n	8005e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d11e      	bne.n	8005e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005dec:	4b34      	ldr	r3, [pc, #208]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d107      	bne.n	8005e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005df8:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dfe:	0a1b      	lsrs	r3, r3, #8
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	e005      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e08:	4b2d      	ldr	r3, [pc, #180]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	091b      	lsrs	r3, r3, #4
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e14:	4a2b      	ldr	r2, [pc, #172]	; (8005ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10d      	bne.n	8005e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e28:	e00a      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d102      	bne.n	8005e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e30:	4b25      	ldr	r3, [pc, #148]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	e004      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b08      	cmp	r3, #8
 8005e3a:	d101      	bne.n	8005e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e3c:	4b23      	ldr	r3, [pc, #140]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8005e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b0c      	cmp	r3, #12
 8005e44:	d134      	bne.n	8005eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e46:	4b1e      	ldr	r3, [pc, #120]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d003      	beq.n	8005e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d003      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0xac>
 8005e5c:	e005      	b.n	8005e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e60:	617b      	str	r3, [r7, #20]
      break;
 8005e62:	e005      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e64:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8005e66:	617b      	str	r3, [r7, #20]
      break;
 8005e68:	e002      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	617b      	str	r3, [r7, #20]
      break;
 8005e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e70:	4b13      	ldr	r3, [pc, #76]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e7e:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	0a1b      	lsrs	r3, r3, #8
 8005e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	fb03 f202 	mul.w	r2, r3, r2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	0e5b      	lsrs	r3, r3, #25
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3724      	adds	r7, #36	; 0x24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	0800e4f0 	.word	0x0800e4f0
 8005ec8:	00f42400 	.word	0x00f42400
 8005ecc:	007a1200 	.word	0x007a1200

08005ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ed4:	4b03      	ldr	r3, [pc, #12]	; (8005ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000000 	.word	0x20000000

08005ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005eec:	f7ff fff0 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	0a1b      	lsrs	r3, r3, #8
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	4904      	ldr	r1, [pc, #16]	; (8005f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005efe:	5ccb      	ldrb	r3, [r1, r3]
 8005f00:	f003 031f 	and.w	r3, r3, #31
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	0800e4e8 	.word	0x0800e4e8

08005f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f18:	f7ff ffda 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	0adb      	lsrs	r3, r3, #11
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	4904      	ldr	r1, [pc, #16]	; (8005f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f2a:	5ccb      	ldrb	r3, [r1, r3]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	0800e4e8 	.word	0x0800e4e8

08005f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f48:	2300      	movs	r3, #0
 8005f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f4c:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f58:	f7ff f9ee 	bl	8005338 <HAL_PWREx_GetVoltageRange>
 8005f5c:	6178      	str	r0, [r7, #20]
 8005f5e:	e014      	b.n	8005f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f60:	4b25      	ldr	r3, [pc, #148]	; (8005ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f64:	4a24      	ldr	r2, [pc, #144]	; (8005ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005f6c:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f78:	f7ff f9de 	bl	8005338 <HAL_PWREx_GetVoltageRange>
 8005f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f7e:	4b1e      	ldr	r3, [pc, #120]	; (8005ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f82:	4a1d      	ldr	r2, [pc, #116]	; (8005ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f90:	d10b      	bne.n	8005faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d919      	bls.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2ba0      	cmp	r3, #160	; 0xa0
 8005f9c:	d902      	bls.n	8005fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	e013      	b.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	e010      	b.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b80      	cmp	r3, #128	; 0x80
 8005fae:	d902      	bls.n	8005fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	e00a      	b.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	d102      	bne.n	8005fc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	e004      	b.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b70      	cmp	r3, #112	; 0x70
 8005fc6:	d101      	bne.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fc8:	2301      	movs	r3, #1
 8005fca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f023 0207 	bic.w	r2, r3, #7
 8005fd4:	4909      	ldr	r1, [pc, #36]	; (8005ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fdc:	4b07      	ldr	r3, [pc, #28]	; (8005ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d001      	beq.n	8005fee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	40022000 	.word	0x40022000

08006000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006008:	2300      	movs	r3, #0
 800600a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800600c:	2300      	movs	r3, #0
 800600e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006018:	2b00      	cmp	r3, #0
 800601a:	d041      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006024:	d02a      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800602a:	d824      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800602c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006030:	d008      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006036:	d81e      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800603c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006040:	d010      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006042:	e018      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006044:	4b86      	ldr	r3, [pc, #536]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4a85      	ldr	r2, [pc, #532]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800604a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800604e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006050:	e015      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3304      	adds	r3, #4
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fabb 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006062:	e00c      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3320      	adds	r3, #32
 8006068:	2100      	movs	r1, #0
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fba6 	bl	80067bc <RCCEx_PLLSAI2_Config>
 8006070:	4603      	mov	r3, r0
 8006072:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006074:	e003      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	74fb      	strb	r3, [r7, #19]
      break;
 800607a:	e000      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800607c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800607e:	7cfb      	ldrb	r3, [r7, #19]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006084:	4b76      	ldr	r3, [pc, #472]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006092:	4973      	ldr	r1, [pc, #460]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800609a:	e001      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609c:	7cfb      	ldrb	r3, [r7, #19]
 800609e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d041      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060b4:	d02a      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80060b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80060ba:	d824      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80060bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060c0:	d008      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80060c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060c6:	d81e      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00a      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80060cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060d0:	d010      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060d2:	e018      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060d4:	4b62      	ldr	r3, [pc, #392]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a61      	ldr	r2, [pc, #388]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060e0:	e015      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3304      	adds	r3, #4
 80060e6:	2100      	movs	r1, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 fa73 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060f2:	e00c      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3320      	adds	r3, #32
 80060f8:	2100      	movs	r1, #0
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fb5e 	bl	80067bc <RCCEx_PLLSAI2_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006104:	e003      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	74fb      	strb	r3, [r7, #19]
      break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800610c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800610e:	7cfb      	ldrb	r3, [r7, #19]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10b      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006114:	4b52      	ldr	r3, [pc, #328]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006122:	494f      	ldr	r1, [pc, #316]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006124:	4313      	orrs	r3, r2
 8006126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800612a:	e001      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80a0 	beq.w	800627e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800613e:	2300      	movs	r3, #0
 8006140:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006142:	4b47      	ldr	r3, [pc, #284]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006152:	2300      	movs	r3, #0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00d      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006158:	4b41      	ldr	r3, [pc, #260]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615c:	4a40      	ldr	r2, [pc, #256]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006162:	6593      	str	r3, [r2, #88]	; 0x58
 8006164:	4b3e      	ldr	r3, [pc, #248]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616c:	60bb      	str	r3, [r7, #8]
 800616e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006170:	2301      	movs	r3, #1
 8006172:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006174:	4b3b      	ldr	r3, [pc, #236]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a3a      	ldr	r2, [pc, #232]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800617a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800617e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006180:	f7fc fe96 	bl	8002eb0 <HAL_GetTick>
 8006184:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006186:	e009      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006188:	f7fc fe92 	bl	8002eb0 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d902      	bls.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	74fb      	strb	r3, [r7, #19]
        break;
 800619a:	e005      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800619c:	4b31      	ldr	r3, [pc, #196]	; (8006264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0ef      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80061a8:	7cfb      	ldrb	r3, [r7, #19]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d15c      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061ae:	4b2c      	ldr	r3, [pc, #176]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01f      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d019      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061cc:	4b24      	ldr	r3, [pc, #144]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061d8:	4b21      	ldr	r3, [pc, #132]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	4a20      	ldr	r2, [pc, #128]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061e8:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	4a1c      	ldr	r2, [pc, #112]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061f8:	4a19      	ldr	r2, [pc, #100]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d016      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620a:	f7fc fe51 	bl	8002eb0 <HAL_GetTick>
 800620e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006210:	e00b      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006212:	f7fc fe4d 	bl	8002eb0 <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006220:	4293      	cmp	r3, r2
 8006222:	d902      	bls.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	74fb      	strb	r3, [r7, #19]
            break;
 8006228:	e006      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800622a:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0ec      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006238:	7cfb      	ldrb	r3, [r7, #19]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10c      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800623e:	4b08      	ldr	r3, [pc, #32]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624e:	4904      	ldr	r1, [pc, #16]	; (8006260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006256:	e009      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006258:	7cfb      	ldrb	r3, [r7, #19]
 800625a:	74bb      	strb	r3, [r7, #18]
 800625c:	e006      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800625e:	bf00      	nop
 8006260:	40021000 	.word	0x40021000
 8006264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	7cfb      	ldrb	r3, [r7, #19]
 800626a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800626c:	7c7b      	ldrb	r3, [r7, #17]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d105      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006272:	4b9e      	ldr	r3, [pc, #632]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006276:	4a9d      	ldr	r2, [pc, #628]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800627c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800628a:	4b98      	ldr	r3, [pc, #608]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006290:	f023 0203 	bic.w	r2, r3, #3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006298:	4994      	ldr	r1, [pc, #592]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062ac:	4b8f      	ldr	r3, [pc, #572]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b2:	f023 020c 	bic.w	r2, r3, #12
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ba:	498c      	ldr	r1, [pc, #560]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062ce:	4b87      	ldr	r3, [pc, #540]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	4983      	ldr	r1, [pc, #524]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00a      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80062f0:	4b7e      	ldr	r3, [pc, #504]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fe:	497b      	ldr	r1, [pc, #492]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0310 	and.w	r3, r3, #16
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00a      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006312:	4b76      	ldr	r3, [pc, #472]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006320:	4972      	ldr	r1, [pc, #456]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006334:	4b6d      	ldr	r3, [pc, #436]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006342:	496a      	ldr	r1, [pc, #424]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006344:	4313      	orrs	r3, r2
 8006346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006356:	4b65      	ldr	r3, [pc, #404]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006364:	4961      	ldr	r1, [pc, #388]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006378:	4b5c      	ldr	r3, [pc, #368]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006386:	4959      	ldr	r1, [pc, #356]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800639a:	4b54      	ldr	r3, [pc, #336]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	4950      	ldr	r1, [pc, #320]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063bc:	4b4b      	ldr	r3, [pc, #300]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ca:	4948      	ldr	r1, [pc, #288]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063de:	4b43      	ldr	r3, [pc, #268]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ec:	493f      	ldr	r1, [pc, #252]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d028      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006400:	4b3a      	ldr	r3, [pc, #232]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006406:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640e:	4937      	ldr	r1, [pc, #220]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800641a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800641e:	d106      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006420:	4b32      	ldr	r3, [pc, #200]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	4a31      	ldr	r2, [pc, #196]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800642a:	60d3      	str	r3, [r2, #12]
 800642c:	e011      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006432:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006436:	d10c      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3304      	adds	r3, #4
 800643c:	2101      	movs	r1, #1
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f8c8 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006448:	7cfb      	ldrb	r3, [r7, #19]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800644e:	7cfb      	ldrb	r3, [r7, #19]
 8006450:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d028      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800645e:	4b23      	ldr	r3, [pc, #140]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006464:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646c:	491f      	ldr	r1, [pc, #124]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800647c:	d106      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800647e:	4b1b      	ldr	r3, [pc, #108]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	4a1a      	ldr	r2, [pc, #104]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006488:	60d3      	str	r3, [r2, #12]
 800648a:	e011      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006494:	d10c      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	2101      	movs	r1, #1
 800649c:	4618      	mov	r0, r3
 800649e:	f000 f899 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064a6:	7cfb      	ldrb	r3, [r7, #19]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80064ac:	7cfb      	ldrb	r3, [r7, #19]
 80064ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d02b      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064bc:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ca:	4908      	ldr	r1, [pc, #32]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064da:	d109      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064dc:	4b03      	ldr	r3, [pc, #12]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	4a02      	ldr	r2, [pc, #8]	; (80064ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064e6:	60d3      	str	r3, [r2, #12]
 80064e8:	e014      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80064ea:	bf00      	nop
 80064ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064f8:	d10c      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3304      	adds	r3, #4
 80064fe:	2101      	movs	r1, #1
 8006500:	4618      	mov	r0, r3
 8006502:	f000 f867 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800650a:	7cfb      	ldrb	r3, [r7, #19]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d02f      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006520:	4b2b      	ldr	r3, [pc, #172]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800652e:	4928      	ldr	r1, [pc, #160]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800653a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800653e:	d10d      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3304      	adds	r3, #4
 8006544:	2102      	movs	r1, #2
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f844 	bl	80065d4 <RCCEx_PLLSAI1_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006550:	7cfb      	ldrb	r3, [r7, #19]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d014      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006556:	7cfb      	ldrb	r3, [r7, #19]
 8006558:	74bb      	strb	r3, [r7, #18]
 800655a:	e011      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006564:	d10c      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3320      	adds	r3, #32
 800656a:	2102      	movs	r1, #2
 800656c:	4618      	mov	r0, r3
 800656e:	f000 f925 	bl	80067bc <RCCEx_PLLSAI2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006576:	7cfb      	ldrb	r3, [r7, #19]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800657c:	7cfb      	ldrb	r3, [r7, #19]
 800657e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800658c:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800658e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006592:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800659a:	490d      	ldr	r1, [pc, #52]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800659c:	4313      	orrs	r3, r2
 800659e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065ae:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065be:	4904      	ldr	r1, [pc, #16]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40021000 	.word	0x40021000

080065d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80065e2:	4b75      	ldr	r3, [pc, #468]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d018      	beq.n	8006620 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065ee:	4b72      	ldr	r3, [pc, #456]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f003 0203 	and.w	r2, r3, #3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d10d      	bne.n	800661a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
       ||
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006606:	4b6c      	ldr	r3, [pc, #432]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
       ||
 8006616:	429a      	cmp	r2, r3
 8006618:	d047      	beq.n	80066aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	e044      	b.n	80066aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b03      	cmp	r3, #3
 8006626:	d018      	beq.n	800665a <RCCEx_PLLSAI1_Config+0x86>
 8006628:	2b03      	cmp	r3, #3
 800662a:	d825      	bhi.n	8006678 <RCCEx_PLLSAI1_Config+0xa4>
 800662c:	2b01      	cmp	r3, #1
 800662e:	d002      	beq.n	8006636 <RCCEx_PLLSAI1_Config+0x62>
 8006630:	2b02      	cmp	r3, #2
 8006632:	d009      	beq.n	8006648 <RCCEx_PLLSAI1_Config+0x74>
 8006634:	e020      	b.n	8006678 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006636:	4b60      	ldr	r3, [pc, #384]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d11d      	bne.n	800667e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006646:	e01a      	b.n	800667e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006648:	4b5b      	ldr	r3, [pc, #364]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006650:	2b00      	cmp	r3, #0
 8006652:	d116      	bne.n	8006682 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006658:	e013      	b.n	8006682 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800665a:	4b57      	ldr	r3, [pc, #348]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10f      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006666:	4b54      	ldr	r3, [pc, #336]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d109      	bne.n	8006686 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006676:	e006      	b.n	8006686 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
      break;
 800667c:	e004      	b.n	8006688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800667e:	bf00      	nop
 8006680:	e002      	b.n	8006688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006682:	bf00      	nop
 8006684:	e000      	b.n	8006688 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006686:	bf00      	nop
    }

    if(status == HAL_OK)
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10d      	bne.n	80066aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800668e:	4b4a      	ldr	r3, [pc, #296]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6819      	ldr	r1, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	3b01      	subs	r3, #1
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	430b      	orrs	r3, r1
 80066a4:	4944      	ldr	r1, [pc, #272]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d17d      	bne.n	80067ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066b0:	4b41      	ldr	r3, [pc, #260]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a40      	ldr	r2, [pc, #256]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066bc:	f7fc fbf8 	bl	8002eb0 <HAL_GetTick>
 80066c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066c2:	e009      	b.n	80066d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066c4:	f7fc fbf4 	bl	8002eb0 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d902      	bls.n	80066d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	73fb      	strb	r3, [r7, #15]
        break;
 80066d6:	e005      	b.n	80066e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066d8:	4b37      	ldr	r3, [pc, #220]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1ef      	bne.n	80066c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d160      	bne.n	80067ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d111      	bne.n	8006714 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066f0:	4b31      	ldr	r3, [pc, #196]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80066f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	6892      	ldr	r2, [r2, #8]
 8006700:	0211      	lsls	r1, r2, #8
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	68d2      	ldr	r2, [r2, #12]
 8006706:	0912      	lsrs	r2, r2, #4
 8006708:	0452      	lsls	r2, r2, #17
 800670a:	430a      	orrs	r2, r1
 800670c:	492a      	ldr	r1, [pc, #168]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800670e:	4313      	orrs	r3, r2
 8006710:	610b      	str	r3, [r1, #16]
 8006712:	e027      	b.n	8006764 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d112      	bne.n	8006740 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800671a:	4b27      	ldr	r3, [pc, #156]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006722:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6892      	ldr	r2, [r2, #8]
 800672a:	0211      	lsls	r1, r2, #8
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6912      	ldr	r2, [r2, #16]
 8006730:	0852      	lsrs	r2, r2, #1
 8006732:	3a01      	subs	r2, #1
 8006734:	0552      	lsls	r2, r2, #21
 8006736:	430a      	orrs	r2, r1
 8006738:	491f      	ldr	r1, [pc, #124]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800673a:	4313      	orrs	r3, r2
 800673c:	610b      	str	r3, [r1, #16]
 800673e:	e011      	b.n	8006764 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006740:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006748:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6892      	ldr	r2, [r2, #8]
 8006750:	0211      	lsls	r1, r2, #8
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6952      	ldr	r2, [r2, #20]
 8006756:	0852      	lsrs	r2, r2, #1
 8006758:	3a01      	subs	r2, #1
 800675a:	0652      	lsls	r2, r2, #25
 800675c:	430a      	orrs	r2, r1
 800675e:	4916      	ldr	r1, [pc, #88]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006760:	4313      	orrs	r3, r2
 8006762:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006764:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a13      	ldr	r2, [pc, #76]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800676a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800676e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006770:	f7fc fb9e 	bl	8002eb0 <HAL_GetTick>
 8006774:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006776:	e009      	b.n	800678c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006778:	f7fc fb9a 	bl	8002eb0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d902      	bls.n	800678c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	73fb      	strb	r3, [r7, #15]
          break;
 800678a:	e005      	b.n	8006798 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800678c:	4b0a      	ldr	r3, [pc, #40]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0ef      	beq.n	8006778 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	4904      	ldr	r1, [pc, #16]	; (80067b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40021000 	.word	0x40021000

080067bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067ca:	4b6a      	ldr	r3, [pc, #424]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d018      	beq.n	8006808 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80067d6:	4b67      	ldr	r3, [pc, #412]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f003 0203 	and.w	r2, r3, #3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d10d      	bne.n	8006802 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
       ||
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d009      	beq.n	8006802 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80067ee:	4b61      	ldr	r3, [pc, #388]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	091b      	lsrs	r3, r3, #4
 80067f4:	f003 0307 	and.w	r3, r3, #7
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
       ||
 80067fe:	429a      	cmp	r2, r3
 8006800:	d047      	beq.n	8006892 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	73fb      	strb	r3, [r7, #15]
 8006806:	e044      	b.n	8006892 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b03      	cmp	r3, #3
 800680e:	d018      	beq.n	8006842 <RCCEx_PLLSAI2_Config+0x86>
 8006810:	2b03      	cmp	r3, #3
 8006812:	d825      	bhi.n	8006860 <RCCEx_PLLSAI2_Config+0xa4>
 8006814:	2b01      	cmp	r3, #1
 8006816:	d002      	beq.n	800681e <RCCEx_PLLSAI2_Config+0x62>
 8006818:	2b02      	cmp	r3, #2
 800681a:	d009      	beq.n	8006830 <RCCEx_PLLSAI2_Config+0x74>
 800681c:	e020      	b.n	8006860 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800681e:	4b55      	ldr	r3, [pc, #340]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d11d      	bne.n	8006866 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800682e:	e01a      	b.n	8006866 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006830:	4b50      	ldr	r3, [pc, #320]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006838:	2b00      	cmp	r3, #0
 800683a:	d116      	bne.n	800686a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006840:	e013      	b.n	800686a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006842:	4b4c      	ldr	r3, [pc, #304]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10f      	bne.n	800686e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800684e:	4b49      	ldr	r3, [pc, #292]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800685e:	e006      	b.n	800686e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
      break;
 8006864:	e004      	b.n	8006870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006866:	bf00      	nop
 8006868:	e002      	b.n	8006870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800686a:	bf00      	nop
 800686c:	e000      	b.n	8006870 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800686e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10d      	bne.n	8006892 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006876:	4b3f      	ldr	r3, [pc, #252]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6819      	ldr	r1, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	3b01      	subs	r3, #1
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	430b      	orrs	r3, r1
 800688c:	4939      	ldr	r1, [pc, #228]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800688e:	4313      	orrs	r3, r2
 8006890:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d167      	bne.n	8006968 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006898:	4b36      	ldr	r3, [pc, #216]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a35      	ldr	r2, [pc, #212]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800689e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a4:	f7fc fb04 	bl	8002eb0 <HAL_GetTick>
 80068a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068aa:	e009      	b.n	80068c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068ac:	f7fc fb00 	bl	8002eb0 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d902      	bls.n	80068c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	73fb      	strb	r3, [r7, #15]
        break;
 80068be:	e005      	b.n	80068cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068c0:	4b2c      	ldr	r3, [pc, #176]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1ef      	bne.n	80068ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d14a      	bne.n	8006968 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d111      	bne.n	80068fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068d8:	4b26      	ldr	r3, [pc, #152]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80068e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6892      	ldr	r2, [r2, #8]
 80068e8:	0211      	lsls	r1, r2, #8
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	68d2      	ldr	r2, [r2, #12]
 80068ee:	0912      	lsrs	r2, r2, #4
 80068f0:	0452      	lsls	r2, r2, #17
 80068f2:	430a      	orrs	r2, r1
 80068f4:	491f      	ldr	r1, [pc, #124]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	614b      	str	r3, [r1, #20]
 80068fa:	e011      	b.n	8006920 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068fc:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006904:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6892      	ldr	r2, [r2, #8]
 800690c:	0211      	lsls	r1, r2, #8
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6912      	ldr	r2, [r2, #16]
 8006912:	0852      	lsrs	r2, r2, #1
 8006914:	3a01      	subs	r2, #1
 8006916:	0652      	lsls	r2, r2, #25
 8006918:	430a      	orrs	r2, r1
 800691a:	4916      	ldr	r1, [pc, #88]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800691c:	4313      	orrs	r3, r2
 800691e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006920:	4b14      	ldr	r3, [pc, #80]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692c:	f7fc fac0 	bl	8002eb0 <HAL_GetTick>
 8006930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006932:	e009      	b.n	8006948 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006934:	f7fc fabc 	bl	8002eb0 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d902      	bls.n	8006948 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	73fb      	strb	r3, [r7, #15]
          break;
 8006946:	e005      	b.n	8006954 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d0ef      	beq.n	8006934 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800695a:	4b06      	ldr	r3, [pc, #24]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	4904      	ldr	r1, [pc, #16]	; (8006974 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006964:	4313      	orrs	r3, r2
 8006966:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40021000 	.word	0x40021000

08006978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e049      	b.n	8006a1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fb ff2e 	bl	8002800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f000 fcdc 	bl	8007374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e049      	b.n	8006acc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fb ff4b 	bl	80028e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f000 fc85 	bl	8007374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d109      	bne.n	8006af8 <HAL_TIM_PWM_Start+0x24>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	bf14      	ite	ne
 8006af0:	2301      	movne	r3, #1
 8006af2:	2300      	moveq	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	e03c      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d109      	bne.n	8006b12 <HAL_TIM_PWM_Start+0x3e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	bf14      	ite	ne
 8006b0a:	2301      	movne	r3, #1
 8006b0c:	2300      	moveq	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	e02f      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b08      	cmp	r3, #8
 8006b16:	d109      	bne.n	8006b2c <HAL_TIM_PWM_Start+0x58>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	bf14      	ite	ne
 8006b24:	2301      	movne	r3, #1
 8006b26:	2300      	moveq	r3, #0
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	e022      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b0c      	cmp	r3, #12
 8006b30:	d109      	bne.n	8006b46 <HAL_TIM_PWM_Start+0x72>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	bf14      	ite	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	2300      	moveq	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	e015      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b10      	cmp	r3, #16
 8006b4a:	d109      	bne.n	8006b60 <HAL_TIM_PWM_Start+0x8c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	bf14      	ite	ne
 8006b58:	2301      	movne	r3, #1
 8006b5a:	2300      	moveq	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	e008      	b.n	8006b72 <HAL_TIM_PWM_Start+0x9e>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	bf14      	ite	ne
 8006b6c:	2301      	movne	r3, #1
 8006b6e:	2300      	moveq	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e09c      	b.n	8006cb4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <HAL_TIM_PWM_Start+0xb6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b88:	e023      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d104      	bne.n	8006b9a <HAL_TIM_PWM_Start+0xc6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b98:	e01b      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d104      	bne.n	8006baa <HAL_TIM_PWM_Start+0xd6>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba8:	e013      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b0c      	cmp	r3, #12
 8006bae:	d104      	bne.n	8006bba <HAL_TIM_PWM_Start+0xe6>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bb8:	e00b      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d104      	bne.n	8006bca <HAL_TIM_PWM_Start+0xf6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc8:	e003      	b.n	8006bd2 <HAL_TIM_PWM_Start+0xfe>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f001 f867 	bl	8007cae <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a35      	ldr	r2, [pc, #212]	; (8006cbc <HAL_TIM_PWM_Start+0x1e8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d013      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x13e>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a34      	ldr	r2, [pc, #208]	; (8006cc0 <HAL_TIM_PWM_Start+0x1ec>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00e      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x13e>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a32      	ldr	r2, [pc, #200]	; (8006cc4 <HAL_TIM_PWM_Start+0x1f0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x13e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a31      	ldr	r2, [pc, #196]	; (8006cc8 <HAL_TIM_PWM_Start+0x1f4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d004      	beq.n	8006c12 <HAL_TIM_PWM_Start+0x13e>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a2f      	ldr	r2, [pc, #188]	; (8006ccc <HAL_TIM_PWM_Start+0x1f8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_PWM_Start+0x142>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <HAL_TIM_PWM_Start+0x144>
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d007      	beq.n	8006c2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a22      	ldr	r2, [pc, #136]	; (8006cbc <HAL_TIM_PWM_Start+0x1e8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01d      	beq.n	8006c72 <HAL_TIM_PWM_Start+0x19e>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3e:	d018      	beq.n	8006c72 <HAL_TIM_PWM_Start+0x19e>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a22      	ldr	r2, [pc, #136]	; (8006cd0 <HAL_TIM_PWM_Start+0x1fc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <HAL_TIM_PWM_Start+0x19e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a21      	ldr	r2, [pc, #132]	; (8006cd4 <HAL_TIM_PWM_Start+0x200>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00e      	beq.n	8006c72 <HAL_TIM_PWM_Start+0x19e>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1f      	ldr	r2, [pc, #124]	; (8006cd8 <HAL_TIM_PWM_Start+0x204>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_TIM_PWM_Start+0x19e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a17      	ldr	r2, [pc, #92]	; (8006cc0 <HAL_TIM_PWM_Start+0x1ec>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_TIM_PWM_Start+0x19e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a15      	ldr	r2, [pc, #84]	; (8006cc4 <HAL_TIM_PWM_Start+0x1f0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d115      	bne.n	8006c9e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	4b18      	ldr	r3, [pc, #96]	; (8006cdc <HAL_TIM_PWM_Start+0x208>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b06      	cmp	r3, #6
 8006c82:	d015      	beq.n	8006cb0 <HAL_TIM_PWM_Start+0x1dc>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8a:	d011      	beq.n	8006cb0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c9c:	e008      	b.n	8006cb0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f042 0201 	orr.w	r2, r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e000      	b.n	8006cb2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40013400 	.word	0x40013400
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	40014400 	.word	0x40014400
 8006ccc:	40014800 	.word	0x40014800
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	40000c00 	.word	0x40000c00
 8006cdc:	00010007 	.word	0x00010007

08006ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d020      	beq.n	8006d44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d01b      	beq.n	8006d44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f06f 0202 	mvn.w	r2, #2
 8006d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f003 0303 	and.w	r3, r3, #3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fb03 	bl	8007336 <HAL_TIM_IC_CaptureCallback>
 8006d30:	e005      	b.n	8006d3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 faf5 	bl	8007322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fb06 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d020      	beq.n	8006d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d01b      	beq.n	8006d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0204 	mvn.w	r2, #4
 8006d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fadd 	bl	8007336 <HAL_TIM_IC_CaptureCallback>
 8006d7c:	e005      	b.n	8006d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 facf 	bl	8007322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fae0 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d020      	beq.n	8006ddc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01b      	beq.n	8006ddc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0208 	mvn.w	r2, #8
 8006dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2204      	movs	r2, #4
 8006db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fab7 	bl	8007336 <HAL_TIM_IC_CaptureCallback>
 8006dc8:	e005      	b.n	8006dd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 faa9 	bl	8007322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 faba 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f003 0310 	and.w	r3, r3, #16
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d020      	beq.n	8006e28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01b      	beq.n	8006e28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0210 	mvn.w	r2, #16
 8006df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fa91 	bl	8007336 <HAL_TIM_IC_CaptureCallback>
 8006e14:	e005      	b.n	8006e22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fa83 	bl	8007322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fa94 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f003 0301 	and.w	r3, r3, #1
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f06f 0201 	mvn.w	r2, #1
 8006e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fa ff8c 	bl	8001d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00c      	beq.n	8006e70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d007      	beq.n	8006e70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 f854 	bl	8007f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00c      	beq.n	8006e94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d007      	beq.n	8006e94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 f84c 	bl	8007f2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00c      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d007      	beq.n	8006eb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa53 	bl	800735e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00c      	beq.n	8006edc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d007      	beq.n	8006edc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0220 	mvn.w	r2, #32
 8006ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 f814 	bl	8007f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006edc:	bf00      	nop
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006efe:	2302      	movs	r3, #2
 8006f00:	e0ff      	b.n	8007102 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b14      	cmp	r3, #20
 8006f0e:	f200 80f0 	bhi.w	80070f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f6d 	.word	0x08006f6d
 8006f1c:	080070f3 	.word	0x080070f3
 8006f20:	080070f3 	.word	0x080070f3
 8006f24:	080070f3 	.word	0x080070f3
 8006f28:	08006fad 	.word	0x08006fad
 8006f2c:	080070f3 	.word	0x080070f3
 8006f30:	080070f3 	.word	0x080070f3
 8006f34:	080070f3 	.word	0x080070f3
 8006f38:	08006fef 	.word	0x08006fef
 8006f3c:	080070f3 	.word	0x080070f3
 8006f40:	080070f3 	.word	0x080070f3
 8006f44:	080070f3 	.word	0x080070f3
 8006f48:	0800702f 	.word	0x0800702f
 8006f4c:	080070f3 	.word	0x080070f3
 8006f50:	080070f3 	.word	0x080070f3
 8006f54:	080070f3 	.word	0x080070f3
 8006f58:	08007071 	.word	0x08007071
 8006f5c:	080070f3 	.word	0x080070f3
 8006f60:	080070f3 	.word	0x080070f3
 8006f64:	080070f3 	.word	0x080070f3
 8006f68:	080070b1 	.word	0x080070b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fa98 	bl	80074a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	699a      	ldr	r2, [r3, #24]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0208 	orr.w	r2, r2, #8
 8006f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0204 	bic.w	r2, r2, #4
 8006f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6999      	ldr	r1, [r3, #24]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	619a      	str	r2, [r3, #24]
      break;
 8006faa:	e0a5      	b.n	80070f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fb08 	bl	80075c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699a      	ldr	r2, [r3, #24]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6999      	ldr	r1, [r3, #24]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	021a      	lsls	r2, r3, #8
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	619a      	str	r2, [r3, #24]
      break;
 8006fec:	e084      	b.n	80070f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fb71 	bl	80076dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69da      	ldr	r2, [r3, #28]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0208 	orr.w	r2, r2, #8
 8007008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0204 	bic.w	r2, r2, #4
 8007018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69d9      	ldr	r1, [r3, #28]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	691a      	ldr	r2, [r3, #16]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	61da      	str	r2, [r3, #28]
      break;
 800702c:	e064      	b.n	80070f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	4618      	mov	r0, r3
 8007036:	f000 fbd9 	bl	80077ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69da      	ldr	r2, [r3, #28]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69da      	ldr	r2, [r3, #28]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69d9      	ldr	r1, [r3, #28]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	021a      	lsls	r2, r3, #8
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	61da      	str	r2, [r3, #28]
      break;
 800706e:	e043      	b.n	80070f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fc22 	bl	80078c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0208 	orr.w	r2, r2, #8
 800708a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0204 	bic.w	r2, r2, #4
 800709a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070ae:	e023      	b.n	80070f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fc66 	bl	8007988 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	021a      	lsls	r2, r3, #8
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070f0:	e002      	b.n	80070f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	75fb      	strb	r3, [r7, #23]
      break;
 80070f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007100:	7dfb      	ldrb	r3, [r7, #23]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop

0800710c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_TIM_ConfigClockSource+0x1c>
 8007124:	2302      	movs	r3, #2
 8007126:	e0b6      	b.n	8007296 <HAL_TIM_ConfigClockSource+0x18a>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2202      	movs	r2, #2
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007146:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800714a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007164:	d03e      	beq.n	80071e4 <HAL_TIM_ConfigClockSource+0xd8>
 8007166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716a:	f200 8087 	bhi.w	800727c <HAL_TIM_ConfigClockSource+0x170>
 800716e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007172:	f000 8086 	beq.w	8007282 <HAL_TIM_ConfigClockSource+0x176>
 8007176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800717a:	d87f      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x170>
 800717c:	2b70      	cmp	r3, #112	; 0x70
 800717e:	d01a      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0xaa>
 8007180:	2b70      	cmp	r3, #112	; 0x70
 8007182:	d87b      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x170>
 8007184:	2b60      	cmp	r3, #96	; 0x60
 8007186:	d050      	beq.n	800722a <HAL_TIM_ConfigClockSource+0x11e>
 8007188:	2b60      	cmp	r3, #96	; 0x60
 800718a:	d877      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x170>
 800718c:	2b50      	cmp	r3, #80	; 0x50
 800718e:	d03c      	beq.n	800720a <HAL_TIM_ConfigClockSource+0xfe>
 8007190:	2b50      	cmp	r3, #80	; 0x50
 8007192:	d873      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x170>
 8007194:	2b40      	cmp	r3, #64	; 0x40
 8007196:	d058      	beq.n	800724a <HAL_TIM_ConfigClockSource+0x13e>
 8007198:	2b40      	cmp	r3, #64	; 0x40
 800719a:	d86f      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x170>
 800719c:	2b30      	cmp	r3, #48	; 0x30
 800719e:	d064      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x15e>
 80071a0:	2b30      	cmp	r3, #48	; 0x30
 80071a2:	d86b      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x170>
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d060      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x15e>
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	d867      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x170>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d05c      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x15e>
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	d05a      	beq.n	800726a <HAL_TIM_ConfigClockSource+0x15e>
 80071b4:	e062      	b.n	800727c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071c6:	f000 fd52 	bl	8007c6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	609a      	str	r2, [r3, #8]
      break;
 80071e2:	e04f      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071f4:	f000 fd3b 	bl	8007c6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007206:	609a      	str	r2, [r3, #8]
      break;
 8007208:	e03c      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007216:	461a      	mov	r2, r3
 8007218:	f000 fcaf 	bl	8007b7a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2150      	movs	r1, #80	; 0x50
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fd08 	bl	8007c38 <TIM_ITRx_SetConfig>
      break;
 8007228:	e02c      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007236:	461a      	mov	r2, r3
 8007238:	f000 fcce 	bl	8007bd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2160      	movs	r1, #96	; 0x60
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fcf8 	bl	8007c38 <TIM_ITRx_SetConfig>
      break;
 8007248:	e01c      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007256:	461a      	mov	r2, r3
 8007258:	f000 fc8f 	bl	8007b7a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2140      	movs	r1, #64	; 0x40
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fce8 	bl	8007c38 <TIM_ITRx_SetConfig>
      break;
 8007268:	e00c      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f000 fcdf 	bl	8007c38 <TIM_ITRx_SetConfig>
      break;
 800727a:	e003      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	73fb      	strb	r3, [r7, #15]
      break;
 8007280:	e000      	b.n	8007284 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007282:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e031      	b.n	800731a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2202      	movs	r2, #2
 80072c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fbc3 	bl	8007a54 <TIM_SlaveTimer_SetConfig>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e018      	b.n	800731a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007306:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a40      	ldr	r2, [pc, #256]	; (8007488 <TIM_Base_SetConfig+0x114>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d013      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d00f      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a3d      	ldr	r2, [pc, #244]	; (800748c <TIM_Base_SetConfig+0x118>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00b      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a3c      	ldr	r2, [pc, #240]	; (8007490 <TIM_Base_SetConfig+0x11c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d007      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a3b      	ldr	r2, [pc, #236]	; (8007494 <TIM_Base_SetConfig+0x120>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a3a      	ldr	r2, [pc, #232]	; (8007498 <TIM_Base_SetConfig+0x124>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d108      	bne.n	80073c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a2f      	ldr	r2, [pc, #188]	; (8007488 <TIM_Base_SetConfig+0x114>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01f      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d4:	d01b      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2c      	ldr	r2, [pc, #176]	; (800748c <TIM_Base_SetConfig+0x118>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d017      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2b      	ldr	r2, [pc, #172]	; (8007490 <TIM_Base_SetConfig+0x11c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d013      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a2a      	ldr	r2, [pc, #168]	; (8007494 <TIM_Base_SetConfig+0x120>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00f      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a29      	ldr	r2, [pc, #164]	; (8007498 <TIM_Base_SetConfig+0x124>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00b      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a28      	ldr	r2, [pc, #160]	; (800749c <TIM_Base_SetConfig+0x128>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d007      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a27      	ldr	r2, [pc, #156]	; (80074a0 <TIM_Base_SetConfig+0x12c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d003      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a26      	ldr	r2, [pc, #152]	; (80074a4 <TIM_Base_SetConfig+0x130>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d108      	bne.n	8007420 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a10      	ldr	r2, [pc, #64]	; (8007488 <TIM_Base_SetConfig+0x114>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00f      	beq.n	800746c <TIM_Base_SetConfig+0xf8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a12      	ldr	r2, [pc, #72]	; (8007498 <TIM_Base_SetConfig+0x124>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d00b      	beq.n	800746c <TIM_Base_SetConfig+0xf8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a11      	ldr	r2, [pc, #68]	; (800749c <TIM_Base_SetConfig+0x128>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d007      	beq.n	800746c <TIM_Base_SetConfig+0xf8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a10      	ldr	r2, [pc, #64]	; (80074a0 <TIM_Base_SetConfig+0x12c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d003      	beq.n	800746c <TIM_Base_SetConfig+0xf8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a0f      	ldr	r2, [pc, #60]	; (80074a4 <TIM_Base_SetConfig+0x130>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d103      	bne.n	8007474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	615a      	str	r2, [r3, #20]
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40012c00 	.word	0x40012c00
 800748c:	40000400 	.word	0x40000400
 8007490:	40000800 	.word	0x40000800
 8007494:	40000c00 	.word	0x40000c00
 8007498:	40013400 	.word	0x40013400
 800749c:	40014000 	.word	0x40014000
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800

080074a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f023 0201 	bic.w	r2, r3, #1
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f023 0302 	bic.w	r3, r3, #2
 80074f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a2c      	ldr	r2, [pc, #176]	; (80075b4 <TIM_OC1_SetConfig+0x10c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00f      	beq.n	8007528 <TIM_OC1_SetConfig+0x80>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a2b      	ldr	r2, [pc, #172]	; (80075b8 <TIM_OC1_SetConfig+0x110>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00b      	beq.n	8007528 <TIM_OC1_SetConfig+0x80>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a2a      	ldr	r2, [pc, #168]	; (80075bc <TIM_OC1_SetConfig+0x114>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d007      	beq.n	8007528 <TIM_OC1_SetConfig+0x80>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a29      	ldr	r2, [pc, #164]	; (80075c0 <TIM_OC1_SetConfig+0x118>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d003      	beq.n	8007528 <TIM_OC1_SetConfig+0x80>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a28      	ldr	r2, [pc, #160]	; (80075c4 <TIM_OC1_SetConfig+0x11c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d10c      	bne.n	8007542 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f023 0308 	bic.w	r3, r3, #8
 800752e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f023 0304 	bic.w	r3, r3, #4
 8007540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a1b      	ldr	r2, [pc, #108]	; (80075b4 <TIM_OC1_SetConfig+0x10c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00f      	beq.n	800756a <TIM_OC1_SetConfig+0xc2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a1a      	ldr	r2, [pc, #104]	; (80075b8 <TIM_OC1_SetConfig+0x110>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00b      	beq.n	800756a <TIM_OC1_SetConfig+0xc2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a19      	ldr	r2, [pc, #100]	; (80075bc <TIM_OC1_SetConfig+0x114>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d007      	beq.n	800756a <TIM_OC1_SetConfig+0xc2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a18      	ldr	r2, [pc, #96]	; (80075c0 <TIM_OC1_SetConfig+0x118>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d003      	beq.n	800756a <TIM_OC1_SetConfig+0xc2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a17      	ldr	r2, [pc, #92]	; (80075c4 <TIM_OC1_SetConfig+0x11c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d111      	bne.n	800758e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	621a      	str	r2, [r3, #32]
}
 80075a8:	bf00      	nop
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	40012c00 	.word	0x40012c00
 80075b8:	40013400 	.word	0x40013400
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40014400 	.word	0x40014400
 80075c4:	40014800 	.word	0x40014800

080075c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	f023 0210 	bic.w	r2, r3, #16
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f023 0320 	bic.w	r3, r3, #32
 8007616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a28      	ldr	r2, [pc, #160]	; (80076c8 <TIM_OC2_SetConfig+0x100>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC2_SetConfig+0x6c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a27      	ldr	r2, [pc, #156]	; (80076cc <TIM_OC2_SetConfig+0x104>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d10d      	bne.n	8007650 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800763a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a1d      	ldr	r2, [pc, #116]	; (80076c8 <TIM_OC2_SetConfig+0x100>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00f      	beq.n	8007678 <TIM_OC2_SetConfig+0xb0>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <TIM_OC2_SetConfig+0x104>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00b      	beq.n	8007678 <TIM_OC2_SetConfig+0xb0>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <TIM_OC2_SetConfig+0x108>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d007      	beq.n	8007678 <TIM_OC2_SetConfig+0xb0>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <TIM_OC2_SetConfig+0x10c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_OC2_SetConfig+0xb0>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <TIM_OC2_SetConfig+0x110>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d113      	bne.n	80076a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800767e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4313      	orrs	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40012c00 	.word	0x40012c00
 80076cc:	40013400 	.word	0x40013400
 80076d0:	40014000 	.word	0x40014000
 80076d4:	40014400 	.word	0x40014400
 80076d8:	40014800 	.word	0x40014800

080076dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0303 	bic.w	r3, r3, #3
 8007716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	021b      	lsls	r3, r3, #8
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	4313      	orrs	r3, r2
 8007734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a27      	ldr	r2, [pc, #156]	; (80077d8 <TIM_OC3_SetConfig+0xfc>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d003      	beq.n	8007746 <TIM_OC3_SetConfig+0x6a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a26      	ldr	r2, [pc, #152]	; (80077dc <TIM_OC3_SetConfig+0x100>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d10d      	bne.n	8007762 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800774c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <TIM_OC3_SetConfig+0xfc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00f      	beq.n	800778a <TIM_OC3_SetConfig+0xae>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <TIM_OC3_SetConfig+0x100>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d00b      	beq.n	800778a <TIM_OC3_SetConfig+0xae>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a1a      	ldr	r2, [pc, #104]	; (80077e0 <TIM_OC3_SetConfig+0x104>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d007      	beq.n	800778a <TIM_OC3_SetConfig+0xae>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a19      	ldr	r2, [pc, #100]	; (80077e4 <TIM_OC3_SetConfig+0x108>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d003      	beq.n	800778a <TIM_OC3_SetConfig+0xae>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a18      	ldr	r2, [pc, #96]	; (80077e8 <TIM_OC3_SetConfig+0x10c>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d113      	bne.n	80077b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	697a      	ldr	r2, [r7, #20]
 80077ca:	621a      	str	r2, [r3, #32]
}
 80077cc:	bf00      	nop
 80077ce:	371c      	adds	r7, #28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	40012c00 	.word	0x40012c00
 80077dc:	40013400 	.word	0x40013400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40014400 	.word	0x40014400
 80077e8:	40014800 	.word	0x40014800

080077ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800781a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800783a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	031b      	lsls	r3, r3, #12
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	4313      	orrs	r3, r2
 8007846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a18      	ldr	r2, [pc, #96]	; (80078ac <TIM_OC4_SetConfig+0xc0>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00f      	beq.n	8007870 <TIM_OC4_SetConfig+0x84>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a17      	ldr	r2, [pc, #92]	; (80078b0 <TIM_OC4_SetConfig+0xc4>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00b      	beq.n	8007870 <TIM_OC4_SetConfig+0x84>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a16      	ldr	r2, [pc, #88]	; (80078b4 <TIM_OC4_SetConfig+0xc8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d007      	beq.n	8007870 <TIM_OC4_SetConfig+0x84>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a15      	ldr	r2, [pc, #84]	; (80078b8 <TIM_OC4_SetConfig+0xcc>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d003      	beq.n	8007870 <TIM_OC4_SetConfig+0x84>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a14      	ldr	r2, [pc, #80]	; (80078bc <TIM_OC4_SetConfig+0xd0>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d109      	bne.n	8007884 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	019b      	lsls	r3, r3, #6
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	621a      	str	r2, [r3, #32]
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40012c00 	.word	0x40012c00
 80078b0:	40013400 	.word	0x40013400
 80078b4:	40014000 	.word	0x40014000
 80078b8:	40014400 	.word	0x40014400
 80078bc:	40014800 	.word	0x40014800

080078c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b087      	sub	sp, #28
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007904:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	041b      	lsls	r3, r3, #16
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	4313      	orrs	r3, r2
 8007910:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a17      	ldr	r2, [pc, #92]	; (8007974 <TIM_OC5_SetConfig+0xb4>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00f      	beq.n	800793a <TIM_OC5_SetConfig+0x7a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a16      	ldr	r2, [pc, #88]	; (8007978 <TIM_OC5_SetConfig+0xb8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00b      	beq.n	800793a <TIM_OC5_SetConfig+0x7a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a15      	ldr	r2, [pc, #84]	; (800797c <TIM_OC5_SetConfig+0xbc>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d007      	beq.n	800793a <TIM_OC5_SetConfig+0x7a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a14      	ldr	r2, [pc, #80]	; (8007980 <TIM_OC5_SetConfig+0xc0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d003      	beq.n	800793a <TIM_OC5_SetConfig+0x7a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a13      	ldr	r2, [pc, #76]	; (8007984 <TIM_OC5_SetConfig+0xc4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d109      	bne.n	800794e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	021b      	lsls	r3, r3, #8
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	621a      	str	r2, [r3, #32]
}
 8007968:	bf00      	nop
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	40012c00 	.word	0x40012c00
 8007978:	40013400 	.word	0x40013400
 800797c:	40014000 	.word	0x40014000
 8007980:	40014400 	.word	0x40014400
 8007984:	40014800 	.word	0x40014800

08007988 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	051b      	lsls	r3, r3, #20
 80079d6:	693a      	ldr	r2, [r7, #16]
 80079d8:	4313      	orrs	r3, r2
 80079da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a18      	ldr	r2, [pc, #96]	; (8007a40 <TIM_OC6_SetConfig+0xb8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d00f      	beq.n	8007a04 <TIM_OC6_SetConfig+0x7c>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <TIM_OC6_SetConfig+0xbc>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00b      	beq.n	8007a04 <TIM_OC6_SetConfig+0x7c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <TIM_OC6_SetConfig+0xc0>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d007      	beq.n	8007a04 <TIM_OC6_SetConfig+0x7c>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a15      	ldr	r2, [pc, #84]	; (8007a4c <TIM_OC6_SetConfig+0xc4>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d003      	beq.n	8007a04 <TIM_OC6_SetConfig+0x7c>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a14      	ldr	r2, [pc, #80]	; (8007a50 <TIM_OC6_SetConfig+0xc8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d109      	bne.n	8007a18 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40012c00 	.word	0x40012c00
 8007a44:	40013400 	.word	0x40013400
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800

08007a54 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a70:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a82:	f023 0307 	bic.w	r3, r3, #7
 8007a86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2b70      	cmp	r3, #112	; 0x70
 8007aa0:	d01a      	beq.n	8007ad8 <TIM_SlaveTimer_SetConfig+0x84>
 8007aa2:	2b70      	cmp	r3, #112	; 0x70
 8007aa4:	d860      	bhi.n	8007b68 <TIM_SlaveTimer_SetConfig+0x114>
 8007aa6:	2b60      	cmp	r3, #96	; 0x60
 8007aa8:	d054      	beq.n	8007b54 <TIM_SlaveTimer_SetConfig+0x100>
 8007aaa:	2b60      	cmp	r3, #96	; 0x60
 8007aac:	d85c      	bhi.n	8007b68 <TIM_SlaveTimer_SetConfig+0x114>
 8007aae:	2b50      	cmp	r3, #80	; 0x50
 8007ab0:	d046      	beq.n	8007b40 <TIM_SlaveTimer_SetConfig+0xec>
 8007ab2:	2b50      	cmp	r3, #80	; 0x50
 8007ab4:	d858      	bhi.n	8007b68 <TIM_SlaveTimer_SetConfig+0x114>
 8007ab6:	2b40      	cmp	r3, #64	; 0x40
 8007ab8:	d019      	beq.n	8007aee <TIM_SlaveTimer_SetConfig+0x9a>
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	d854      	bhi.n	8007b68 <TIM_SlaveTimer_SetConfig+0x114>
 8007abe:	2b30      	cmp	r3, #48	; 0x30
 8007ac0:	d055      	beq.n	8007b6e <TIM_SlaveTimer_SetConfig+0x11a>
 8007ac2:	2b30      	cmp	r3, #48	; 0x30
 8007ac4:	d850      	bhi.n	8007b68 <TIM_SlaveTimer_SetConfig+0x114>
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d051      	beq.n	8007b6e <TIM_SlaveTimer_SetConfig+0x11a>
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d84c      	bhi.n	8007b68 <TIM_SlaveTimer_SetConfig+0x114>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d04d      	beq.n	8007b6e <TIM_SlaveTimer_SetConfig+0x11a>
 8007ad2:	2b10      	cmp	r3, #16
 8007ad4:	d04b      	beq.n	8007b6e <TIM_SlaveTimer_SetConfig+0x11a>
 8007ad6:	e047      	b.n	8007b68 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007ae8:	f000 f8c1 	bl	8007c6e <TIM_ETR_SetConfig>
      break;
 8007aec:	e040      	b.n	8007b70 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	d101      	bne.n	8007afa <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e03b      	b.n	8007b72 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6a1a      	ldr	r2, [r3, #32]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0201 	bic.w	r2, r2, #1
 8007b10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	621a      	str	r2, [r3, #32]
      break;
 8007b3e:	e017      	b.n	8007b70 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f000 f814 	bl	8007b7a <TIM_TI1_ConfigInputStage>
      break;
 8007b52:	e00d      	b.n	8007b70 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b60:	461a      	mov	r2, r3
 8007b62:	f000 f839 	bl	8007bd8 <TIM_TI2_ConfigInputStage>
      break;
 8007b66:	e003      	b.n	8007b70 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b6c:	e000      	b.n	8007b70 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8007b6e:	bf00      	nop
  }

  return status;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b087      	sub	sp, #28
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f023 0201 	bic.w	r2, r3, #1
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f023 030a 	bic.w	r3, r3, #10
 8007bb6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	621a      	str	r2, [r3, #32]
}
 8007bcc:	bf00      	nop
 8007bce:	371c      	adds	r7, #28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b087      	sub	sp, #28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f023 0210 	bic.w	r2, r3, #16
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	031b      	lsls	r3, r3, #12
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	621a      	str	r2, [r3, #32]
}
 8007c2c:	bf00      	nop
 8007c2e:	371c      	adds	r7, #28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f043 0307 	orr.w	r3, r3, #7
 8007c5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	609a      	str	r2, [r3, #8]
}
 8007c62:	bf00      	nop
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b087      	sub	sp, #28
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	607a      	str	r2, [r7, #4]
 8007c7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	021a      	lsls	r2, r3, #8
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	431a      	orrs	r2, r3
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	609a      	str	r2, [r3, #8]
}
 8007ca2:	bf00      	nop
 8007ca4:	371c      	adds	r7, #28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b087      	sub	sp, #28
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a1a      	ldr	r2, [r3, #32]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	43db      	mvns	r3, r3
 8007cd0:	401a      	ands	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1a      	ldr	r2, [r3, #32]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f003 031f 	and.w	r3, r3, #31
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	621a      	str	r2, [r3, #32]
}
 8007cec:	bf00      	nop
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e068      	b.n	8007de2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a2e      	ldr	r2, [pc, #184]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d004      	beq.n	8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a2d      	ldr	r2, [pc, #180]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d108      	bne.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d01d      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d82:	d018      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a1b      	ldr	r2, [pc, #108]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d013      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a1a      	ldr	r2, [pc, #104]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00e      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d009      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a13      	ldr	r2, [pc, #76]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d004      	beq.n	8007db6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a14      	ldr	r2, [pc, #80]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d10c      	bne.n	8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	40012c00 	.word	0x40012c00
 8007df4:	40013400 	.word	0x40013400
 8007df8:	40000400 	.word	0x40000400
 8007dfc:	40000800 	.word	0x40000800
 8007e00:	40000c00 	.word	0x40000c00
 8007e04:	40014000 	.word	0x40014000

08007e08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e065      	b.n	8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	041b      	lsls	r3, r3, #16
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a16      	ldr	r2, [pc, #88]	; (8007efc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a14      	ldr	r2, [pc, #80]	; (8007f00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d115      	bne.n	8007ede <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	051b      	lsls	r3, r3, #20
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	40012c00 	.word	0x40012c00
 8007f00:	40013400 	.word	0x40013400

08007f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e040      	b.n	8007fd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7fa fd9a 	bl	8002a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2224      	movs	r2, #36	; 0x24
 8007f6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0201 	bic.w	r2, r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fb6a 	bl	8008660 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f8af 	bl	80080f0 <UART_SetConfig>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e01b      	b.n	8007fd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fbe9 	bl	80087a4 <UART_CheckIdleState>
 8007fd2:	4603      	mov	r3, r0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	; 0x28
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d178      	bne.n	80080e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_UART_Transmit+0x24>
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e071      	b.n	80080e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2221      	movs	r2, #33	; 0x21
 8008010:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008012:	f7fa ff4d 	bl	8002eb0 <HAL_GetTick>
 8008016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	88fa      	ldrh	r2, [r7, #6]
 800801c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008030:	d108      	bne.n	8008044 <HAL_UART_Transmit+0x68>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d104      	bne.n	8008044 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e003      	b.n	800804c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008048:	2300      	movs	r3, #0
 800804a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800804c:	e030      	b.n	80080b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2200      	movs	r2, #0
 8008056:	2180      	movs	r1, #128	; 0x80
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 fc4b 	bl	80088f4 <UART_WaitOnFlagUntilTimeout>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e03c      	b.n	80080e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10b      	bne.n	800808c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	881a      	ldrh	r2, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008080:	b292      	uxth	r2, r2
 8008082:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	3302      	adds	r3, #2
 8008088:	61bb      	str	r3, [r7, #24]
 800808a:	e008      	b.n	800809e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	781a      	ldrb	r2, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	b292      	uxth	r2, r2
 8008096:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	3301      	adds	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1c8      	bne.n	800804e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	2200      	movs	r2, #0
 80080c4:	2140      	movs	r1, #64	; 0x40
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 fc14 	bl	80088f4 <UART_WaitOnFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d004      	beq.n	80080dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2220      	movs	r2, #32
 80080d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e005      	b.n	80080e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e000      	b.n	80080e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80080e6:	2302      	movs	r3, #2
  }
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3720      	adds	r7, #32
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f4:	b08a      	sub	sp, #40	; 0x28
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	431a      	orrs	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	431a      	orrs	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	4313      	orrs	r3, r2
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	4ba4      	ldr	r3, [pc, #656]	; (80083b0 <UART_SetConfig+0x2c0>)
 8008120:	4013      	ands	r3, r2
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008128:	430b      	orrs	r3, r1
 800812a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a99      	ldr	r2, [pc, #612]	; (80083b4 <UART_SetConfig+0x2c4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d004      	beq.n	800815c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008158:	4313      	orrs	r3, r2
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816c:	430a      	orrs	r2, r1
 800816e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a90      	ldr	r2, [pc, #576]	; (80083b8 <UART_SetConfig+0x2c8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d126      	bne.n	80081c8 <UART_SetConfig+0xd8>
 800817a:	4b90      	ldr	r3, [pc, #576]	; (80083bc <UART_SetConfig+0x2cc>)
 800817c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	2b03      	cmp	r3, #3
 8008186:	d81b      	bhi.n	80081c0 <UART_SetConfig+0xd0>
 8008188:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <UART_SetConfig+0xa0>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	080081a1 	.word	0x080081a1
 8008194:	080081b1 	.word	0x080081b1
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081b9 	.word	0x080081b9
 80081a0:	2301      	movs	r3, #1
 80081a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081a6:	e116      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80081a8:	2302      	movs	r3, #2
 80081aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ae:	e112      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80081b0:	2304      	movs	r3, #4
 80081b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081b6:	e10e      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80081b8:	2308      	movs	r3, #8
 80081ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081be:	e10a      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80081c0:	2310      	movs	r3, #16
 80081c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081c6:	e106      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a7c      	ldr	r2, [pc, #496]	; (80083c0 <UART_SetConfig+0x2d0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d138      	bne.n	8008244 <UART_SetConfig+0x154>
 80081d2:	4b7a      	ldr	r3, [pc, #488]	; (80083bc <UART_SetConfig+0x2cc>)
 80081d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d8:	f003 030c 	and.w	r3, r3, #12
 80081dc:	2b0c      	cmp	r3, #12
 80081de:	d82d      	bhi.n	800823c <UART_SetConfig+0x14c>
 80081e0:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <UART_SetConfig+0xf8>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	0800821d 	.word	0x0800821d
 80081ec:	0800823d 	.word	0x0800823d
 80081f0:	0800823d 	.word	0x0800823d
 80081f4:	0800823d 	.word	0x0800823d
 80081f8:	0800822d 	.word	0x0800822d
 80081fc:	0800823d 	.word	0x0800823d
 8008200:	0800823d 	.word	0x0800823d
 8008204:	0800823d 	.word	0x0800823d
 8008208:	08008225 	.word	0x08008225
 800820c:	0800823d 	.word	0x0800823d
 8008210:	0800823d 	.word	0x0800823d
 8008214:	0800823d 	.word	0x0800823d
 8008218:	08008235 	.word	0x08008235
 800821c:	2300      	movs	r3, #0
 800821e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008222:	e0d8      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008224:	2302      	movs	r3, #2
 8008226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800822a:	e0d4      	b.n	80083d6 <UART_SetConfig+0x2e6>
 800822c:	2304      	movs	r3, #4
 800822e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008232:	e0d0      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008234:	2308      	movs	r3, #8
 8008236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800823a:	e0cc      	b.n	80083d6 <UART_SetConfig+0x2e6>
 800823c:	2310      	movs	r3, #16
 800823e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008242:	e0c8      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a5e      	ldr	r2, [pc, #376]	; (80083c4 <UART_SetConfig+0x2d4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d125      	bne.n	800829a <UART_SetConfig+0x1aa>
 800824e:	4b5b      	ldr	r3, [pc, #364]	; (80083bc <UART_SetConfig+0x2cc>)
 8008250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008254:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008258:	2b30      	cmp	r3, #48	; 0x30
 800825a:	d016      	beq.n	800828a <UART_SetConfig+0x19a>
 800825c:	2b30      	cmp	r3, #48	; 0x30
 800825e:	d818      	bhi.n	8008292 <UART_SetConfig+0x1a2>
 8008260:	2b20      	cmp	r3, #32
 8008262:	d00a      	beq.n	800827a <UART_SetConfig+0x18a>
 8008264:	2b20      	cmp	r3, #32
 8008266:	d814      	bhi.n	8008292 <UART_SetConfig+0x1a2>
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <UART_SetConfig+0x182>
 800826c:	2b10      	cmp	r3, #16
 800826e:	d008      	beq.n	8008282 <UART_SetConfig+0x192>
 8008270:	e00f      	b.n	8008292 <UART_SetConfig+0x1a2>
 8008272:	2300      	movs	r3, #0
 8008274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008278:	e0ad      	b.n	80083d6 <UART_SetConfig+0x2e6>
 800827a:	2302      	movs	r3, #2
 800827c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008280:	e0a9      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008282:	2304      	movs	r3, #4
 8008284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008288:	e0a5      	b.n	80083d6 <UART_SetConfig+0x2e6>
 800828a:	2308      	movs	r3, #8
 800828c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008290:	e0a1      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008292:	2310      	movs	r3, #16
 8008294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008298:	e09d      	b.n	80083d6 <UART_SetConfig+0x2e6>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a4a      	ldr	r2, [pc, #296]	; (80083c8 <UART_SetConfig+0x2d8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d125      	bne.n	80082f0 <UART_SetConfig+0x200>
 80082a4:	4b45      	ldr	r3, [pc, #276]	; (80083bc <UART_SetConfig+0x2cc>)
 80082a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082ae:	2bc0      	cmp	r3, #192	; 0xc0
 80082b0:	d016      	beq.n	80082e0 <UART_SetConfig+0x1f0>
 80082b2:	2bc0      	cmp	r3, #192	; 0xc0
 80082b4:	d818      	bhi.n	80082e8 <UART_SetConfig+0x1f8>
 80082b6:	2b80      	cmp	r3, #128	; 0x80
 80082b8:	d00a      	beq.n	80082d0 <UART_SetConfig+0x1e0>
 80082ba:	2b80      	cmp	r3, #128	; 0x80
 80082bc:	d814      	bhi.n	80082e8 <UART_SetConfig+0x1f8>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <UART_SetConfig+0x1d8>
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	d008      	beq.n	80082d8 <UART_SetConfig+0x1e8>
 80082c6:	e00f      	b.n	80082e8 <UART_SetConfig+0x1f8>
 80082c8:	2300      	movs	r3, #0
 80082ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ce:	e082      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80082d0:	2302      	movs	r3, #2
 80082d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082d6:	e07e      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80082d8:	2304      	movs	r3, #4
 80082da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082de:	e07a      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80082e0:	2308      	movs	r3, #8
 80082e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082e6:	e076      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80082e8:	2310      	movs	r3, #16
 80082ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ee:	e072      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a35      	ldr	r2, [pc, #212]	; (80083cc <UART_SetConfig+0x2dc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d12a      	bne.n	8008350 <UART_SetConfig+0x260>
 80082fa:	4b30      	ldr	r3, [pc, #192]	; (80083bc <UART_SetConfig+0x2cc>)
 80082fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008308:	d01a      	beq.n	8008340 <UART_SetConfig+0x250>
 800830a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800830e:	d81b      	bhi.n	8008348 <UART_SetConfig+0x258>
 8008310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008314:	d00c      	beq.n	8008330 <UART_SetConfig+0x240>
 8008316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800831a:	d815      	bhi.n	8008348 <UART_SetConfig+0x258>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d003      	beq.n	8008328 <UART_SetConfig+0x238>
 8008320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008324:	d008      	beq.n	8008338 <UART_SetConfig+0x248>
 8008326:	e00f      	b.n	8008348 <UART_SetConfig+0x258>
 8008328:	2300      	movs	r3, #0
 800832a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800832e:	e052      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008330:	2302      	movs	r3, #2
 8008332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008336:	e04e      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008338:	2304      	movs	r3, #4
 800833a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800833e:	e04a      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008340:	2308      	movs	r3, #8
 8008342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008346:	e046      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008348:	2310      	movs	r3, #16
 800834a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800834e:	e042      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a17      	ldr	r2, [pc, #92]	; (80083b4 <UART_SetConfig+0x2c4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d13a      	bne.n	80083d0 <UART_SetConfig+0x2e0>
 800835a:	4b18      	ldr	r3, [pc, #96]	; (80083bc <UART_SetConfig+0x2cc>)
 800835c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008360:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008368:	d01a      	beq.n	80083a0 <UART_SetConfig+0x2b0>
 800836a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800836e:	d81b      	bhi.n	80083a8 <UART_SetConfig+0x2b8>
 8008370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008374:	d00c      	beq.n	8008390 <UART_SetConfig+0x2a0>
 8008376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800837a:	d815      	bhi.n	80083a8 <UART_SetConfig+0x2b8>
 800837c:	2b00      	cmp	r3, #0
 800837e:	d003      	beq.n	8008388 <UART_SetConfig+0x298>
 8008380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008384:	d008      	beq.n	8008398 <UART_SetConfig+0x2a8>
 8008386:	e00f      	b.n	80083a8 <UART_SetConfig+0x2b8>
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800838e:	e022      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008390:	2302      	movs	r3, #2
 8008392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008396:	e01e      	b.n	80083d6 <UART_SetConfig+0x2e6>
 8008398:	2304      	movs	r3, #4
 800839a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800839e:	e01a      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80083a0:	2308      	movs	r3, #8
 80083a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083a6:	e016      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ae:	e012      	b.n	80083d6 <UART_SetConfig+0x2e6>
 80083b0:	efff69f3 	.word	0xefff69f3
 80083b4:	40008000 	.word	0x40008000
 80083b8:	40013800 	.word	0x40013800
 80083bc:	40021000 	.word	0x40021000
 80083c0:	40004400 	.word	0x40004400
 80083c4:	40004800 	.word	0x40004800
 80083c8:	40004c00 	.word	0x40004c00
 80083cc:	40005000 	.word	0x40005000
 80083d0:	2310      	movs	r3, #16
 80083d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a9f      	ldr	r2, [pc, #636]	; (8008658 <UART_SetConfig+0x568>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d17a      	bne.n	80084d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d824      	bhi.n	8008432 <UART_SetConfig+0x342>
 80083e8:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <UART_SetConfig+0x300>)
 80083ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ee:	bf00      	nop
 80083f0:	08008415 	.word	0x08008415
 80083f4:	08008433 	.word	0x08008433
 80083f8:	0800841d 	.word	0x0800841d
 80083fc:	08008433 	.word	0x08008433
 8008400:	08008423 	.word	0x08008423
 8008404:	08008433 	.word	0x08008433
 8008408:	08008433 	.word	0x08008433
 800840c:	08008433 	.word	0x08008433
 8008410:	0800842b 	.word	0x0800842b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008414:	f7fd fd68 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 8008418:	61f8      	str	r0, [r7, #28]
        break;
 800841a:	e010      	b.n	800843e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800841c:	4b8f      	ldr	r3, [pc, #572]	; (800865c <UART_SetConfig+0x56c>)
 800841e:	61fb      	str	r3, [r7, #28]
        break;
 8008420:	e00d      	b.n	800843e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008422:	f7fd fcc9 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 8008426:	61f8      	str	r0, [r7, #28]
        break;
 8008428:	e009      	b.n	800843e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800842e:	61fb      	str	r3, [r7, #28]
        break;
 8008430:	e005      	b.n	800843e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800843c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80fb 	beq.w	800863c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	4613      	mov	r3, r2
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	4413      	add	r3, r2
 8008450:	69fa      	ldr	r2, [r7, #28]
 8008452:	429a      	cmp	r2, r3
 8008454:	d305      	bcc.n	8008462 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800845c:	69fa      	ldr	r2, [r7, #28]
 800845e:	429a      	cmp	r2, r3
 8008460:	d903      	bls.n	800846a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008468:	e0e8      	b.n	800863c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	2200      	movs	r2, #0
 800846e:	461c      	mov	r4, r3
 8008470:	4615      	mov	r5, r2
 8008472:	f04f 0200 	mov.w	r2, #0
 8008476:	f04f 0300 	mov.w	r3, #0
 800847a:	022b      	lsls	r3, r5, #8
 800847c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008480:	0222      	lsls	r2, r4, #8
 8008482:	68f9      	ldr	r1, [r7, #12]
 8008484:	6849      	ldr	r1, [r1, #4]
 8008486:	0849      	lsrs	r1, r1, #1
 8008488:	2000      	movs	r0, #0
 800848a:	4688      	mov	r8, r1
 800848c:	4681      	mov	r9, r0
 800848e:	eb12 0a08 	adds.w	sl, r2, r8
 8008492:	eb43 0b09 	adc.w	fp, r3, r9
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	603b      	str	r3, [r7, #0]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a4:	4650      	mov	r0, sl
 80084a6:	4659      	mov	r1, fp
 80084a8:	f7f8 fbee 	bl	8000c88 <__aeabi_uldivmod>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4613      	mov	r3, r2
 80084b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084ba:	d308      	bcc.n	80084ce <UART_SetConfig+0x3de>
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084c2:	d204      	bcs.n	80084ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69ba      	ldr	r2, [r7, #24]
 80084ca:	60da      	str	r2, [r3, #12]
 80084cc:	e0b6      	b.n	800863c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80084d4:	e0b2      	b.n	800863c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084de:	d15e      	bne.n	800859e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80084e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d828      	bhi.n	800853a <UART_SetConfig+0x44a>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <UART_SetConfig+0x400>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	08008515 	.word	0x08008515
 80084f4:	0800851d 	.word	0x0800851d
 80084f8:	08008525 	.word	0x08008525
 80084fc:	0800853b 	.word	0x0800853b
 8008500:	0800852b 	.word	0x0800852b
 8008504:	0800853b 	.word	0x0800853b
 8008508:	0800853b 	.word	0x0800853b
 800850c:	0800853b 	.word	0x0800853b
 8008510:	08008533 	.word	0x08008533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008514:	f7fd fce8 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 8008518:	61f8      	str	r0, [r7, #28]
        break;
 800851a:	e014      	b.n	8008546 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800851c:	f7fd fcfa 	bl	8005f14 <HAL_RCC_GetPCLK2Freq>
 8008520:	61f8      	str	r0, [r7, #28]
        break;
 8008522:	e010      	b.n	8008546 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008524:	4b4d      	ldr	r3, [pc, #308]	; (800865c <UART_SetConfig+0x56c>)
 8008526:	61fb      	str	r3, [r7, #28]
        break;
 8008528:	e00d      	b.n	8008546 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800852a:	f7fd fc45 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 800852e:	61f8      	str	r0, [r7, #28]
        break;
 8008530:	e009      	b.n	8008546 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008536:	61fb      	str	r3, [r7, #28]
        break;
 8008538:	e005      	b.n	8008546 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008544:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d077      	beq.n	800863c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	005a      	lsls	r2, r3, #1
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	441a      	add	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008560:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b0f      	cmp	r3, #15
 8008566:	d916      	bls.n	8008596 <UART_SetConfig+0x4a6>
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800856e:	d212      	bcs.n	8008596 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	b29b      	uxth	r3, r3
 8008574:	f023 030f 	bic.w	r3, r3, #15
 8008578:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	085b      	lsrs	r3, r3, #1
 800857e:	b29b      	uxth	r3, r3
 8008580:	f003 0307 	and.w	r3, r3, #7
 8008584:	b29a      	uxth	r2, r3
 8008586:	8afb      	ldrh	r3, [r7, #22]
 8008588:	4313      	orrs	r3, r2
 800858a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	8afa      	ldrh	r2, [r7, #22]
 8008592:	60da      	str	r2, [r3, #12]
 8008594:	e052      	b.n	800863c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800859c:	e04e      	b.n	800863c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800859e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085a2:	2b08      	cmp	r3, #8
 80085a4:	d827      	bhi.n	80085f6 <UART_SetConfig+0x506>
 80085a6:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <UART_SetConfig+0x4bc>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	080085d1 	.word	0x080085d1
 80085b0:	080085d9 	.word	0x080085d9
 80085b4:	080085e1 	.word	0x080085e1
 80085b8:	080085f7 	.word	0x080085f7
 80085bc:	080085e7 	.word	0x080085e7
 80085c0:	080085f7 	.word	0x080085f7
 80085c4:	080085f7 	.word	0x080085f7
 80085c8:	080085f7 	.word	0x080085f7
 80085cc:	080085ef 	.word	0x080085ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085d0:	f7fd fc8a 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 80085d4:	61f8      	str	r0, [r7, #28]
        break;
 80085d6:	e014      	b.n	8008602 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085d8:	f7fd fc9c 	bl	8005f14 <HAL_RCC_GetPCLK2Freq>
 80085dc:	61f8      	str	r0, [r7, #28]
        break;
 80085de:	e010      	b.n	8008602 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085e0:	4b1e      	ldr	r3, [pc, #120]	; (800865c <UART_SetConfig+0x56c>)
 80085e2:	61fb      	str	r3, [r7, #28]
        break;
 80085e4:	e00d      	b.n	8008602 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085e6:	f7fd fbe7 	bl	8005db8 <HAL_RCC_GetSysClockFreq>
 80085ea:	61f8      	str	r0, [r7, #28]
        break;
 80085ec:	e009      	b.n	8008602 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085f2:	61fb      	str	r3, [r7, #28]
        break;
 80085f4:	e005      	b.n	8008602 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008600:	bf00      	nop
    }

    if (pclk != 0U)
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d019      	beq.n	800863c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	085a      	lsrs	r2, r3, #1
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	441a      	add	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	fbb2 f3f3 	udiv	r3, r2, r3
 800861a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	2b0f      	cmp	r3, #15
 8008620:	d909      	bls.n	8008636 <UART_SetConfig+0x546>
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008628:	d205      	bcs.n	8008636 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	b29a      	uxth	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	60da      	str	r2, [r3, #12]
 8008634:	e002      	b.n	800863c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008648:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800864c:	4618      	mov	r0, r3
 800864e:	3728      	adds	r7, #40	; 0x28
 8008650:	46bd      	mov	sp, r7
 8008652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008656:	bf00      	nop
 8008658:	40008000 	.word	0x40008000
 800865c:	00f42400 	.word	0x00f42400

08008660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	f003 0302 	and.w	r3, r3, #2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	430a      	orrs	r2, r1
 8008732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01a      	beq.n	8008776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875e:	d10a      	bne.n	8008776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	605a      	str	r2, [r3, #4]
  }
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b098      	sub	sp, #96	; 0x60
 80087a8:	af02      	add	r7, sp, #8
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087b4:	f7fa fb7c 	bl	8002eb0 <HAL_GetTick>
 80087b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d12e      	bne.n	8008826 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d0:	2200      	movs	r2, #0
 80087d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f88c 	bl	80088f4 <UART_WaitOnFlagUntilTimeout>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d021      	beq.n	8008826 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f6:	653b      	str	r3, [r7, #80]	; 0x50
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008800:	647b      	str	r3, [r7, #68]	; 0x44
 8008802:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800880e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e6      	bne.n	80087e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2220      	movs	r2, #32
 8008818:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e062      	b.n	80088ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b04      	cmp	r3, #4
 8008832:	d149      	bne.n	80088c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800883c:	2200      	movs	r2, #0
 800883e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f856 	bl	80088f4 <UART_WaitOnFlagUntilTimeout>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d03c      	beq.n	80088c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	623b      	str	r3, [r7, #32]
   return(result);
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886c:	633b      	str	r3, [r7, #48]	; 0x30
 800886e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e6      	bne.n	800884e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3308      	adds	r3, #8
 8008886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0301 	bic.w	r3, r3, #1
 8008896:	64bb      	str	r3, [r7, #72]	; 0x48
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3308      	adds	r3, #8
 800889e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a0:	61fa      	str	r2, [r7, #28]
 80088a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	69b9      	ldr	r1, [r7, #24]
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	617b      	str	r3, [r7, #20]
   return(result);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e5      	bne.n	8008880 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e011      	b.n	80088ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2220      	movs	r2, #32
 80088cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3758      	adds	r7, #88	; 0x58
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	4613      	mov	r3, r2
 8008902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008904:	e049      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890c:	d045      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800890e:	f7fa facf 	bl	8002eb0 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	429a      	cmp	r2, r3
 800891c:	d302      	bcc.n	8008924 <UART_WaitOnFlagUntilTimeout+0x30>
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e048      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d031      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	f003 0308 	and.w	r3, r3, #8
 8008940:	2b08      	cmp	r3, #8
 8008942:	d110      	bne.n	8008966 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2208      	movs	r2, #8
 800894a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f838 	bl	80089c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2208      	movs	r2, #8
 8008956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e029      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008974:	d111      	bne.n	800899a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800897e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f81e 	bl	80089c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e00f      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69da      	ldr	r2, [r3, #28]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4013      	ands	r3, r2
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	bf0c      	ite	eq
 80089aa:	2301      	moveq	r3, #1
 80089ac:	2300      	movne	r3, #0
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d0a6      	beq.n	8008906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b095      	sub	sp, #84	; 0x54
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e8:	643b      	str	r3, [r7, #64]	; 0x40
 80089ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e6      	bne.n	80089ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3308      	adds	r3, #8
 8008a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3308      	adds	r3, #8
 8008a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e5      	bne.n	80089fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d118      	bne.n	8008a6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f023 0310 	bic.w	r3, r3, #16
 8008a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a56:	61bb      	str	r3, [r7, #24]
 8008a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6979      	ldr	r1, [r7, #20]
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	613b      	str	r3, [r7, #16]
   return(result);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e6      	bne.n	8008a38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a7e:	bf00      	nop
 8008a80:	3754      	adds	r7, #84	; 0x54
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <__cvt>:
 8008a8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a8e:	ec55 4b10 	vmov	r4, r5, d0
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	460e      	mov	r6, r1
 8008a96:	4619      	mov	r1, r3
 8008a98:	462b      	mov	r3, r5
 8008a9a:	bfbb      	ittet	lt
 8008a9c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008aa0:	461d      	movlt	r5, r3
 8008aa2:	2300      	movge	r3, #0
 8008aa4:	232d      	movlt	r3, #45	; 0x2d
 8008aa6:	700b      	strb	r3, [r1, #0]
 8008aa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aaa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008aae:	4691      	mov	r9, r2
 8008ab0:	f023 0820 	bic.w	r8, r3, #32
 8008ab4:	bfbc      	itt	lt
 8008ab6:	4622      	movlt	r2, r4
 8008ab8:	4614      	movlt	r4, r2
 8008aba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008abe:	d005      	beq.n	8008acc <__cvt+0x42>
 8008ac0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ac4:	d100      	bne.n	8008ac8 <__cvt+0x3e>
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	2102      	movs	r1, #2
 8008aca:	e000      	b.n	8008ace <__cvt+0x44>
 8008acc:	2103      	movs	r1, #3
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	ab02      	add	r3, sp, #8
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	ec45 4b10 	vmov	d0, r4, r5
 8008ada:	4653      	mov	r3, sl
 8008adc:	4632      	mov	r2, r6
 8008ade:	f001 f87f 	bl	8009be0 <_dtoa_r>
 8008ae2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	d102      	bne.n	8008af0 <__cvt+0x66>
 8008aea:	f019 0f01 	tst.w	r9, #1
 8008aee:	d022      	beq.n	8008b36 <__cvt+0xac>
 8008af0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008af4:	eb07 0906 	add.w	r9, r7, r6
 8008af8:	d110      	bne.n	8008b1c <__cvt+0x92>
 8008afa:	783b      	ldrb	r3, [r7, #0]
 8008afc:	2b30      	cmp	r3, #48	; 0x30
 8008afe:	d10a      	bne.n	8008b16 <__cvt+0x8c>
 8008b00:	2200      	movs	r2, #0
 8008b02:	2300      	movs	r3, #0
 8008b04:	4620      	mov	r0, r4
 8008b06:	4629      	mov	r1, r5
 8008b08:	f7f7 ffde 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b0c:	b918      	cbnz	r0, 8008b16 <__cvt+0x8c>
 8008b0e:	f1c6 0601 	rsb	r6, r6, #1
 8008b12:	f8ca 6000 	str.w	r6, [sl]
 8008b16:	f8da 3000 	ldr.w	r3, [sl]
 8008b1a:	4499      	add	r9, r3
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2300      	movs	r3, #0
 8008b20:	4620      	mov	r0, r4
 8008b22:	4629      	mov	r1, r5
 8008b24:	f7f7 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b28:	b108      	cbz	r0, 8008b2e <__cvt+0xa4>
 8008b2a:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b2e:	2230      	movs	r2, #48	; 0x30
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	454b      	cmp	r3, r9
 8008b34:	d307      	bcc.n	8008b46 <__cvt+0xbc>
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b3a:	1bdb      	subs	r3, r3, r7
 8008b3c:	4638      	mov	r0, r7
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	b004      	add	sp, #16
 8008b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b46:	1c59      	adds	r1, r3, #1
 8008b48:	9103      	str	r1, [sp, #12]
 8008b4a:	701a      	strb	r2, [r3, #0]
 8008b4c:	e7f0      	b.n	8008b30 <__cvt+0xa6>

08008b4e <__exponent>:
 8008b4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b50:	4603      	mov	r3, r0
 8008b52:	2900      	cmp	r1, #0
 8008b54:	bfb8      	it	lt
 8008b56:	4249      	neglt	r1, r1
 8008b58:	f803 2b02 	strb.w	r2, [r3], #2
 8008b5c:	bfb4      	ite	lt
 8008b5e:	222d      	movlt	r2, #45	; 0x2d
 8008b60:	222b      	movge	r2, #43	; 0x2b
 8008b62:	2909      	cmp	r1, #9
 8008b64:	7042      	strb	r2, [r0, #1]
 8008b66:	dd2a      	ble.n	8008bbe <__exponent+0x70>
 8008b68:	f10d 0207 	add.w	r2, sp, #7
 8008b6c:	4617      	mov	r7, r2
 8008b6e:	260a      	movs	r6, #10
 8008b70:	4694      	mov	ip, r2
 8008b72:	fb91 f5f6 	sdiv	r5, r1, r6
 8008b76:	fb06 1415 	mls	r4, r6, r5, r1
 8008b7a:	3430      	adds	r4, #48	; 0x30
 8008b7c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008b80:	460c      	mov	r4, r1
 8008b82:	2c63      	cmp	r4, #99	; 0x63
 8008b84:	f102 32ff 	add.w	r2, r2, #4294967295
 8008b88:	4629      	mov	r1, r5
 8008b8a:	dcf1      	bgt.n	8008b70 <__exponent+0x22>
 8008b8c:	3130      	adds	r1, #48	; 0x30
 8008b8e:	f1ac 0402 	sub.w	r4, ip, #2
 8008b92:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b96:	1c41      	adds	r1, r0, #1
 8008b98:	4622      	mov	r2, r4
 8008b9a:	42ba      	cmp	r2, r7
 8008b9c:	d30a      	bcc.n	8008bb4 <__exponent+0x66>
 8008b9e:	f10d 0209 	add.w	r2, sp, #9
 8008ba2:	eba2 020c 	sub.w	r2, r2, ip
 8008ba6:	42bc      	cmp	r4, r7
 8008ba8:	bf88      	it	hi
 8008baa:	2200      	movhi	r2, #0
 8008bac:	4413      	add	r3, r2
 8008bae:	1a18      	subs	r0, r3, r0
 8008bb0:	b003      	add	sp, #12
 8008bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008bb8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008bbc:	e7ed      	b.n	8008b9a <__exponent+0x4c>
 8008bbe:	2330      	movs	r3, #48	; 0x30
 8008bc0:	3130      	adds	r1, #48	; 0x30
 8008bc2:	7083      	strb	r3, [r0, #2]
 8008bc4:	70c1      	strb	r1, [r0, #3]
 8008bc6:	1d03      	adds	r3, r0, #4
 8008bc8:	e7f1      	b.n	8008bae <__exponent+0x60>
	...

08008bcc <_printf_float>:
 8008bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd0:	ed2d 8b02 	vpush	{d8}
 8008bd4:	b08d      	sub	sp, #52	; 0x34
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008bdc:	4616      	mov	r6, r2
 8008bde:	461f      	mov	r7, r3
 8008be0:	4605      	mov	r5, r0
 8008be2:	f000 fef7 	bl	80099d4 <_localeconv_r>
 8008be6:	f8d0 a000 	ldr.w	sl, [r0]
 8008bea:	4650      	mov	r0, sl
 8008bec:	f7f7 fb40 	bl	8000270 <strlen>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	9305      	str	r3, [sp, #20]
 8008bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c00:	3307      	adds	r3, #7
 8008c02:	f023 0307 	bic.w	r3, r3, #7
 8008c06:	f103 0208 	add.w	r2, r3, #8
 8008c0a:	f8c8 2000 	str.w	r2, [r8]
 8008c0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c16:	9307      	str	r3, [sp, #28]
 8008c18:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c1c:	ee08 0a10 	vmov	s16, r0
 8008c20:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008c24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c28:	4b9e      	ldr	r3, [pc, #632]	; (8008ea4 <_printf_float+0x2d8>)
 8008c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2e:	f7f7 ff7d 	bl	8000b2c <__aeabi_dcmpun>
 8008c32:	bb88      	cbnz	r0, 8008c98 <_printf_float+0xcc>
 8008c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c38:	4b9a      	ldr	r3, [pc, #616]	; (8008ea4 <_printf_float+0x2d8>)
 8008c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3e:	f7f7 ff57 	bl	8000af0 <__aeabi_dcmple>
 8008c42:	bb48      	cbnz	r0, 8008c98 <_printf_float+0xcc>
 8008c44:	2200      	movs	r2, #0
 8008c46:	2300      	movs	r3, #0
 8008c48:	4640      	mov	r0, r8
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	f7f7 ff46 	bl	8000adc <__aeabi_dcmplt>
 8008c50:	b110      	cbz	r0, 8008c58 <_printf_float+0x8c>
 8008c52:	232d      	movs	r3, #45	; 0x2d
 8008c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c58:	4a93      	ldr	r2, [pc, #588]	; (8008ea8 <_printf_float+0x2dc>)
 8008c5a:	4b94      	ldr	r3, [pc, #592]	; (8008eac <_printf_float+0x2e0>)
 8008c5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008c60:	bf94      	ite	ls
 8008c62:	4690      	movls	r8, r2
 8008c64:	4698      	movhi	r8, r3
 8008c66:	2303      	movs	r3, #3
 8008c68:	6123      	str	r3, [r4, #16]
 8008c6a:	9b05      	ldr	r3, [sp, #20]
 8008c6c:	f023 0304 	bic.w	r3, r3, #4
 8008c70:	6023      	str	r3, [r4, #0]
 8008c72:	f04f 0900 	mov.w	r9, #0
 8008c76:	9700      	str	r7, [sp, #0]
 8008c78:	4633      	mov	r3, r6
 8008c7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f000 f9da 	bl	8009038 <_printf_common>
 8008c84:	3001      	adds	r0, #1
 8008c86:	f040 8090 	bne.w	8008daa <_printf_float+0x1de>
 8008c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8e:	b00d      	add	sp, #52	; 0x34
 8008c90:	ecbd 8b02 	vpop	{d8}
 8008c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c98:	4642      	mov	r2, r8
 8008c9a:	464b      	mov	r3, r9
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	f7f7 ff44 	bl	8000b2c <__aeabi_dcmpun>
 8008ca4:	b140      	cbz	r0, 8008cb8 <_printf_float+0xec>
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	bfbc      	itt	lt
 8008cac:	232d      	movlt	r3, #45	; 0x2d
 8008cae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008cb2:	4a7f      	ldr	r2, [pc, #508]	; (8008eb0 <_printf_float+0x2e4>)
 8008cb4:	4b7f      	ldr	r3, [pc, #508]	; (8008eb4 <_printf_float+0x2e8>)
 8008cb6:	e7d1      	b.n	8008c5c <_printf_float+0x90>
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008cbe:	9206      	str	r2, [sp, #24]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	d13f      	bne.n	8008d44 <_printf_float+0x178>
 8008cc4:	2306      	movs	r3, #6
 8008cc6:	6063      	str	r3, [r4, #4]
 8008cc8:	9b05      	ldr	r3, [sp, #20]
 8008cca:	6861      	ldr	r1, [r4, #4]
 8008ccc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9303      	str	r3, [sp, #12]
 8008cd4:	ab0a      	add	r3, sp, #40	; 0x28
 8008cd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008cda:	ab09      	add	r3, sp, #36	; 0x24
 8008cdc:	ec49 8b10 	vmov	d0, r8, r9
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	6022      	str	r2, [r4, #0]
 8008ce4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f7ff fece 	bl	8008a8a <__cvt>
 8008cee:	9b06      	ldr	r3, [sp, #24]
 8008cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cf2:	2b47      	cmp	r3, #71	; 0x47
 8008cf4:	4680      	mov	r8, r0
 8008cf6:	d108      	bne.n	8008d0a <_printf_float+0x13e>
 8008cf8:	1cc8      	adds	r0, r1, #3
 8008cfa:	db02      	blt.n	8008d02 <_printf_float+0x136>
 8008cfc:	6863      	ldr	r3, [r4, #4]
 8008cfe:	4299      	cmp	r1, r3
 8008d00:	dd41      	ble.n	8008d86 <_printf_float+0x1ba>
 8008d02:	f1ab 0302 	sub.w	r3, fp, #2
 8008d06:	fa5f fb83 	uxtb.w	fp, r3
 8008d0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d0e:	d820      	bhi.n	8008d52 <_printf_float+0x186>
 8008d10:	3901      	subs	r1, #1
 8008d12:	465a      	mov	r2, fp
 8008d14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d18:	9109      	str	r1, [sp, #36]	; 0x24
 8008d1a:	f7ff ff18 	bl	8008b4e <__exponent>
 8008d1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d20:	1813      	adds	r3, r2, r0
 8008d22:	2a01      	cmp	r2, #1
 8008d24:	4681      	mov	r9, r0
 8008d26:	6123      	str	r3, [r4, #16]
 8008d28:	dc02      	bgt.n	8008d30 <_printf_float+0x164>
 8008d2a:	6822      	ldr	r2, [r4, #0]
 8008d2c:	07d2      	lsls	r2, r2, #31
 8008d2e:	d501      	bpl.n	8008d34 <_printf_float+0x168>
 8008d30:	3301      	adds	r3, #1
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d09c      	beq.n	8008c76 <_printf_float+0xaa>
 8008d3c:	232d      	movs	r3, #45	; 0x2d
 8008d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d42:	e798      	b.n	8008c76 <_printf_float+0xaa>
 8008d44:	9a06      	ldr	r2, [sp, #24]
 8008d46:	2a47      	cmp	r2, #71	; 0x47
 8008d48:	d1be      	bne.n	8008cc8 <_printf_float+0xfc>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1bc      	bne.n	8008cc8 <_printf_float+0xfc>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e7b9      	b.n	8008cc6 <_printf_float+0xfa>
 8008d52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008d56:	d118      	bne.n	8008d8a <_printf_float+0x1be>
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	6863      	ldr	r3, [r4, #4]
 8008d5c:	dd0b      	ble.n	8008d76 <_printf_float+0x1aa>
 8008d5e:	6121      	str	r1, [r4, #16]
 8008d60:	b913      	cbnz	r3, 8008d68 <_printf_float+0x19c>
 8008d62:	6822      	ldr	r2, [r4, #0]
 8008d64:	07d0      	lsls	r0, r2, #31
 8008d66:	d502      	bpl.n	8008d6e <_printf_float+0x1a2>
 8008d68:	3301      	adds	r3, #1
 8008d6a:	440b      	add	r3, r1
 8008d6c:	6123      	str	r3, [r4, #16]
 8008d6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d70:	f04f 0900 	mov.w	r9, #0
 8008d74:	e7de      	b.n	8008d34 <_printf_float+0x168>
 8008d76:	b913      	cbnz	r3, 8008d7e <_printf_float+0x1b2>
 8008d78:	6822      	ldr	r2, [r4, #0]
 8008d7a:	07d2      	lsls	r2, r2, #31
 8008d7c:	d501      	bpl.n	8008d82 <_printf_float+0x1b6>
 8008d7e:	3302      	adds	r3, #2
 8008d80:	e7f4      	b.n	8008d6c <_printf_float+0x1a0>
 8008d82:	2301      	movs	r3, #1
 8008d84:	e7f2      	b.n	8008d6c <_printf_float+0x1a0>
 8008d86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d8c:	4299      	cmp	r1, r3
 8008d8e:	db05      	blt.n	8008d9c <_printf_float+0x1d0>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	6121      	str	r1, [r4, #16]
 8008d94:	07d8      	lsls	r0, r3, #31
 8008d96:	d5ea      	bpl.n	8008d6e <_printf_float+0x1a2>
 8008d98:	1c4b      	adds	r3, r1, #1
 8008d9a:	e7e7      	b.n	8008d6c <_printf_float+0x1a0>
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	bfd4      	ite	le
 8008da0:	f1c1 0202 	rsble	r2, r1, #2
 8008da4:	2201      	movgt	r2, #1
 8008da6:	4413      	add	r3, r2
 8008da8:	e7e0      	b.n	8008d6c <_printf_float+0x1a0>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	055a      	lsls	r2, r3, #21
 8008dae:	d407      	bmi.n	8008dc0 <_printf_float+0x1f4>
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	4642      	mov	r2, r8
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	d12c      	bne.n	8008e18 <_printf_float+0x24c>
 8008dbe:	e764      	b.n	8008c8a <_printf_float+0xbe>
 8008dc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dc4:	f240 80e0 	bls.w	8008f88 <_printf_float+0x3bc>
 8008dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	f7f7 fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d034      	beq.n	8008e42 <_printf_float+0x276>
 8008dd8:	4a37      	ldr	r2, [pc, #220]	; (8008eb8 <_printf_float+0x2ec>)
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4628      	mov	r0, r5
 8008de0:	47b8      	blx	r7
 8008de2:	3001      	adds	r0, #1
 8008de4:	f43f af51 	beq.w	8008c8a <_printf_float+0xbe>
 8008de8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dec:	429a      	cmp	r2, r3
 8008dee:	db02      	blt.n	8008df6 <_printf_float+0x22a>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	07d8      	lsls	r0, r3, #31
 8008df4:	d510      	bpl.n	8008e18 <_printf_float+0x24c>
 8008df6:	ee18 3a10 	vmov	r3, s16
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4628      	mov	r0, r5
 8008e00:	47b8      	blx	r7
 8008e02:	3001      	adds	r0, #1
 8008e04:	f43f af41 	beq.w	8008c8a <_printf_float+0xbe>
 8008e08:	f04f 0800 	mov.w	r8, #0
 8008e0c:	f104 091a 	add.w	r9, r4, #26
 8008e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e12:	3b01      	subs	r3, #1
 8008e14:	4543      	cmp	r3, r8
 8008e16:	dc09      	bgt.n	8008e2c <_printf_float+0x260>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	079b      	lsls	r3, r3, #30
 8008e1c:	f100 8107 	bmi.w	800902e <_printf_float+0x462>
 8008e20:	68e0      	ldr	r0, [r4, #12]
 8008e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e24:	4298      	cmp	r0, r3
 8008e26:	bfb8      	it	lt
 8008e28:	4618      	movlt	r0, r3
 8008e2a:	e730      	b.n	8008c8e <_printf_float+0xc2>
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	464a      	mov	r2, r9
 8008e30:	4631      	mov	r1, r6
 8008e32:	4628      	mov	r0, r5
 8008e34:	47b8      	blx	r7
 8008e36:	3001      	adds	r0, #1
 8008e38:	f43f af27 	beq.w	8008c8a <_printf_float+0xbe>
 8008e3c:	f108 0801 	add.w	r8, r8, #1
 8008e40:	e7e6      	b.n	8008e10 <_printf_float+0x244>
 8008e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dc39      	bgt.n	8008ebc <_printf_float+0x2f0>
 8008e48:	4a1b      	ldr	r2, [pc, #108]	; (8008eb8 <_printf_float+0x2ec>)
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4631      	mov	r1, r6
 8008e4e:	4628      	mov	r0, r5
 8008e50:	47b8      	blx	r7
 8008e52:	3001      	adds	r0, #1
 8008e54:	f43f af19 	beq.w	8008c8a <_printf_float+0xbe>
 8008e58:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	d102      	bne.n	8008e66 <_printf_float+0x29a>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	07d9      	lsls	r1, r3, #31
 8008e64:	d5d8      	bpl.n	8008e18 <_printf_float+0x24c>
 8008e66:	ee18 3a10 	vmov	r3, s16
 8008e6a:	4652      	mov	r2, sl
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4628      	mov	r0, r5
 8008e70:	47b8      	blx	r7
 8008e72:	3001      	adds	r0, #1
 8008e74:	f43f af09 	beq.w	8008c8a <_printf_float+0xbe>
 8008e78:	f04f 0900 	mov.w	r9, #0
 8008e7c:	f104 0a1a 	add.w	sl, r4, #26
 8008e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e82:	425b      	negs	r3, r3
 8008e84:	454b      	cmp	r3, r9
 8008e86:	dc01      	bgt.n	8008e8c <_printf_float+0x2c0>
 8008e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8a:	e792      	b.n	8008db2 <_printf_float+0x1e6>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	4652      	mov	r2, sl
 8008e90:	4631      	mov	r1, r6
 8008e92:	4628      	mov	r0, r5
 8008e94:	47b8      	blx	r7
 8008e96:	3001      	adds	r0, #1
 8008e98:	f43f aef7 	beq.w	8008c8a <_printf_float+0xbe>
 8008e9c:	f109 0901 	add.w	r9, r9, #1
 8008ea0:	e7ee      	b.n	8008e80 <_printf_float+0x2b4>
 8008ea2:	bf00      	nop
 8008ea4:	7fefffff 	.word	0x7fefffff
 8008ea8:	0800e520 	.word	0x0800e520
 8008eac:	0800e524 	.word	0x0800e524
 8008eb0:	0800e528 	.word	0x0800e528
 8008eb4:	0800e52c 	.word	0x0800e52c
 8008eb8:	0800e530 	.word	0x0800e530
 8008ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ebe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	bfa8      	it	ge
 8008ec4:	461a      	movge	r2, r3
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	4691      	mov	r9, r2
 8008eca:	dc37      	bgt.n	8008f3c <_printf_float+0x370>
 8008ecc:	f04f 0b00 	mov.w	fp, #0
 8008ed0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ed4:	f104 021a 	add.w	r2, r4, #26
 8008ed8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	eba3 0309 	sub.w	r3, r3, r9
 8008ee0:	455b      	cmp	r3, fp
 8008ee2:	dc33      	bgt.n	8008f4c <_printf_float+0x380>
 8008ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	db3b      	blt.n	8008f64 <_printf_float+0x398>
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	07da      	lsls	r2, r3, #31
 8008ef0:	d438      	bmi.n	8008f64 <_printf_float+0x398>
 8008ef2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008ef6:	eba2 0903 	sub.w	r9, r2, r3
 8008efa:	9b05      	ldr	r3, [sp, #20]
 8008efc:	1ad2      	subs	r2, r2, r3
 8008efe:	4591      	cmp	r9, r2
 8008f00:	bfa8      	it	ge
 8008f02:	4691      	movge	r9, r2
 8008f04:	f1b9 0f00 	cmp.w	r9, #0
 8008f08:	dc35      	bgt.n	8008f76 <_printf_float+0x3aa>
 8008f0a:	f04f 0800 	mov.w	r8, #0
 8008f0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f12:	f104 0a1a 	add.w	sl, r4, #26
 8008f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f1a:	1a9b      	subs	r3, r3, r2
 8008f1c:	eba3 0309 	sub.w	r3, r3, r9
 8008f20:	4543      	cmp	r3, r8
 8008f22:	f77f af79 	ble.w	8008e18 <_printf_float+0x24c>
 8008f26:	2301      	movs	r3, #1
 8008f28:	4652      	mov	r2, sl
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b8      	blx	r7
 8008f30:	3001      	adds	r0, #1
 8008f32:	f43f aeaa 	beq.w	8008c8a <_printf_float+0xbe>
 8008f36:	f108 0801 	add.w	r8, r8, #1
 8008f3a:	e7ec      	b.n	8008f16 <_printf_float+0x34a>
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4642      	mov	r2, r8
 8008f42:	4628      	mov	r0, r5
 8008f44:	47b8      	blx	r7
 8008f46:	3001      	adds	r0, #1
 8008f48:	d1c0      	bne.n	8008ecc <_printf_float+0x300>
 8008f4a:	e69e      	b.n	8008c8a <_printf_float+0xbe>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4628      	mov	r0, r5
 8008f52:	9205      	str	r2, [sp, #20]
 8008f54:	47b8      	blx	r7
 8008f56:	3001      	adds	r0, #1
 8008f58:	f43f ae97 	beq.w	8008c8a <_printf_float+0xbe>
 8008f5c:	9a05      	ldr	r2, [sp, #20]
 8008f5e:	f10b 0b01 	add.w	fp, fp, #1
 8008f62:	e7b9      	b.n	8008ed8 <_printf_float+0x30c>
 8008f64:	ee18 3a10 	vmov	r3, s16
 8008f68:	4652      	mov	r2, sl
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	d1be      	bne.n	8008ef2 <_printf_float+0x326>
 8008f74:	e689      	b.n	8008c8a <_printf_float+0xbe>
 8008f76:	9a05      	ldr	r2, [sp, #20]
 8008f78:	464b      	mov	r3, r9
 8008f7a:	4442      	add	r2, r8
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4628      	mov	r0, r5
 8008f80:	47b8      	blx	r7
 8008f82:	3001      	adds	r0, #1
 8008f84:	d1c1      	bne.n	8008f0a <_printf_float+0x33e>
 8008f86:	e680      	b.n	8008c8a <_printf_float+0xbe>
 8008f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f8a:	2a01      	cmp	r2, #1
 8008f8c:	dc01      	bgt.n	8008f92 <_printf_float+0x3c6>
 8008f8e:	07db      	lsls	r3, r3, #31
 8008f90:	d53a      	bpl.n	8009008 <_printf_float+0x43c>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4642      	mov	r2, r8
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f43f ae74 	beq.w	8008c8a <_printf_float+0xbe>
 8008fa2:	ee18 3a10 	vmov	r3, s16
 8008fa6:	4652      	mov	r2, sl
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	47b8      	blx	r7
 8008fae:	3001      	adds	r0, #1
 8008fb0:	f43f ae6b 	beq.w	8008c8a <_printf_float+0xbe>
 8008fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008fc0:	f7f7 fd82 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fc4:	b9d8      	cbnz	r0, 8008ffe <_printf_float+0x432>
 8008fc6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008fca:	f108 0201 	add.w	r2, r8, #1
 8008fce:	4631      	mov	r1, r6
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b8      	blx	r7
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d10e      	bne.n	8008ff6 <_printf_float+0x42a>
 8008fd8:	e657      	b.n	8008c8a <_printf_float+0xbe>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4652      	mov	r2, sl
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	47b8      	blx	r7
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	f43f ae50 	beq.w	8008c8a <_printf_float+0xbe>
 8008fea:	f108 0801 	add.w	r8, r8, #1
 8008fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	4543      	cmp	r3, r8
 8008ff4:	dcf1      	bgt.n	8008fda <_printf_float+0x40e>
 8008ff6:	464b      	mov	r3, r9
 8008ff8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ffc:	e6da      	b.n	8008db4 <_printf_float+0x1e8>
 8008ffe:	f04f 0800 	mov.w	r8, #0
 8009002:	f104 0a1a 	add.w	sl, r4, #26
 8009006:	e7f2      	b.n	8008fee <_printf_float+0x422>
 8009008:	2301      	movs	r3, #1
 800900a:	4642      	mov	r2, r8
 800900c:	e7df      	b.n	8008fce <_printf_float+0x402>
 800900e:	2301      	movs	r3, #1
 8009010:	464a      	mov	r2, r9
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	f43f ae36 	beq.w	8008c8a <_printf_float+0xbe>
 800901e:	f108 0801 	add.w	r8, r8, #1
 8009022:	68e3      	ldr	r3, [r4, #12]
 8009024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009026:	1a5b      	subs	r3, r3, r1
 8009028:	4543      	cmp	r3, r8
 800902a:	dcf0      	bgt.n	800900e <_printf_float+0x442>
 800902c:	e6f8      	b.n	8008e20 <_printf_float+0x254>
 800902e:	f04f 0800 	mov.w	r8, #0
 8009032:	f104 0919 	add.w	r9, r4, #25
 8009036:	e7f4      	b.n	8009022 <_printf_float+0x456>

08009038 <_printf_common>:
 8009038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800903c:	4616      	mov	r6, r2
 800903e:	4699      	mov	r9, r3
 8009040:	688a      	ldr	r2, [r1, #8]
 8009042:	690b      	ldr	r3, [r1, #16]
 8009044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009048:	4293      	cmp	r3, r2
 800904a:	bfb8      	it	lt
 800904c:	4613      	movlt	r3, r2
 800904e:	6033      	str	r3, [r6, #0]
 8009050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009054:	4607      	mov	r7, r0
 8009056:	460c      	mov	r4, r1
 8009058:	b10a      	cbz	r2, 800905e <_printf_common+0x26>
 800905a:	3301      	adds	r3, #1
 800905c:	6033      	str	r3, [r6, #0]
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	0699      	lsls	r1, r3, #26
 8009062:	bf42      	ittt	mi
 8009064:	6833      	ldrmi	r3, [r6, #0]
 8009066:	3302      	addmi	r3, #2
 8009068:	6033      	strmi	r3, [r6, #0]
 800906a:	6825      	ldr	r5, [r4, #0]
 800906c:	f015 0506 	ands.w	r5, r5, #6
 8009070:	d106      	bne.n	8009080 <_printf_common+0x48>
 8009072:	f104 0a19 	add.w	sl, r4, #25
 8009076:	68e3      	ldr	r3, [r4, #12]
 8009078:	6832      	ldr	r2, [r6, #0]
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	42ab      	cmp	r3, r5
 800907e:	dc26      	bgt.n	80090ce <_printf_common+0x96>
 8009080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009084:	1e13      	subs	r3, r2, #0
 8009086:	6822      	ldr	r2, [r4, #0]
 8009088:	bf18      	it	ne
 800908a:	2301      	movne	r3, #1
 800908c:	0692      	lsls	r2, r2, #26
 800908e:	d42b      	bmi.n	80090e8 <_printf_common+0xb0>
 8009090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009094:	4649      	mov	r1, r9
 8009096:	4638      	mov	r0, r7
 8009098:	47c0      	blx	r8
 800909a:	3001      	adds	r0, #1
 800909c:	d01e      	beq.n	80090dc <_printf_common+0xa4>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	6922      	ldr	r2, [r4, #16]
 80090a2:	f003 0306 	and.w	r3, r3, #6
 80090a6:	2b04      	cmp	r3, #4
 80090a8:	bf02      	ittt	eq
 80090aa:	68e5      	ldreq	r5, [r4, #12]
 80090ac:	6833      	ldreq	r3, [r6, #0]
 80090ae:	1aed      	subeq	r5, r5, r3
 80090b0:	68a3      	ldr	r3, [r4, #8]
 80090b2:	bf0c      	ite	eq
 80090b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090b8:	2500      	movne	r5, #0
 80090ba:	4293      	cmp	r3, r2
 80090bc:	bfc4      	itt	gt
 80090be:	1a9b      	subgt	r3, r3, r2
 80090c0:	18ed      	addgt	r5, r5, r3
 80090c2:	2600      	movs	r6, #0
 80090c4:	341a      	adds	r4, #26
 80090c6:	42b5      	cmp	r5, r6
 80090c8:	d11a      	bne.n	8009100 <_printf_common+0xc8>
 80090ca:	2000      	movs	r0, #0
 80090cc:	e008      	b.n	80090e0 <_printf_common+0xa8>
 80090ce:	2301      	movs	r3, #1
 80090d0:	4652      	mov	r2, sl
 80090d2:	4649      	mov	r1, r9
 80090d4:	4638      	mov	r0, r7
 80090d6:	47c0      	blx	r8
 80090d8:	3001      	adds	r0, #1
 80090da:	d103      	bne.n	80090e4 <_printf_common+0xac>
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e4:	3501      	adds	r5, #1
 80090e6:	e7c6      	b.n	8009076 <_printf_common+0x3e>
 80090e8:	18e1      	adds	r1, r4, r3
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	2030      	movs	r0, #48	; 0x30
 80090ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090f2:	4422      	add	r2, r4
 80090f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090fc:	3302      	adds	r3, #2
 80090fe:	e7c7      	b.n	8009090 <_printf_common+0x58>
 8009100:	2301      	movs	r3, #1
 8009102:	4622      	mov	r2, r4
 8009104:	4649      	mov	r1, r9
 8009106:	4638      	mov	r0, r7
 8009108:	47c0      	blx	r8
 800910a:	3001      	adds	r0, #1
 800910c:	d0e6      	beq.n	80090dc <_printf_common+0xa4>
 800910e:	3601      	adds	r6, #1
 8009110:	e7d9      	b.n	80090c6 <_printf_common+0x8e>
	...

08009114 <_printf_i>:
 8009114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009118:	7e0f      	ldrb	r7, [r1, #24]
 800911a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800911c:	2f78      	cmp	r7, #120	; 0x78
 800911e:	4691      	mov	r9, r2
 8009120:	4680      	mov	r8, r0
 8009122:	460c      	mov	r4, r1
 8009124:	469a      	mov	sl, r3
 8009126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800912a:	d807      	bhi.n	800913c <_printf_i+0x28>
 800912c:	2f62      	cmp	r7, #98	; 0x62
 800912e:	d80a      	bhi.n	8009146 <_printf_i+0x32>
 8009130:	2f00      	cmp	r7, #0
 8009132:	f000 80d4 	beq.w	80092de <_printf_i+0x1ca>
 8009136:	2f58      	cmp	r7, #88	; 0x58
 8009138:	f000 80c0 	beq.w	80092bc <_printf_i+0x1a8>
 800913c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009144:	e03a      	b.n	80091bc <_printf_i+0xa8>
 8009146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800914a:	2b15      	cmp	r3, #21
 800914c:	d8f6      	bhi.n	800913c <_printf_i+0x28>
 800914e:	a101      	add	r1, pc, #4	; (adr r1, 8009154 <_printf_i+0x40>)
 8009150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009154:	080091ad 	.word	0x080091ad
 8009158:	080091c1 	.word	0x080091c1
 800915c:	0800913d 	.word	0x0800913d
 8009160:	0800913d 	.word	0x0800913d
 8009164:	0800913d 	.word	0x0800913d
 8009168:	0800913d 	.word	0x0800913d
 800916c:	080091c1 	.word	0x080091c1
 8009170:	0800913d 	.word	0x0800913d
 8009174:	0800913d 	.word	0x0800913d
 8009178:	0800913d 	.word	0x0800913d
 800917c:	0800913d 	.word	0x0800913d
 8009180:	080092c5 	.word	0x080092c5
 8009184:	080091ed 	.word	0x080091ed
 8009188:	0800927f 	.word	0x0800927f
 800918c:	0800913d 	.word	0x0800913d
 8009190:	0800913d 	.word	0x0800913d
 8009194:	080092e7 	.word	0x080092e7
 8009198:	0800913d 	.word	0x0800913d
 800919c:	080091ed 	.word	0x080091ed
 80091a0:	0800913d 	.word	0x0800913d
 80091a4:	0800913d 	.word	0x0800913d
 80091a8:	08009287 	.word	0x08009287
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	1d1a      	adds	r2, r3, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	602a      	str	r2, [r5, #0]
 80091b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091bc:	2301      	movs	r3, #1
 80091be:	e09f      	b.n	8009300 <_printf_i+0x1ec>
 80091c0:	6820      	ldr	r0, [r4, #0]
 80091c2:	682b      	ldr	r3, [r5, #0]
 80091c4:	0607      	lsls	r7, r0, #24
 80091c6:	f103 0104 	add.w	r1, r3, #4
 80091ca:	6029      	str	r1, [r5, #0]
 80091cc:	d501      	bpl.n	80091d2 <_printf_i+0xbe>
 80091ce:	681e      	ldr	r6, [r3, #0]
 80091d0:	e003      	b.n	80091da <_printf_i+0xc6>
 80091d2:	0646      	lsls	r6, r0, #25
 80091d4:	d5fb      	bpl.n	80091ce <_printf_i+0xba>
 80091d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091da:	2e00      	cmp	r6, #0
 80091dc:	da03      	bge.n	80091e6 <_printf_i+0xd2>
 80091de:	232d      	movs	r3, #45	; 0x2d
 80091e0:	4276      	negs	r6, r6
 80091e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091e6:	485a      	ldr	r0, [pc, #360]	; (8009350 <_printf_i+0x23c>)
 80091e8:	230a      	movs	r3, #10
 80091ea:	e012      	b.n	8009212 <_printf_i+0xfe>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	6820      	ldr	r0, [r4, #0]
 80091f0:	1d19      	adds	r1, r3, #4
 80091f2:	6029      	str	r1, [r5, #0]
 80091f4:	0605      	lsls	r5, r0, #24
 80091f6:	d501      	bpl.n	80091fc <_printf_i+0xe8>
 80091f8:	681e      	ldr	r6, [r3, #0]
 80091fa:	e002      	b.n	8009202 <_printf_i+0xee>
 80091fc:	0641      	lsls	r1, r0, #25
 80091fe:	d5fb      	bpl.n	80091f8 <_printf_i+0xe4>
 8009200:	881e      	ldrh	r6, [r3, #0]
 8009202:	4853      	ldr	r0, [pc, #332]	; (8009350 <_printf_i+0x23c>)
 8009204:	2f6f      	cmp	r7, #111	; 0x6f
 8009206:	bf0c      	ite	eq
 8009208:	2308      	moveq	r3, #8
 800920a:	230a      	movne	r3, #10
 800920c:	2100      	movs	r1, #0
 800920e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009212:	6865      	ldr	r5, [r4, #4]
 8009214:	60a5      	str	r5, [r4, #8]
 8009216:	2d00      	cmp	r5, #0
 8009218:	bfa2      	ittt	ge
 800921a:	6821      	ldrge	r1, [r4, #0]
 800921c:	f021 0104 	bicge.w	r1, r1, #4
 8009220:	6021      	strge	r1, [r4, #0]
 8009222:	b90e      	cbnz	r6, 8009228 <_printf_i+0x114>
 8009224:	2d00      	cmp	r5, #0
 8009226:	d04b      	beq.n	80092c0 <_printf_i+0x1ac>
 8009228:	4615      	mov	r5, r2
 800922a:	fbb6 f1f3 	udiv	r1, r6, r3
 800922e:	fb03 6711 	mls	r7, r3, r1, r6
 8009232:	5dc7      	ldrb	r7, [r0, r7]
 8009234:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009238:	4637      	mov	r7, r6
 800923a:	42bb      	cmp	r3, r7
 800923c:	460e      	mov	r6, r1
 800923e:	d9f4      	bls.n	800922a <_printf_i+0x116>
 8009240:	2b08      	cmp	r3, #8
 8009242:	d10b      	bne.n	800925c <_printf_i+0x148>
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	07de      	lsls	r6, r3, #31
 8009248:	d508      	bpl.n	800925c <_printf_i+0x148>
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	6861      	ldr	r1, [r4, #4]
 800924e:	4299      	cmp	r1, r3
 8009250:	bfde      	ittt	le
 8009252:	2330      	movle	r3, #48	; 0x30
 8009254:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009258:	f105 35ff 	addle.w	r5, r5, #4294967295
 800925c:	1b52      	subs	r2, r2, r5
 800925e:	6122      	str	r2, [r4, #16]
 8009260:	f8cd a000 	str.w	sl, [sp]
 8009264:	464b      	mov	r3, r9
 8009266:	aa03      	add	r2, sp, #12
 8009268:	4621      	mov	r1, r4
 800926a:	4640      	mov	r0, r8
 800926c:	f7ff fee4 	bl	8009038 <_printf_common>
 8009270:	3001      	adds	r0, #1
 8009272:	d14a      	bne.n	800930a <_printf_i+0x1f6>
 8009274:	f04f 30ff 	mov.w	r0, #4294967295
 8009278:	b004      	add	sp, #16
 800927a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	f043 0320 	orr.w	r3, r3, #32
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	4833      	ldr	r0, [pc, #204]	; (8009354 <_printf_i+0x240>)
 8009288:	2778      	movs	r7, #120	; 0x78
 800928a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	6829      	ldr	r1, [r5, #0]
 8009292:	061f      	lsls	r7, r3, #24
 8009294:	f851 6b04 	ldr.w	r6, [r1], #4
 8009298:	d402      	bmi.n	80092a0 <_printf_i+0x18c>
 800929a:	065f      	lsls	r7, r3, #25
 800929c:	bf48      	it	mi
 800929e:	b2b6      	uxthmi	r6, r6
 80092a0:	07df      	lsls	r7, r3, #31
 80092a2:	bf48      	it	mi
 80092a4:	f043 0320 	orrmi.w	r3, r3, #32
 80092a8:	6029      	str	r1, [r5, #0]
 80092aa:	bf48      	it	mi
 80092ac:	6023      	strmi	r3, [r4, #0]
 80092ae:	b91e      	cbnz	r6, 80092b8 <_printf_i+0x1a4>
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	f023 0320 	bic.w	r3, r3, #32
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	2310      	movs	r3, #16
 80092ba:	e7a7      	b.n	800920c <_printf_i+0xf8>
 80092bc:	4824      	ldr	r0, [pc, #144]	; (8009350 <_printf_i+0x23c>)
 80092be:	e7e4      	b.n	800928a <_printf_i+0x176>
 80092c0:	4615      	mov	r5, r2
 80092c2:	e7bd      	b.n	8009240 <_printf_i+0x12c>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	6826      	ldr	r6, [r4, #0]
 80092c8:	6961      	ldr	r1, [r4, #20]
 80092ca:	1d18      	adds	r0, r3, #4
 80092cc:	6028      	str	r0, [r5, #0]
 80092ce:	0635      	lsls	r5, r6, #24
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	d501      	bpl.n	80092d8 <_printf_i+0x1c4>
 80092d4:	6019      	str	r1, [r3, #0]
 80092d6:	e002      	b.n	80092de <_printf_i+0x1ca>
 80092d8:	0670      	lsls	r0, r6, #25
 80092da:	d5fb      	bpl.n	80092d4 <_printf_i+0x1c0>
 80092dc:	8019      	strh	r1, [r3, #0]
 80092de:	2300      	movs	r3, #0
 80092e0:	6123      	str	r3, [r4, #16]
 80092e2:	4615      	mov	r5, r2
 80092e4:	e7bc      	b.n	8009260 <_printf_i+0x14c>
 80092e6:	682b      	ldr	r3, [r5, #0]
 80092e8:	1d1a      	adds	r2, r3, #4
 80092ea:	602a      	str	r2, [r5, #0]
 80092ec:	681d      	ldr	r5, [r3, #0]
 80092ee:	6862      	ldr	r2, [r4, #4]
 80092f0:	2100      	movs	r1, #0
 80092f2:	4628      	mov	r0, r5
 80092f4:	f7f6 ff6c 	bl	80001d0 <memchr>
 80092f8:	b108      	cbz	r0, 80092fe <_printf_i+0x1ea>
 80092fa:	1b40      	subs	r0, r0, r5
 80092fc:	6060      	str	r0, [r4, #4]
 80092fe:	6863      	ldr	r3, [r4, #4]
 8009300:	6123      	str	r3, [r4, #16]
 8009302:	2300      	movs	r3, #0
 8009304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009308:	e7aa      	b.n	8009260 <_printf_i+0x14c>
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	462a      	mov	r2, r5
 800930e:	4649      	mov	r1, r9
 8009310:	4640      	mov	r0, r8
 8009312:	47d0      	blx	sl
 8009314:	3001      	adds	r0, #1
 8009316:	d0ad      	beq.n	8009274 <_printf_i+0x160>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	079b      	lsls	r3, r3, #30
 800931c:	d413      	bmi.n	8009346 <_printf_i+0x232>
 800931e:	68e0      	ldr	r0, [r4, #12]
 8009320:	9b03      	ldr	r3, [sp, #12]
 8009322:	4298      	cmp	r0, r3
 8009324:	bfb8      	it	lt
 8009326:	4618      	movlt	r0, r3
 8009328:	e7a6      	b.n	8009278 <_printf_i+0x164>
 800932a:	2301      	movs	r3, #1
 800932c:	4632      	mov	r2, r6
 800932e:	4649      	mov	r1, r9
 8009330:	4640      	mov	r0, r8
 8009332:	47d0      	blx	sl
 8009334:	3001      	adds	r0, #1
 8009336:	d09d      	beq.n	8009274 <_printf_i+0x160>
 8009338:	3501      	adds	r5, #1
 800933a:	68e3      	ldr	r3, [r4, #12]
 800933c:	9903      	ldr	r1, [sp, #12]
 800933e:	1a5b      	subs	r3, r3, r1
 8009340:	42ab      	cmp	r3, r5
 8009342:	dcf2      	bgt.n	800932a <_printf_i+0x216>
 8009344:	e7eb      	b.n	800931e <_printf_i+0x20a>
 8009346:	2500      	movs	r5, #0
 8009348:	f104 0619 	add.w	r6, r4, #25
 800934c:	e7f5      	b.n	800933a <_printf_i+0x226>
 800934e:	bf00      	nop
 8009350:	0800e532 	.word	0x0800e532
 8009354:	0800e543 	.word	0x0800e543

08009358 <_scanf_float>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	b087      	sub	sp, #28
 800935e:	4617      	mov	r7, r2
 8009360:	9303      	str	r3, [sp, #12]
 8009362:	688b      	ldr	r3, [r1, #8]
 8009364:	1e5a      	subs	r2, r3, #1
 8009366:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800936a:	bf83      	ittte	hi
 800936c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009370:	195b      	addhi	r3, r3, r5
 8009372:	9302      	strhi	r3, [sp, #8]
 8009374:	2300      	movls	r3, #0
 8009376:	bf86      	itte	hi
 8009378:	f240 135d 	movwhi	r3, #349	; 0x15d
 800937c:	608b      	strhi	r3, [r1, #8]
 800937e:	9302      	strls	r3, [sp, #8]
 8009380:	680b      	ldr	r3, [r1, #0]
 8009382:	468b      	mov	fp, r1
 8009384:	2500      	movs	r5, #0
 8009386:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800938a:	f84b 3b1c 	str.w	r3, [fp], #28
 800938e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009392:	4680      	mov	r8, r0
 8009394:	460c      	mov	r4, r1
 8009396:	465e      	mov	r6, fp
 8009398:	46aa      	mov	sl, r5
 800939a:	46a9      	mov	r9, r5
 800939c:	9501      	str	r5, [sp, #4]
 800939e:	68a2      	ldr	r2, [r4, #8]
 80093a0:	b152      	cbz	r2, 80093b8 <_scanf_float+0x60>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b4e      	cmp	r3, #78	; 0x4e
 80093a8:	d864      	bhi.n	8009474 <_scanf_float+0x11c>
 80093aa:	2b40      	cmp	r3, #64	; 0x40
 80093ac:	d83c      	bhi.n	8009428 <_scanf_float+0xd0>
 80093ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80093b2:	b2c8      	uxtb	r0, r1
 80093b4:	280e      	cmp	r0, #14
 80093b6:	d93a      	bls.n	800942e <_scanf_float+0xd6>
 80093b8:	f1b9 0f00 	cmp.w	r9, #0
 80093bc:	d003      	beq.n	80093c6 <_scanf_float+0x6e>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c4:	6023      	str	r3, [r4, #0]
 80093c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093ca:	f1ba 0f01 	cmp.w	sl, #1
 80093ce:	f200 8113 	bhi.w	80095f8 <_scanf_float+0x2a0>
 80093d2:	455e      	cmp	r6, fp
 80093d4:	f200 8105 	bhi.w	80095e2 <_scanf_float+0x28a>
 80093d8:	2501      	movs	r5, #1
 80093da:	4628      	mov	r0, r5
 80093dc:	b007      	add	sp, #28
 80093de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80093e6:	2a0d      	cmp	r2, #13
 80093e8:	d8e6      	bhi.n	80093b8 <_scanf_float+0x60>
 80093ea:	a101      	add	r1, pc, #4	; (adr r1, 80093f0 <_scanf_float+0x98>)
 80093ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093f0:	0800952f 	.word	0x0800952f
 80093f4:	080093b9 	.word	0x080093b9
 80093f8:	080093b9 	.word	0x080093b9
 80093fc:	080093b9 	.word	0x080093b9
 8009400:	0800958f 	.word	0x0800958f
 8009404:	08009567 	.word	0x08009567
 8009408:	080093b9 	.word	0x080093b9
 800940c:	080093b9 	.word	0x080093b9
 8009410:	0800953d 	.word	0x0800953d
 8009414:	080093b9 	.word	0x080093b9
 8009418:	080093b9 	.word	0x080093b9
 800941c:	080093b9 	.word	0x080093b9
 8009420:	080093b9 	.word	0x080093b9
 8009424:	080094f5 	.word	0x080094f5
 8009428:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800942c:	e7db      	b.n	80093e6 <_scanf_float+0x8e>
 800942e:	290e      	cmp	r1, #14
 8009430:	d8c2      	bhi.n	80093b8 <_scanf_float+0x60>
 8009432:	a001      	add	r0, pc, #4	; (adr r0, 8009438 <_scanf_float+0xe0>)
 8009434:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009438:	080094e7 	.word	0x080094e7
 800943c:	080093b9 	.word	0x080093b9
 8009440:	080094e7 	.word	0x080094e7
 8009444:	0800957b 	.word	0x0800957b
 8009448:	080093b9 	.word	0x080093b9
 800944c:	08009495 	.word	0x08009495
 8009450:	080094d1 	.word	0x080094d1
 8009454:	080094d1 	.word	0x080094d1
 8009458:	080094d1 	.word	0x080094d1
 800945c:	080094d1 	.word	0x080094d1
 8009460:	080094d1 	.word	0x080094d1
 8009464:	080094d1 	.word	0x080094d1
 8009468:	080094d1 	.word	0x080094d1
 800946c:	080094d1 	.word	0x080094d1
 8009470:	080094d1 	.word	0x080094d1
 8009474:	2b6e      	cmp	r3, #110	; 0x6e
 8009476:	d809      	bhi.n	800948c <_scanf_float+0x134>
 8009478:	2b60      	cmp	r3, #96	; 0x60
 800947a:	d8b2      	bhi.n	80093e2 <_scanf_float+0x8a>
 800947c:	2b54      	cmp	r3, #84	; 0x54
 800947e:	d077      	beq.n	8009570 <_scanf_float+0x218>
 8009480:	2b59      	cmp	r3, #89	; 0x59
 8009482:	d199      	bne.n	80093b8 <_scanf_float+0x60>
 8009484:	2d07      	cmp	r5, #7
 8009486:	d197      	bne.n	80093b8 <_scanf_float+0x60>
 8009488:	2508      	movs	r5, #8
 800948a:	e029      	b.n	80094e0 <_scanf_float+0x188>
 800948c:	2b74      	cmp	r3, #116	; 0x74
 800948e:	d06f      	beq.n	8009570 <_scanf_float+0x218>
 8009490:	2b79      	cmp	r3, #121	; 0x79
 8009492:	e7f6      	b.n	8009482 <_scanf_float+0x12a>
 8009494:	6821      	ldr	r1, [r4, #0]
 8009496:	05c8      	lsls	r0, r1, #23
 8009498:	d51a      	bpl.n	80094d0 <_scanf_float+0x178>
 800949a:	9b02      	ldr	r3, [sp, #8]
 800949c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80094a0:	6021      	str	r1, [r4, #0]
 80094a2:	f109 0901 	add.w	r9, r9, #1
 80094a6:	b11b      	cbz	r3, 80094b0 <_scanf_float+0x158>
 80094a8:	3b01      	subs	r3, #1
 80094aa:	3201      	adds	r2, #1
 80094ac:	9302      	str	r3, [sp, #8]
 80094ae:	60a2      	str	r2, [r4, #8]
 80094b0:	68a3      	ldr	r3, [r4, #8]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	60a3      	str	r3, [r4, #8]
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	3301      	adds	r3, #1
 80094ba:	6123      	str	r3, [r4, #16]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3b01      	subs	r3, #1
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	607b      	str	r3, [r7, #4]
 80094c4:	f340 8084 	ble.w	80095d0 <_scanf_float+0x278>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	3301      	adds	r3, #1
 80094cc:	603b      	str	r3, [r7, #0]
 80094ce:	e766      	b.n	800939e <_scanf_float+0x46>
 80094d0:	eb1a 0f05 	cmn.w	sl, r5
 80094d4:	f47f af70 	bne.w	80093b8 <_scanf_float+0x60>
 80094d8:	6822      	ldr	r2, [r4, #0]
 80094da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80094de:	6022      	str	r2, [r4, #0]
 80094e0:	f806 3b01 	strb.w	r3, [r6], #1
 80094e4:	e7e4      	b.n	80094b0 <_scanf_float+0x158>
 80094e6:	6822      	ldr	r2, [r4, #0]
 80094e8:	0610      	lsls	r0, r2, #24
 80094ea:	f57f af65 	bpl.w	80093b8 <_scanf_float+0x60>
 80094ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094f2:	e7f4      	b.n	80094de <_scanf_float+0x186>
 80094f4:	f1ba 0f00 	cmp.w	sl, #0
 80094f8:	d10e      	bne.n	8009518 <_scanf_float+0x1c0>
 80094fa:	f1b9 0f00 	cmp.w	r9, #0
 80094fe:	d10e      	bne.n	800951e <_scanf_float+0x1c6>
 8009500:	6822      	ldr	r2, [r4, #0]
 8009502:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009506:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800950a:	d108      	bne.n	800951e <_scanf_float+0x1c6>
 800950c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009510:	6022      	str	r2, [r4, #0]
 8009512:	f04f 0a01 	mov.w	sl, #1
 8009516:	e7e3      	b.n	80094e0 <_scanf_float+0x188>
 8009518:	f1ba 0f02 	cmp.w	sl, #2
 800951c:	d055      	beq.n	80095ca <_scanf_float+0x272>
 800951e:	2d01      	cmp	r5, #1
 8009520:	d002      	beq.n	8009528 <_scanf_float+0x1d0>
 8009522:	2d04      	cmp	r5, #4
 8009524:	f47f af48 	bne.w	80093b8 <_scanf_float+0x60>
 8009528:	3501      	adds	r5, #1
 800952a:	b2ed      	uxtb	r5, r5
 800952c:	e7d8      	b.n	80094e0 <_scanf_float+0x188>
 800952e:	f1ba 0f01 	cmp.w	sl, #1
 8009532:	f47f af41 	bne.w	80093b8 <_scanf_float+0x60>
 8009536:	f04f 0a02 	mov.w	sl, #2
 800953a:	e7d1      	b.n	80094e0 <_scanf_float+0x188>
 800953c:	b97d      	cbnz	r5, 800955e <_scanf_float+0x206>
 800953e:	f1b9 0f00 	cmp.w	r9, #0
 8009542:	f47f af3c 	bne.w	80093be <_scanf_float+0x66>
 8009546:	6822      	ldr	r2, [r4, #0]
 8009548:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800954c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009550:	f47f af39 	bne.w	80093c6 <_scanf_float+0x6e>
 8009554:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009558:	6022      	str	r2, [r4, #0]
 800955a:	2501      	movs	r5, #1
 800955c:	e7c0      	b.n	80094e0 <_scanf_float+0x188>
 800955e:	2d03      	cmp	r5, #3
 8009560:	d0e2      	beq.n	8009528 <_scanf_float+0x1d0>
 8009562:	2d05      	cmp	r5, #5
 8009564:	e7de      	b.n	8009524 <_scanf_float+0x1cc>
 8009566:	2d02      	cmp	r5, #2
 8009568:	f47f af26 	bne.w	80093b8 <_scanf_float+0x60>
 800956c:	2503      	movs	r5, #3
 800956e:	e7b7      	b.n	80094e0 <_scanf_float+0x188>
 8009570:	2d06      	cmp	r5, #6
 8009572:	f47f af21 	bne.w	80093b8 <_scanf_float+0x60>
 8009576:	2507      	movs	r5, #7
 8009578:	e7b2      	b.n	80094e0 <_scanf_float+0x188>
 800957a:	6822      	ldr	r2, [r4, #0]
 800957c:	0591      	lsls	r1, r2, #22
 800957e:	f57f af1b 	bpl.w	80093b8 <_scanf_float+0x60>
 8009582:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009586:	6022      	str	r2, [r4, #0]
 8009588:	f8cd 9004 	str.w	r9, [sp, #4]
 800958c:	e7a8      	b.n	80094e0 <_scanf_float+0x188>
 800958e:	6822      	ldr	r2, [r4, #0]
 8009590:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009594:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009598:	d006      	beq.n	80095a8 <_scanf_float+0x250>
 800959a:	0550      	lsls	r0, r2, #21
 800959c:	f57f af0c 	bpl.w	80093b8 <_scanf_float+0x60>
 80095a0:	f1b9 0f00 	cmp.w	r9, #0
 80095a4:	f43f af0f 	beq.w	80093c6 <_scanf_float+0x6e>
 80095a8:	0591      	lsls	r1, r2, #22
 80095aa:	bf58      	it	pl
 80095ac:	9901      	ldrpl	r1, [sp, #4]
 80095ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80095b2:	bf58      	it	pl
 80095b4:	eba9 0101 	subpl.w	r1, r9, r1
 80095b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80095bc:	bf58      	it	pl
 80095be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80095c2:	6022      	str	r2, [r4, #0]
 80095c4:	f04f 0900 	mov.w	r9, #0
 80095c8:	e78a      	b.n	80094e0 <_scanf_float+0x188>
 80095ca:	f04f 0a03 	mov.w	sl, #3
 80095ce:	e787      	b.n	80094e0 <_scanf_float+0x188>
 80095d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80095d4:	4639      	mov	r1, r7
 80095d6:	4640      	mov	r0, r8
 80095d8:	4798      	blx	r3
 80095da:	2800      	cmp	r0, #0
 80095dc:	f43f aedf 	beq.w	800939e <_scanf_float+0x46>
 80095e0:	e6ea      	b.n	80093b8 <_scanf_float+0x60>
 80095e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80095e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095ea:	463a      	mov	r2, r7
 80095ec:	4640      	mov	r0, r8
 80095ee:	4798      	blx	r3
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	e6ec      	b.n	80093d2 <_scanf_float+0x7a>
 80095f8:	1e6b      	subs	r3, r5, #1
 80095fa:	2b06      	cmp	r3, #6
 80095fc:	d825      	bhi.n	800964a <_scanf_float+0x2f2>
 80095fe:	2d02      	cmp	r5, #2
 8009600:	d836      	bhi.n	8009670 <_scanf_float+0x318>
 8009602:	455e      	cmp	r6, fp
 8009604:	f67f aee8 	bls.w	80093d8 <_scanf_float+0x80>
 8009608:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800960c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009610:	463a      	mov	r2, r7
 8009612:	4640      	mov	r0, r8
 8009614:	4798      	blx	r3
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	3b01      	subs	r3, #1
 800961a:	6123      	str	r3, [r4, #16]
 800961c:	e7f1      	b.n	8009602 <_scanf_float+0x2aa>
 800961e:	9802      	ldr	r0, [sp, #8]
 8009620:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009624:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009628:	9002      	str	r0, [sp, #8]
 800962a:	463a      	mov	r2, r7
 800962c:	4640      	mov	r0, r8
 800962e:	4798      	blx	r3
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	3b01      	subs	r3, #1
 8009634:	6123      	str	r3, [r4, #16]
 8009636:	f10a 3aff 	add.w	sl, sl, #4294967295
 800963a:	fa5f fa8a 	uxtb.w	sl, sl
 800963e:	f1ba 0f02 	cmp.w	sl, #2
 8009642:	d1ec      	bne.n	800961e <_scanf_float+0x2c6>
 8009644:	3d03      	subs	r5, #3
 8009646:	b2ed      	uxtb	r5, r5
 8009648:	1b76      	subs	r6, r6, r5
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	05da      	lsls	r2, r3, #23
 800964e:	d52f      	bpl.n	80096b0 <_scanf_float+0x358>
 8009650:	055b      	lsls	r3, r3, #21
 8009652:	d510      	bpl.n	8009676 <_scanf_float+0x31e>
 8009654:	455e      	cmp	r6, fp
 8009656:	f67f aebf 	bls.w	80093d8 <_scanf_float+0x80>
 800965a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800965e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009662:	463a      	mov	r2, r7
 8009664:	4640      	mov	r0, r8
 8009666:	4798      	blx	r3
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	3b01      	subs	r3, #1
 800966c:	6123      	str	r3, [r4, #16]
 800966e:	e7f1      	b.n	8009654 <_scanf_float+0x2fc>
 8009670:	46aa      	mov	sl, r5
 8009672:	9602      	str	r6, [sp, #8]
 8009674:	e7df      	b.n	8009636 <_scanf_float+0x2de>
 8009676:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	2965      	cmp	r1, #101	; 0x65
 800967e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009682:	f106 35ff 	add.w	r5, r6, #4294967295
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	d00c      	beq.n	80096a4 <_scanf_float+0x34c>
 800968a:	2945      	cmp	r1, #69	; 0x45
 800968c:	d00a      	beq.n	80096a4 <_scanf_float+0x34c>
 800968e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009692:	463a      	mov	r2, r7
 8009694:	4640      	mov	r0, r8
 8009696:	4798      	blx	r3
 8009698:	6923      	ldr	r3, [r4, #16]
 800969a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800969e:	3b01      	subs	r3, #1
 80096a0:	1eb5      	subs	r5, r6, #2
 80096a2:	6123      	str	r3, [r4, #16]
 80096a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096a8:	463a      	mov	r2, r7
 80096aa:	4640      	mov	r0, r8
 80096ac:	4798      	blx	r3
 80096ae:	462e      	mov	r6, r5
 80096b0:	6825      	ldr	r5, [r4, #0]
 80096b2:	f015 0510 	ands.w	r5, r5, #16
 80096b6:	d158      	bne.n	800976a <_scanf_float+0x412>
 80096b8:	7035      	strb	r5, [r6, #0]
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80096c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096c4:	d11c      	bne.n	8009700 <_scanf_float+0x3a8>
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	454b      	cmp	r3, r9
 80096ca:	eba3 0209 	sub.w	r2, r3, r9
 80096ce:	d124      	bne.n	800971a <_scanf_float+0x3c2>
 80096d0:	2200      	movs	r2, #0
 80096d2:	4659      	mov	r1, fp
 80096d4:	4640      	mov	r0, r8
 80096d6:	f002 fc2f 	bl	800bf38 <_strtod_r>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	6821      	ldr	r1, [r4, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f011 0f02 	tst.w	r1, #2
 80096e4:	ec57 6b10 	vmov	r6, r7, d0
 80096e8:	f103 0204 	add.w	r2, r3, #4
 80096ec:	d020      	beq.n	8009730 <_scanf_float+0x3d8>
 80096ee:	9903      	ldr	r1, [sp, #12]
 80096f0:	600a      	str	r2, [r1, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	e9c3 6700 	strd	r6, r7, [r3]
 80096f8:	68e3      	ldr	r3, [r4, #12]
 80096fa:	3301      	adds	r3, #1
 80096fc:	60e3      	str	r3, [r4, #12]
 80096fe:	e66c      	b.n	80093da <_scanf_float+0x82>
 8009700:	9b04      	ldr	r3, [sp, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0e4      	beq.n	80096d0 <_scanf_float+0x378>
 8009706:	9905      	ldr	r1, [sp, #20]
 8009708:	230a      	movs	r3, #10
 800970a:	462a      	mov	r2, r5
 800970c:	3101      	adds	r1, #1
 800970e:	4640      	mov	r0, r8
 8009710:	f002 fc9a 	bl	800c048 <_strtol_r>
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	9e05      	ldr	r6, [sp, #20]
 8009718:	1ac2      	subs	r2, r0, r3
 800971a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800971e:	429e      	cmp	r6, r3
 8009720:	bf28      	it	cs
 8009722:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009726:	4912      	ldr	r1, [pc, #72]	; (8009770 <_scanf_float+0x418>)
 8009728:	4630      	mov	r0, r6
 800972a:	f000 f8e7 	bl	80098fc <siprintf>
 800972e:	e7cf      	b.n	80096d0 <_scanf_float+0x378>
 8009730:	f011 0f04 	tst.w	r1, #4
 8009734:	9903      	ldr	r1, [sp, #12]
 8009736:	600a      	str	r2, [r1, #0]
 8009738:	d1db      	bne.n	80096f2 <_scanf_float+0x39a>
 800973a:	f8d3 8000 	ldr.w	r8, [r3]
 800973e:	ee10 2a10 	vmov	r2, s0
 8009742:	ee10 0a10 	vmov	r0, s0
 8009746:	463b      	mov	r3, r7
 8009748:	4639      	mov	r1, r7
 800974a:	f7f7 f9ef 	bl	8000b2c <__aeabi_dcmpun>
 800974e:	b128      	cbz	r0, 800975c <_scanf_float+0x404>
 8009750:	4808      	ldr	r0, [pc, #32]	; (8009774 <_scanf_float+0x41c>)
 8009752:	f000 f9b7 	bl	8009ac4 <nanf>
 8009756:	ed88 0a00 	vstr	s0, [r8]
 800975a:	e7cd      	b.n	80096f8 <_scanf_float+0x3a0>
 800975c:	4630      	mov	r0, r6
 800975e:	4639      	mov	r1, r7
 8009760:	f7f7 fa42 	bl	8000be8 <__aeabi_d2f>
 8009764:	f8c8 0000 	str.w	r0, [r8]
 8009768:	e7c6      	b.n	80096f8 <_scanf_float+0x3a0>
 800976a:	2500      	movs	r5, #0
 800976c:	e635      	b.n	80093da <_scanf_float+0x82>
 800976e:	bf00      	nop
 8009770:	0800e554 	.word	0x0800e554
 8009774:	0800e8e5 	.word	0x0800e8e5

08009778 <std>:
 8009778:	2300      	movs	r3, #0
 800977a:	b510      	push	{r4, lr}
 800977c:	4604      	mov	r4, r0
 800977e:	e9c0 3300 	strd	r3, r3, [r0]
 8009782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009786:	6083      	str	r3, [r0, #8]
 8009788:	8181      	strh	r1, [r0, #12]
 800978a:	6643      	str	r3, [r0, #100]	; 0x64
 800978c:	81c2      	strh	r2, [r0, #14]
 800978e:	6183      	str	r3, [r0, #24]
 8009790:	4619      	mov	r1, r3
 8009792:	2208      	movs	r2, #8
 8009794:	305c      	adds	r0, #92	; 0x5c
 8009796:	f000 f914 	bl	80099c2 <memset>
 800979a:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <std+0x58>)
 800979c:	6263      	str	r3, [r4, #36]	; 0x24
 800979e:	4b0d      	ldr	r3, [pc, #52]	; (80097d4 <std+0x5c>)
 80097a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80097a2:	4b0d      	ldr	r3, [pc, #52]	; (80097d8 <std+0x60>)
 80097a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097a6:	4b0d      	ldr	r3, [pc, #52]	; (80097dc <std+0x64>)
 80097a8:	6323      	str	r3, [r4, #48]	; 0x30
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <std+0x68>)
 80097ac:	6224      	str	r4, [r4, #32]
 80097ae:	429c      	cmp	r4, r3
 80097b0:	d006      	beq.n	80097c0 <std+0x48>
 80097b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80097b6:	4294      	cmp	r4, r2
 80097b8:	d002      	beq.n	80097c0 <std+0x48>
 80097ba:	33d0      	adds	r3, #208	; 0xd0
 80097bc:	429c      	cmp	r4, r3
 80097be:	d105      	bne.n	80097cc <std+0x54>
 80097c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097c8:	f000 b978 	b.w	8009abc <__retarget_lock_init_recursive>
 80097cc:	bd10      	pop	{r4, pc}
 80097ce:	bf00      	nop
 80097d0:	0800993d 	.word	0x0800993d
 80097d4:	0800995f 	.word	0x0800995f
 80097d8:	08009997 	.word	0x08009997
 80097dc:	080099bb 	.word	0x080099bb
 80097e0:	2000059c 	.word	0x2000059c

080097e4 <stdio_exit_handler>:
 80097e4:	4a02      	ldr	r2, [pc, #8]	; (80097f0 <stdio_exit_handler+0xc>)
 80097e6:	4903      	ldr	r1, [pc, #12]	; (80097f4 <stdio_exit_handler+0x10>)
 80097e8:	4803      	ldr	r0, [pc, #12]	; (80097f8 <stdio_exit_handler+0x14>)
 80097ea:	f000 b869 	b.w	80098c0 <_fwalk_sglue>
 80097ee:	bf00      	nop
 80097f0:	2000000c 	.word	0x2000000c
 80097f4:	0800c409 	.word	0x0800c409
 80097f8:	20000018 	.word	0x20000018

080097fc <cleanup_stdio>:
 80097fc:	6841      	ldr	r1, [r0, #4]
 80097fe:	4b0c      	ldr	r3, [pc, #48]	; (8009830 <cleanup_stdio+0x34>)
 8009800:	4299      	cmp	r1, r3
 8009802:	b510      	push	{r4, lr}
 8009804:	4604      	mov	r4, r0
 8009806:	d001      	beq.n	800980c <cleanup_stdio+0x10>
 8009808:	f002 fdfe 	bl	800c408 <_fflush_r>
 800980c:	68a1      	ldr	r1, [r4, #8]
 800980e:	4b09      	ldr	r3, [pc, #36]	; (8009834 <cleanup_stdio+0x38>)
 8009810:	4299      	cmp	r1, r3
 8009812:	d002      	beq.n	800981a <cleanup_stdio+0x1e>
 8009814:	4620      	mov	r0, r4
 8009816:	f002 fdf7 	bl	800c408 <_fflush_r>
 800981a:	68e1      	ldr	r1, [r4, #12]
 800981c:	4b06      	ldr	r3, [pc, #24]	; (8009838 <cleanup_stdio+0x3c>)
 800981e:	4299      	cmp	r1, r3
 8009820:	d004      	beq.n	800982c <cleanup_stdio+0x30>
 8009822:	4620      	mov	r0, r4
 8009824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009828:	f002 bdee 	b.w	800c408 <_fflush_r>
 800982c:	bd10      	pop	{r4, pc}
 800982e:	bf00      	nop
 8009830:	2000059c 	.word	0x2000059c
 8009834:	20000604 	.word	0x20000604
 8009838:	2000066c 	.word	0x2000066c

0800983c <global_stdio_init.part.0>:
 800983c:	b510      	push	{r4, lr}
 800983e:	4b0b      	ldr	r3, [pc, #44]	; (800986c <global_stdio_init.part.0+0x30>)
 8009840:	4c0b      	ldr	r4, [pc, #44]	; (8009870 <global_stdio_init.part.0+0x34>)
 8009842:	4a0c      	ldr	r2, [pc, #48]	; (8009874 <global_stdio_init.part.0+0x38>)
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	4620      	mov	r0, r4
 8009848:	2200      	movs	r2, #0
 800984a:	2104      	movs	r1, #4
 800984c:	f7ff ff94 	bl	8009778 <std>
 8009850:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009854:	2201      	movs	r2, #1
 8009856:	2109      	movs	r1, #9
 8009858:	f7ff ff8e 	bl	8009778 <std>
 800985c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009860:	2202      	movs	r2, #2
 8009862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009866:	2112      	movs	r1, #18
 8009868:	f7ff bf86 	b.w	8009778 <std>
 800986c:	200006d4 	.word	0x200006d4
 8009870:	2000059c 	.word	0x2000059c
 8009874:	080097e5 	.word	0x080097e5

08009878 <__sfp_lock_acquire>:
 8009878:	4801      	ldr	r0, [pc, #4]	; (8009880 <__sfp_lock_acquire+0x8>)
 800987a:	f000 b920 	b.w	8009abe <__retarget_lock_acquire_recursive>
 800987e:	bf00      	nop
 8009880:	200006dd 	.word	0x200006dd

08009884 <__sfp_lock_release>:
 8009884:	4801      	ldr	r0, [pc, #4]	; (800988c <__sfp_lock_release+0x8>)
 8009886:	f000 b91b 	b.w	8009ac0 <__retarget_lock_release_recursive>
 800988a:	bf00      	nop
 800988c:	200006dd 	.word	0x200006dd

08009890 <__sinit>:
 8009890:	b510      	push	{r4, lr}
 8009892:	4604      	mov	r4, r0
 8009894:	f7ff fff0 	bl	8009878 <__sfp_lock_acquire>
 8009898:	6a23      	ldr	r3, [r4, #32]
 800989a:	b11b      	cbz	r3, 80098a4 <__sinit+0x14>
 800989c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098a0:	f7ff bff0 	b.w	8009884 <__sfp_lock_release>
 80098a4:	4b04      	ldr	r3, [pc, #16]	; (80098b8 <__sinit+0x28>)
 80098a6:	6223      	str	r3, [r4, #32]
 80098a8:	4b04      	ldr	r3, [pc, #16]	; (80098bc <__sinit+0x2c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1f5      	bne.n	800989c <__sinit+0xc>
 80098b0:	f7ff ffc4 	bl	800983c <global_stdio_init.part.0>
 80098b4:	e7f2      	b.n	800989c <__sinit+0xc>
 80098b6:	bf00      	nop
 80098b8:	080097fd 	.word	0x080097fd
 80098bc:	200006d4 	.word	0x200006d4

080098c0 <_fwalk_sglue>:
 80098c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c4:	4607      	mov	r7, r0
 80098c6:	4688      	mov	r8, r1
 80098c8:	4614      	mov	r4, r2
 80098ca:	2600      	movs	r6, #0
 80098cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098d0:	f1b9 0901 	subs.w	r9, r9, #1
 80098d4:	d505      	bpl.n	80098e2 <_fwalk_sglue+0x22>
 80098d6:	6824      	ldr	r4, [r4, #0]
 80098d8:	2c00      	cmp	r4, #0
 80098da:	d1f7      	bne.n	80098cc <_fwalk_sglue+0xc>
 80098dc:	4630      	mov	r0, r6
 80098de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d907      	bls.n	80098f8 <_fwalk_sglue+0x38>
 80098e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098ec:	3301      	adds	r3, #1
 80098ee:	d003      	beq.n	80098f8 <_fwalk_sglue+0x38>
 80098f0:	4629      	mov	r1, r5
 80098f2:	4638      	mov	r0, r7
 80098f4:	47c0      	blx	r8
 80098f6:	4306      	orrs	r6, r0
 80098f8:	3568      	adds	r5, #104	; 0x68
 80098fa:	e7e9      	b.n	80098d0 <_fwalk_sglue+0x10>

080098fc <siprintf>:
 80098fc:	b40e      	push	{r1, r2, r3}
 80098fe:	b500      	push	{lr}
 8009900:	b09c      	sub	sp, #112	; 0x70
 8009902:	ab1d      	add	r3, sp, #116	; 0x74
 8009904:	9002      	str	r0, [sp, #8]
 8009906:	9006      	str	r0, [sp, #24]
 8009908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800990c:	4809      	ldr	r0, [pc, #36]	; (8009934 <siprintf+0x38>)
 800990e:	9107      	str	r1, [sp, #28]
 8009910:	9104      	str	r1, [sp, #16]
 8009912:	4909      	ldr	r1, [pc, #36]	; (8009938 <siprintf+0x3c>)
 8009914:	f853 2b04 	ldr.w	r2, [r3], #4
 8009918:	9105      	str	r1, [sp, #20]
 800991a:	6800      	ldr	r0, [r0, #0]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	a902      	add	r1, sp, #8
 8009920:	f002 fbee 	bl	800c100 <_svfiprintf_r>
 8009924:	9b02      	ldr	r3, [sp, #8]
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	b01c      	add	sp, #112	; 0x70
 800992c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009930:	b003      	add	sp, #12
 8009932:	4770      	bx	lr
 8009934:	20000064 	.word	0x20000064
 8009938:	ffff0208 	.word	0xffff0208

0800993c <__sread>:
 800993c:	b510      	push	{r4, lr}
 800993e:	460c      	mov	r4, r1
 8009940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009944:	f000 f86c 	bl	8009a20 <_read_r>
 8009948:	2800      	cmp	r0, #0
 800994a:	bfab      	itete	ge
 800994c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800994e:	89a3      	ldrhlt	r3, [r4, #12]
 8009950:	181b      	addge	r3, r3, r0
 8009952:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009956:	bfac      	ite	ge
 8009958:	6563      	strge	r3, [r4, #84]	; 0x54
 800995a:	81a3      	strhlt	r3, [r4, #12]
 800995c:	bd10      	pop	{r4, pc}

0800995e <__swrite>:
 800995e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009962:	461f      	mov	r7, r3
 8009964:	898b      	ldrh	r3, [r1, #12]
 8009966:	05db      	lsls	r3, r3, #23
 8009968:	4605      	mov	r5, r0
 800996a:	460c      	mov	r4, r1
 800996c:	4616      	mov	r6, r2
 800996e:	d505      	bpl.n	800997c <__swrite+0x1e>
 8009970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009974:	2302      	movs	r3, #2
 8009976:	2200      	movs	r2, #0
 8009978:	f000 f840 	bl	80099fc <_lseek_r>
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009982:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	4632      	mov	r2, r6
 800998a:	463b      	mov	r3, r7
 800998c:	4628      	mov	r0, r5
 800998e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009992:	f000 b857 	b.w	8009a44 <_write_r>

08009996 <__sseek>:
 8009996:	b510      	push	{r4, lr}
 8009998:	460c      	mov	r4, r1
 800999a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999e:	f000 f82d 	bl	80099fc <_lseek_r>
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	89a3      	ldrh	r3, [r4, #12]
 80099a6:	bf15      	itete	ne
 80099a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80099aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099b2:	81a3      	strheq	r3, [r4, #12]
 80099b4:	bf18      	it	ne
 80099b6:	81a3      	strhne	r3, [r4, #12]
 80099b8:	bd10      	pop	{r4, pc}

080099ba <__sclose>:
 80099ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099be:	f000 b80d 	b.w	80099dc <_close_r>

080099c2 <memset>:
 80099c2:	4402      	add	r2, r0
 80099c4:	4603      	mov	r3, r0
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d100      	bne.n	80099cc <memset+0xa>
 80099ca:	4770      	bx	lr
 80099cc:	f803 1b01 	strb.w	r1, [r3], #1
 80099d0:	e7f9      	b.n	80099c6 <memset+0x4>
	...

080099d4 <_localeconv_r>:
 80099d4:	4800      	ldr	r0, [pc, #0]	; (80099d8 <_localeconv_r+0x4>)
 80099d6:	4770      	bx	lr
 80099d8:	20000158 	.word	0x20000158

080099dc <_close_r>:
 80099dc:	b538      	push	{r3, r4, r5, lr}
 80099de:	4d06      	ldr	r5, [pc, #24]	; (80099f8 <_close_r+0x1c>)
 80099e0:	2300      	movs	r3, #0
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	602b      	str	r3, [r5, #0]
 80099e8:	f7f9 f94b 	bl	8002c82 <_close>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	d102      	bne.n	80099f6 <_close_r+0x1a>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	b103      	cbz	r3, 80099f6 <_close_r+0x1a>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	200006d8 	.word	0x200006d8

080099fc <_lseek_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d07      	ldr	r5, [pc, #28]	; (8009a1c <_lseek_r+0x20>)
 8009a00:	4604      	mov	r4, r0
 8009a02:	4608      	mov	r0, r1
 8009a04:	4611      	mov	r1, r2
 8009a06:	2200      	movs	r2, #0
 8009a08:	602a      	str	r2, [r5, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f7f9 f960 	bl	8002cd0 <_lseek>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d102      	bne.n	8009a1a <_lseek_r+0x1e>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	b103      	cbz	r3, 8009a1a <_lseek_r+0x1e>
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	200006d8 	.word	0x200006d8

08009a20 <_read_r>:
 8009a20:	b538      	push	{r3, r4, r5, lr}
 8009a22:	4d07      	ldr	r5, [pc, #28]	; (8009a40 <_read_r+0x20>)
 8009a24:	4604      	mov	r4, r0
 8009a26:	4608      	mov	r0, r1
 8009a28:	4611      	mov	r1, r2
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	602a      	str	r2, [r5, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f7f9 f8ee 	bl	8002c10 <_read>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_read_r+0x1e>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_read_r+0x1e>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	200006d8 	.word	0x200006d8

08009a44 <_write_r>:
 8009a44:	b538      	push	{r3, r4, r5, lr}
 8009a46:	4d07      	ldr	r5, [pc, #28]	; (8009a64 <_write_r+0x20>)
 8009a48:	4604      	mov	r4, r0
 8009a4a:	4608      	mov	r0, r1
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	602a      	str	r2, [r5, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	f7f9 f8f9 	bl	8002c4a <_write>
 8009a58:	1c43      	adds	r3, r0, #1
 8009a5a:	d102      	bne.n	8009a62 <_write_r+0x1e>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	b103      	cbz	r3, 8009a62 <_write_r+0x1e>
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	bd38      	pop	{r3, r4, r5, pc}
 8009a64:	200006d8 	.word	0x200006d8

08009a68 <__errno>:
 8009a68:	4b01      	ldr	r3, [pc, #4]	; (8009a70 <__errno+0x8>)
 8009a6a:	6818      	ldr	r0, [r3, #0]
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	20000064 	.word	0x20000064

08009a74 <__libc_init_array>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	4d0d      	ldr	r5, [pc, #52]	; (8009aac <__libc_init_array+0x38>)
 8009a78:	4c0d      	ldr	r4, [pc, #52]	; (8009ab0 <__libc_init_array+0x3c>)
 8009a7a:	1b64      	subs	r4, r4, r5
 8009a7c:	10a4      	asrs	r4, r4, #2
 8009a7e:	2600      	movs	r6, #0
 8009a80:	42a6      	cmp	r6, r4
 8009a82:	d109      	bne.n	8009a98 <__libc_init_array+0x24>
 8009a84:	4d0b      	ldr	r5, [pc, #44]	; (8009ab4 <__libc_init_array+0x40>)
 8009a86:	4c0c      	ldr	r4, [pc, #48]	; (8009ab8 <__libc_init_array+0x44>)
 8009a88:	f004 fcdc 	bl	800e444 <_init>
 8009a8c:	1b64      	subs	r4, r4, r5
 8009a8e:	10a4      	asrs	r4, r4, #2
 8009a90:	2600      	movs	r6, #0
 8009a92:	42a6      	cmp	r6, r4
 8009a94:	d105      	bne.n	8009aa2 <__libc_init_array+0x2e>
 8009a96:	bd70      	pop	{r4, r5, r6, pc}
 8009a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a9c:	4798      	blx	r3
 8009a9e:	3601      	adds	r6, #1
 8009aa0:	e7ee      	b.n	8009a80 <__libc_init_array+0xc>
 8009aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa6:	4798      	blx	r3
 8009aa8:	3601      	adds	r6, #1
 8009aaa:	e7f2      	b.n	8009a92 <__libc_init_array+0x1e>
 8009aac:	0800e9c0 	.word	0x0800e9c0
 8009ab0:	0800e9c0 	.word	0x0800e9c0
 8009ab4:	0800e9c0 	.word	0x0800e9c0
 8009ab8:	0800e9c4 	.word	0x0800e9c4

08009abc <__retarget_lock_init_recursive>:
 8009abc:	4770      	bx	lr

08009abe <__retarget_lock_acquire_recursive>:
 8009abe:	4770      	bx	lr

08009ac0 <__retarget_lock_release_recursive>:
 8009ac0:	4770      	bx	lr
	...

08009ac4 <nanf>:
 8009ac4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009acc <nanf+0x8>
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	7fc00000 	.word	0x7fc00000

08009ad0 <quorem>:
 8009ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	6903      	ldr	r3, [r0, #16]
 8009ad6:	690c      	ldr	r4, [r1, #16]
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	4607      	mov	r7, r0
 8009adc:	db7e      	blt.n	8009bdc <quorem+0x10c>
 8009ade:	3c01      	subs	r4, #1
 8009ae0:	f101 0814 	add.w	r8, r1, #20
 8009ae4:	f100 0514 	add.w	r5, r0, #20
 8009ae8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009af2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009af6:	3301      	adds	r3, #1
 8009af8:	429a      	cmp	r2, r3
 8009afa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009afe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b02:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b06:	d331      	bcc.n	8009b6c <quorem+0x9c>
 8009b08:	f04f 0e00 	mov.w	lr, #0
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	46ac      	mov	ip, r5
 8009b10:	46f2      	mov	sl, lr
 8009b12:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b16:	b293      	uxth	r3, r2
 8009b18:	fb06 e303 	mla	r3, r6, r3, lr
 8009b1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b20:	0c1a      	lsrs	r2, r3, #16
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	ebaa 0303 	sub.w	r3, sl, r3
 8009b28:	f8dc a000 	ldr.w	sl, [ip]
 8009b2c:	fa13 f38a 	uxtah	r3, r3, sl
 8009b30:	fb06 220e 	mla	r2, r6, lr, r2
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b3c:	b292      	uxth	r2, r2
 8009b3e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b46:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b4a:	4581      	cmp	r9, r0
 8009b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b50:	f84c 3b04 	str.w	r3, [ip], #4
 8009b54:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b58:	d2db      	bcs.n	8009b12 <quorem+0x42>
 8009b5a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b5e:	b92b      	cbnz	r3, 8009b6c <quorem+0x9c>
 8009b60:	9b01      	ldr	r3, [sp, #4]
 8009b62:	3b04      	subs	r3, #4
 8009b64:	429d      	cmp	r5, r3
 8009b66:	461a      	mov	r2, r3
 8009b68:	d32c      	bcc.n	8009bc4 <quorem+0xf4>
 8009b6a:	613c      	str	r4, [r7, #16]
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f001 f9ef 	bl	800af50 <__mcmp>
 8009b72:	2800      	cmp	r0, #0
 8009b74:	db22      	blt.n	8009bbc <quorem+0xec>
 8009b76:	3601      	adds	r6, #1
 8009b78:	4629      	mov	r1, r5
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b80:	f8d1 c000 	ldr.w	ip, [r1]
 8009b84:	b293      	uxth	r3, r2
 8009b86:	1ac3      	subs	r3, r0, r3
 8009b88:	0c12      	lsrs	r2, r2, #16
 8009b8a:	fa13 f38c 	uxtah	r3, r3, ip
 8009b8e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009b92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b9c:	45c1      	cmp	r9, r8
 8009b9e:	f841 3b04 	str.w	r3, [r1], #4
 8009ba2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ba6:	d2e9      	bcs.n	8009b7c <quorem+0xac>
 8009ba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bb0:	b922      	cbnz	r2, 8009bbc <quorem+0xec>
 8009bb2:	3b04      	subs	r3, #4
 8009bb4:	429d      	cmp	r5, r3
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	d30a      	bcc.n	8009bd0 <quorem+0x100>
 8009bba:	613c      	str	r4, [r7, #16]
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	b003      	add	sp, #12
 8009bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc4:	6812      	ldr	r2, [r2, #0]
 8009bc6:	3b04      	subs	r3, #4
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	d1ce      	bne.n	8009b6a <quorem+0x9a>
 8009bcc:	3c01      	subs	r4, #1
 8009bce:	e7c9      	b.n	8009b64 <quorem+0x94>
 8009bd0:	6812      	ldr	r2, [r2, #0]
 8009bd2:	3b04      	subs	r3, #4
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	d1f0      	bne.n	8009bba <quorem+0xea>
 8009bd8:	3c01      	subs	r4, #1
 8009bda:	e7eb      	b.n	8009bb4 <quorem+0xe4>
 8009bdc:	2000      	movs	r0, #0
 8009bde:	e7ee      	b.n	8009bbe <quorem+0xee>

08009be0 <_dtoa_r>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	ed2d 8b04 	vpush	{d8-d9}
 8009be8:	69c5      	ldr	r5, [r0, #28]
 8009bea:	b093      	sub	sp, #76	; 0x4c
 8009bec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009bf0:	ec57 6b10 	vmov	r6, r7, d0
 8009bf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009bf8:	9107      	str	r1, [sp, #28]
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	920a      	str	r2, [sp, #40]	; 0x28
 8009bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8009c00:	b975      	cbnz	r5, 8009c20 <_dtoa_r+0x40>
 8009c02:	2010      	movs	r0, #16
 8009c04:	f000 fe2a 	bl	800a85c <malloc>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	61e0      	str	r0, [r4, #28]
 8009c0c:	b920      	cbnz	r0, 8009c18 <_dtoa_r+0x38>
 8009c0e:	4bae      	ldr	r3, [pc, #696]	; (8009ec8 <_dtoa_r+0x2e8>)
 8009c10:	21ef      	movs	r1, #239	; 0xef
 8009c12:	48ae      	ldr	r0, [pc, #696]	; (8009ecc <_dtoa_r+0x2ec>)
 8009c14:	f002 fc74 	bl	800c500 <__assert_func>
 8009c18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c1c:	6005      	str	r5, [r0, #0]
 8009c1e:	60c5      	str	r5, [r0, #12]
 8009c20:	69e3      	ldr	r3, [r4, #28]
 8009c22:	6819      	ldr	r1, [r3, #0]
 8009c24:	b151      	cbz	r1, 8009c3c <_dtoa_r+0x5c>
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	604a      	str	r2, [r1, #4]
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4093      	lsls	r3, r2
 8009c2e:	608b      	str	r3, [r1, #8]
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 ff07 	bl	800aa44 <_Bfree>
 8009c36:	69e3      	ldr	r3, [r4, #28]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	1e3b      	subs	r3, r7, #0
 8009c3e:	bfbb      	ittet	lt
 8009c40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c44:	9303      	strlt	r3, [sp, #12]
 8009c46:	2300      	movge	r3, #0
 8009c48:	2201      	movlt	r2, #1
 8009c4a:	bfac      	ite	ge
 8009c4c:	f8c8 3000 	strge.w	r3, [r8]
 8009c50:	f8c8 2000 	strlt.w	r2, [r8]
 8009c54:	4b9e      	ldr	r3, [pc, #632]	; (8009ed0 <_dtoa_r+0x2f0>)
 8009c56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009c5a:	ea33 0308 	bics.w	r3, r3, r8
 8009c5e:	d11b      	bne.n	8009c98 <_dtoa_r+0xb8>
 8009c60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c62:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009c6c:	4333      	orrs	r3, r6
 8009c6e:	f000 8593 	beq.w	800a798 <_dtoa_r+0xbb8>
 8009c72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c74:	b963      	cbnz	r3, 8009c90 <_dtoa_r+0xb0>
 8009c76:	4b97      	ldr	r3, [pc, #604]	; (8009ed4 <_dtoa_r+0x2f4>)
 8009c78:	e027      	b.n	8009cca <_dtoa_r+0xea>
 8009c7a:	4b97      	ldr	r3, [pc, #604]	; (8009ed8 <_dtoa_r+0x2f8>)
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	3308      	adds	r3, #8
 8009c80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c82:	6013      	str	r3, [r2, #0]
 8009c84:	9800      	ldr	r0, [sp, #0]
 8009c86:	b013      	add	sp, #76	; 0x4c
 8009c88:	ecbd 8b04 	vpop	{d8-d9}
 8009c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c90:	4b90      	ldr	r3, [pc, #576]	; (8009ed4 <_dtoa_r+0x2f4>)
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	3303      	adds	r3, #3
 8009c96:	e7f3      	b.n	8009c80 <_dtoa_r+0xa0>
 8009c98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	ec51 0b17 	vmov	r0, r1, d7
 8009ca2:	eeb0 8a47 	vmov.f32	s16, s14
 8009ca6:	eef0 8a67 	vmov.f32	s17, s15
 8009caa:	2300      	movs	r3, #0
 8009cac:	f7f6 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb0:	4681      	mov	r9, r0
 8009cb2:	b160      	cbz	r0, 8009cce <_dtoa_r+0xee>
 8009cb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f000 8568 	beq.w	800a792 <_dtoa_r+0xbb2>
 8009cc2:	4b86      	ldr	r3, [pc, #536]	; (8009edc <_dtoa_r+0x2fc>)
 8009cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	e7da      	b.n	8009c84 <_dtoa_r+0xa4>
 8009cce:	aa10      	add	r2, sp, #64	; 0x40
 8009cd0:	a911      	add	r1, sp, #68	; 0x44
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	eeb0 0a48 	vmov.f32	s0, s16
 8009cd8:	eef0 0a68 	vmov.f32	s1, s17
 8009cdc:	f001 fa4e 	bl	800b17c <__d2b>
 8009ce0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009ce4:	4682      	mov	sl, r0
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	d07f      	beq.n	8009dea <_dtoa_r+0x20a>
 8009cea:	ee18 3a90 	vmov	r3, s17
 8009cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cf2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009cf6:	ec51 0b18 	vmov	r0, r1, d8
 8009cfa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009cfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009d06:	4619      	mov	r1, r3
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4b75      	ldr	r3, [pc, #468]	; (8009ee0 <_dtoa_r+0x300>)
 8009d0c:	f7f6 fabc 	bl	8000288 <__aeabi_dsub>
 8009d10:	a367      	add	r3, pc, #412	; (adr r3, 8009eb0 <_dtoa_r+0x2d0>)
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f7f6 fc6f 	bl	80005f8 <__aeabi_dmul>
 8009d1a:	a367      	add	r3, pc, #412	; (adr r3, 8009eb8 <_dtoa_r+0x2d8>)
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	f7f6 fab4 	bl	800028c <__adddf3>
 8009d24:	4606      	mov	r6, r0
 8009d26:	4628      	mov	r0, r5
 8009d28:	460f      	mov	r7, r1
 8009d2a:	f7f6 fbfb 	bl	8000524 <__aeabi_i2d>
 8009d2e:	a364      	add	r3, pc, #400	; (adr r3, 8009ec0 <_dtoa_r+0x2e0>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fc60 	bl	80005f8 <__aeabi_dmul>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	4639      	mov	r1, r7
 8009d40:	f7f6 faa4 	bl	800028c <__adddf3>
 8009d44:	4606      	mov	r6, r0
 8009d46:	460f      	mov	r7, r1
 8009d48:	f7f6 ff06 	bl	8000b58 <__aeabi_d2iz>
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	4683      	mov	fp, r0
 8009d50:	2300      	movs	r3, #0
 8009d52:	4630      	mov	r0, r6
 8009d54:	4639      	mov	r1, r7
 8009d56:	f7f6 fec1 	bl	8000adc <__aeabi_dcmplt>
 8009d5a:	b148      	cbz	r0, 8009d70 <_dtoa_r+0x190>
 8009d5c:	4658      	mov	r0, fp
 8009d5e:	f7f6 fbe1 	bl	8000524 <__aeabi_i2d>
 8009d62:	4632      	mov	r2, r6
 8009d64:	463b      	mov	r3, r7
 8009d66:	f7f6 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d6a:	b908      	cbnz	r0, 8009d70 <_dtoa_r+0x190>
 8009d6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d70:	f1bb 0f16 	cmp.w	fp, #22
 8009d74:	d857      	bhi.n	8009e26 <_dtoa_r+0x246>
 8009d76:	4b5b      	ldr	r3, [pc, #364]	; (8009ee4 <_dtoa_r+0x304>)
 8009d78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	ec51 0b18 	vmov	r0, r1, d8
 8009d84:	f7f6 feaa 	bl	8000adc <__aeabi_dcmplt>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d04e      	beq.n	8009e2a <_dtoa_r+0x24a>
 8009d8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d90:	2300      	movs	r3, #0
 8009d92:	930c      	str	r3, [sp, #48]	; 0x30
 8009d94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d96:	1b5b      	subs	r3, r3, r5
 8009d98:	1e5a      	subs	r2, r3, #1
 8009d9a:	bf45      	ittet	mi
 8009d9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009da0:	9305      	strmi	r3, [sp, #20]
 8009da2:	2300      	movpl	r3, #0
 8009da4:	2300      	movmi	r3, #0
 8009da6:	9206      	str	r2, [sp, #24]
 8009da8:	bf54      	ite	pl
 8009daa:	9305      	strpl	r3, [sp, #20]
 8009dac:	9306      	strmi	r3, [sp, #24]
 8009dae:	f1bb 0f00 	cmp.w	fp, #0
 8009db2:	db3c      	blt.n	8009e2e <_dtoa_r+0x24e>
 8009db4:	9b06      	ldr	r3, [sp, #24]
 8009db6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009dba:	445b      	add	r3, fp
 8009dbc:	9306      	str	r3, [sp, #24]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	9308      	str	r3, [sp, #32]
 8009dc2:	9b07      	ldr	r3, [sp, #28]
 8009dc4:	2b09      	cmp	r3, #9
 8009dc6:	d868      	bhi.n	8009e9a <_dtoa_r+0x2ba>
 8009dc8:	2b05      	cmp	r3, #5
 8009dca:	bfc4      	itt	gt
 8009dcc:	3b04      	subgt	r3, #4
 8009dce:	9307      	strgt	r3, [sp, #28]
 8009dd0:	9b07      	ldr	r3, [sp, #28]
 8009dd2:	f1a3 0302 	sub.w	r3, r3, #2
 8009dd6:	bfcc      	ite	gt
 8009dd8:	2500      	movgt	r5, #0
 8009dda:	2501      	movle	r5, #1
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	f200 8085 	bhi.w	8009eec <_dtoa_r+0x30c>
 8009de2:	e8df f003 	tbb	[pc, r3]
 8009de6:	3b2e      	.short	0x3b2e
 8009de8:	5839      	.short	0x5839
 8009dea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009dee:	441d      	add	r5, r3
 8009df0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	bfc1      	itttt	gt
 8009df8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009dfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8009e00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009e04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009e08:	bfd6      	itet	le
 8009e0a:	f1c3 0320 	rsble	r3, r3, #32
 8009e0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009e12:	fa06 f003 	lslle.w	r0, r6, r3
 8009e16:	f7f6 fb75 	bl	8000504 <__aeabi_ui2d>
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009e20:	3d01      	subs	r5, #1
 8009e22:	920e      	str	r2, [sp, #56]	; 0x38
 8009e24:	e76f      	b.n	8009d06 <_dtoa_r+0x126>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e7b3      	b.n	8009d92 <_dtoa_r+0x1b2>
 8009e2a:	900c      	str	r0, [sp, #48]	; 0x30
 8009e2c:	e7b2      	b.n	8009d94 <_dtoa_r+0x1b4>
 8009e2e:	9b05      	ldr	r3, [sp, #20]
 8009e30:	eba3 030b 	sub.w	r3, r3, fp
 8009e34:	9305      	str	r3, [sp, #20]
 8009e36:	f1cb 0300 	rsb	r3, fp, #0
 8009e3a:	9308      	str	r3, [sp, #32]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e40:	e7bf      	b.n	8009dc2 <_dtoa_r+0x1e2>
 8009e42:	2300      	movs	r3, #0
 8009e44:	9309      	str	r3, [sp, #36]	; 0x24
 8009e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	dc52      	bgt.n	8009ef2 <_dtoa_r+0x312>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	9301      	str	r3, [sp, #4]
 8009e50:	9304      	str	r3, [sp, #16]
 8009e52:	461a      	mov	r2, r3
 8009e54:	920a      	str	r2, [sp, #40]	; 0x28
 8009e56:	e00b      	b.n	8009e70 <_dtoa_r+0x290>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e7f3      	b.n	8009e44 <_dtoa_r+0x264>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e62:	445b      	add	r3, fp
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	3301      	adds	r3, #1
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	bfb8      	it	lt
 8009e6e:	2301      	movlt	r3, #1
 8009e70:	69e0      	ldr	r0, [r4, #28]
 8009e72:	2100      	movs	r1, #0
 8009e74:	2204      	movs	r2, #4
 8009e76:	f102 0614 	add.w	r6, r2, #20
 8009e7a:	429e      	cmp	r6, r3
 8009e7c:	d93d      	bls.n	8009efa <_dtoa_r+0x31a>
 8009e7e:	6041      	str	r1, [r0, #4]
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 fd9f 	bl	800a9c4 <_Balloc>
 8009e86:	9000      	str	r0, [sp, #0]
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d139      	bne.n	8009f00 <_dtoa_r+0x320>
 8009e8c:	4b16      	ldr	r3, [pc, #88]	; (8009ee8 <_dtoa_r+0x308>)
 8009e8e:	4602      	mov	r2, r0
 8009e90:	f240 11af 	movw	r1, #431	; 0x1af
 8009e94:	e6bd      	b.n	8009c12 <_dtoa_r+0x32>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e7e1      	b.n	8009e5e <_dtoa_r+0x27e>
 8009e9a:	2501      	movs	r5, #1
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9307      	str	r3, [sp, #28]
 8009ea0:	9509      	str	r5, [sp, #36]	; 0x24
 8009ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2312      	movs	r3, #18
 8009eae:	e7d1      	b.n	8009e54 <_dtoa_r+0x274>
 8009eb0:	636f4361 	.word	0x636f4361
 8009eb4:	3fd287a7 	.word	0x3fd287a7
 8009eb8:	8b60c8b3 	.word	0x8b60c8b3
 8009ebc:	3fc68a28 	.word	0x3fc68a28
 8009ec0:	509f79fb 	.word	0x509f79fb
 8009ec4:	3fd34413 	.word	0x3fd34413
 8009ec8:	0800e566 	.word	0x0800e566
 8009ecc:	0800e57d 	.word	0x0800e57d
 8009ed0:	7ff00000 	.word	0x7ff00000
 8009ed4:	0800e562 	.word	0x0800e562
 8009ed8:	0800e559 	.word	0x0800e559
 8009edc:	0800e531 	.word	0x0800e531
 8009ee0:	3ff80000 	.word	0x3ff80000
 8009ee4:	0800e668 	.word	0x0800e668
 8009ee8:	0800e5d5 	.word	0x0800e5d5
 8009eec:	2301      	movs	r3, #1
 8009eee:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef0:	e7d7      	b.n	8009ea2 <_dtoa_r+0x2c2>
 8009ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef4:	9301      	str	r3, [sp, #4]
 8009ef6:	9304      	str	r3, [sp, #16]
 8009ef8:	e7ba      	b.n	8009e70 <_dtoa_r+0x290>
 8009efa:	3101      	adds	r1, #1
 8009efc:	0052      	lsls	r2, r2, #1
 8009efe:	e7ba      	b.n	8009e76 <_dtoa_r+0x296>
 8009f00:	69e3      	ldr	r3, [r4, #28]
 8009f02:	9a00      	ldr	r2, [sp, #0]
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	9b04      	ldr	r3, [sp, #16]
 8009f08:	2b0e      	cmp	r3, #14
 8009f0a:	f200 80a8 	bhi.w	800a05e <_dtoa_r+0x47e>
 8009f0e:	2d00      	cmp	r5, #0
 8009f10:	f000 80a5 	beq.w	800a05e <_dtoa_r+0x47e>
 8009f14:	f1bb 0f00 	cmp.w	fp, #0
 8009f18:	dd38      	ble.n	8009f8c <_dtoa_r+0x3ac>
 8009f1a:	4bc0      	ldr	r3, [pc, #768]	; (800a21c <_dtoa_r+0x63c>)
 8009f1c:	f00b 020f 	and.w	r2, fp, #15
 8009f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009f28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009f2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009f30:	d019      	beq.n	8009f66 <_dtoa_r+0x386>
 8009f32:	4bbb      	ldr	r3, [pc, #748]	; (800a220 <_dtoa_r+0x640>)
 8009f34:	ec51 0b18 	vmov	r0, r1, d8
 8009f38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f3c:	f7f6 fc86 	bl	800084c <__aeabi_ddiv>
 8009f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f44:	f008 080f 	and.w	r8, r8, #15
 8009f48:	2503      	movs	r5, #3
 8009f4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a220 <_dtoa_r+0x640>
 8009f4e:	f1b8 0f00 	cmp.w	r8, #0
 8009f52:	d10a      	bne.n	8009f6a <_dtoa_r+0x38a>
 8009f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f58:	4632      	mov	r2, r6
 8009f5a:	463b      	mov	r3, r7
 8009f5c:	f7f6 fc76 	bl	800084c <__aeabi_ddiv>
 8009f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f64:	e02b      	b.n	8009fbe <_dtoa_r+0x3de>
 8009f66:	2502      	movs	r5, #2
 8009f68:	e7ef      	b.n	8009f4a <_dtoa_r+0x36a>
 8009f6a:	f018 0f01 	tst.w	r8, #1
 8009f6e:	d008      	beq.n	8009f82 <_dtoa_r+0x3a2>
 8009f70:	4630      	mov	r0, r6
 8009f72:	4639      	mov	r1, r7
 8009f74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f78:	f7f6 fb3e 	bl	80005f8 <__aeabi_dmul>
 8009f7c:	3501      	adds	r5, #1
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460f      	mov	r7, r1
 8009f82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f86:	f109 0908 	add.w	r9, r9, #8
 8009f8a:	e7e0      	b.n	8009f4e <_dtoa_r+0x36e>
 8009f8c:	f000 809f 	beq.w	800a0ce <_dtoa_r+0x4ee>
 8009f90:	f1cb 0600 	rsb	r6, fp, #0
 8009f94:	4ba1      	ldr	r3, [pc, #644]	; (800a21c <_dtoa_r+0x63c>)
 8009f96:	4fa2      	ldr	r7, [pc, #648]	; (800a220 <_dtoa_r+0x640>)
 8009f98:	f006 020f 	and.w	r2, r6, #15
 8009f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	ec51 0b18 	vmov	r0, r1, d8
 8009fa8:	f7f6 fb26 	bl	80005f8 <__aeabi_dmul>
 8009fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb0:	1136      	asrs	r6, r6, #4
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	2502      	movs	r5, #2
 8009fb6:	2e00      	cmp	r6, #0
 8009fb8:	d17e      	bne.n	800a0b8 <_dtoa_r+0x4d8>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1d0      	bne.n	8009f60 <_dtoa_r+0x380>
 8009fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8084 	beq.w	800a0d2 <_dtoa_r+0x4f2>
 8009fca:	4b96      	ldr	r3, [pc, #600]	; (800a224 <_dtoa_r+0x644>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4640      	mov	r0, r8
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	f7f6 fd83 	bl	8000adc <__aeabi_dcmplt>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d07b      	beq.n	800a0d2 <_dtoa_r+0x4f2>
 8009fda:	9b04      	ldr	r3, [sp, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d078      	beq.n	800a0d2 <_dtoa_r+0x4f2>
 8009fe0:	9b01      	ldr	r3, [sp, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	dd39      	ble.n	800a05a <_dtoa_r+0x47a>
 8009fe6:	4b90      	ldr	r3, [pc, #576]	; (800a228 <_dtoa_r+0x648>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	4640      	mov	r0, r8
 8009fec:	4649      	mov	r1, r9
 8009fee:	f7f6 fb03 	bl	80005f8 <__aeabi_dmul>
 8009ff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ff6:	9e01      	ldr	r6, [sp, #4]
 8009ff8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a002:	4628      	mov	r0, r5
 800a004:	f7f6 fa8e 	bl	8000524 <__aeabi_i2d>
 800a008:	4642      	mov	r2, r8
 800a00a:	464b      	mov	r3, r9
 800a00c:	f7f6 faf4 	bl	80005f8 <__aeabi_dmul>
 800a010:	4b86      	ldr	r3, [pc, #536]	; (800a22c <_dtoa_r+0x64c>)
 800a012:	2200      	movs	r2, #0
 800a014:	f7f6 f93a 	bl	800028c <__adddf3>
 800a018:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a01c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a020:	9303      	str	r3, [sp, #12]
 800a022:	2e00      	cmp	r6, #0
 800a024:	d158      	bne.n	800a0d8 <_dtoa_r+0x4f8>
 800a026:	4b82      	ldr	r3, [pc, #520]	; (800a230 <_dtoa_r+0x650>)
 800a028:	2200      	movs	r2, #0
 800a02a:	4640      	mov	r0, r8
 800a02c:	4649      	mov	r1, r9
 800a02e:	f7f6 f92b 	bl	8000288 <__aeabi_dsub>
 800a032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a036:	4680      	mov	r8, r0
 800a038:	4689      	mov	r9, r1
 800a03a:	f7f6 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 800a03e:	2800      	cmp	r0, #0
 800a040:	f040 8296 	bne.w	800a570 <_dtoa_r+0x990>
 800a044:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a048:	4640      	mov	r0, r8
 800a04a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a04e:	4649      	mov	r1, r9
 800a050:	f7f6 fd44 	bl	8000adc <__aeabi_dcmplt>
 800a054:	2800      	cmp	r0, #0
 800a056:	f040 8289 	bne.w	800a56c <_dtoa_r+0x98c>
 800a05a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a05e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a060:	2b00      	cmp	r3, #0
 800a062:	f2c0 814e 	blt.w	800a302 <_dtoa_r+0x722>
 800a066:	f1bb 0f0e 	cmp.w	fp, #14
 800a06a:	f300 814a 	bgt.w	800a302 <_dtoa_r+0x722>
 800a06e:	4b6b      	ldr	r3, [pc, #428]	; (800a21c <_dtoa_r+0x63c>)
 800a070:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a074:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f280 80dc 	bge.w	800a238 <_dtoa_r+0x658>
 800a080:	9b04      	ldr	r3, [sp, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	f300 80d8 	bgt.w	800a238 <_dtoa_r+0x658>
 800a088:	f040 826f 	bne.w	800a56a <_dtoa_r+0x98a>
 800a08c:	4b68      	ldr	r3, [pc, #416]	; (800a230 <_dtoa_r+0x650>)
 800a08e:	2200      	movs	r2, #0
 800a090:	4640      	mov	r0, r8
 800a092:	4649      	mov	r1, r9
 800a094:	f7f6 fab0 	bl	80005f8 <__aeabi_dmul>
 800a098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a09c:	f7f6 fd32 	bl	8000b04 <__aeabi_dcmpge>
 800a0a0:	9e04      	ldr	r6, [sp, #16]
 800a0a2:	4637      	mov	r7, r6
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f040 8245 	bne.w	800a534 <_dtoa_r+0x954>
 800a0aa:	9d00      	ldr	r5, [sp, #0]
 800a0ac:	2331      	movs	r3, #49	; 0x31
 800a0ae:	f805 3b01 	strb.w	r3, [r5], #1
 800a0b2:	f10b 0b01 	add.w	fp, fp, #1
 800a0b6:	e241      	b.n	800a53c <_dtoa_r+0x95c>
 800a0b8:	07f2      	lsls	r2, r6, #31
 800a0ba:	d505      	bpl.n	800a0c8 <_dtoa_r+0x4e8>
 800a0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c0:	f7f6 fa9a 	bl	80005f8 <__aeabi_dmul>
 800a0c4:	3501      	adds	r5, #1
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	1076      	asrs	r6, r6, #1
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	e773      	b.n	8009fb6 <_dtoa_r+0x3d6>
 800a0ce:	2502      	movs	r5, #2
 800a0d0:	e775      	b.n	8009fbe <_dtoa_r+0x3de>
 800a0d2:	9e04      	ldr	r6, [sp, #16]
 800a0d4:	465f      	mov	r7, fp
 800a0d6:	e792      	b.n	8009ffe <_dtoa_r+0x41e>
 800a0d8:	9900      	ldr	r1, [sp, #0]
 800a0da:	4b50      	ldr	r3, [pc, #320]	; (800a21c <_dtoa_r+0x63c>)
 800a0dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0e0:	4431      	add	r1, r6
 800a0e2:	9102      	str	r1, [sp, #8]
 800a0e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0e6:	eeb0 9a47 	vmov.f32	s18, s14
 800a0ea:	eef0 9a67 	vmov.f32	s19, s15
 800a0ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0f6:	2900      	cmp	r1, #0
 800a0f8:	d044      	beq.n	800a184 <_dtoa_r+0x5a4>
 800a0fa:	494e      	ldr	r1, [pc, #312]	; (800a234 <_dtoa_r+0x654>)
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f7f6 fba5 	bl	800084c <__aeabi_ddiv>
 800a102:	ec53 2b19 	vmov	r2, r3, d9
 800a106:	f7f6 f8bf 	bl	8000288 <__aeabi_dsub>
 800a10a:	9d00      	ldr	r5, [sp, #0]
 800a10c:	ec41 0b19 	vmov	d9, r0, r1
 800a110:	4649      	mov	r1, r9
 800a112:	4640      	mov	r0, r8
 800a114:	f7f6 fd20 	bl	8000b58 <__aeabi_d2iz>
 800a118:	4606      	mov	r6, r0
 800a11a:	f7f6 fa03 	bl	8000524 <__aeabi_i2d>
 800a11e:	4602      	mov	r2, r0
 800a120:	460b      	mov	r3, r1
 800a122:	4640      	mov	r0, r8
 800a124:	4649      	mov	r1, r9
 800a126:	f7f6 f8af 	bl	8000288 <__aeabi_dsub>
 800a12a:	3630      	adds	r6, #48	; 0x30
 800a12c:	f805 6b01 	strb.w	r6, [r5], #1
 800a130:	ec53 2b19 	vmov	r2, r3, d9
 800a134:	4680      	mov	r8, r0
 800a136:	4689      	mov	r9, r1
 800a138:	f7f6 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d164      	bne.n	800a20a <_dtoa_r+0x62a>
 800a140:	4642      	mov	r2, r8
 800a142:	464b      	mov	r3, r9
 800a144:	4937      	ldr	r1, [pc, #220]	; (800a224 <_dtoa_r+0x644>)
 800a146:	2000      	movs	r0, #0
 800a148:	f7f6 f89e 	bl	8000288 <__aeabi_dsub>
 800a14c:	ec53 2b19 	vmov	r2, r3, d9
 800a150:	f7f6 fcc4 	bl	8000adc <__aeabi_dcmplt>
 800a154:	2800      	cmp	r0, #0
 800a156:	f040 80b6 	bne.w	800a2c6 <_dtoa_r+0x6e6>
 800a15a:	9b02      	ldr	r3, [sp, #8]
 800a15c:	429d      	cmp	r5, r3
 800a15e:	f43f af7c 	beq.w	800a05a <_dtoa_r+0x47a>
 800a162:	4b31      	ldr	r3, [pc, #196]	; (800a228 <_dtoa_r+0x648>)
 800a164:	ec51 0b19 	vmov	r0, r1, d9
 800a168:	2200      	movs	r2, #0
 800a16a:	f7f6 fa45 	bl	80005f8 <__aeabi_dmul>
 800a16e:	4b2e      	ldr	r3, [pc, #184]	; (800a228 <_dtoa_r+0x648>)
 800a170:	ec41 0b19 	vmov	d9, r0, r1
 800a174:	2200      	movs	r2, #0
 800a176:	4640      	mov	r0, r8
 800a178:	4649      	mov	r1, r9
 800a17a:	f7f6 fa3d 	bl	80005f8 <__aeabi_dmul>
 800a17e:	4680      	mov	r8, r0
 800a180:	4689      	mov	r9, r1
 800a182:	e7c5      	b.n	800a110 <_dtoa_r+0x530>
 800a184:	ec51 0b17 	vmov	r0, r1, d7
 800a188:	f7f6 fa36 	bl	80005f8 <__aeabi_dmul>
 800a18c:	9b02      	ldr	r3, [sp, #8]
 800a18e:	9d00      	ldr	r5, [sp, #0]
 800a190:	930f      	str	r3, [sp, #60]	; 0x3c
 800a192:	ec41 0b19 	vmov	d9, r0, r1
 800a196:	4649      	mov	r1, r9
 800a198:	4640      	mov	r0, r8
 800a19a:	f7f6 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	f7f6 f9c0 	bl	8000524 <__aeabi_i2d>
 800a1a4:	3630      	adds	r6, #48	; 0x30
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	f7f6 f86b 	bl	8000288 <__aeabi_dsub>
 800a1b2:	f805 6b01 	strb.w	r6, [r5], #1
 800a1b6:	9b02      	ldr	r3, [sp, #8]
 800a1b8:	429d      	cmp	r5, r3
 800a1ba:	4680      	mov	r8, r0
 800a1bc:	4689      	mov	r9, r1
 800a1be:	f04f 0200 	mov.w	r2, #0
 800a1c2:	d124      	bne.n	800a20e <_dtoa_r+0x62e>
 800a1c4:	4b1b      	ldr	r3, [pc, #108]	; (800a234 <_dtoa_r+0x654>)
 800a1c6:	ec51 0b19 	vmov	r0, r1, d9
 800a1ca:	f7f6 f85f 	bl	800028c <__adddf3>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	f7f6 fc9f 	bl	8000b18 <__aeabi_dcmpgt>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d173      	bne.n	800a2c6 <_dtoa_r+0x6e6>
 800a1de:	ec53 2b19 	vmov	r2, r3, d9
 800a1e2:	4914      	ldr	r1, [pc, #80]	; (800a234 <_dtoa_r+0x654>)
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	f7f6 f84f 	bl	8000288 <__aeabi_dsub>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	f7f6 fc73 	bl	8000adc <__aeabi_dcmplt>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	f43f af2f 	beq.w	800a05a <_dtoa_r+0x47a>
 800a1fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a1fe:	1e6b      	subs	r3, r5, #1
 800a200:	930f      	str	r3, [sp, #60]	; 0x3c
 800a202:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a206:	2b30      	cmp	r3, #48	; 0x30
 800a208:	d0f8      	beq.n	800a1fc <_dtoa_r+0x61c>
 800a20a:	46bb      	mov	fp, r7
 800a20c:	e04a      	b.n	800a2a4 <_dtoa_r+0x6c4>
 800a20e:	4b06      	ldr	r3, [pc, #24]	; (800a228 <_dtoa_r+0x648>)
 800a210:	f7f6 f9f2 	bl	80005f8 <__aeabi_dmul>
 800a214:	4680      	mov	r8, r0
 800a216:	4689      	mov	r9, r1
 800a218:	e7bd      	b.n	800a196 <_dtoa_r+0x5b6>
 800a21a:	bf00      	nop
 800a21c:	0800e668 	.word	0x0800e668
 800a220:	0800e640 	.word	0x0800e640
 800a224:	3ff00000 	.word	0x3ff00000
 800a228:	40240000 	.word	0x40240000
 800a22c:	401c0000 	.word	0x401c0000
 800a230:	40140000 	.word	0x40140000
 800a234:	3fe00000 	.word	0x3fe00000
 800a238:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a23c:	9d00      	ldr	r5, [sp, #0]
 800a23e:	4642      	mov	r2, r8
 800a240:	464b      	mov	r3, r9
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	f7f6 fb01 	bl	800084c <__aeabi_ddiv>
 800a24a:	f7f6 fc85 	bl	8000b58 <__aeabi_d2iz>
 800a24e:	9001      	str	r0, [sp, #4]
 800a250:	f7f6 f968 	bl	8000524 <__aeabi_i2d>
 800a254:	4642      	mov	r2, r8
 800a256:	464b      	mov	r3, r9
 800a258:	f7f6 f9ce 	bl	80005f8 <__aeabi_dmul>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f6 f810 	bl	8000288 <__aeabi_dsub>
 800a268:	9e01      	ldr	r6, [sp, #4]
 800a26a:	9f04      	ldr	r7, [sp, #16]
 800a26c:	3630      	adds	r6, #48	; 0x30
 800a26e:	f805 6b01 	strb.w	r6, [r5], #1
 800a272:	9e00      	ldr	r6, [sp, #0]
 800a274:	1bae      	subs	r6, r5, r6
 800a276:	42b7      	cmp	r7, r6
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	d134      	bne.n	800a2e8 <_dtoa_r+0x708>
 800a27e:	f7f6 f805 	bl	800028c <__adddf3>
 800a282:	4642      	mov	r2, r8
 800a284:	464b      	mov	r3, r9
 800a286:	4606      	mov	r6, r0
 800a288:	460f      	mov	r7, r1
 800a28a:	f7f6 fc45 	bl	8000b18 <__aeabi_dcmpgt>
 800a28e:	b9c8      	cbnz	r0, 800a2c4 <_dtoa_r+0x6e4>
 800a290:	4642      	mov	r2, r8
 800a292:	464b      	mov	r3, r9
 800a294:	4630      	mov	r0, r6
 800a296:	4639      	mov	r1, r7
 800a298:	f7f6 fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800a29c:	b110      	cbz	r0, 800a2a4 <_dtoa_r+0x6c4>
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	07db      	lsls	r3, r3, #31
 800a2a2:	d40f      	bmi.n	800a2c4 <_dtoa_r+0x6e4>
 800a2a4:	4651      	mov	r1, sl
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 fbcc 	bl	800aa44 <_Bfree>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2b0:	702b      	strb	r3, [r5, #0]
 800a2b2:	f10b 0301 	add.w	r3, fp, #1
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f43f ace2 	beq.w	8009c84 <_dtoa_r+0xa4>
 800a2c0:	601d      	str	r5, [r3, #0]
 800a2c2:	e4df      	b.n	8009c84 <_dtoa_r+0xa4>
 800a2c4:	465f      	mov	r7, fp
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	461d      	mov	r5, r3
 800a2ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2ce:	2a39      	cmp	r2, #57	; 0x39
 800a2d0:	d106      	bne.n	800a2e0 <_dtoa_r+0x700>
 800a2d2:	9a00      	ldr	r2, [sp, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d1f7      	bne.n	800a2c8 <_dtoa_r+0x6e8>
 800a2d8:	9900      	ldr	r1, [sp, #0]
 800a2da:	2230      	movs	r2, #48	; 0x30
 800a2dc:	3701      	adds	r7, #1
 800a2de:	700a      	strb	r2, [r1, #0]
 800a2e0:	781a      	ldrb	r2, [r3, #0]
 800a2e2:	3201      	adds	r2, #1
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	e790      	b.n	800a20a <_dtoa_r+0x62a>
 800a2e8:	4ba3      	ldr	r3, [pc, #652]	; (800a578 <_dtoa_r+0x998>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f7f6 f984 	bl	80005f8 <__aeabi_dmul>
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	460f      	mov	r7, r1
 800a2f8:	f7f6 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d09e      	beq.n	800a23e <_dtoa_r+0x65e>
 800a300:	e7d0      	b.n	800a2a4 <_dtoa_r+0x6c4>
 800a302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a304:	2a00      	cmp	r2, #0
 800a306:	f000 80ca 	beq.w	800a49e <_dtoa_r+0x8be>
 800a30a:	9a07      	ldr	r2, [sp, #28]
 800a30c:	2a01      	cmp	r2, #1
 800a30e:	f300 80ad 	bgt.w	800a46c <_dtoa_r+0x88c>
 800a312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a314:	2a00      	cmp	r2, #0
 800a316:	f000 80a5 	beq.w	800a464 <_dtoa_r+0x884>
 800a31a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a31e:	9e08      	ldr	r6, [sp, #32]
 800a320:	9d05      	ldr	r5, [sp, #20]
 800a322:	9a05      	ldr	r2, [sp, #20]
 800a324:	441a      	add	r2, r3
 800a326:	9205      	str	r2, [sp, #20]
 800a328:	9a06      	ldr	r2, [sp, #24]
 800a32a:	2101      	movs	r1, #1
 800a32c:	441a      	add	r2, r3
 800a32e:	4620      	mov	r0, r4
 800a330:	9206      	str	r2, [sp, #24]
 800a332:	f000 fc87 	bl	800ac44 <__i2b>
 800a336:	4607      	mov	r7, r0
 800a338:	b165      	cbz	r5, 800a354 <_dtoa_r+0x774>
 800a33a:	9b06      	ldr	r3, [sp, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dd09      	ble.n	800a354 <_dtoa_r+0x774>
 800a340:	42ab      	cmp	r3, r5
 800a342:	9a05      	ldr	r2, [sp, #20]
 800a344:	bfa8      	it	ge
 800a346:	462b      	movge	r3, r5
 800a348:	1ad2      	subs	r2, r2, r3
 800a34a:	9205      	str	r2, [sp, #20]
 800a34c:	9a06      	ldr	r2, [sp, #24]
 800a34e:	1aed      	subs	r5, r5, r3
 800a350:	1ad3      	subs	r3, r2, r3
 800a352:	9306      	str	r3, [sp, #24]
 800a354:	9b08      	ldr	r3, [sp, #32]
 800a356:	b1f3      	cbz	r3, 800a396 <_dtoa_r+0x7b6>
 800a358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	f000 80a3 	beq.w	800a4a6 <_dtoa_r+0x8c6>
 800a360:	2e00      	cmp	r6, #0
 800a362:	dd10      	ble.n	800a386 <_dtoa_r+0x7a6>
 800a364:	4639      	mov	r1, r7
 800a366:	4632      	mov	r2, r6
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 fd2b 	bl	800adc4 <__pow5mult>
 800a36e:	4652      	mov	r2, sl
 800a370:	4601      	mov	r1, r0
 800a372:	4607      	mov	r7, r0
 800a374:	4620      	mov	r0, r4
 800a376:	f000 fc7b 	bl	800ac70 <__multiply>
 800a37a:	4651      	mov	r1, sl
 800a37c:	4680      	mov	r8, r0
 800a37e:	4620      	mov	r0, r4
 800a380:	f000 fb60 	bl	800aa44 <_Bfree>
 800a384:	46c2      	mov	sl, r8
 800a386:	9b08      	ldr	r3, [sp, #32]
 800a388:	1b9a      	subs	r2, r3, r6
 800a38a:	d004      	beq.n	800a396 <_dtoa_r+0x7b6>
 800a38c:	4651      	mov	r1, sl
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 fd18 	bl	800adc4 <__pow5mult>
 800a394:	4682      	mov	sl, r0
 800a396:	2101      	movs	r1, #1
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fc53 	bl	800ac44 <__i2b>
 800a39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	f340 8081 	ble.w	800a4aa <_dtoa_r+0x8ca>
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f000 fd09 	bl	800adc4 <__pow5mult>
 800a3b2:	9b07      	ldr	r3, [sp, #28]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	dd7a      	ble.n	800a4b0 <_dtoa_r+0x8d0>
 800a3ba:	f04f 0800 	mov.w	r8, #0
 800a3be:	6933      	ldr	r3, [r6, #16]
 800a3c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a3c4:	6918      	ldr	r0, [r3, #16]
 800a3c6:	f000 fbef 	bl	800aba8 <__hi0bits>
 800a3ca:	f1c0 0020 	rsb	r0, r0, #32
 800a3ce:	9b06      	ldr	r3, [sp, #24]
 800a3d0:	4418      	add	r0, r3
 800a3d2:	f010 001f 	ands.w	r0, r0, #31
 800a3d6:	f000 8094 	beq.w	800a502 <_dtoa_r+0x922>
 800a3da:	f1c0 0320 	rsb	r3, r0, #32
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	f340 8085 	ble.w	800a4ee <_dtoa_r+0x90e>
 800a3e4:	9b05      	ldr	r3, [sp, #20]
 800a3e6:	f1c0 001c 	rsb	r0, r0, #28
 800a3ea:	4403      	add	r3, r0
 800a3ec:	9305      	str	r3, [sp, #20]
 800a3ee:	9b06      	ldr	r3, [sp, #24]
 800a3f0:	4403      	add	r3, r0
 800a3f2:	4405      	add	r5, r0
 800a3f4:	9306      	str	r3, [sp, #24]
 800a3f6:	9b05      	ldr	r3, [sp, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	dd05      	ble.n	800a408 <_dtoa_r+0x828>
 800a3fc:	4651      	mov	r1, sl
 800a3fe:	461a      	mov	r2, r3
 800a400:	4620      	mov	r0, r4
 800a402:	f000 fd39 	bl	800ae78 <__lshift>
 800a406:	4682      	mov	sl, r0
 800a408:	9b06      	ldr	r3, [sp, #24]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dd05      	ble.n	800a41a <_dtoa_r+0x83a>
 800a40e:	4631      	mov	r1, r6
 800a410:	461a      	mov	r2, r3
 800a412:	4620      	mov	r0, r4
 800a414:	f000 fd30 	bl	800ae78 <__lshift>
 800a418:	4606      	mov	r6, r0
 800a41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d072      	beq.n	800a506 <_dtoa_r+0x926>
 800a420:	4631      	mov	r1, r6
 800a422:	4650      	mov	r0, sl
 800a424:	f000 fd94 	bl	800af50 <__mcmp>
 800a428:	2800      	cmp	r0, #0
 800a42a:	da6c      	bge.n	800a506 <_dtoa_r+0x926>
 800a42c:	2300      	movs	r3, #0
 800a42e:	4651      	mov	r1, sl
 800a430:	220a      	movs	r2, #10
 800a432:	4620      	mov	r0, r4
 800a434:	f000 fb28 	bl	800aa88 <__multadd>
 800a438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a43a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a43e:	4682      	mov	sl, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 81b0 	beq.w	800a7a6 <_dtoa_r+0xbc6>
 800a446:	2300      	movs	r3, #0
 800a448:	4639      	mov	r1, r7
 800a44a:	220a      	movs	r2, #10
 800a44c:	4620      	mov	r0, r4
 800a44e:	f000 fb1b 	bl	800aa88 <__multadd>
 800a452:	9b01      	ldr	r3, [sp, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	4607      	mov	r7, r0
 800a458:	f300 8096 	bgt.w	800a588 <_dtoa_r+0x9a8>
 800a45c:	9b07      	ldr	r3, [sp, #28]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	dc59      	bgt.n	800a516 <_dtoa_r+0x936>
 800a462:	e091      	b.n	800a588 <_dtoa_r+0x9a8>
 800a464:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a46a:	e758      	b.n	800a31e <_dtoa_r+0x73e>
 800a46c:	9b04      	ldr	r3, [sp, #16]
 800a46e:	1e5e      	subs	r6, r3, #1
 800a470:	9b08      	ldr	r3, [sp, #32]
 800a472:	42b3      	cmp	r3, r6
 800a474:	bfbf      	itttt	lt
 800a476:	9b08      	ldrlt	r3, [sp, #32]
 800a478:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a47a:	9608      	strlt	r6, [sp, #32]
 800a47c:	1af3      	sublt	r3, r6, r3
 800a47e:	bfb4      	ite	lt
 800a480:	18d2      	addlt	r2, r2, r3
 800a482:	1b9e      	subge	r6, r3, r6
 800a484:	9b04      	ldr	r3, [sp, #16]
 800a486:	bfbc      	itt	lt
 800a488:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a48a:	2600      	movlt	r6, #0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bfb7      	itett	lt
 800a490:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a494:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a498:	1a9d      	sublt	r5, r3, r2
 800a49a:	2300      	movlt	r3, #0
 800a49c:	e741      	b.n	800a322 <_dtoa_r+0x742>
 800a49e:	9e08      	ldr	r6, [sp, #32]
 800a4a0:	9d05      	ldr	r5, [sp, #20]
 800a4a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a4a4:	e748      	b.n	800a338 <_dtoa_r+0x758>
 800a4a6:	9a08      	ldr	r2, [sp, #32]
 800a4a8:	e770      	b.n	800a38c <_dtoa_r+0x7ac>
 800a4aa:	9b07      	ldr	r3, [sp, #28]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	dc19      	bgt.n	800a4e4 <_dtoa_r+0x904>
 800a4b0:	9b02      	ldr	r3, [sp, #8]
 800a4b2:	b9bb      	cbnz	r3, 800a4e4 <_dtoa_r+0x904>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4ba:	b99b      	cbnz	r3, 800a4e4 <_dtoa_r+0x904>
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4c2:	0d1b      	lsrs	r3, r3, #20
 800a4c4:	051b      	lsls	r3, r3, #20
 800a4c6:	b183      	cbz	r3, 800a4ea <_dtoa_r+0x90a>
 800a4c8:	9b05      	ldr	r3, [sp, #20]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	9305      	str	r3, [sp, #20]
 800a4ce:	9b06      	ldr	r3, [sp, #24]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	9306      	str	r3, [sp, #24]
 800a4d4:	f04f 0801 	mov.w	r8, #1
 800a4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f47f af6f 	bne.w	800a3be <_dtoa_r+0x7de>
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	e774      	b.n	800a3ce <_dtoa_r+0x7ee>
 800a4e4:	f04f 0800 	mov.w	r8, #0
 800a4e8:	e7f6      	b.n	800a4d8 <_dtoa_r+0x8f8>
 800a4ea:	4698      	mov	r8, r3
 800a4ec:	e7f4      	b.n	800a4d8 <_dtoa_r+0x8f8>
 800a4ee:	d082      	beq.n	800a3f6 <_dtoa_r+0x816>
 800a4f0:	9a05      	ldr	r2, [sp, #20]
 800a4f2:	331c      	adds	r3, #28
 800a4f4:	441a      	add	r2, r3
 800a4f6:	9205      	str	r2, [sp, #20]
 800a4f8:	9a06      	ldr	r2, [sp, #24]
 800a4fa:	441a      	add	r2, r3
 800a4fc:	441d      	add	r5, r3
 800a4fe:	9206      	str	r2, [sp, #24]
 800a500:	e779      	b.n	800a3f6 <_dtoa_r+0x816>
 800a502:	4603      	mov	r3, r0
 800a504:	e7f4      	b.n	800a4f0 <_dtoa_r+0x910>
 800a506:	9b04      	ldr	r3, [sp, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dc37      	bgt.n	800a57c <_dtoa_r+0x99c>
 800a50c:	9b07      	ldr	r3, [sp, #28]
 800a50e:	2b02      	cmp	r3, #2
 800a510:	dd34      	ble.n	800a57c <_dtoa_r+0x99c>
 800a512:	9b04      	ldr	r3, [sp, #16]
 800a514:	9301      	str	r3, [sp, #4]
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	b963      	cbnz	r3, 800a534 <_dtoa_r+0x954>
 800a51a:	4631      	mov	r1, r6
 800a51c:	2205      	movs	r2, #5
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 fab2 	bl	800aa88 <__multadd>
 800a524:	4601      	mov	r1, r0
 800a526:	4606      	mov	r6, r0
 800a528:	4650      	mov	r0, sl
 800a52a:	f000 fd11 	bl	800af50 <__mcmp>
 800a52e:	2800      	cmp	r0, #0
 800a530:	f73f adbb 	bgt.w	800a0aa <_dtoa_r+0x4ca>
 800a534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a536:	9d00      	ldr	r5, [sp, #0]
 800a538:	ea6f 0b03 	mvn.w	fp, r3
 800a53c:	f04f 0800 	mov.w	r8, #0
 800a540:	4631      	mov	r1, r6
 800a542:	4620      	mov	r0, r4
 800a544:	f000 fa7e 	bl	800aa44 <_Bfree>
 800a548:	2f00      	cmp	r7, #0
 800a54a:	f43f aeab 	beq.w	800a2a4 <_dtoa_r+0x6c4>
 800a54e:	f1b8 0f00 	cmp.w	r8, #0
 800a552:	d005      	beq.n	800a560 <_dtoa_r+0x980>
 800a554:	45b8      	cmp	r8, r7
 800a556:	d003      	beq.n	800a560 <_dtoa_r+0x980>
 800a558:	4641      	mov	r1, r8
 800a55a:	4620      	mov	r0, r4
 800a55c:	f000 fa72 	bl	800aa44 <_Bfree>
 800a560:	4639      	mov	r1, r7
 800a562:	4620      	mov	r0, r4
 800a564:	f000 fa6e 	bl	800aa44 <_Bfree>
 800a568:	e69c      	b.n	800a2a4 <_dtoa_r+0x6c4>
 800a56a:	2600      	movs	r6, #0
 800a56c:	4637      	mov	r7, r6
 800a56e:	e7e1      	b.n	800a534 <_dtoa_r+0x954>
 800a570:	46bb      	mov	fp, r7
 800a572:	4637      	mov	r7, r6
 800a574:	e599      	b.n	800a0aa <_dtoa_r+0x4ca>
 800a576:	bf00      	nop
 800a578:	40240000 	.word	0x40240000
 800a57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f000 80c8 	beq.w	800a714 <_dtoa_r+0xb34>
 800a584:	9b04      	ldr	r3, [sp, #16]
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	2d00      	cmp	r5, #0
 800a58a:	dd05      	ble.n	800a598 <_dtoa_r+0x9b8>
 800a58c:	4639      	mov	r1, r7
 800a58e:	462a      	mov	r2, r5
 800a590:	4620      	mov	r0, r4
 800a592:	f000 fc71 	bl	800ae78 <__lshift>
 800a596:	4607      	mov	r7, r0
 800a598:	f1b8 0f00 	cmp.w	r8, #0
 800a59c:	d05b      	beq.n	800a656 <_dtoa_r+0xa76>
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f000 fa0f 	bl	800a9c4 <_Balloc>
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	b928      	cbnz	r0, 800a5b6 <_dtoa_r+0x9d6>
 800a5aa:	4b83      	ldr	r3, [pc, #524]	; (800a7b8 <_dtoa_r+0xbd8>)
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a5b2:	f7ff bb2e 	b.w	8009c12 <_dtoa_r+0x32>
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	3202      	adds	r2, #2
 800a5ba:	0092      	lsls	r2, r2, #2
 800a5bc:	f107 010c 	add.w	r1, r7, #12
 800a5c0:	300c      	adds	r0, #12
 800a5c2:	f001 ff85 	bl	800c4d0 <memcpy>
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f000 fc54 	bl	800ae78 <__lshift>
 800a5d0:	9b00      	ldr	r3, [sp, #0]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	9304      	str	r3, [sp, #16]
 800a5d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5da:	4413      	add	r3, r2
 800a5dc:	9308      	str	r3, [sp, #32]
 800a5de:	9b02      	ldr	r3, [sp, #8]
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	46b8      	mov	r8, r7
 800a5e6:	9306      	str	r3, [sp, #24]
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	9b04      	ldr	r3, [sp, #16]
 800a5ec:	4631      	mov	r1, r6
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	9301      	str	r3, [sp, #4]
 800a5f4:	f7ff fa6c 	bl	8009ad0 <quorem>
 800a5f8:	4641      	mov	r1, r8
 800a5fa:	9002      	str	r0, [sp, #8]
 800a5fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a600:	4650      	mov	r0, sl
 800a602:	f000 fca5 	bl	800af50 <__mcmp>
 800a606:	463a      	mov	r2, r7
 800a608:	9005      	str	r0, [sp, #20]
 800a60a:	4631      	mov	r1, r6
 800a60c:	4620      	mov	r0, r4
 800a60e:	f000 fcbb 	bl	800af88 <__mdiff>
 800a612:	68c2      	ldr	r2, [r0, #12]
 800a614:	4605      	mov	r5, r0
 800a616:	bb02      	cbnz	r2, 800a65a <_dtoa_r+0xa7a>
 800a618:	4601      	mov	r1, r0
 800a61a:	4650      	mov	r0, sl
 800a61c:	f000 fc98 	bl	800af50 <__mcmp>
 800a620:	4602      	mov	r2, r0
 800a622:	4629      	mov	r1, r5
 800a624:	4620      	mov	r0, r4
 800a626:	9209      	str	r2, [sp, #36]	; 0x24
 800a628:	f000 fa0c 	bl	800aa44 <_Bfree>
 800a62c:	9b07      	ldr	r3, [sp, #28]
 800a62e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a630:	9d04      	ldr	r5, [sp, #16]
 800a632:	ea43 0102 	orr.w	r1, r3, r2
 800a636:	9b06      	ldr	r3, [sp, #24]
 800a638:	4319      	orrs	r1, r3
 800a63a:	d110      	bne.n	800a65e <_dtoa_r+0xa7e>
 800a63c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a640:	d029      	beq.n	800a696 <_dtoa_r+0xab6>
 800a642:	9b05      	ldr	r3, [sp, #20]
 800a644:	2b00      	cmp	r3, #0
 800a646:	dd02      	ble.n	800a64e <_dtoa_r+0xa6e>
 800a648:	9b02      	ldr	r3, [sp, #8]
 800a64a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	f883 9000 	strb.w	r9, [r3]
 800a654:	e774      	b.n	800a540 <_dtoa_r+0x960>
 800a656:	4638      	mov	r0, r7
 800a658:	e7ba      	b.n	800a5d0 <_dtoa_r+0x9f0>
 800a65a:	2201      	movs	r2, #1
 800a65c:	e7e1      	b.n	800a622 <_dtoa_r+0xa42>
 800a65e:	9b05      	ldr	r3, [sp, #20]
 800a660:	2b00      	cmp	r3, #0
 800a662:	db04      	blt.n	800a66e <_dtoa_r+0xa8e>
 800a664:	9907      	ldr	r1, [sp, #28]
 800a666:	430b      	orrs	r3, r1
 800a668:	9906      	ldr	r1, [sp, #24]
 800a66a:	430b      	orrs	r3, r1
 800a66c:	d120      	bne.n	800a6b0 <_dtoa_r+0xad0>
 800a66e:	2a00      	cmp	r2, #0
 800a670:	dded      	ble.n	800a64e <_dtoa_r+0xa6e>
 800a672:	4651      	mov	r1, sl
 800a674:	2201      	movs	r2, #1
 800a676:	4620      	mov	r0, r4
 800a678:	f000 fbfe 	bl	800ae78 <__lshift>
 800a67c:	4631      	mov	r1, r6
 800a67e:	4682      	mov	sl, r0
 800a680:	f000 fc66 	bl	800af50 <__mcmp>
 800a684:	2800      	cmp	r0, #0
 800a686:	dc03      	bgt.n	800a690 <_dtoa_r+0xab0>
 800a688:	d1e1      	bne.n	800a64e <_dtoa_r+0xa6e>
 800a68a:	f019 0f01 	tst.w	r9, #1
 800a68e:	d0de      	beq.n	800a64e <_dtoa_r+0xa6e>
 800a690:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a694:	d1d8      	bne.n	800a648 <_dtoa_r+0xa68>
 800a696:	9a01      	ldr	r2, [sp, #4]
 800a698:	2339      	movs	r3, #57	; 0x39
 800a69a:	7013      	strb	r3, [r2, #0]
 800a69c:	462b      	mov	r3, r5
 800a69e:	461d      	mov	r5, r3
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6a6:	2a39      	cmp	r2, #57	; 0x39
 800a6a8:	d06c      	beq.n	800a784 <_dtoa_r+0xba4>
 800a6aa:	3201      	adds	r2, #1
 800a6ac:	701a      	strb	r2, [r3, #0]
 800a6ae:	e747      	b.n	800a540 <_dtoa_r+0x960>
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	dd07      	ble.n	800a6c4 <_dtoa_r+0xae4>
 800a6b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a6b8:	d0ed      	beq.n	800a696 <_dtoa_r+0xab6>
 800a6ba:	9a01      	ldr	r2, [sp, #4]
 800a6bc:	f109 0301 	add.w	r3, r9, #1
 800a6c0:	7013      	strb	r3, [r2, #0]
 800a6c2:	e73d      	b.n	800a540 <_dtoa_r+0x960>
 800a6c4:	9b04      	ldr	r3, [sp, #16]
 800a6c6:	9a08      	ldr	r2, [sp, #32]
 800a6c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d043      	beq.n	800a758 <_dtoa_r+0xb78>
 800a6d0:	4651      	mov	r1, sl
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	220a      	movs	r2, #10
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f000 f9d6 	bl	800aa88 <__multadd>
 800a6dc:	45b8      	cmp	r8, r7
 800a6de:	4682      	mov	sl, r0
 800a6e0:	f04f 0300 	mov.w	r3, #0
 800a6e4:	f04f 020a 	mov.w	r2, #10
 800a6e8:	4641      	mov	r1, r8
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	d107      	bne.n	800a6fe <_dtoa_r+0xb1e>
 800a6ee:	f000 f9cb 	bl	800aa88 <__multadd>
 800a6f2:	4680      	mov	r8, r0
 800a6f4:	4607      	mov	r7, r0
 800a6f6:	9b04      	ldr	r3, [sp, #16]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	e775      	b.n	800a5ea <_dtoa_r+0xa0a>
 800a6fe:	f000 f9c3 	bl	800aa88 <__multadd>
 800a702:	4639      	mov	r1, r7
 800a704:	4680      	mov	r8, r0
 800a706:	2300      	movs	r3, #0
 800a708:	220a      	movs	r2, #10
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 f9bc 	bl	800aa88 <__multadd>
 800a710:	4607      	mov	r7, r0
 800a712:	e7f0      	b.n	800a6f6 <_dtoa_r+0xb16>
 800a714:	9b04      	ldr	r3, [sp, #16]
 800a716:	9301      	str	r3, [sp, #4]
 800a718:	9d00      	ldr	r5, [sp, #0]
 800a71a:	4631      	mov	r1, r6
 800a71c:	4650      	mov	r0, sl
 800a71e:	f7ff f9d7 	bl	8009ad0 <quorem>
 800a722:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	f805 9b01 	strb.w	r9, [r5], #1
 800a72c:	1aea      	subs	r2, r5, r3
 800a72e:	9b01      	ldr	r3, [sp, #4]
 800a730:	4293      	cmp	r3, r2
 800a732:	dd07      	ble.n	800a744 <_dtoa_r+0xb64>
 800a734:	4651      	mov	r1, sl
 800a736:	2300      	movs	r3, #0
 800a738:	220a      	movs	r2, #10
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 f9a4 	bl	800aa88 <__multadd>
 800a740:	4682      	mov	sl, r0
 800a742:	e7ea      	b.n	800a71a <_dtoa_r+0xb3a>
 800a744:	9b01      	ldr	r3, [sp, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	bfc8      	it	gt
 800a74a:	461d      	movgt	r5, r3
 800a74c:	9b00      	ldr	r3, [sp, #0]
 800a74e:	bfd8      	it	le
 800a750:	2501      	movle	r5, #1
 800a752:	441d      	add	r5, r3
 800a754:	f04f 0800 	mov.w	r8, #0
 800a758:	4651      	mov	r1, sl
 800a75a:	2201      	movs	r2, #1
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 fb8b 	bl	800ae78 <__lshift>
 800a762:	4631      	mov	r1, r6
 800a764:	4682      	mov	sl, r0
 800a766:	f000 fbf3 	bl	800af50 <__mcmp>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	dc96      	bgt.n	800a69c <_dtoa_r+0xabc>
 800a76e:	d102      	bne.n	800a776 <_dtoa_r+0xb96>
 800a770:	f019 0f01 	tst.w	r9, #1
 800a774:	d192      	bne.n	800a69c <_dtoa_r+0xabc>
 800a776:	462b      	mov	r3, r5
 800a778:	461d      	mov	r5, r3
 800a77a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a77e:	2a30      	cmp	r2, #48	; 0x30
 800a780:	d0fa      	beq.n	800a778 <_dtoa_r+0xb98>
 800a782:	e6dd      	b.n	800a540 <_dtoa_r+0x960>
 800a784:	9a00      	ldr	r2, [sp, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d189      	bne.n	800a69e <_dtoa_r+0xabe>
 800a78a:	f10b 0b01 	add.w	fp, fp, #1
 800a78e:	2331      	movs	r3, #49	; 0x31
 800a790:	e796      	b.n	800a6c0 <_dtoa_r+0xae0>
 800a792:	4b0a      	ldr	r3, [pc, #40]	; (800a7bc <_dtoa_r+0xbdc>)
 800a794:	f7ff ba99 	b.w	8009cca <_dtoa_r+0xea>
 800a798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f47f aa6d 	bne.w	8009c7a <_dtoa_r+0x9a>
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <_dtoa_r+0xbe0>)
 800a7a2:	f7ff ba92 	b.w	8009cca <_dtoa_r+0xea>
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dcb5      	bgt.n	800a718 <_dtoa_r+0xb38>
 800a7ac:	9b07      	ldr	r3, [sp, #28]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	f73f aeb1 	bgt.w	800a516 <_dtoa_r+0x936>
 800a7b4:	e7b0      	b.n	800a718 <_dtoa_r+0xb38>
 800a7b6:	bf00      	nop
 800a7b8:	0800e5d5 	.word	0x0800e5d5
 800a7bc:	0800e530 	.word	0x0800e530
 800a7c0:	0800e559 	.word	0x0800e559

0800a7c4 <_free_r>:
 800a7c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7c6:	2900      	cmp	r1, #0
 800a7c8:	d044      	beq.n	800a854 <_free_r+0x90>
 800a7ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ce:	9001      	str	r0, [sp, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f1a1 0404 	sub.w	r4, r1, #4
 800a7d6:	bfb8      	it	lt
 800a7d8:	18e4      	addlt	r4, r4, r3
 800a7da:	f000 f8e7 	bl	800a9ac <__malloc_lock>
 800a7de:	4a1e      	ldr	r2, [pc, #120]	; (800a858 <_free_r+0x94>)
 800a7e0:	9801      	ldr	r0, [sp, #4]
 800a7e2:	6813      	ldr	r3, [r2, #0]
 800a7e4:	b933      	cbnz	r3, 800a7f4 <_free_r+0x30>
 800a7e6:	6063      	str	r3, [r4, #4]
 800a7e8:	6014      	str	r4, [r2, #0]
 800a7ea:	b003      	add	sp, #12
 800a7ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7f0:	f000 b8e2 	b.w	800a9b8 <__malloc_unlock>
 800a7f4:	42a3      	cmp	r3, r4
 800a7f6:	d908      	bls.n	800a80a <_free_r+0x46>
 800a7f8:	6825      	ldr	r5, [r4, #0]
 800a7fa:	1961      	adds	r1, r4, r5
 800a7fc:	428b      	cmp	r3, r1
 800a7fe:	bf01      	itttt	eq
 800a800:	6819      	ldreq	r1, [r3, #0]
 800a802:	685b      	ldreq	r3, [r3, #4]
 800a804:	1949      	addeq	r1, r1, r5
 800a806:	6021      	streq	r1, [r4, #0]
 800a808:	e7ed      	b.n	800a7e6 <_free_r+0x22>
 800a80a:	461a      	mov	r2, r3
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	b10b      	cbz	r3, 800a814 <_free_r+0x50>
 800a810:	42a3      	cmp	r3, r4
 800a812:	d9fa      	bls.n	800a80a <_free_r+0x46>
 800a814:	6811      	ldr	r1, [r2, #0]
 800a816:	1855      	adds	r5, r2, r1
 800a818:	42a5      	cmp	r5, r4
 800a81a:	d10b      	bne.n	800a834 <_free_r+0x70>
 800a81c:	6824      	ldr	r4, [r4, #0]
 800a81e:	4421      	add	r1, r4
 800a820:	1854      	adds	r4, r2, r1
 800a822:	42a3      	cmp	r3, r4
 800a824:	6011      	str	r1, [r2, #0]
 800a826:	d1e0      	bne.n	800a7ea <_free_r+0x26>
 800a828:	681c      	ldr	r4, [r3, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	6053      	str	r3, [r2, #4]
 800a82e:	440c      	add	r4, r1
 800a830:	6014      	str	r4, [r2, #0]
 800a832:	e7da      	b.n	800a7ea <_free_r+0x26>
 800a834:	d902      	bls.n	800a83c <_free_r+0x78>
 800a836:	230c      	movs	r3, #12
 800a838:	6003      	str	r3, [r0, #0]
 800a83a:	e7d6      	b.n	800a7ea <_free_r+0x26>
 800a83c:	6825      	ldr	r5, [r4, #0]
 800a83e:	1961      	adds	r1, r4, r5
 800a840:	428b      	cmp	r3, r1
 800a842:	bf04      	itt	eq
 800a844:	6819      	ldreq	r1, [r3, #0]
 800a846:	685b      	ldreq	r3, [r3, #4]
 800a848:	6063      	str	r3, [r4, #4]
 800a84a:	bf04      	itt	eq
 800a84c:	1949      	addeq	r1, r1, r5
 800a84e:	6021      	streq	r1, [r4, #0]
 800a850:	6054      	str	r4, [r2, #4]
 800a852:	e7ca      	b.n	800a7ea <_free_r+0x26>
 800a854:	b003      	add	sp, #12
 800a856:	bd30      	pop	{r4, r5, pc}
 800a858:	200006e0 	.word	0x200006e0

0800a85c <malloc>:
 800a85c:	4b02      	ldr	r3, [pc, #8]	; (800a868 <malloc+0xc>)
 800a85e:	4601      	mov	r1, r0
 800a860:	6818      	ldr	r0, [r3, #0]
 800a862:	f000 b823 	b.w	800a8ac <_malloc_r>
 800a866:	bf00      	nop
 800a868:	20000064 	.word	0x20000064

0800a86c <sbrk_aligned>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	4e0e      	ldr	r6, [pc, #56]	; (800a8a8 <sbrk_aligned+0x3c>)
 800a870:	460c      	mov	r4, r1
 800a872:	6831      	ldr	r1, [r6, #0]
 800a874:	4605      	mov	r5, r0
 800a876:	b911      	cbnz	r1, 800a87e <sbrk_aligned+0x12>
 800a878:	f001 fe1a 	bl	800c4b0 <_sbrk_r>
 800a87c:	6030      	str	r0, [r6, #0]
 800a87e:	4621      	mov	r1, r4
 800a880:	4628      	mov	r0, r5
 800a882:	f001 fe15 	bl	800c4b0 <_sbrk_r>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	d00a      	beq.n	800a8a0 <sbrk_aligned+0x34>
 800a88a:	1cc4      	adds	r4, r0, #3
 800a88c:	f024 0403 	bic.w	r4, r4, #3
 800a890:	42a0      	cmp	r0, r4
 800a892:	d007      	beq.n	800a8a4 <sbrk_aligned+0x38>
 800a894:	1a21      	subs	r1, r4, r0
 800a896:	4628      	mov	r0, r5
 800a898:	f001 fe0a 	bl	800c4b0 <_sbrk_r>
 800a89c:	3001      	adds	r0, #1
 800a89e:	d101      	bne.n	800a8a4 <sbrk_aligned+0x38>
 800a8a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	bd70      	pop	{r4, r5, r6, pc}
 800a8a8:	200006e4 	.word	0x200006e4

0800a8ac <_malloc_r>:
 800a8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b0:	1ccd      	adds	r5, r1, #3
 800a8b2:	f025 0503 	bic.w	r5, r5, #3
 800a8b6:	3508      	adds	r5, #8
 800a8b8:	2d0c      	cmp	r5, #12
 800a8ba:	bf38      	it	cc
 800a8bc:	250c      	movcc	r5, #12
 800a8be:	2d00      	cmp	r5, #0
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	db01      	blt.n	800a8c8 <_malloc_r+0x1c>
 800a8c4:	42a9      	cmp	r1, r5
 800a8c6:	d905      	bls.n	800a8d4 <_malloc_r+0x28>
 800a8c8:	230c      	movs	r3, #12
 800a8ca:	603b      	str	r3, [r7, #0]
 800a8cc:	2600      	movs	r6, #0
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a9a8 <_malloc_r+0xfc>
 800a8d8:	f000 f868 	bl	800a9ac <__malloc_lock>
 800a8dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a8e0:	461c      	mov	r4, r3
 800a8e2:	bb5c      	cbnz	r4, 800a93c <_malloc_r+0x90>
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	f7ff ffc0 	bl	800a86c <sbrk_aligned>
 800a8ec:	1c43      	adds	r3, r0, #1
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	d155      	bne.n	800a99e <_malloc_r+0xf2>
 800a8f2:	f8d8 4000 	ldr.w	r4, [r8]
 800a8f6:	4626      	mov	r6, r4
 800a8f8:	2e00      	cmp	r6, #0
 800a8fa:	d145      	bne.n	800a988 <_malloc_r+0xdc>
 800a8fc:	2c00      	cmp	r4, #0
 800a8fe:	d048      	beq.n	800a992 <_malloc_r+0xe6>
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	4631      	mov	r1, r6
 800a904:	4638      	mov	r0, r7
 800a906:	eb04 0903 	add.w	r9, r4, r3
 800a90a:	f001 fdd1 	bl	800c4b0 <_sbrk_r>
 800a90e:	4581      	cmp	r9, r0
 800a910:	d13f      	bne.n	800a992 <_malloc_r+0xe6>
 800a912:	6821      	ldr	r1, [r4, #0]
 800a914:	1a6d      	subs	r5, r5, r1
 800a916:	4629      	mov	r1, r5
 800a918:	4638      	mov	r0, r7
 800a91a:	f7ff ffa7 	bl	800a86c <sbrk_aligned>
 800a91e:	3001      	adds	r0, #1
 800a920:	d037      	beq.n	800a992 <_malloc_r+0xe6>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	442b      	add	r3, r5
 800a926:	6023      	str	r3, [r4, #0]
 800a928:	f8d8 3000 	ldr.w	r3, [r8]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d038      	beq.n	800a9a2 <_malloc_r+0xf6>
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	42a2      	cmp	r2, r4
 800a934:	d12b      	bne.n	800a98e <_malloc_r+0xe2>
 800a936:	2200      	movs	r2, #0
 800a938:	605a      	str	r2, [r3, #4]
 800a93a:	e00f      	b.n	800a95c <_malloc_r+0xb0>
 800a93c:	6822      	ldr	r2, [r4, #0]
 800a93e:	1b52      	subs	r2, r2, r5
 800a940:	d41f      	bmi.n	800a982 <_malloc_r+0xd6>
 800a942:	2a0b      	cmp	r2, #11
 800a944:	d917      	bls.n	800a976 <_malloc_r+0xca>
 800a946:	1961      	adds	r1, r4, r5
 800a948:	42a3      	cmp	r3, r4
 800a94a:	6025      	str	r5, [r4, #0]
 800a94c:	bf18      	it	ne
 800a94e:	6059      	strne	r1, [r3, #4]
 800a950:	6863      	ldr	r3, [r4, #4]
 800a952:	bf08      	it	eq
 800a954:	f8c8 1000 	streq.w	r1, [r8]
 800a958:	5162      	str	r2, [r4, r5]
 800a95a:	604b      	str	r3, [r1, #4]
 800a95c:	4638      	mov	r0, r7
 800a95e:	f104 060b 	add.w	r6, r4, #11
 800a962:	f000 f829 	bl	800a9b8 <__malloc_unlock>
 800a966:	f026 0607 	bic.w	r6, r6, #7
 800a96a:	1d23      	adds	r3, r4, #4
 800a96c:	1af2      	subs	r2, r6, r3
 800a96e:	d0ae      	beq.n	800a8ce <_malloc_r+0x22>
 800a970:	1b9b      	subs	r3, r3, r6
 800a972:	50a3      	str	r3, [r4, r2]
 800a974:	e7ab      	b.n	800a8ce <_malloc_r+0x22>
 800a976:	42a3      	cmp	r3, r4
 800a978:	6862      	ldr	r2, [r4, #4]
 800a97a:	d1dd      	bne.n	800a938 <_malloc_r+0x8c>
 800a97c:	f8c8 2000 	str.w	r2, [r8]
 800a980:	e7ec      	b.n	800a95c <_malloc_r+0xb0>
 800a982:	4623      	mov	r3, r4
 800a984:	6864      	ldr	r4, [r4, #4]
 800a986:	e7ac      	b.n	800a8e2 <_malloc_r+0x36>
 800a988:	4634      	mov	r4, r6
 800a98a:	6876      	ldr	r6, [r6, #4]
 800a98c:	e7b4      	b.n	800a8f8 <_malloc_r+0x4c>
 800a98e:	4613      	mov	r3, r2
 800a990:	e7cc      	b.n	800a92c <_malloc_r+0x80>
 800a992:	230c      	movs	r3, #12
 800a994:	603b      	str	r3, [r7, #0]
 800a996:	4638      	mov	r0, r7
 800a998:	f000 f80e 	bl	800a9b8 <__malloc_unlock>
 800a99c:	e797      	b.n	800a8ce <_malloc_r+0x22>
 800a99e:	6025      	str	r5, [r4, #0]
 800a9a0:	e7dc      	b.n	800a95c <_malloc_r+0xb0>
 800a9a2:	605b      	str	r3, [r3, #4]
 800a9a4:	deff      	udf	#255	; 0xff
 800a9a6:	bf00      	nop
 800a9a8:	200006e0 	.word	0x200006e0

0800a9ac <__malloc_lock>:
 800a9ac:	4801      	ldr	r0, [pc, #4]	; (800a9b4 <__malloc_lock+0x8>)
 800a9ae:	f7ff b886 	b.w	8009abe <__retarget_lock_acquire_recursive>
 800a9b2:	bf00      	nop
 800a9b4:	200006dc 	.word	0x200006dc

0800a9b8 <__malloc_unlock>:
 800a9b8:	4801      	ldr	r0, [pc, #4]	; (800a9c0 <__malloc_unlock+0x8>)
 800a9ba:	f7ff b881 	b.w	8009ac0 <__retarget_lock_release_recursive>
 800a9be:	bf00      	nop
 800a9c0:	200006dc 	.word	0x200006dc

0800a9c4 <_Balloc>:
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	69c6      	ldr	r6, [r0, #28]
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	b976      	cbnz	r6, 800a9ec <_Balloc+0x28>
 800a9ce:	2010      	movs	r0, #16
 800a9d0:	f7ff ff44 	bl	800a85c <malloc>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	61e0      	str	r0, [r4, #28]
 800a9d8:	b920      	cbnz	r0, 800a9e4 <_Balloc+0x20>
 800a9da:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <_Balloc+0x78>)
 800a9dc:	4818      	ldr	r0, [pc, #96]	; (800aa40 <_Balloc+0x7c>)
 800a9de:	216b      	movs	r1, #107	; 0x6b
 800a9e0:	f001 fd8e 	bl	800c500 <__assert_func>
 800a9e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9e8:	6006      	str	r6, [r0, #0]
 800a9ea:	60c6      	str	r6, [r0, #12]
 800a9ec:	69e6      	ldr	r6, [r4, #28]
 800a9ee:	68f3      	ldr	r3, [r6, #12]
 800a9f0:	b183      	cbz	r3, 800aa14 <_Balloc+0x50>
 800a9f2:	69e3      	ldr	r3, [r4, #28]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9fa:	b9b8      	cbnz	r0, 800aa2c <_Balloc+0x68>
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	fa01 f605 	lsl.w	r6, r1, r5
 800aa02:	1d72      	adds	r2, r6, #5
 800aa04:	0092      	lsls	r2, r2, #2
 800aa06:	4620      	mov	r0, r4
 800aa08:	f001 fd98 	bl	800c53c <_calloc_r>
 800aa0c:	b160      	cbz	r0, 800aa28 <_Balloc+0x64>
 800aa0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa12:	e00e      	b.n	800aa32 <_Balloc+0x6e>
 800aa14:	2221      	movs	r2, #33	; 0x21
 800aa16:	2104      	movs	r1, #4
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f001 fd8f 	bl	800c53c <_calloc_r>
 800aa1e:	69e3      	ldr	r3, [r4, #28]
 800aa20:	60f0      	str	r0, [r6, #12]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1e4      	bne.n	800a9f2 <_Balloc+0x2e>
 800aa28:	2000      	movs	r0, #0
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}
 800aa2c:	6802      	ldr	r2, [r0, #0]
 800aa2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa32:	2300      	movs	r3, #0
 800aa34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa38:	e7f7      	b.n	800aa2a <_Balloc+0x66>
 800aa3a:	bf00      	nop
 800aa3c:	0800e566 	.word	0x0800e566
 800aa40:	0800e5e6 	.word	0x0800e5e6

0800aa44 <_Bfree>:
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	69c6      	ldr	r6, [r0, #28]
 800aa48:	4605      	mov	r5, r0
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	b976      	cbnz	r6, 800aa6c <_Bfree+0x28>
 800aa4e:	2010      	movs	r0, #16
 800aa50:	f7ff ff04 	bl	800a85c <malloc>
 800aa54:	4602      	mov	r2, r0
 800aa56:	61e8      	str	r0, [r5, #28]
 800aa58:	b920      	cbnz	r0, 800aa64 <_Bfree+0x20>
 800aa5a:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <_Bfree+0x3c>)
 800aa5c:	4809      	ldr	r0, [pc, #36]	; (800aa84 <_Bfree+0x40>)
 800aa5e:	218f      	movs	r1, #143	; 0x8f
 800aa60:	f001 fd4e 	bl	800c500 <__assert_func>
 800aa64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa68:	6006      	str	r6, [r0, #0]
 800aa6a:	60c6      	str	r6, [r0, #12]
 800aa6c:	b13c      	cbz	r4, 800aa7e <_Bfree+0x3a>
 800aa6e:	69eb      	ldr	r3, [r5, #28]
 800aa70:	6862      	ldr	r2, [r4, #4]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa78:	6021      	str	r1, [r4, #0]
 800aa7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}
 800aa80:	0800e566 	.word	0x0800e566
 800aa84:	0800e5e6 	.word	0x0800e5e6

0800aa88 <__multadd>:
 800aa88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8c:	690d      	ldr	r5, [r1, #16]
 800aa8e:	4607      	mov	r7, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	461e      	mov	r6, r3
 800aa94:	f101 0c14 	add.w	ip, r1, #20
 800aa98:	2000      	movs	r0, #0
 800aa9a:	f8dc 3000 	ldr.w	r3, [ip]
 800aa9e:	b299      	uxth	r1, r3
 800aaa0:	fb02 6101 	mla	r1, r2, r1, r6
 800aaa4:	0c1e      	lsrs	r6, r3, #16
 800aaa6:	0c0b      	lsrs	r3, r1, #16
 800aaa8:	fb02 3306 	mla	r3, r2, r6, r3
 800aaac:	b289      	uxth	r1, r1
 800aaae:	3001      	adds	r0, #1
 800aab0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aab4:	4285      	cmp	r5, r0
 800aab6:	f84c 1b04 	str.w	r1, [ip], #4
 800aaba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aabe:	dcec      	bgt.n	800aa9a <__multadd+0x12>
 800aac0:	b30e      	cbz	r6, 800ab06 <__multadd+0x7e>
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	42ab      	cmp	r3, r5
 800aac6:	dc19      	bgt.n	800aafc <__multadd+0x74>
 800aac8:	6861      	ldr	r1, [r4, #4]
 800aaca:	4638      	mov	r0, r7
 800aacc:	3101      	adds	r1, #1
 800aace:	f7ff ff79 	bl	800a9c4 <_Balloc>
 800aad2:	4680      	mov	r8, r0
 800aad4:	b928      	cbnz	r0, 800aae2 <__multadd+0x5a>
 800aad6:	4602      	mov	r2, r0
 800aad8:	4b0c      	ldr	r3, [pc, #48]	; (800ab0c <__multadd+0x84>)
 800aada:	480d      	ldr	r0, [pc, #52]	; (800ab10 <__multadd+0x88>)
 800aadc:	21ba      	movs	r1, #186	; 0xba
 800aade:	f001 fd0f 	bl	800c500 <__assert_func>
 800aae2:	6922      	ldr	r2, [r4, #16]
 800aae4:	3202      	adds	r2, #2
 800aae6:	f104 010c 	add.w	r1, r4, #12
 800aaea:	0092      	lsls	r2, r2, #2
 800aaec:	300c      	adds	r0, #12
 800aaee:	f001 fcef 	bl	800c4d0 <memcpy>
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f7ff ffa5 	bl	800aa44 <_Bfree>
 800aafa:	4644      	mov	r4, r8
 800aafc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab00:	3501      	adds	r5, #1
 800ab02:	615e      	str	r6, [r3, #20]
 800ab04:	6125      	str	r5, [r4, #16]
 800ab06:	4620      	mov	r0, r4
 800ab08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab0c:	0800e5d5 	.word	0x0800e5d5
 800ab10:	0800e5e6 	.word	0x0800e5e6

0800ab14 <__s2b>:
 800ab14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab18:	460c      	mov	r4, r1
 800ab1a:	4615      	mov	r5, r2
 800ab1c:	461f      	mov	r7, r3
 800ab1e:	2209      	movs	r2, #9
 800ab20:	3308      	adds	r3, #8
 800ab22:	4606      	mov	r6, r0
 800ab24:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab28:	2100      	movs	r1, #0
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	db09      	blt.n	800ab44 <__s2b+0x30>
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7ff ff47 	bl	800a9c4 <_Balloc>
 800ab36:	b940      	cbnz	r0, 800ab4a <__s2b+0x36>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	4b19      	ldr	r3, [pc, #100]	; (800aba0 <__s2b+0x8c>)
 800ab3c:	4819      	ldr	r0, [pc, #100]	; (800aba4 <__s2b+0x90>)
 800ab3e:	21d3      	movs	r1, #211	; 0xd3
 800ab40:	f001 fcde 	bl	800c500 <__assert_func>
 800ab44:	0052      	lsls	r2, r2, #1
 800ab46:	3101      	adds	r1, #1
 800ab48:	e7f0      	b.n	800ab2c <__s2b+0x18>
 800ab4a:	9b08      	ldr	r3, [sp, #32]
 800ab4c:	6143      	str	r3, [r0, #20]
 800ab4e:	2d09      	cmp	r5, #9
 800ab50:	f04f 0301 	mov.w	r3, #1
 800ab54:	6103      	str	r3, [r0, #16]
 800ab56:	dd16      	ble.n	800ab86 <__s2b+0x72>
 800ab58:	f104 0909 	add.w	r9, r4, #9
 800ab5c:	46c8      	mov	r8, r9
 800ab5e:	442c      	add	r4, r5
 800ab60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab64:	4601      	mov	r1, r0
 800ab66:	3b30      	subs	r3, #48	; 0x30
 800ab68:	220a      	movs	r2, #10
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	f7ff ff8c 	bl	800aa88 <__multadd>
 800ab70:	45a0      	cmp	r8, r4
 800ab72:	d1f5      	bne.n	800ab60 <__s2b+0x4c>
 800ab74:	f1a5 0408 	sub.w	r4, r5, #8
 800ab78:	444c      	add	r4, r9
 800ab7a:	1b2d      	subs	r5, r5, r4
 800ab7c:	1963      	adds	r3, r4, r5
 800ab7e:	42bb      	cmp	r3, r7
 800ab80:	db04      	blt.n	800ab8c <__s2b+0x78>
 800ab82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab86:	340a      	adds	r4, #10
 800ab88:	2509      	movs	r5, #9
 800ab8a:	e7f6      	b.n	800ab7a <__s2b+0x66>
 800ab8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab90:	4601      	mov	r1, r0
 800ab92:	3b30      	subs	r3, #48	; 0x30
 800ab94:	220a      	movs	r2, #10
 800ab96:	4630      	mov	r0, r6
 800ab98:	f7ff ff76 	bl	800aa88 <__multadd>
 800ab9c:	e7ee      	b.n	800ab7c <__s2b+0x68>
 800ab9e:	bf00      	nop
 800aba0:	0800e5d5 	.word	0x0800e5d5
 800aba4:	0800e5e6 	.word	0x0800e5e6

0800aba8 <__hi0bits>:
 800aba8:	0c03      	lsrs	r3, r0, #16
 800abaa:	041b      	lsls	r3, r3, #16
 800abac:	b9d3      	cbnz	r3, 800abe4 <__hi0bits+0x3c>
 800abae:	0400      	lsls	r0, r0, #16
 800abb0:	2310      	movs	r3, #16
 800abb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800abb6:	bf04      	itt	eq
 800abb8:	0200      	lsleq	r0, r0, #8
 800abba:	3308      	addeq	r3, #8
 800abbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800abc0:	bf04      	itt	eq
 800abc2:	0100      	lsleq	r0, r0, #4
 800abc4:	3304      	addeq	r3, #4
 800abc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800abca:	bf04      	itt	eq
 800abcc:	0080      	lsleq	r0, r0, #2
 800abce:	3302      	addeq	r3, #2
 800abd0:	2800      	cmp	r0, #0
 800abd2:	db05      	blt.n	800abe0 <__hi0bits+0x38>
 800abd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800abd8:	f103 0301 	add.w	r3, r3, #1
 800abdc:	bf08      	it	eq
 800abde:	2320      	moveq	r3, #32
 800abe0:	4618      	mov	r0, r3
 800abe2:	4770      	bx	lr
 800abe4:	2300      	movs	r3, #0
 800abe6:	e7e4      	b.n	800abb2 <__hi0bits+0xa>

0800abe8 <__lo0bits>:
 800abe8:	6803      	ldr	r3, [r0, #0]
 800abea:	f013 0207 	ands.w	r2, r3, #7
 800abee:	d00c      	beq.n	800ac0a <__lo0bits+0x22>
 800abf0:	07d9      	lsls	r1, r3, #31
 800abf2:	d422      	bmi.n	800ac3a <__lo0bits+0x52>
 800abf4:	079a      	lsls	r2, r3, #30
 800abf6:	bf49      	itett	mi
 800abf8:	085b      	lsrmi	r3, r3, #1
 800abfa:	089b      	lsrpl	r3, r3, #2
 800abfc:	6003      	strmi	r3, [r0, #0]
 800abfe:	2201      	movmi	r2, #1
 800ac00:	bf5c      	itt	pl
 800ac02:	6003      	strpl	r3, [r0, #0]
 800ac04:	2202      	movpl	r2, #2
 800ac06:	4610      	mov	r0, r2
 800ac08:	4770      	bx	lr
 800ac0a:	b299      	uxth	r1, r3
 800ac0c:	b909      	cbnz	r1, 800ac12 <__lo0bits+0x2a>
 800ac0e:	0c1b      	lsrs	r3, r3, #16
 800ac10:	2210      	movs	r2, #16
 800ac12:	b2d9      	uxtb	r1, r3
 800ac14:	b909      	cbnz	r1, 800ac1a <__lo0bits+0x32>
 800ac16:	3208      	adds	r2, #8
 800ac18:	0a1b      	lsrs	r3, r3, #8
 800ac1a:	0719      	lsls	r1, r3, #28
 800ac1c:	bf04      	itt	eq
 800ac1e:	091b      	lsreq	r3, r3, #4
 800ac20:	3204      	addeq	r2, #4
 800ac22:	0799      	lsls	r1, r3, #30
 800ac24:	bf04      	itt	eq
 800ac26:	089b      	lsreq	r3, r3, #2
 800ac28:	3202      	addeq	r2, #2
 800ac2a:	07d9      	lsls	r1, r3, #31
 800ac2c:	d403      	bmi.n	800ac36 <__lo0bits+0x4e>
 800ac2e:	085b      	lsrs	r3, r3, #1
 800ac30:	f102 0201 	add.w	r2, r2, #1
 800ac34:	d003      	beq.n	800ac3e <__lo0bits+0x56>
 800ac36:	6003      	str	r3, [r0, #0]
 800ac38:	e7e5      	b.n	800ac06 <__lo0bits+0x1e>
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	e7e3      	b.n	800ac06 <__lo0bits+0x1e>
 800ac3e:	2220      	movs	r2, #32
 800ac40:	e7e1      	b.n	800ac06 <__lo0bits+0x1e>
	...

0800ac44 <__i2b>:
 800ac44:	b510      	push	{r4, lr}
 800ac46:	460c      	mov	r4, r1
 800ac48:	2101      	movs	r1, #1
 800ac4a:	f7ff febb 	bl	800a9c4 <_Balloc>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	b928      	cbnz	r0, 800ac5e <__i2b+0x1a>
 800ac52:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <__i2b+0x24>)
 800ac54:	4805      	ldr	r0, [pc, #20]	; (800ac6c <__i2b+0x28>)
 800ac56:	f240 1145 	movw	r1, #325	; 0x145
 800ac5a:	f001 fc51 	bl	800c500 <__assert_func>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	6144      	str	r4, [r0, #20]
 800ac62:	6103      	str	r3, [r0, #16]
 800ac64:	bd10      	pop	{r4, pc}
 800ac66:	bf00      	nop
 800ac68:	0800e5d5 	.word	0x0800e5d5
 800ac6c:	0800e5e6 	.word	0x0800e5e6

0800ac70 <__multiply>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	4691      	mov	r9, r2
 800ac76:	690a      	ldr	r2, [r1, #16]
 800ac78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	bfb8      	it	lt
 800ac80:	460b      	movlt	r3, r1
 800ac82:	460c      	mov	r4, r1
 800ac84:	bfbc      	itt	lt
 800ac86:	464c      	movlt	r4, r9
 800ac88:	4699      	movlt	r9, r3
 800ac8a:	6927      	ldr	r7, [r4, #16]
 800ac8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac90:	68a3      	ldr	r3, [r4, #8]
 800ac92:	6861      	ldr	r1, [r4, #4]
 800ac94:	eb07 060a 	add.w	r6, r7, sl
 800ac98:	42b3      	cmp	r3, r6
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	bfb8      	it	lt
 800ac9e:	3101      	addlt	r1, #1
 800aca0:	f7ff fe90 	bl	800a9c4 <_Balloc>
 800aca4:	b930      	cbnz	r0, 800acb4 <__multiply+0x44>
 800aca6:	4602      	mov	r2, r0
 800aca8:	4b44      	ldr	r3, [pc, #272]	; (800adbc <__multiply+0x14c>)
 800acaa:	4845      	ldr	r0, [pc, #276]	; (800adc0 <__multiply+0x150>)
 800acac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800acb0:	f001 fc26 	bl	800c500 <__assert_func>
 800acb4:	f100 0514 	add.w	r5, r0, #20
 800acb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acbc:	462b      	mov	r3, r5
 800acbe:	2200      	movs	r2, #0
 800acc0:	4543      	cmp	r3, r8
 800acc2:	d321      	bcc.n	800ad08 <__multiply+0x98>
 800acc4:	f104 0314 	add.w	r3, r4, #20
 800acc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800accc:	f109 0314 	add.w	r3, r9, #20
 800acd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800acd4:	9202      	str	r2, [sp, #8]
 800acd6:	1b3a      	subs	r2, r7, r4
 800acd8:	3a15      	subs	r2, #21
 800acda:	f022 0203 	bic.w	r2, r2, #3
 800acde:	3204      	adds	r2, #4
 800ace0:	f104 0115 	add.w	r1, r4, #21
 800ace4:	428f      	cmp	r7, r1
 800ace6:	bf38      	it	cc
 800ace8:	2204      	movcc	r2, #4
 800acea:	9201      	str	r2, [sp, #4]
 800acec:	9a02      	ldr	r2, [sp, #8]
 800acee:	9303      	str	r3, [sp, #12]
 800acf0:	429a      	cmp	r2, r3
 800acf2:	d80c      	bhi.n	800ad0e <__multiply+0x9e>
 800acf4:	2e00      	cmp	r6, #0
 800acf6:	dd03      	ble.n	800ad00 <__multiply+0x90>
 800acf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d05b      	beq.n	800adb8 <__multiply+0x148>
 800ad00:	6106      	str	r6, [r0, #16]
 800ad02:	b005      	add	sp, #20
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	f843 2b04 	str.w	r2, [r3], #4
 800ad0c:	e7d8      	b.n	800acc0 <__multiply+0x50>
 800ad0e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad12:	f1ba 0f00 	cmp.w	sl, #0
 800ad16:	d024      	beq.n	800ad62 <__multiply+0xf2>
 800ad18:	f104 0e14 	add.w	lr, r4, #20
 800ad1c:	46a9      	mov	r9, r5
 800ad1e:	f04f 0c00 	mov.w	ip, #0
 800ad22:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad26:	f8d9 1000 	ldr.w	r1, [r9]
 800ad2a:	fa1f fb82 	uxth.w	fp, r2
 800ad2e:	b289      	uxth	r1, r1
 800ad30:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad38:	f8d9 2000 	ldr.w	r2, [r9]
 800ad3c:	4461      	add	r1, ip
 800ad3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad42:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad4a:	b289      	uxth	r1, r1
 800ad4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad50:	4577      	cmp	r7, lr
 800ad52:	f849 1b04 	str.w	r1, [r9], #4
 800ad56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad5a:	d8e2      	bhi.n	800ad22 <__multiply+0xb2>
 800ad5c:	9a01      	ldr	r2, [sp, #4]
 800ad5e:	f845 c002 	str.w	ip, [r5, r2]
 800ad62:	9a03      	ldr	r2, [sp, #12]
 800ad64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	f1b9 0f00 	cmp.w	r9, #0
 800ad6e:	d021      	beq.n	800adb4 <__multiply+0x144>
 800ad70:	6829      	ldr	r1, [r5, #0]
 800ad72:	f104 0c14 	add.w	ip, r4, #20
 800ad76:	46ae      	mov	lr, r5
 800ad78:	f04f 0a00 	mov.w	sl, #0
 800ad7c:	f8bc b000 	ldrh.w	fp, [ip]
 800ad80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad84:	fb09 220b 	mla	r2, r9, fp, r2
 800ad88:	4452      	add	r2, sl
 800ad8a:	b289      	uxth	r1, r1
 800ad8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad90:	f84e 1b04 	str.w	r1, [lr], #4
 800ad94:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ad98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad9c:	f8be 1000 	ldrh.w	r1, [lr]
 800ada0:	fb09 110a 	mla	r1, r9, sl, r1
 800ada4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ada8:	4567      	cmp	r7, ip
 800adaa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800adae:	d8e5      	bhi.n	800ad7c <__multiply+0x10c>
 800adb0:	9a01      	ldr	r2, [sp, #4]
 800adb2:	50a9      	str	r1, [r5, r2]
 800adb4:	3504      	adds	r5, #4
 800adb6:	e799      	b.n	800acec <__multiply+0x7c>
 800adb8:	3e01      	subs	r6, #1
 800adba:	e79b      	b.n	800acf4 <__multiply+0x84>
 800adbc:	0800e5d5 	.word	0x0800e5d5
 800adc0:	0800e5e6 	.word	0x0800e5e6

0800adc4 <__pow5mult>:
 800adc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc8:	4615      	mov	r5, r2
 800adca:	f012 0203 	ands.w	r2, r2, #3
 800adce:	4606      	mov	r6, r0
 800add0:	460f      	mov	r7, r1
 800add2:	d007      	beq.n	800ade4 <__pow5mult+0x20>
 800add4:	4c25      	ldr	r4, [pc, #148]	; (800ae6c <__pow5mult+0xa8>)
 800add6:	3a01      	subs	r2, #1
 800add8:	2300      	movs	r3, #0
 800adda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adde:	f7ff fe53 	bl	800aa88 <__multadd>
 800ade2:	4607      	mov	r7, r0
 800ade4:	10ad      	asrs	r5, r5, #2
 800ade6:	d03d      	beq.n	800ae64 <__pow5mult+0xa0>
 800ade8:	69f4      	ldr	r4, [r6, #28]
 800adea:	b97c      	cbnz	r4, 800ae0c <__pow5mult+0x48>
 800adec:	2010      	movs	r0, #16
 800adee:	f7ff fd35 	bl	800a85c <malloc>
 800adf2:	4602      	mov	r2, r0
 800adf4:	61f0      	str	r0, [r6, #28]
 800adf6:	b928      	cbnz	r0, 800ae04 <__pow5mult+0x40>
 800adf8:	4b1d      	ldr	r3, [pc, #116]	; (800ae70 <__pow5mult+0xac>)
 800adfa:	481e      	ldr	r0, [pc, #120]	; (800ae74 <__pow5mult+0xb0>)
 800adfc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ae00:	f001 fb7e 	bl	800c500 <__assert_func>
 800ae04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae08:	6004      	str	r4, [r0, #0]
 800ae0a:	60c4      	str	r4, [r0, #12]
 800ae0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ae10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae14:	b94c      	cbnz	r4, 800ae2a <__pow5mult+0x66>
 800ae16:	f240 2171 	movw	r1, #625	; 0x271
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ff12 	bl	800ac44 <__i2b>
 800ae20:	2300      	movs	r3, #0
 800ae22:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae26:	4604      	mov	r4, r0
 800ae28:	6003      	str	r3, [r0, #0]
 800ae2a:	f04f 0900 	mov.w	r9, #0
 800ae2e:	07eb      	lsls	r3, r5, #31
 800ae30:	d50a      	bpl.n	800ae48 <__pow5mult+0x84>
 800ae32:	4639      	mov	r1, r7
 800ae34:	4622      	mov	r2, r4
 800ae36:	4630      	mov	r0, r6
 800ae38:	f7ff ff1a 	bl	800ac70 <__multiply>
 800ae3c:	4639      	mov	r1, r7
 800ae3e:	4680      	mov	r8, r0
 800ae40:	4630      	mov	r0, r6
 800ae42:	f7ff fdff 	bl	800aa44 <_Bfree>
 800ae46:	4647      	mov	r7, r8
 800ae48:	106d      	asrs	r5, r5, #1
 800ae4a:	d00b      	beq.n	800ae64 <__pow5mult+0xa0>
 800ae4c:	6820      	ldr	r0, [r4, #0]
 800ae4e:	b938      	cbnz	r0, 800ae60 <__pow5mult+0x9c>
 800ae50:	4622      	mov	r2, r4
 800ae52:	4621      	mov	r1, r4
 800ae54:	4630      	mov	r0, r6
 800ae56:	f7ff ff0b 	bl	800ac70 <__multiply>
 800ae5a:	6020      	str	r0, [r4, #0]
 800ae5c:	f8c0 9000 	str.w	r9, [r0]
 800ae60:	4604      	mov	r4, r0
 800ae62:	e7e4      	b.n	800ae2e <__pow5mult+0x6a>
 800ae64:	4638      	mov	r0, r7
 800ae66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6a:	bf00      	nop
 800ae6c:	0800e730 	.word	0x0800e730
 800ae70:	0800e566 	.word	0x0800e566
 800ae74:	0800e5e6 	.word	0x0800e5e6

0800ae78 <__lshift>:
 800ae78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae7c:	460c      	mov	r4, r1
 800ae7e:	6849      	ldr	r1, [r1, #4]
 800ae80:	6923      	ldr	r3, [r4, #16]
 800ae82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae86:	68a3      	ldr	r3, [r4, #8]
 800ae88:	4607      	mov	r7, r0
 800ae8a:	4691      	mov	r9, r2
 800ae8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae90:	f108 0601 	add.w	r6, r8, #1
 800ae94:	42b3      	cmp	r3, r6
 800ae96:	db0b      	blt.n	800aeb0 <__lshift+0x38>
 800ae98:	4638      	mov	r0, r7
 800ae9a:	f7ff fd93 	bl	800a9c4 <_Balloc>
 800ae9e:	4605      	mov	r5, r0
 800aea0:	b948      	cbnz	r0, 800aeb6 <__lshift+0x3e>
 800aea2:	4602      	mov	r2, r0
 800aea4:	4b28      	ldr	r3, [pc, #160]	; (800af48 <__lshift+0xd0>)
 800aea6:	4829      	ldr	r0, [pc, #164]	; (800af4c <__lshift+0xd4>)
 800aea8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aeac:	f001 fb28 	bl	800c500 <__assert_func>
 800aeb0:	3101      	adds	r1, #1
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	e7ee      	b.n	800ae94 <__lshift+0x1c>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f100 0114 	add.w	r1, r0, #20
 800aebc:	f100 0210 	add.w	r2, r0, #16
 800aec0:	4618      	mov	r0, r3
 800aec2:	4553      	cmp	r3, sl
 800aec4:	db33      	blt.n	800af2e <__lshift+0xb6>
 800aec6:	6920      	ldr	r0, [r4, #16]
 800aec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aecc:	f104 0314 	add.w	r3, r4, #20
 800aed0:	f019 091f 	ands.w	r9, r9, #31
 800aed4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aed8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aedc:	d02b      	beq.n	800af36 <__lshift+0xbe>
 800aede:	f1c9 0e20 	rsb	lr, r9, #32
 800aee2:	468a      	mov	sl, r1
 800aee4:	2200      	movs	r2, #0
 800aee6:	6818      	ldr	r0, [r3, #0]
 800aee8:	fa00 f009 	lsl.w	r0, r0, r9
 800aeec:	4310      	orrs	r0, r2
 800aeee:	f84a 0b04 	str.w	r0, [sl], #4
 800aef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef6:	459c      	cmp	ip, r3
 800aef8:	fa22 f20e 	lsr.w	r2, r2, lr
 800aefc:	d8f3      	bhi.n	800aee6 <__lshift+0x6e>
 800aefe:	ebac 0304 	sub.w	r3, ip, r4
 800af02:	3b15      	subs	r3, #21
 800af04:	f023 0303 	bic.w	r3, r3, #3
 800af08:	3304      	adds	r3, #4
 800af0a:	f104 0015 	add.w	r0, r4, #21
 800af0e:	4584      	cmp	ip, r0
 800af10:	bf38      	it	cc
 800af12:	2304      	movcc	r3, #4
 800af14:	50ca      	str	r2, [r1, r3]
 800af16:	b10a      	cbz	r2, 800af1c <__lshift+0xa4>
 800af18:	f108 0602 	add.w	r6, r8, #2
 800af1c:	3e01      	subs	r6, #1
 800af1e:	4638      	mov	r0, r7
 800af20:	612e      	str	r6, [r5, #16]
 800af22:	4621      	mov	r1, r4
 800af24:	f7ff fd8e 	bl	800aa44 <_Bfree>
 800af28:	4628      	mov	r0, r5
 800af2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800af32:	3301      	adds	r3, #1
 800af34:	e7c5      	b.n	800aec2 <__lshift+0x4a>
 800af36:	3904      	subs	r1, #4
 800af38:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800af40:	459c      	cmp	ip, r3
 800af42:	d8f9      	bhi.n	800af38 <__lshift+0xc0>
 800af44:	e7ea      	b.n	800af1c <__lshift+0xa4>
 800af46:	bf00      	nop
 800af48:	0800e5d5 	.word	0x0800e5d5
 800af4c:	0800e5e6 	.word	0x0800e5e6

0800af50 <__mcmp>:
 800af50:	b530      	push	{r4, r5, lr}
 800af52:	6902      	ldr	r2, [r0, #16]
 800af54:	690c      	ldr	r4, [r1, #16]
 800af56:	1b12      	subs	r2, r2, r4
 800af58:	d10e      	bne.n	800af78 <__mcmp+0x28>
 800af5a:	f100 0314 	add.w	r3, r0, #20
 800af5e:	3114      	adds	r1, #20
 800af60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af70:	42a5      	cmp	r5, r4
 800af72:	d003      	beq.n	800af7c <__mcmp+0x2c>
 800af74:	d305      	bcc.n	800af82 <__mcmp+0x32>
 800af76:	2201      	movs	r2, #1
 800af78:	4610      	mov	r0, r2
 800af7a:	bd30      	pop	{r4, r5, pc}
 800af7c:	4283      	cmp	r3, r0
 800af7e:	d3f3      	bcc.n	800af68 <__mcmp+0x18>
 800af80:	e7fa      	b.n	800af78 <__mcmp+0x28>
 800af82:	f04f 32ff 	mov.w	r2, #4294967295
 800af86:	e7f7      	b.n	800af78 <__mcmp+0x28>

0800af88 <__mdiff>:
 800af88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	460c      	mov	r4, r1
 800af8e:	4606      	mov	r6, r0
 800af90:	4611      	mov	r1, r2
 800af92:	4620      	mov	r0, r4
 800af94:	4690      	mov	r8, r2
 800af96:	f7ff ffdb 	bl	800af50 <__mcmp>
 800af9a:	1e05      	subs	r5, r0, #0
 800af9c:	d110      	bne.n	800afc0 <__mdiff+0x38>
 800af9e:	4629      	mov	r1, r5
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff fd0f 	bl	800a9c4 <_Balloc>
 800afa6:	b930      	cbnz	r0, 800afb6 <__mdiff+0x2e>
 800afa8:	4b3a      	ldr	r3, [pc, #232]	; (800b094 <__mdiff+0x10c>)
 800afaa:	4602      	mov	r2, r0
 800afac:	f240 2137 	movw	r1, #567	; 0x237
 800afb0:	4839      	ldr	r0, [pc, #228]	; (800b098 <__mdiff+0x110>)
 800afb2:	f001 faa5 	bl	800c500 <__assert_func>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc0:	bfa4      	itt	ge
 800afc2:	4643      	movge	r3, r8
 800afc4:	46a0      	movge	r8, r4
 800afc6:	4630      	mov	r0, r6
 800afc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800afcc:	bfa6      	itte	ge
 800afce:	461c      	movge	r4, r3
 800afd0:	2500      	movge	r5, #0
 800afd2:	2501      	movlt	r5, #1
 800afd4:	f7ff fcf6 	bl	800a9c4 <_Balloc>
 800afd8:	b920      	cbnz	r0, 800afe4 <__mdiff+0x5c>
 800afda:	4b2e      	ldr	r3, [pc, #184]	; (800b094 <__mdiff+0x10c>)
 800afdc:	4602      	mov	r2, r0
 800afde:	f240 2145 	movw	r1, #581	; 0x245
 800afe2:	e7e5      	b.n	800afb0 <__mdiff+0x28>
 800afe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800afe8:	6926      	ldr	r6, [r4, #16]
 800afea:	60c5      	str	r5, [r0, #12]
 800afec:	f104 0914 	add.w	r9, r4, #20
 800aff0:	f108 0514 	add.w	r5, r8, #20
 800aff4:	f100 0e14 	add.w	lr, r0, #20
 800aff8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800affc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b000:	f108 0210 	add.w	r2, r8, #16
 800b004:	46f2      	mov	sl, lr
 800b006:	2100      	movs	r1, #0
 800b008:	f859 3b04 	ldr.w	r3, [r9], #4
 800b00c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b010:	fa11 f88b 	uxtah	r8, r1, fp
 800b014:	b299      	uxth	r1, r3
 800b016:	0c1b      	lsrs	r3, r3, #16
 800b018:	eba8 0801 	sub.w	r8, r8, r1
 800b01c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b020:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b024:	fa1f f888 	uxth.w	r8, r8
 800b028:	1419      	asrs	r1, r3, #16
 800b02a:	454e      	cmp	r6, r9
 800b02c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b030:	f84a 3b04 	str.w	r3, [sl], #4
 800b034:	d8e8      	bhi.n	800b008 <__mdiff+0x80>
 800b036:	1b33      	subs	r3, r6, r4
 800b038:	3b15      	subs	r3, #21
 800b03a:	f023 0303 	bic.w	r3, r3, #3
 800b03e:	3304      	adds	r3, #4
 800b040:	3415      	adds	r4, #21
 800b042:	42a6      	cmp	r6, r4
 800b044:	bf38      	it	cc
 800b046:	2304      	movcc	r3, #4
 800b048:	441d      	add	r5, r3
 800b04a:	4473      	add	r3, lr
 800b04c:	469e      	mov	lr, r3
 800b04e:	462e      	mov	r6, r5
 800b050:	4566      	cmp	r6, ip
 800b052:	d30e      	bcc.n	800b072 <__mdiff+0xea>
 800b054:	f10c 0203 	add.w	r2, ip, #3
 800b058:	1b52      	subs	r2, r2, r5
 800b05a:	f022 0203 	bic.w	r2, r2, #3
 800b05e:	3d03      	subs	r5, #3
 800b060:	45ac      	cmp	ip, r5
 800b062:	bf38      	it	cc
 800b064:	2200      	movcc	r2, #0
 800b066:	4413      	add	r3, r2
 800b068:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b06c:	b17a      	cbz	r2, 800b08e <__mdiff+0x106>
 800b06e:	6107      	str	r7, [r0, #16]
 800b070:	e7a4      	b.n	800afbc <__mdiff+0x34>
 800b072:	f856 8b04 	ldr.w	r8, [r6], #4
 800b076:	fa11 f288 	uxtah	r2, r1, r8
 800b07a:	1414      	asrs	r4, r2, #16
 800b07c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b080:	b292      	uxth	r2, r2
 800b082:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b086:	f84e 2b04 	str.w	r2, [lr], #4
 800b08a:	1421      	asrs	r1, r4, #16
 800b08c:	e7e0      	b.n	800b050 <__mdiff+0xc8>
 800b08e:	3f01      	subs	r7, #1
 800b090:	e7ea      	b.n	800b068 <__mdiff+0xe0>
 800b092:	bf00      	nop
 800b094:	0800e5d5 	.word	0x0800e5d5
 800b098:	0800e5e6 	.word	0x0800e5e6

0800b09c <__ulp>:
 800b09c:	b082      	sub	sp, #8
 800b09e:	ed8d 0b00 	vstr	d0, [sp]
 800b0a2:	9a01      	ldr	r2, [sp, #4]
 800b0a4:	4b0f      	ldr	r3, [pc, #60]	; (800b0e4 <__ulp+0x48>)
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	dc08      	bgt.n	800b0c2 <__ulp+0x26>
 800b0b0:	425b      	negs	r3, r3
 800b0b2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b0b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b0ba:	da04      	bge.n	800b0c6 <__ulp+0x2a>
 800b0bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0c0:	4113      	asrs	r3, r2
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	e008      	b.n	800b0d8 <__ulp+0x3c>
 800b0c6:	f1a2 0314 	sub.w	r3, r2, #20
 800b0ca:	2b1e      	cmp	r3, #30
 800b0cc:	bfda      	itte	le
 800b0ce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b0d2:	40da      	lsrle	r2, r3
 800b0d4:	2201      	movgt	r2, #1
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	ec41 0b10 	vmov	d0, r0, r1
 800b0e0:	b002      	add	sp, #8
 800b0e2:	4770      	bx	lr
 800b0e4:	7ff00000 	.word	0x7ff00000

0800b0e8 <__b2d>:
 800b0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ec:	6906      	ldr	r6, [r0, #16]
 800b0ee:	f100 0814 	add.w	r8, r0, #20
 800b0f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b0f6:	1f37      	subs	r7, r6, #4
 800b0f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f7ff fd53 	bl	800aba8 <__hi0bits>
 800b102:	f1c0 0320 	rsb	r3, r0, #32
 800b106:	280a      	cmp	r0, #10
 800b108:	600b      	str	r3, [r1, #0]
 800b10a:	491b      	ldr	r1, [pc, #108]	; (800b178 <__b2d+0x90>)
 800b10c:	dc15      	bgt.n	800b13a <__b2d+0x52>
 800b10e:	f1c0 0c0b 	rsb	ip, r0, #11
 800b112:	fa22 f30c 	lsr.w	r3, r2, ip
 800b116:	45b8      	cmp	r8, r7
 800b118:	ea43 0501 	orr.w	r5, r3, r1
 800b11c:	bf34      	ite	cc
 800b11e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b122:	2300      	movcs	r3, #0
 800b124:	3015      	adds	r0, #21
 800b126:	fa02 f000 	lsl.w	r0, r2, r0
 800b12a:	fa23 f30c 	lsr.w	r3, r3, ip
 800b12e:	4303      	orrs	r3, r0
 800b130:	461c      	mov	r4, r3
 800b132:	ec45 4b10 	vmov	d0, r4, r5
 800b136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b13a:	45b8      	cmp	r8, r7
 800b13c:	bf3a      	itte	cc
 800b13e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b142:	f1a6 0708 	subcc.w	r7, r6, #8
 800b146:	2300      	movcs	r3, #0
 800b148:	380b      	subs	r0, #11
 800b14a:	d012      	beq.n	800b172 <__b2d+0x8a>
 800b14c:	f1c0 0120 	rsb	r1, r0, #32
 800b150:	fa23 f401 	lsr.w	r4, r3, r1
 800b154:	4082      	lsls	r2, r0
 800b156:	4322      	orrs	r2, r4
 800b158:	4547      	cmp	r7, r8
 800b15a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b15e:	bf8c      	ite	hi
 800b160:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b164:	2200      	movls	r2, #0
 800b166:	4083      	lsls	r3, r0
 800b168:	40ca      	lsrs	r2, r1
 800b16a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b16e:	4313      	orrs	r3, r2
 800b170:	e7de      	b.n	800b130 <__b2d+0x48>
 800b172:	ea42 0501 	orr.w	r5, r2, r1
 800b176:	e7db      	b.n	800b130 <__b2d+0x48>
 800b178:	3ff00000 	.word	0x3ff00000

0800b17c <__d2b>:
 800b17c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b180:	460f      	mov	r7, r1
 800b182:	2101      	movs	r1, #1
 800b184:	ec59 8b10 	vmov	r8, r9, d0
 800b188:	4616      	mov	r6, r2
 800b18a:	f7ff fc1b 	bl	800a9c4 <_Balloc>
 800b18e:	4604      	mov	r4, r0
 800b190:	b930      	cbnz	r0, 800b1a0 <__d2b+0x24>
 800b192:	4602      	mov	r2, r0
 800b194:	4b24      	ldr	r3, [pc, #144]	; (800b228 <__d2b+0xac>)
 800b196:	4825      	ldr	r0, [pc, #148]	; (800b22c <__d2b+0xb0>)
 800b198:	f240 310f 	movw	r1, #783	; 0x30f
 800b19c:	f001 f9b0 	bl	800c500 <__assert_func>
 800b1a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1a8:	bb2d      	cbnz	r5, 800b1f6 <__d2b+0x7a>
 800b1aa:	9301      	str	r3, [sp, #4]
 800b1ac:	f1b8 0300 	subs.w	r3, r8, #0
 800b1b0:	d026      	beq.n	800b200 <__d2b+0x84>
 800b1b2:	4668      	mov	r0, sp
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	f7ff fd17 	bl	800abe8 <__lo0bits>
 800b1ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b1be:	b1e8      	cbz	r0, 800b1fc <__d2b+0x80>
 800b1c0:	f1c0 0320 	rsb	r3, r0, #32
 800b1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c8:	430b      	orrs	r3, r1
 800b1ca:	40c2      	lsrs	r2, r0
 800b1cc:	6163      	str	r3, [r4, #20]
 800b1ce:	9201      	str	r2, [sp, #4]
 800b1d0:	9b01      	ldr	r3, [sp, #4]
 800b1d2:	61a3      	str	r3, [r4, #24]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	bf14      	ite	ne
 800b1d8:	2202      	movne	r2, #2
 800b1da:	2201      	moveq	r2, #1
 800b1dc:	6122      	str	r2, [r4, #16]
 800b1de:	b1bd      	cbz	r5, 800b210 <__d2b+0x94>
 800b1e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b1e4:	4405      	add	r5, r0
 800b1e6:	603d      	str	r5, [r7, #0]
 800b1e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1ec:	6030      	str	r0, [r6, #0]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	b003      	add	sp, #12
 800b1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1fa:	e7d6      	b.n	800b1aa <__d2b+0x2e>
 800b1fc:	6161      	str	r1, [r4, #20]
 800b1fe:	e7e7      	b.n	800b1d0 <__d2b+0x54>
 800b200:	a801      	add	r0, sp, #4
 800b202:	f7ff fcf1 	bl	800abe8 <__lo0bits>
 800b206:	9b01      	ldr	r3, [sp, #4]
 800b208:	6163      	str	r3, [r4, #20]
 800b20a:	3020      	adds	r0, #32
 800b20c:	2201      	movs	r2, #1
 800b20e:	e7e5      	b.n	800b1dc <__d2b+0x60>
 800b210:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b214:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b218:	6038      	str	r0, [r7, #0]
 800b21a:	6918      	ldr	r0, [r3, #16]
 800b21c:	f7ff fcc4 	bl	800aba8 <__hi0bits>
 800b220:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b224:	e7e2      	b.n	800b1ec <__d2b+0x70>
 800b226:	bf00      	nop
 800b228:	0800e5d5 	.word	0x0800e5d5
 800b22c:	0800e5e6 	.word	0x0800e5e6

0800b230 <__ratio>:
 800b230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	4688      	mov	r8, r1
 800b236:	4669      	mov	r1, sp
 800b238:	4681      	mov	r9, r0
 800b23a:	f7ff ff55 	bl	800b0e8 <__b2d>
 800b23e:	a901      	add	r1, sp, #4
 800b240:	4640      	mov	r0, r8
 800b242:	ec55 4b10 	vmov	r4, r5, d0
 800b246:	f7ff ff4f 	bl	800b0e8 <__b2d>
 800b24a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b24e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b252:	eba3 0c02 	sub.w	ip, r3, r2
 800b256:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b25a:	1a9b      	subs	r3, r3, r2
 800b25c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b260:	ec51 0b10 	vmov	r0, r1, d0
 800b264:	2b00      	cmp	r3, #0
 800b266:	bfd6      	itet	le
 800b268:	460a      	movle	r2, r1
 800b26a:	462a      	movgt	r2, r5
 800b26c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b270:	468b      	mov	fp, r1
 800b272:	462f      	mov	r7, r5
 800b274:	bfd4      	ite	le
 800b276:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b27a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b27e:	4620      	mov	r0, r4
 800b280:	ee10 2a10 	vmov	r2, s0
 800b284:	465b      	mov	r3, fp
 800b286:	4639      	mov	r1, r7
 800b288:	f7f5 fae0 	bl	800084c <__aeabi_ddiv>
 800b28c:	ec41 0b10 	vmov	d0, r0, r1
 800b290:	b003      	add	sp, #12
 800b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b296 <__copybits>:
 800b296:	3901      	subs	r1, #1
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	1149      	asrs	r1, r1, #5
 800b29c:	6914      	ldr	r4, [r2, #16]
 800b29e:	3101      	adds	r1, #1
 800b2a0:	f102 0314 	add.w	r3, r2, #20
 800b2a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b2ac:	1f05      	subs	r5, r0, #4
 800b2ae:	42a3      	cmp	r3, r4
 800b2b0:	d30c      	bcc.n	800b2cc <__copybits+0x36>
 800b2b2:	1aa3      	subs	r3, r4, r2
 800b2b4:	3b11      	subs	r3, #17
 800b2b6:	f023 0303 	bic.w	r3, r3, #3
 800b2ba:	3211      	adds	r2, #17
 800b2bc:	42a2      	cmp	r2, r4
 800b2be:	bf88      	it	hi
 800b2c0:	2300      	movhi	r3, #0
 800b2c2:	4418      	add	r0, r3
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	4288      	cmp	r0, r1
 800b2c8:	d305      	bcc.n	800b2d6 <__copybits+0x40>
 800b2ca:	bd70      	pop	{r4, r5, r6, pc}
 800b2cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b2d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b2d4:	e7eb      	b.n	800b2ae <__copybits+0x18>
 800b2d6:	f840 3b04 	str.w	r3, [r0], #4
 800b2da:	e7f4      	b.n	800b2c6 <__copybits+0x30>

0800b2dc <__any_on>:
 800b2dc:	f100 0214 	add.w	r2, r0, #20
 800b2e0:	6900      	ldr	r0, [r0, #16]
 800b2e2:	114b      	asrs	r3, r1, #5
 800b2e4:	4298      	cmp	r0, r3
 800b2e6:	b510      	push	{r4, lr}
 800b2e8:	db11      	blt.n	800b30e <__any_on+0x32>
 800b2ea:	dd0a      	ble.n	800b302 <__any_on+0x26>
 800b2ec:	f011 011f 	ands.w	r1, r1, #31
 800b2f0:	d007      	beq.n	800b302 <__any_on+0x26>
 800b2f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b2f6:	fa24 f001 	lsr.w	r0, r4, r1
 800b2fa:	fa00 f101 	lsl.w	r1, r0, r1
 800b2fe:	428c      	cmp	r4, r1
 800b300:	d10b      	bne.n	800b31a <__any_on+0x3e>
 800b302:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b306:	4293      	cmp	r3, r2
 800b308:	d803      	bhi.n	800b312 <__any_on+0x36>
 800b30a:	2000      	movs	r0, #0
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	4603      	mov	r3, r0
 800b310:	e7f7      	b.n	800b302 <__any_on+0x26>
 800b312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b316:	2900      	cmp	r1, #0
 800b318:	d0f5      	beq.n	800b306 <__any_on+0x2a>
 800b31a:	2001      	movs	r0, #1
 800b31c:	e7f6      	b.n	800b30c <__any_on+0x30>

0800b31e <sulp>:
 800b31e:	b570      	push	{r4, r5, r6, lr}
 800b320:	4604      	mov	r4, r0
 800b322:	460d      	mov	r5, r1
 800b324:	ec45 4b10 	vmov	d0, r4, r5
 800b328:	4616      	mov	r6, r2
 800b32a:	f7ff feb7 	bl	800b09c <__ulp>
 800b32e:	ec51 0b10 	vmov	r0, r1, d0
 800b332:	b17e      	cbz	r6, 800b354 <sulp+0x36>
 800b334:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b338:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	dd09      	ble.n	800b354 <sulp+0x36>
 800b340:	051b      	lsls	r3, r3, #20
 800b342:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b346:	2400      	movs	r4, #0
 800b348:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b34c:	4622      	mov	r2, r4
 800b34e:	462b      	mov	r3, r5
 800b350:	f7f5 f952 	bl	80005f8 <__aeabi_dmul>
 800b354:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b358 <_strtod_l>:
 800b358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35c:	ed2d 8b02 	vpush	{d8}
 800b360:	b09b      	sub	sp, #108	; 0x6c
 800b362:	4604      	mov	r4, r0
 800b364:	9213      	str	r2, [sp, #76]	; 0x4c
 800b366:	2200      	movs	r2, #0
 800b368:	9216      	str	r2, [sp, #88]	; 0x58
 800b36a:	460d      	mov	r5, r1
 800b36c:	f04f 0800 	mov.w	r8, #0
 800b370:	f04f 0900 	mov.w	r9, #0
 800b374:	460a      	mov	r2, r1
 800b376:	9215      	str	r2, [sp, #84]	; 0x54
 800b378:	7811      	ldrb	r1, [r2, #0]
 800b37a:	292b      	cmp	r1, #43	; 0x2b
 800b37c:	d04c      	beq.n	800b418 <_strtod_l+0xc0>
 800b37e:	d83a      	bhi.n	800b3f6 <_strtod_l+0x9e>
 800b380:	290d      	cmp	r1, #13
 800b382:	d834      	bhi.n	800b3ee <_strtod_l+0x96>
 800b384:	2908      	cmp	r1, #8
 800b386:	d834      	bhi.n	800b3f2 <_strtod_l+0x9a>
 800b388:	2900      	cmp	r1, #0
 800b38a:	d03d      	beq.n	800b408 <_strtod_l+0xb0>
 800b38c:	2200      	movs	r2, #0
 800b38e:	920a      	str	r2, [sp, #40]	; 0x28
 800b390:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b392:	7832      	ldrb	r2, [r6, #0]
 800b394:	2a30      	cmp	r2, #48	; 0x30
 800b396:	f040 80b4 	bne.w	800b502 <_strtod_l+0x1aa>
 800b39a:	7872      	ldrb	r2, [r6, #1]
 800b39c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b3a0:	2a58      	cmp	r2, #88	; 0x58
 800b3a2:	d170      	bne.n	800b486 <_strtod_l+0x12e>
 800b3a4:	9302      	str	r3, [sp, #8]
 800b3a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	ab16      	add	r3, sp, #88	; 0x58
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	4a8e      	ldr	r2, [pc, #568]	; (800b5e8 <_strtod_l+0x290>)
 800b3b0:	ab17      	add	r3, sp, #92	; 0x5c
 800b3b2:	a915      	add	r1, sp, #84	; 0x54
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f001 f93f 	bl	800c638 <__gethex>
 800b3ba:	f010 070f 	ands.w	r7, r0, #15
 800b3be:	4605      	mov	r5, r0
 800b3c0:	d005      	beq.n	800b3ce <_strtod_l+0x76>
 800b3c2:	2f06      	cmp	r7, #6
 800b3c4:	d12a      	bne.n	800b41c <_strtod_l+0xc4>
 800b3c6:	3601      	adds	r6, #1
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	9615      	str	r6, [sp, #84]	; 0x54
 800b3cc:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f040 857f 	bne.w	800bed4 <_strtod_l+0xb7c>
 800b3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d8:	b1db      	cbz	r3, 800b412 <_strtod_l+0xba>
 800b3da:	4642      	mov	r2, r8
 800b3dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b3e0:	ec43 2b10 	vmov	d0, r2, r3
 800b3e4:	b01b      	add	sp, #108	; 0x6c
 800b3e6:	ecbd 8b02 	vpop	{d8}
 800b3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ee:	2920      	cmp	r1, #32
 800b3f0:	d1cc      	bne.n	800b38c <_strtod_l+0x34>
 800b3f2:	3201      	adds	r2, #1
 800b3f4:	e7bf      	b.n	800b376 <_strtod_l+0x1e>
 800b3f6:	292d      	cmp	r1, #45	; 0x2d
 800b3f8:	d1c8      	bne.n	800b38c <_strtod_l+0x34>
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	910a      	str	r1, [sp, #40]	; 0x28
 800b3fe:	1c51      	adds	r1, r2, #1
 800b400:	9115      	str	r1, [sp, #84]	; 0x54
 800b402:	7852      	ldrb	r2, [r2, #1]
 800b404:	2a00      	cmp	r2, #0
 800b406:	d1c3      	bne.n	800b390 <_strtod_l+0x38>
 800b408:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b40a:	9515      	str	r5, [sp, #84]	; 0x54
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f040 855f 	bne.w	800bed0 <_strtod_l+0xb78>
 800b412:	4642      	mov	r2, r8
 800b414:	464b      	mov	r3, r9
 800b416:	e7e3      	b.n	800b3e0 <_strtod_l+0x88>
 800b418:	2100      	movs	r1, #0
 800b41a:	e7ef      	b.n	800b3fc <_strtod_l+0xa4>
 800b41c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b41e:	b13a      	cbz	r2, 800b430 <_strtod_l+0xd8>
 800b420:	2135      	movs	r1, #53	; 0x35
 800b422:	a818      	add	r0, sp, #96	; 0x60
 800b424:	f7ff ff37 	bl	800b296 <__copybits>
 800b428:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b42a:	4620      	mov	r0, r4
 800b42c:	f7ff fb0a 	bl	800aa44 <_Bfree>
 800b430:	3f01      	subs	r7, #1
 800b432:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b434:	2f04      	cmp	r7, #4
 800b436:	d806      	bhi.n	800b446 <_strtod_l+0xee>
 800b438:	e8df f007 	tbb	[pc, r7]
 800b43c:	201d0314 	.word	0x201d0314
 800b440:	14          	.byte	0x14
 800b441:	00          	.byte	0x00
 800b442:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b446:	05e9      	lsls	r1, r5, #23
 800b448:	bf48      	it	mi
 800b44a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b44e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b452:	0d1b      	lsrs	r3, r3, #20
 800b454:	051b      	lsls	r3, r3, #20
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1b9      	bne.n	800b3ce <_strtod_l+0x76>
 800b45a:	f7fe fb05 	bl	8009a68 <__errno>
 800b45e:	2322      	movs	r3, #34	; 0x22
 800b460:	6003      	str	r3, [r0, #0]
 800b462:	e7b4      	b.n	800b3ce <_strtod_l+0x76>
 800b464:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b468:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b46c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b470:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b474:	e7e7      	b.n	800b446 <_strtod_l+0xee>
 800b476:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b5f0 <_strtod_l+0x298>
 800b47a:	e7e4      	b.n	800b446 <_strtod_l+0xee>
 800b47c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b480:	f04f 38ff 	mov.w	r8, #4294967295
 800b484:	e7df      	b.n	800b446 <_strtod_l+0xee>
 800b486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b488:	1c5a      	adds	r2, r3, #1
 800b48a:	9215      	str	r2, [sp, #84]	; 0x54
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	2b30      	cmp	r3, #48	; 0x30
 800b490:	d0f9      	beq.n	800b486 <_strtod_l+0x12e>
 800b492:	2b00      	cmp	r3, #0
 800b494:	d09b      	beq.n	800b3ce <_strtod_l+0x76>
 800b496:	2301      	movs	r3, #1
 800b498:	f04f 0a00 	mov.w	sl, #0
 800b49c:	9304      	str	r3, [sp, #16]
 800b49e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b4a6:	46d3      	mov	fp, sl
 800b4a8:	220a      	movs	r2, #10
 800b4aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b4ac:	7806      	ldrb	r6, [r0, #0]
 800b4ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b4b2:	b2d9      	uxtb	r1, r3
 800b4b4:	2909      	cmp	r1, #9
 800b4b6:	d926      	bls.n	800b506 <_strtod_l+0x1ae>
 800b4b8:	494c      	ldr	r1, [pc, #304]	; (800b5ec <_strtod_l+0x294>)
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f000 ffe6 	bl	800c48c <strncmp>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d030      	beq.n	800b526 <_strtod_l+0x1ce>
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	4632      	mov	r2, r6
 800b4c8:	9005      	str	r0, [sp, #20]
 800b4ca:	465e      	mov	r6, fp
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	2a65      	cmp	r2, #101	; 0x65
 800b4d0:	d001      	beq.n	800b4d6 <_strtod_l+0x17e>
 800b4d2:	2a45      	cmp	r2, #69	; 0x45
 800b4d4:	d113      	bne.n	800b4fe <_strtod_l+0x1a6>
 800b4d6:	b91e      	cbnz	r6, 800b4e0 <_strtod_l+0x188>
 800b4d8:	9a04      	ldr	r2, [sp, #16]
 800b4da:	4302      	orrs	r2, r0
 800b4dc:	d094      	beq.n	800b408 <_strtod_l+0xb0>
 800b4de:	2600      	movs	r6, #0
 800b4e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b4e2:	1c6a      	adds	r2, r5, #1
 800b4e4:	9215      	str	r2, [sp, #84]	; 0x54
 800b4e6:	786a      	ldrb	r2, [r5, #1]
 800b4e8:	2a2b      	cmp	r2, #43	; 0x2b
 800b4ea:	d074      	beq.n	800b5d6 <_strtod_l+0x27e>
 800b4ec:	2a2d      	cmp	r2, #45	; 0x2d
 800b4ee:	d078      	beq.n	800b5e2 <_strtod_l+0x28a>
 800b4f0:	f04f 0c00 	mov.w	ip, #0
 800b4f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b4f8:	2909      	cmp	r1, #9
 800b4fa:	d97f      	bls.n	800b5fc <_strtod_l+0x2a4>
 800b4fc:	9515      	str	r5, [sp, #84]	; 0x54
 800b4fe:	2700      	movs	r7, #0
 800b500:	e09e      	b.n	800b640 <_strtod_l+0x2e8>
 800b502:	2300      	movs	r3, #0
 800b504:	e7c8      	b.n	800b498 <_strtod_l+0x140>
 800b506:	f1bb 0f08 	cmp.w	fp, #8
 800b50a:	bfd8      	it	le
 800b50c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b50e:	f100 0001 	add.w	r0, r0, #1
 800b512:	bfda      	itte	le
 800b514:	fb02 3301 	mlale	r3, r2, r1, r3
 800b518:	9309      	strle	r3, [sp, #36]	; 0x24
 800b51a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b51e:	f10b 0b01 	add.w	fp, fp, #1
 800b522:	9015      	str	r0, [sp, #84]	; 0x54
 800b524:	e7c1      	b.n	800b4aa <_strtod_l+0x152>
 800b526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b528:	1c5a      	adds	r2, r3, #1
 800b52a:	9215      	str	r2, [sp, #84]	; 0x54
 800b52c:	785a      	ldrb	r2, [r3, #1]
 800b52e:	f1bb 0f00 	cmp.w	fp, #0
 800b532:	d037      	beq.n	800b5a4 <_strtod_l+0x24c>
 800b534:	9005      	str	r0, [sp, #20]
 800b536:	465e      	mov	r6, fp
 800b538:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b53c:	2b09      	cmp	r3, #9
 800b53e:	d912      	bls.n	800b566 <_strtod_l+0x20e>
 800b540:	2301      	movs	r3, #1
 800b542:	e7c4      	b.n	800b4ce <_strtod_l+0x176>
 800b544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	9215      	str	r2, [sp, #84]	; 0x54
 800b54a:	785a      	ldrb	r2, [r3, #1]
 800b54c:	3001      	adds	r0, #1
 800b54e:	2a30      	cmp	r2, #48	; 0x30
 800b550:	d0f8      	beq.n	800b544 <_strtod_l+0x1ec>
 800b552:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b556:	2b08      	cmp	r3, #8
 800b558:	f200 84c1 	bhi.w	800bede <_strtod_l+0xb86>
 800b55c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b55e:	9005      	str	r0, [sp, #20]
 800b560:	2000      	movs	r0, #0
 800b562:	930b      	str	r3, [sp, #44]	; 0x2c
 800b564:	4606      	mov	r6, r0
 800b566:	3a30      	subs	r2, #48	; 0x30
 800b568:	f100 0301 	add.w	r3, r0, #1
 800b56c:	d014      	beq.n	800b598 <_strtod_l+0x240>
 800b56e:	9905      	ldr	r1, [sp, #20]
 800b570:	4419      	add	r1, r3
 800b572:	9105      	str	r1, [sp, #20]
 800b574:	4633      	mov	r3, r6
 800b576:	eb00 0c06 	add.w	ip, r0, r6
 800b57a:	210a      	movs	r1, #10
 800b57c:	4563      	cmp	r3, ip
 800b57e:	d113      	bne.n	800b5a8 <_strtod_l+0x250>
 800b580:	1833      	adds	r3, r6, r0
 800b582:	2b08      	cmp	r3, #8
 800b584:	f106 0601 	add.w	r6, r6, #1
 800b588:	4406      	add	r6, r0
 800b58a:	dc1a      	bgt.n	800b5c2 <_strtod_l+0x26a>
 800b58c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b58e:	230a      	movs	r3, #10
 800b590:	fb03 2301 	mla	r3, r3, r1, r2
 800b594:	9309      	str	r3, [sp, #36]	; 0x24
 800b596:	2300      	movs	r3, #0
 800b598:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b59a:	1c51      	adds	r1, r2, #1
 800b59c:	9115      	str	r1, [sp, #84]	; 0x54
 800b59e:	7852      	ldrb	r2, [r2, #1]
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	e7c9      	b.n	800b538 <_strtod_l+0x1e0>
 800b5a4:	4658      	mov	r0, fp
 800b5a6:	e7d2      	b.n	800b54e <_strtod_l+0x1f6>
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	f103 0301 	add.w	r3, r3, #1
 800b5ae:	dc03      	bgt.n	800b5b8 <_strtod_l+0x260>
 800b5b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b5b2:	434f      	muls	r7, r1
 800b5b4:	9709      	str	r7, [sp, #36]	; 0x24
 800b5b6:	e7e1      	b.n	800b57c <_strtod_l+0x224>
 800b5b8:	2b10      	cmp	r3, #16
 800b5ba:	bfd8      	it	le
 800b5bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b5c0:	e7dc      	b.n	800b57c <_strtod_l+0x224>
 800b5c2:	2e10      	cmp	r6, #16
 800b5c4:	bfdc      	itt	le
 800b5c6:	230a      	movle	r3, #10
 800b5c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b5cc:	e7e3      	b.n	800b596 <_strtod_l+0x23e>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	9305      	str	r3, [sp, #20]
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e780      	b.n	800b4d8 <_strtod_l+0x180>
 800b5d6:	f04f 0c00 	mov.w	ip, #0
 800b5da:	1caa      	adds	r2, r5, #2
 800b5dc:	9215      	str	r2, [sp, #84]	; 0x54
 800b5de:	78aa      	ldrb	r2, [r5, #2]
 800b5e0:	e788      	b.n	800b4f4 <_strtod_l+0x19c>
 800b5e2:	f04f 0c01 	mov.w	ip, #1
 800b5e6:	e7f8      	b.n	800b5da <_strtod_l+0x282>
 800b5e8:	0800e740 	.word	0x0800e740
 800b5ec:	0800e73c 	.word	0x0800e73c
 800b5f0:	7ff00000 	.word	0x7ff00000
 800b5f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b5f6:	1c51      	adds	r1, r2, #1
 800b5f8:	9115      	str	r1, [sp, #84]	; 0x54
 800b5fa:	7852      	ldrb	r2, [r2, #1]
 800b5fc:	2a30      	cmp	r2, #48	; 0x30
 800b5fe:	d0f9      	beq.n	800b5f4 <_strtod_l+0x29c>
 800b600:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b604:	2908      	cmp	r1, #8
 800b606:	f63f af7a 	bhi.w	800b4fe <_strtod_l+0x1a6>
 800b60a:	3a30      	subs	r2, #48	; 0x30
 800b60c:	9208      	str	r2, [sp, #32]
 800b60e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b610:	920c      	str	r2, [sp, #48]	; 0x30
 800b612:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b614:	1c57      	adds	r7, r2, #1
 800b616:	9715      	str	r7, [sp, #84]	; 0x54
 800b618:	7852      	ldrb	r2, [r2, #1]
 800b61a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b61e:	f1be 0f09 	cmp.w	lr, #9
 800b622:	d938      	bls.n	800b696 <_strtod_l+0x33e>
 800b624:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b626:	1a7f      	subs	r7, r7, r1
 800b628:	2f08      	cmp	r7, #8
 800b62a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b62e:	dc03      	bgt.n	800b638 <_strtod_l+0x2e0>
 800b630:	9908      	ldr	r1, [sp, #32]
 800b632:	428f      	cmp	r7, r1
 800b634:	bfa8      	it	ge
 800b636:	460f      	movge	r7, r1
 800b638:	f1bc 0f00 	cmp.w	ip, #0
 800b63c:	d000      	beq.n	800b640 <_strtod_l+0x2e8>
 800b63e:	427f      	negs	r7, r7
 800b640:	2e00      	cmp	r6, #0
 800b642:	d14f      	bne.n	800b6e4 <_strtod_l+0x38c>
 800b644:	9904      	ldr	r1, [sp, #16]
 800b646:	4301      	orrs	r1, r0
 800b648:	f47f aec1 	bne.w	800b3ce <_strtod_l+0x76>
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f47f aedb 	bne.w	800b408 <_strtod_l+0xb0>
 800b652:	2a69      	cmp	r2, #105	; 0x69
 800b654:	d029      	beq.n	800b6aa <_strtod_l+0x352>
 800b656:	dc26      	bgt.n	800b6a6 <_strtod_l+0x34e>
 800b658:	2a49      	cmp	r2, #73	; 0x49
 800b65a:	d026      	beq.n	800b6aa <_strtod_l+0x352>
 800b65c:	2a4e      	cmp	r2, #78	; 0x4e
 800b65e:	f47f aed3 	bne.w	800b408 <_strtod_l+0xb0>
 800b662:	499b      	ldr	r1, [pc, #620]	; (800b8d0 <_strtod_l+0x578>)
 800b664:	a815      	add	r0, sp, #84	; 0x54
 800b666:	f001 fa27 	bl	800cab8 <__match>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	f43f aecc 	beq.w	800b408 <_strtod_l+0xb0>
 800b670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	2b28      	cmp	r3, #40	; 0x28
 800b676:	d12f      	bne.n	800b6d8 <_strtod_l+0x380>
 800b678:	4996      	ldr	r1, [pc, #600]	; (800b8d4 <_strtod_l+0x57c>)
 800b67a:	aa18      	add	r2, sp, #96	; 0x60
 800b67c:	a815      	add	r0, sp, #84	; 0x54
 800b67e:	f001 fa2f 	bl	800cae0 <__hexnan>
 800b682:	2805      	cmp	r0, #5
 800b684:	d128      	bne.n	800b6d8 <_strtod_l+0x380>
 800b686:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b688:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b68c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b690:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b694:	e69b      	b.n	800b3ce <_strtod_l+0x76>
 800b696:	9f08      	ldr	r7, [sp, #32]
 800b698:	210a      	movs	r1, #10
 800b69a:	fb01 2107 	mla	r1, r1, r7, r2
 800b69e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b6a2:	9208      	str	r2, [sp, #32]
 800b6a4:	e7b5      	b.n	800b612 <_strtod_l+0x2ba>
 800b6a6:	2a6e      	cmp	r2, #110	; 0x6e
 800b6a8:	e7d9      	b.n	800b65e <_strtod_l+0x306>
 800b6aa:	498b      	ldr	r1, [pc, #556]	; (800b8d8 <_strtod_l+0x580>)
 800b6ac:	a815      	add	r0, sp, #84	; 0x54
 800b6ae:	f001 fa03 	bl	800cab8 <__match>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	f43f aea8 	beq.w	800b408 <_strtod_l+0xb0>
 800b6b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6ba:	4988      	ldr	r1, [pc, #544]	; (800b8dc <_strtod_l+0x584>)
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	a815      	add	r0, sp, #84	; 0x54
 800b6c0:	9315      	str	r3, [sp, #84]	; 0x54
 800b6c2:	f001 f9f9 	bl	800cab8 <__match>
 800b6c6:	b910      	cbnz	r0, 800b6ce <_strtod_l+0x376>
 800b6c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	9315      	str	r3, [sp, #84]	; 0x54
 800b6ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b8ec <_strtod_l+0x594>
 800b6d2:	f04f 0800 	mov.w	r8, #0
 800b6d6:	e67a      	b.n	800b3ce <_strtod_l+0x76>
 800b6d8:	4881      	ldr	r0, [pc, #516]	; (800b8e0 <_strtod_l+0x588>)
 800b6da:	f000 ff09 	bl	800c4f0 <nan>
 800b6de:	ec59 8b10 	vmov	r8, r9, d0
 800b6e2:	e674      	b.n	800b3ce <_strtod_l+0x76>
 800b6e4:	9b05      	ldr	r3, [sp, #20]
 800b6e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6e8:	1afb      	subs	r3, r7, r3
 800b6ea:	f1bb 0f00 	cmp.w	fp, #0
 800b6ee:	bf08      	it	eq
 800b6f0:	46b3      	moveq	fp, r6
 800b6f2:	2e10      	cmp	r6, #16
 800b6f4:	9308      	str	r3, [sp, #32]
 800b6f6:	4635      	mov	r5, r6
 800b6f8:	bfa8      	it	ge
 800b6fa:	2510      	movge	r5, #16
 800b6fc:	f7f4 ff02 	bl	8000504 <__aeabi_ui2d>
 800b700:	2e09      	cmp	r6, #9
 800b702:	4680      	mov	r8, r0
 800b704:	4689      	mov	r9, r1
 800b706:	dd13      	ble.n	800b730 <_strtod_l+0x3d8>
 800b708:	4b76      	ldr	r3, [pc, #472]	; (800b8e4 <_strtod_l+0x58c>)
 800b70a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b70e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b712:	f7f4 ff71 	bl	80005f8 <__aeabi_dmul>
 800b716:	4680      	mov	r8, r0
 800b718:	4650      	mov	r0, sl
 800b71a:	4689      	mov	r9, r1
 800b71c:	f7f4 fef2 	bl	8000504 <__aeabi_ui2d>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4640      	mov	r0, r8
 800b726:	4649      	mov	r1, r9
 800b728:	f7f4 fdb0 	bl	800028c <__adddf3>
 800b72c:	4680      	mov	r8, r0
 800b72e:	4689      	mov	r9, r1
 800b730:	2e0f      	cmp	r6, #15
 800b732:	dc38      	bgt.n	800b7a6 <_strtod_l+0x44e>
 800b734:	9b08      	ldr	r3, [sp, #32]
 800b736:	2b00      	cmp	r3, #0
 800b738:	f43f ae49 	beq.w	800b3ce <_strtod_l+0x76>
 800b73c:	dd24      	ble.n	800b788 <_strtod_l+0x430>
 800b73e:	2b16      	cmp	r3, #22
 800b740:	dc0b      	bgt.n	800b75a <_strtod_l+0x402>
 800b742:	4968      	ldr	r1, [pc, #416]	; (800b8e4 <_strtod_l+0x58c>)
 800b744:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b74c:	4642      	mov	r2, r8
 800b74e:	464b      	mov	r3, r9
 800b750:	f7f4 ff52 	bl	80005f8 <__aeabi_dmul>
 800b754:	4680      	mov	r8, r0
 800b756:	4689      	mov	r9, r1
 800b758:	e639      	b.n	800b3ce <_strtod_l+0x76>
 800b75a:	9a08      	ldr	r2, [sp, #32]
 800b75c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b760:	4293      	cmp	r3, r2
 800b762:	db20      	blt.n	800b7a6 <_strtod_l+0x44e>
 800b764:	4c5f      	ldr	r4, [pc, #380]	; (800b8e4 <_strtod_l+0x58c>)
 800b766:	f1c6 060f 	rsb	r6, r6, #15
 800b76a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b76e:	4642      	mov	r2, r8
 800b770:	464b      	mov	r3, r9
 800b772:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b776:	f7f4 ff3f 	bl	80005f8 <__aeabi_dmul>
 800b77a:	9b08      	ldr	r3, [sp, #32]
 800b77c:	1b9e      	subs	r6, r3, r6
 800b77e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b782:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b786:	e7e3      	b.n	800b750 <_strtod_l+0x3f8>
 800b788:	9b08      	ldr	r3, [sp, #32]
 800b78a:	3316      	adds	r3, #22
 800b78c:	db0b      	blt.n	800b7a6 <_strtod_l+0x44e>
 800b78e:	9b05      	ldr	r3, [sp, #20]
 800b790:	1bdf      	subs	r7, r3, r7
 800b792:	4b54      	ldr	r3, [pc, #336]	; (800b8e4 <_strtod_l+0x58c>)
 800b794:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b79c:	4640      	mov	r0, r8
 800b79e:	4649      	mov	r1, r9
 800b7a0:	f7f5 f854 	bl	800084c <__aeabi_ddiv>
 800b7a4:	e7d6      	b.n	800b754 <_strtod_l+0x3fc>
 800b7a6:	9b08      	ldr	r3, [sp, #32]
 800b7a8:	1b75      	subs	r5, r6, r5
 800b7aa:	441d      	add	r5, r3
 800b7ac:	2d00      	cmp	r5, #0
 800b7ae:	dd70      	ble.n	800b892 <_strtod_l+0x53a>
 800b7b0:	f015 030f 	ands.w	r3, r5, #15
 800b7b4:	d00a      	beq.n	800b7cc <_strtod_l+0x474>
 800b7b6:	494b      	ldr	r1, [pc, #300]	; (800b8e4 <_strtod_l+0x58c>)
 800b7b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7bc:	4642      	mov	r2, r8
 800b7be:	464b      	mov	r3, r9
 800b7c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7c4:	f7f4 ff18 	bl	80005f8 <__aeabi_dmul>
 800b7c8:	4680      	mov	r8, r0
 800b7ca:	4689      	mov	r9, r1
 800b7cc:	f035 050f 	bics.w	r5, r5, #15
 800b7d0:	d04d      	beq.n	800b86e <_strtod_l+0x516>
 800b7d2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b7d6:	dd22      	ble.n	800b81e <_strtod_l+0x4c6>
 800b7d8:	2500      	movs	r5, #0
 800b7da:	46ab      	mov	fp, r5
 800b7dc:	9509      	str	r5, [sp, #36]	; 0x24
 800b7de:	9505      	str	r5, [sp, #20]
 800b7e0:	2322      	movs	r3, #34	; 0x22
 800b7e2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b8ec <_strtod_l+0x594>
 800b7e6:	6023      	str	r3, [r4, #0]
 800b7e8:	f04f 0800 	mov.w	r8, #0
 800b7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f43f aded 	beq.w	800b3ce <_strtod_l+0x76>
 800b7f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f7ff f924 	bl	800aa44 <_Bfree>
 800b7fc:	9905      	ldr	r1, [sp, #20]
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7ff f920 	bl	800aa44 <_Bfree>
 800b804:	4659      	mov	r1, fp
 800b806:	4620      	mov	r0, r4
 800b808:	f7ff f91c 	bl	800aa44 <_Bfree>
 800b80c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b80e:	4620      	mov	r0, r4
 800b810:	f7ff f918 	bl	800aa44 <_Bfree>
 800b814:	4629      	mov	r1, r5
 800b816:	4620      	mov	r0, r4
 800b818:	f7ff f914 	bl	800aa44 <_Bfree>
 800b81c:	e5d7      	b.n	800b3ce <_strtod_l+0x76>
 800b81e:	4b32      	ldr	r3, [pc, #200]	; (800b8e8 <_strtod_l+0x590>)
 800b820:	9304      	str	r3, [sp, #16]
 800b822:	2300      	movs	r3, #0
 800b824:	112d      	asrs	r5, r5, #4
 800b826:	4640      	mov	r0, r8
 800b828:	4649      	mov	r1, r9
 800b82a:	469a      	mov	sl, r3
 800b82c:	2d01      	cmp	r5, #1
 800b82e:	dc21      	bgt.n	800b874 <_strtod_l+0x51c>
 800b830:	b10b      	cbz	r3, 800b836 <_strtod_l+0x4de>
 800b832:	4680      	mov	r8, r0
 800b834:	4689      	mov	r9, r1
 800b836:	492c      	ldr	r1, [pc, #176]	; (800b8e8 <_strtod_l+0x590>)
 800b838:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b83c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b840:	4642      	mov	r2, r8
 800b842:	464b      	mov	r3, r9
 800b844:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	4b27      	ldr	r3, [pc, #156]	; (800b8ec <_strtod_l+0x594>)
 800b84e:	460a      	mov	r2, r1
 800b850:	400b      	ands	r3, r1
 800b852:	4927      	ldr	r1, [pc, #156]	; (800b8f0 <_strtod_l+0x598>)
 800b854:	428b      	cmp	r3, r1
 800b856:	4680      	mov	r8, r0
 800b858:	d8be      	bhi.n	800b7d8 <_strtod_l+0x480>
 800b85a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b85e:	428b      	cmp	r3, r1
 800b860:	bf86      	itte	hi
 800b862:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b8f4 <_strtod_l+0x59c>
 800b866:	f04f 38ff 	movhi.w	r8, #4294967295
 800b86a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b86e:	2300      	movs	r3, #0
 800b870:	9304      	str	r3, [sp, #16]
 800b872:	e07b      	b.n	800b96c <_strtod_l+0x614>
 800b874:	07ea      	lsls	r2, r5, #31
 800b876:	d505      	bpl.n	800b884 <_strtod_l+0x52c>
 800b878:	9b04      	ldr	r3, [sp, #16]
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	2301      	movs	r3, #1
 800b884:	9a04      	ldr	r2, [sp, #16]
 800b886:	3208      	adds	r2, #8
 800b888:	f10a 0a01 	add.w	sl, sl, #1
 800b88c:	106d      	asrs	r5, r5, #1
 800b88e:	9204      	str	r2, [sp, #16]
 800b890:	e7cc      	b.n	800b82c <_strtod_l+0x4d4>
 800b892:	d0ec      	beq.n	800b86e <_strtod_l+0x516>
 800b894:	426d      	negs	r5, r5
 800b896:	f015 020f 	ands.w	r2, r5, #15
 800b89a:	d00a      	beq.n	800b8b2 <_strtod_l+0x55a>
 800b89c:	4b11      	ldr	r3, [pc, #68]	; (800b8e4 <_strtod_l+0x58c>)
 800b89e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8a2:	4640      	mov	r0, r8
 800b8a4:	4649      	mov	r1, r9
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	f7f4 ffcf 	bl	800084c <__aeabi_ddiv>
 800b8ae:	4680      	mov	r8, r0
 800b8b0:	4689      	mov	r9, r1
 800b8b2:	112d      	asrs	r5, r5, #4
 800b8b4:	d0db      	beq.n	800b86e <_strtod_l+0x516>
 800b8b6:	2d1f      	cmp	r5, #31
 800b8b8:	dd1e      	ble.n	800b8f8 <_strtod_l+0x5a0>
 800b8ba:	2500      	movs	r5, #0
 800b8bc:	46ab      	mov	fp, r5
 800b8be:	9509      	str	r5, [sp, #36]	; 0x24
 800b8c0:	9505      	str	r5, [sp, #20]
 800b8c2:	2322      	movs	r3, #34	; 0x22
 800b8c4:	f04f 0800 	mov.w	r8, #0
 800b8c8:	f04f 0900 	mov.w	r9, #0
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	e78d      	b.n	800b7ec <_strtod_l+0x494>
 800b8d0:	0800e52d 	.word	0x0800e52d
 800b8d4:	0800e754 	.word	0x0800e754
 800b8d8:	0800e525 	.word	0x0800e525
 800b8dc:	0800e55c 	.word	0x0800e55c
 800b8e0:	0800e8e5 	.word	0x0800e8e5
 800b8e4:	0800e668 	.word	0x0800e668
 800b8e8:	0800e640 	.word	0x0800e640
 800b8ec:	7ff00000 	.word	0x7ff00000
 800b8f0:	7ca00000 	.word	0x7ca00000
 800b8f4:	7fefffff 	.word	0x7fefffff
 800b8f8:	f015 0310 	ands.w	r3, r5, #16
 800b8fc:	bf18      	it	ne
 800b8fe:	236a      	movne	r3, #106	; 0x6a
 800b900:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bca4 <_strtod_l+0x94c>
 800b904:	9304      	str	r3, [sp, #16]
 800b906:	4640      	mov	r0, r8
 800b908:	4649      	mov	r1, r9
 800b90a:	2300      	movs	r3, #0
 800b90c:	07ea      	lsls	r2, r5, #31
 800b90e:	d504      	bpl.n	800b91a <_strtod_l+0x5c2>
 800b910:	e9da 2300 	ldrd	r2, r3, [sl]
 800b914:	f7f4 fe70 	bl	80005f8 <__aeabi_dmul>
 800b918:	2301      	movs	r3, #1
 800b91a:	106d      	asrs	r5, r5, #1
 800b91c:	f10a 0a08 	add.w	sl, sl, #8
 800b920:	d1f4      	bne.n	800b90c <_strtod_l+0x5b4>
 800b922:	b10b      	cbz	r3, 800b928 <_strtod_l+0x5d0>
 800b924:	4680      	mov	r8, r0
 800b926:	4689      	mov	r9, r1
 800b928:	9b04      	ldr	r3, [sp, #16]
 800b92a:	b1bb      	cbz	r3, 800b95c <_strtod_l+0x604>
 800b92c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b930:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b934:	2b00      	cmp	r3, #0
 800b936:	4649      	mov	r1, r9
 800b938:	dd10      	ble.n	800b95c <_strtod_l+0x604>
 800b93a:	2b1f      	cmp	r3, #31
 800b93c:	f340 811e 	ble.w	800bb7c <_strtod_l+0x824>
 800b940:	2b34      	cmp	r3, #52	; 0x34
 800b942:	bfde      	ittt	le
 800b944:	f04f 33ff 	movle.w	r3, #4294967295
 800b948:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b94c:	4093      	lslle	r3, r2
 800b94e:	f04f 0800 	mov.w	r8, #0
 800b952:	bfcc      	ite	gt
 800b954:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b958:	ea03 0901 	andle.w	r9, r3, r1
 800b95c:	2200      	movs	r2, #0
 800b95e:	2300      	movs	r3, #0
 800b960:	4640      	mov	r0, r8
 800b962:	4649      	mov	r1, r9
 800b964:	f7f5 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d1a6      	bne.n	800b8ba <_strtod_l+0x562>
 800b96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b972:	4633      	mov	r3, r6
 800b974:	465a      	mov	r2, fp
 800b976:	4620      	mov	r0, r4
 800b978:	f7ff f8cc 	bl	800ab14 <__s2b>
 800b97c:	9009      	str	r0, [sp, #36]	; 0x24
 800b97e:	2800      	cmp	r0, #0
 800b980:	f43f af2a 	beq.w	800b7d8 <_strtod_l+0x480>
 800b984:	9a08      	ldr	r2, [sp, #32]
 800b986:	9b05      	ldr	r3, [sp, #20]
 800b988:	2a00      	cmp	r2, #0
 800b98a:	eba3 0307 	sub.w	r3, r3, r7
 800b98e:	bfa8      	it	ge
 800b990:	2300      	movge	r3, #0
 800b992:	930c      	str	r3, [sp, #48]	; 0x30
 800b994:	2500      	movs	r5, #0
 800b996:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b99a:	9312      	str	r3, [sp, #72]	; 0x48
 800b99c:	46ab      	mov	fp, r5
 800b99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	6859      	ldr	r1, [r3, #4]
 800b9a4:	f7ff f80e 	bl	800a9c4 <_Balloc>
 800b9a8:	9005      	str	r0, [sp, #20]
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	f43f af18 	beq.w	800b7e0 <_strtod_l+0x488>
 800b9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b2:	691a      	ldr	r2, [r3, #16]
 800b9b4:	3202      	adds	r2, #2
 800b9b6:	f103 010c 	add.w	r1, r3, #12
 800b9ba:	0092      	lsls	r2, r2, #2
 800b9bc:	300c      	adds	r0, #12
 800b9be:	f000 fd87 	bl	800c4d0 <memcpy>
 800b9c2:	ec49 8b10 	vmov	d0, r8, r9
 800b9c6:	aa18      	add	r2, sp, #96	; 0x60
 800b9c8:	a917      	add	r1, sp, #92	; 0x5c
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f7ff fbd6 	bl	800b17c <__d2b>
 800b9d0:	ec49 8b18 	vmov	d8, r8, r9
 800b9d4:	9016      	str	r0, [sp, #88]	; 0x58
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	f43f af02 	beq.w	800b7e0 <_strtod_l+0x488>
 800b9dc:	2101      	movs	r1, #1
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f7ff f930 	bl	800ac44 <__i2b>
 800b9e4:	4683      	mov	fp, r0
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f43f aefa 	beq.w	800b7e0 <_strtod_l+0x488>
 800b9ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b9ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b9f0:	2e00      	cmp	r6, #0
 800b9f2:	bfab      	itete	ge
 800b9f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b9f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b9f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b9fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b9fe:	bfac      	ite	ge
 800ba00:	eb06 0a03 	addge.w	sl, r6, r3
 800ba04:	1b9f      	sublt	r7, r3, r6
 800ba06:	9b04      	ldr	r3, [sp, #16]
 800ba08:	1af6      	subs	r6, r6, r3
 800ba0a:	4416      	add	r6, r2
 800ba0c:	4ba0      	ldr	r3, [pc, #640]	; (800bc90 <_strtod_l+0x938>)
 800ba0e:	3e01      	subs	r6, #1
 800ba10:	429e      	cmp	r6, r3
 800ba12:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ba16:	f280 80c4 	bge.w	800bba2 <_strtod_l+0x84a>
 800ba1a:	1b9b      	subs	r3, r3, r6
 800ba1c:	2b1f      	cmp	r3, #31
 800ba1e:	eba2 0203 	sub.w	r2, r2, r3
 800ba22:	f04f 0101 	mov.w	r1, #1
 800ba26:	f300 80b0 	bgt.w	800bb8a <_strtod_l+0x832>
 800ba2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba2e:	930e      	str	r3, [sp, #56]	; 0x38
 800ba30:	2300      	movs	r3, #0
 800ba32:	930d      	str	r3, [sp, #52]	; 0x34
 800ba34:	eb0a 0602 	add.w	r6, sl, r2
 800ba38:	9b04      	ldr	r3, [sp, #16]
 800ba3a:	45b2      	cmp	sl, r6
 800ba3c:	4417      	add	r7, r2
 800ba3e:	441f      	add	r7, r3
 800ba40:	4653      	mov	r3, sl
 800ba42:	bfa8      	it	ge
 800ba44:	4633      	movge	r3, r6
 800ba46:	42bb      	cmp	r3, r7
 800ba48:	bfa8      	it	ge
 800ba4a:	463b      	movge	r3, r7
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	bfc2      	ittt	gt
 800ba50:	1af6      	subgt	r6, r6, r3
 800ba52:	1aff      	subgt	r7, r7, r3
 800ba54:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ba58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	dd17      	ble.n	800ba8e <_strtod_l+0x736>
 800ba5e:	4659      	mov	r1, fp
 800ba60:	461a      	mov	r2, r3
 800ba62:	4620      	mov	r0, r4
 800ba64:	f7ff f9ae 	bl	800adc4 <__pow5mult>
 800ba68:	4683      	mov	fp, r0
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	f43f aeb8 	beq.w	800b7e0 <_strtod_l+0x488>
 800ba70:	4601      	mov	r1, r0
 800ba72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ba74:	4620      	mov	r0, r4
 800ba76:	f7ff f8fb 	bl	800ac70 <__multiply>
 800ba7a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f43f aeaf 	beq.w	800b7e0 <_strtod_l+0x488>
 800ba82:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ba84:	4620      	mov	r0, r4
 800ba86:	f7fe ffdd 	bl	800aa44 <_Bfree>
 800ba8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba8c:	9316      	str	r3, [sp, #88]	; 0x58
 800ba8e:	2e00      	cmp	r6, #0
 800ba90:	f300 808c 	bgt.w	800bbac <_strtod_l+0x854>
 800ba94:	9b08      	ldr	r3, [sp, #32]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	dd08      	ble.n	800baac <_strtod_l+0x754>
 800ba9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba9c:	9905      	ldr	r1, [sp, #20]
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f7ff f990 	bl	800adc4 <__pow5mult>
 800baa4:	9005      	str	r0, [sp, #20]
 800baa6:	2800      	cmp	r0, #0
 800baa8:	f43f ae9a 	beq.w	800b7e0 <_strtod_l+0x488>
 800baac:	2f00      	cmp	r7, #0
 800baae:	dd08      	ble.n	800bac2 <_strtod_l+0x76a>
 800bab0:	9905      	ldr	r1, [sp, #20]
 800bab2:	463a      	mov	r2, r7
 800bab4:	4620      	mov	r0, r4
 800bab6:	f7ff f9df 	bl	800ae78 <__lshift>
 800baba:	9005      	str	r0, [sp, #20]
 800babc:	2800      	cmp	r0, #0
 800babe:	f43f ae8f 	beq.w	800b7e0 <_strtod_l+0x488>
 800bac2:	f1ba 0f00 	cmp.w	sl, #0
 800bac6:	dd08      	ble.n	800bada <_strtod_l+0x782>
 800bac8:	4659      	mov	r1, fp
 800baca:	4652      	mov	r2, sl
 800bacc:	4620      	mov	r0, r4
 800bace:	f7ff f9d3 	bl	800ae78 <__lshift>
 800bad2:	4683      	mov	fp, r0
 800bad4:	2800      	cmp	r0, #0
 800bad6:	f43f ae83 	beq.w	800b7e0 <_strtod_l+0x488>
 800bada:	9a05      	ldr	r2, [sp, #20]
 800badc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bade:	4620      	mov	r0, r4
 800bae0:	f7ff fa52 	bl	800af88 <__mdiff>
 800bae4:	4605      	mov	r5, r0
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f43f ae7a 	beq.w	800b7e0 <_strtod_l+0x488>
 800baec:	68c3      	ldr	r3, [r0, #12]
 800baee:	930b      	str	r3, [sp, #44]	; 0x2c
 800baf0:	2300      	movs	r3, #0
 800baf2:	60c3      	str	r3, [r0, #12]
 800baf4:	4659      	mov	r1, fp
 800baf6:	f7ff fa2b 	bl	800af50 <__mcmp>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	da60      	bge.n	800bbc0 <_strtod_l+0x868>
 800bafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb00:	ea53 0308 	orrs.w	r3, r3, r8
 800bb04:	f040 8084 	bne.w	800bc10 <_strtod_l+0x8b8>
 800bb08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d17f      	bne.n	800bc10 <_strtod_l+0x8b8>
 800bb10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bb14:	0d1b      	lsrs	r3, r3, #20
 800bb16:	051b      	lsls	r3, r3, #20
 800bb18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bb1c:	d978      	bls.n	800bc10 <_strtod_l+0x8b8>
 800bb1e:	696b      	ldr	r3, [r5, #20]
 800bb20:	b913      	cbnz	r3, 800bb28 <_strtod_l+0x7d0>
 800bb22:	692b      	ldr	r3, [r5, #16]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	dd73      	ble.n	800bc10 <_strtod_l+0x8b8>
 800bb28:	4629      	mov	r1, r5
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f7ff f9a3 	bl	800ae78 <__lshift>
 800bb32:	4659      	mov	r1, fp
 800bb34:	4605      	mov	r5, r0
 800bb36:	f7ff fa0b 	bl	800af50 <__mcmp>
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	dd68      	ble.n	800bc10 <_strtod_l+0x8b8>
 800bb3e:	9904      	ldr	r1, [sp, #16]
 800bb40:	4a54      	ldr	r2, [pc, #336]	; (800bc94 <_strtod_l+0x93c>)
 800bb42:	464b      	mov	r3, r9
 800bb44:	2900      	cmp	r1, #0
 800bb46:	f000 8084 	beq.w	800bc52 <_strtod_l+0x8fa>
 800bb4a:	ea02 0109 	and.w	r1, r2, r9
 800bb4e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bb52:	dc7e      	bgt.n	800bc52 <_strtod_l+0x8fa>
 800bb54:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bb58:	f77f aeb3 	ble.w	800b8c2 <_strtod_l+0x56a>
 800bb5c:	4b4e      	ldr	r3, [pc, #312]	; (800bc98 <_strtod_l+0x940>)
 800bb5e:	4640      	mov	r0, r8
 800bb60:	4649      	mov	r1, r9
 800bb62:	2200      	movs	r2, #0
 800bb64:	f7f4 fd48 	bl	80005f8 <__aeabi_dmul>
 800bb68:	4b4a      	ldr	r3, [pc, #296]	; (800bc94 <_strtod_l+0x93c>)
 800bb6a:	400b      	ands	r3, r1
 800bb6c:	4680      	mov	r8, r0
 800bb6e:	4689      	mov	r9, r1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f47f ae3f 	bne.w	800b7f4 <_strtod_l+0x49c>
 800bb76:	2322      	movs	r3, #34	; 0x22
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	e63b      	b.n	800b7f4 <_strtod_l+0x49c>
 800bb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb80:	fa02 f303 	lsl.w	r3, r2, r3
 800bb84:	ea03 0808 	and.w	r8, r3, r8
 800bb88:	e6e8      	b.n	800b95c <_strtod_l+0x604>
 800bb8a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bb8e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bb92:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bb96:	36e2      	adds	r6, #226	; 0xe2
 800bb98:	fa01 f306 	lsl.w	r3, r1, r6
 800bb9c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bba0:	e748      	b.n	800ba34 <_strtod_l+0x6dc>
 800bba2:	2100      	movs	r1, #0
 800bba4:	2301      	movs	r3, #1
 800bba6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800bbaa:	e743      	b.n	800ba34 <_strtod_l+0x6dc>
 800bbac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bbae:	4632      	mov	r2, r6
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f7ff f961 	bl	800ae78 <__lshift>
 800bbb6:	9016      	str	r0, [sp, #88]	; 0x58
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	f47f af6b 	bne.w	800ba94 <_strtod_l+0x73c>
 800bbbe:	e60f      	b.n	800b7e0 <_strtod_l+0x488>
 800bbc0:	46ca      	mov	sl, r9
 800bbc2:	d171      	bne.n	800bca8 <_strtod_l+0x950>
 800bbc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbca:	b352      	cbz	r2, 800bc22 <_strtod_l+0x8ca>
 800bbcc:	4a33      	ldr	r2, [pc, #204]	; (800bc9c <_strtod_l+0x944>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d12a      	bne.n	800bc28 <_strtod_l+0x8d0>
 800bbd2:	9b04      	ldr	r3, [sp, #16]
 800bbd4:	4641      	mov	r1, r8
 800bbd6:	b1fb      	cbz	r3, 800bc18 <_strtod_l+0x8c0>
 800bbd8:	4b2e      	ldr	r3, [pc, #184]	; (800bc94 <_strtod_l+0x93c>)
 800bbda:	ea09 0303 	and.w	r3, r9, r3
 800bbde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bbe2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe6:	d81a      	bhi.n	800bc1e <_strtod_l+0x8c6>
 800bbe8:	0d1b      	lsrs	r3, r3, #20
 800bbea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bbee:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf2:	4299      	cmp	r1, r3
 800bbf4:	d118      	bne.n	800bc28 <_strtod_l+0x8d0>
 800bbf6:	4b2a      	ldr	r3, [pc, #168]	; (800bca0 <_strtod_l+0x948>)
 800bbf8:	459a      	cmp	sl, r3
 800bbfa:	d102      	bne.n	800bc02 <_strtod_l+0x8aa>
 800bbfc:	3101      	adds	r1, #1
 800bbfe:	f43f adef 	beq.w	800b7e0 <_strtod_l+0x488>
 800bc02:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <_strtod_l+0x93c>)
 800bc04:	ea0a 0303 	and.w	r3, sl, r3
 800bc08:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bc0c:	f04f 0800 	mov.w	r8, #0
 800bc10:	9b04      	ldr	r3, [sp, #16]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1a2      	bne.n	800bb5c <_strtod_l+0x804>
 800bc16:	e5ed      	b.n	800b7f4 <_strtod_l+0x49c>
 800bc18:	f04f 33ff 	mov.w	r3, #4294967295
 800bc1c:	e7e9      	b.n	800bbf2 <_strtod_l+0x89a>
 800bc1e:	4613      	mov	r3, r2
 800bc20:	e7e7      	b.n	800bbf2 <_strtod_l+0x89a>
 800bc22:	ea53 0308 	orrs.w	r3, r3, r8
 800bc26:	d08a      	beq.n	800bb3e <_strtod_l+0x7e6>
 800bc28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc2a:	b1e3      	cbz	r3, 800bc66 <_strtod_l+0x90e>
 800bc2c:	ea13 0f0a 	tst.w	r3, sl
 800bc30:	d0ee      	beq.n	800bc10 <_strtod_l+0x8b8>
 800bc32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc34:	9a04      	ldr	r2, [sp, #16]
 800bc36:	4640      	mov	r0, r8
 800bc38:	4649      	mov	r1, r9
 800bc3a:	b1c3      	cbz	r3, 800bc6e <_strtod_l+0x916>
 800bc3c:	f7ff fb6f 	bl	800b31e <sulp>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	ec51 0b18 	vmov	r0, r1, d8
 800bc48:	f7f4 fb20 	bl	800028c <__adddf3>
 800bc4c:	4680      	mov	r8, r0
 800bc4e:	4689      	mov	r9, r1
 800bc50:	e7de      	b.n	800bc10 <_strtod_l+0x8b8>
 800bc52:	4013      	ands	r3, r2
 800bc54:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bc58:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bc5c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bc60:	f04f 38ff 	mov.w	r8, #4294967295
 800bc64:	e7d4      	b.n	800bc10 <_strtod_l+0x8b8>
 800bc66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc68:	ea13 0f08 	tst.w	r3, r8
 800bc6c:	e7e0      	b.n	800bc30 <_strtod_l+0x8d8>
 800bc6e:	f7ff fb56 	bl	800b31e <sulp>
 800bc72:	4602      	mov	r2, r0
 800bc74:	460b      	mov	r3, r1
 800bc76:	ec51 0b18 	vmov	r0, r1, d8
 800bc7a:	f7f4 fb05 	bl	8000288 <__aeabi_dsub>
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2300      	movs	r3, #0
 800bc82:	4680      	mov	r8, r0
 800bc84:	4689      	mov	r9, r1
 800bc86:	f7f4 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d0c0      	beq.n	800bc10 <_strtod_l+0x8b8>
 800bc8e:	e618      	b.n	800b8c2 <_strtod_l+0x56a>
 800bc90:	fffffc02 	.word	0xfffffc02
 800bc94:	7ff00000 	.word	0x7ff00000
 800bc98:	39500000 	.word	0x39500000
 800bc9c:	000fffff 	.word	0x000fffff
 800bca0:	7fefffff 	.word	0x7fefffff
 800bca4:	0800e768 	.word	0x0800e768
 800bca8:	4659      	mov	r1, fp
 800bcaa:	4628      	mov	r0, r5
 800bcac:	f7ff fac0 	bl	800b230 <__ratio>
 800bcb0:	ec57 6b10 	vmov	r6, r7, d0
 800bcb4:	ee10 0a10 	vmov	r0, s0
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bcbe:	4639      	mov	r1, r7
 800bcc0:	f7f4 ff16 	bl	8000af0 <__aeabi_dcmple>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d071      	beq.n	800bdac <_strtod_l+0xa54>
 800bcc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d17c      	bne.n	800bdc8 <_strtod_l+0xa70>
 800bcce:	f1b8 0f00 	cmp.w	r8, #0
 800bcd2:	d15a      	bne.n	800bd8a <_strtod_l+0xa32>
 800bcd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d15d      	bne.n	800bd98 <_strtod_l+0xa40>
 800bcdc:	4b90      	ldr	r3, [pc, #576]	; (800bf20 <_strtod_l+0xbc8>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	4630      	mov	r0, r6
 800bce2:	4639      	mov	r1, r7
 800bce4:	f7f4 fefa 	bl	8000adc <__aeabi_dcmplt>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d15c      	bne.n	800bda6 <_strtod_l+0xa4e>
 800bcec:	4630      	mov	r0, r6
 800bcee:	4639      	mov	r1, r7
 800bcf0:	4b8c      	ldr	r3, [pc, #560]	; (800bf24 <_strtod_l+0xbcc>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f7f4 fc80 	bl	80005f8 <__aeabi_dmul>
 800bcf8:	4606      	mov	r6, r0
 800bcfa:	460f      	mov	r7, r1
 800bcfc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bd00:	9606      	str	r6, [sp, #24]
 800bd02:	9307      	str	r3, [sp, #28]
 800bd04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bd0c:	4b86      	ldr	r3, [pc, #536]	; (800bf28 <_strtod_l+0xbd0>)
 800bd0e:	ea0a 0303 	and.w	r3, sl, r3
 800bd12:	930d      	str	r3, [sp, #52]	; 0x34
 800bd14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd16:	4b85      	ldr	r3, [pc, #532]	; (800bf2c <_strtod_l+0xbd4>)
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	f040 8090 	bne.w	800be3e <_strtod_l+0xae6>
 800bd1e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bd22:	ec49 8b10 	vmov	d0, r8, r9
 800bd26:	f7ff f9b9 	bl	800b09c <__ulp>
 800bd2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd2e:	ec51 0b10 	vmov	r0, r1, d0
 800bd32:	f7f4 fc61 	bl	80005f8 <__aeabi_dmul>
 800bd36:	4642      	mov	r2, r8
 800bd38:	464b      	mov	r3, r9
 800bd3a:	f7f4 faa7 	bl	800028c <__adddf3>
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4979      	ldr	r1, [pc, #484]	; (800bf28 <_strtod_l+0xbd0>)
 800bd42:	4a7b      	ldr	r2, [pc, #492]	; (800bf30 <_strtod_l+0xbd8>)
 800bd44:	4019      	ands	r1, r3
 800bd46:	4291      	cmp	r1, r2
 800bd48:	4680      	mov	r8, r0
 800bd4a:	d944      	bls.n	800bdd6 <_strtod_l+0xa7e>
 800bd4c:	ee18 2a90 	vmov	r2, s17
 800bd50:	4b78      	ldr	r3, [pc, #480]	; (800bf34 <_strtod_l+0xbdc>)
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d104      	bne.n	800bd60 <_strtod_l+0xa08>
 800bd56:	ee18 3a10 	vmov	r3, s16
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	f43f ad40 	beq.w	800b7e0 <_strtod_l+0x488>
 800bd60:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bf34 <_strtod_l+0xbdc>
 800bd64:	f04f 38ff 	mov.w	r8, #4294967295
 800bd68:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f7fe fe6a 	bl	800aa44 <_Bfree>
 800bd70:	9905      	ldr	r1, [sp, #20]
 800bd72:	4620      	mov	r0, r4
 800bd74:	f7fe fe66 	bl	800aa44 <_Bfree>
 800bd78:	4659      	mov	r1, fp
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7fe fe62 	bl	800aa44 <_Bfree>
 800bd80:	4629      	mov	r1, r5
 800bd82:	4620      	mov	r0, r4
 800bd84:	f7fe fe5e 	bl	800aa44 <_Bfree>
 800bd88:	e609      	b.n	800b99e <_strtod_l+0x646>
 800bd8a:	f1b8 0f01 	cmp.w	r8, #1
 800bd8e:	d103      	bne.n	800bd98 <_strtod_l+0xa40>
 800bd90:	f1b9 0f00 	cmp.w	r9, #0
 800bd94:	f43f ad95 	beq.w	800b8c2 <_strtod_l+0x56a>
 800bd98:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bef0 <_strtod_l+0xb98>
 800bd9c:	4f60      	ldr	r7, [pc, #384]	; (800bf20 <_strtod_l+0xbc8>)
 800bd9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bda2:	2600      	movs	r6, #0
 800bda4:	e7ae      	b.n	800bd04 <_strtod_l+0x9ac>
 800bda6:	4f5f      	ldr	r7, [pc, #380]	; (800bf24 <_strtod_l+0xbcc>)
 800bda8:	2600      	movs	r6, #0
 800bdaa:	e7a7      	b.n	800bcfc <_strtod_l+0x9a4>
 800bdac:	4b5d      	ldr	r3, [pc, #372]	; (800bf24 <_strtod_l+0xbcc>)
 800bdae:	4630      	mov	r0, r6
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f7f4 fc20 	bl	80005f8 <__aeabi_dmul>
 800bdb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdba:	4606      	mov	r6, r0
 800bdbc:	460f      	mov	r7, r1
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d09c      	beq.n	800bcfc <_strtod_l+0x9a4>
 800bdc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bdc6:	e79d      	b.n	800bd04 <_strtod_l+0x9ac>
 800bdc8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bef8 <_strtod_l+0xba0>
 800bdcc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bdd0:	ec57 6b17 	vmov	r6, r7, d7
 800bdd4:	e796      	b.n	800bd04 <_strtod_l+0x9ac>
 800bdd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bdda:	9b04      	ldr	r3, [sp, #16]
 800bddc:	46ca      	mov	sl, r9
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1c2      	bne.n	800bd68 <_strtod_l+0xa10>
 800bde2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bde6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bde8:	0d1b      	lsrs	r3, r3, #20
 800bdea:	051b      	lsls	r3, r3, #20
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d1bb      	bne.n	800bd68 <_strtod_l+0xa10>
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 ff60 	bl	8000cb8 <__aeabi_d2lz>
 800bdf8:	f7f4 fbd0 	bl	800059c <__aeabi_l2d>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4630      	mov	r0, r6
 800be02:	4639      	mov	r1, r7
 800be04:	f7f4 fa40 	bl	8000288 <__aeabi_dsub>
 800be08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be0e:	ea43 0308 	orr.w	r3, r3, r8
 800be12:	4313      	orrs	r3, r2
 800be14:	4606      	mov	r6, r0
 800be16:	460f      	mov	r7, r1
 800be18:	d054      	beq.n	800bec4 <_strtod_l+0xb6c>
 800be1a:	a339      	add	r3, pc, #228	; (adr r3, 800bf00 <_strtod_l+0xba8>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 fe5c 	bl	8000adc <__aeabi_dcmplt>
 800be24:	2800      	cmp	r0, #0
 800be26:	f47f ace5 	bne.w	800b7f4 <_strtod_l+0x49c>
 800be2a:	a337      	add	r3, pc, #220	; (adr r3, 800bf08 <_strtod_l+0xbb0>)
 800be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be30:	4630      	mov	r0, r6
 800be32:	4639      	mov	r1, r7
 800be34:	f7f4 fe70 	bl	8000b18 <__aeabi_dcmpgt>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d095      	beq.n	800bd68 <_strtod_l+0xa10>
 800be3c:	e4da      	b.n	800b7f4 <_strtod_l+0x49c>
 800be3e:	9b04      	ldr	r3, [sp, #16]
 800be40:	b333      	cbz	r3, 800be90 <_strtod_l+0xb38>
 800be42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be48:	d822      	bhi.n	800be90 <_strtod_l+0xb38>
 800be4a:	a331      	add	r3, pc, #196	; (adr r3, 800bf10 <_strtod_l+0xbb8>)
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	4630      	mov	r0, r6
 800be52:	4639      	mov	r1, r7
 800be54:	f7f4 fe4c 	bl	8000af0 <__aeabi_dcmple>
 800be58:	b1a0      	cbz	r0, 800be84 <_strtod_l+0xb2c>
 800be5a:	4639      	mov	r1, r7
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7f4 fea3 	bl	8000ba8 <__aeabi_d2uiz>
 800be62:	2801      	cmp	r0, #1
 800be64:	bf38      	it	cc
 800be66:	2001      	movcc	r0, #1
 800be68:	f7f4 fb4c 	bl	8000504 <__aeabi_ui2d>
 800be6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be6e:	4606      	mov	r6, r0
 800be70:	460f      	mov	r7, r1
 800be72:	bb23      	cbnz	r3, 800bebe <_strtod_l+0xb66>
 800be74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be78:	9010      	str	r0, [sp, #64]	; 0x40
 800be7a:	9311      	str	r3, [sp, #68]	; 0x44
 800be7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800be84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800be8c:	1a9b      	subs	r3, r3, r2
 800be8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800be90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800be94:	eeb0 0a48 	vmov.f32	s0, s16
 800be98:	eef0 0a68 	vmov.f32	s1, s17
 800be9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bea0:	f7ff f8fc 	bl	800b09c <__ulp>
 800bea4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bea8:	ec53 2b10 	vmov	r2, r3, d0
 800beac:	f7f4 fba4 	bl	80005f8 <__aeabi_dmul>
 800beb0:	ec53 2b18 	vmov	r2, r3, d8
 800beb4:	f7f4 f9ea 	bl	800028c <__adddf3>
 800beb8:	4680      	mov	r8, r0
 800beba:	4689      	mov	r9, r1
 800bebc:	e78d      	b.n	800bdda <_strtod_l+0xa82>
 800bebe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bec2:	e7db      	b.n	800be7c <_strtod_l+0xb24>
 800bec4:	a314      	add	r3, pc, #80	; (adr r3, 800bf18 <_strtod_l+0xbc0>)
 800bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beca:	f7f4 fe07 	bl	8000adc <__aeabi_dcmplt>
 800bece:	e7b3      	b.n	800be38 <_strtod_l+0xae0>
 800bed0:	2300      	movs	r3, #0
 800bed2:	930a      	str	r3, [sp, #40]	; 0x28
 800bed4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bed6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bed8:	6013      	str	r3, [r2, #0]
 800beda:	f7ff ba7c 	b.w	800b3d6 <_strtod_l+0x7e>
 800bede:	2a65      	cmp	r2, #101	; 0x65
 800bee0:	f43f ab75 	beq.w	800b5ce <_strtod_l+0x276>
 800bee4:	2a45      	cmp	r2, #69	; 0x45
 800bee6:	f43f ab72 	beq.w	800b5ce <_strtod_l+0x276>
 800beea:	2301      	movs	r3, #1
 800beec:	f7ff bbaa 	b.w	800b644 <_strtod_l+0x2ec>
 800bef0:	00000000 	.word	0x00000000
 800bef4:	bff00000 	.word	0xbff00000
 800bef8:	00000000 	.word	0x00000000
 800befc:	3ff00000 	.word	0x3ff00000
 800bf00:	94a03595 	.word	0x94a03595
 800bf04:	3fdfffff 	.word	0x3fdfffff
 800bf08:	35afe535 	.word	0x35afe535
 800bf0c:	3fe00000 	.word	0x3fe00000
 800bf10:	ffc00000 	.word	0xffc00000
 800bf14:	41dfffff 	.word	0x41dfffff
 800bf18:	94a03595 	.word	0x94a03595
 800bf1c:	3fcfffff 	.word	0x3fcfffff
 800bf20:	3ff00000 	.word	0x3ff00000
 800bf24:	3fe00000 	.word	0x3fe00000
 800bf28:	7ff00000 	.word	0x7ff00000
 800bf2c:	7fe00000 	.word	0x7fe00000
 800bf30:	7c9fffff 	.word	0x7c9fffff
 800bf34:	7fefffff 	.word	0x7fefffff

0800bf38 <_strtod_r>:
 800bf38:	4b01      	ldr	r3, [pc, #4]	; (800bf40 <_strtod_r+0x8>)
 800bf3a:	f7ff ba0d 	b.w	800b358 <_strtod_l>
 800bf3e:	bf00      	nop
 800bf40:	20000068 	.word	0x20000068

0800bf44 <_strtol_l.constprop.0>:
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf4a:	d001      	beq.n	800bf50 <_strtol_l.constprop.0+0xc>
 800bf4c:	2b24      	cmp	r3, #36	; 0x24
 800bf4e:	d906      	bls.n	800bf5e <_strtol_l.constprop.0+0x1a>
 800bf50:	f7fd fd8a 	bl	8009a68 <__errno>
 800bf54:	2316      	movs	r3, #22
 800bf56:	6003      	str	r3, [r0, #0]
 800bf58:	2000      	movs	r0, #0
 800bf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c044 <_strtol_l.constprop.0+0x100>
 800bf62:	460d      	mov	r5, r1
 800bf64:	462e      	mov	r6, r5
 800bf66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bf6e:	f017 0708 	ands.w	r7, r7, #8
 800bf72:	d1f7      	bne.n	800bf64 <_strtol_l.constprop.0+0x20>
 800bf74:	2c2d      	cmp	r4, #45	; 0x2d
 800bf76:	d132      	bne.n	800bfde <_strtol_l.constprop.0+0x9a>
 800bf78:	782c      	ldrb	r4, [r5, #0]
 800bf7a:	2701      	movs	r7, #1
 800bf7c:	1cb5      	adds	r5, r6, #2
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d05b      	beq.n	800c03a <_strtol_l.constprop.0+0xf6>
 800bf82:	2b10      	cmp	r3, #16
 800bf84:	d109      	bne.n	800bf9a <_strtol_l.constprop.0+0x56>
 800bf86:	2c30      	cmp	r4, #48	; 0x30
 800bf88:	d107      	bne.n	800bf9a <_strtol_l.constprop.0+0x56>
 800bf8a:	782c      	ldrb	r4, [r5, #0]
 800bf8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf90:	2c58      	cmp	r4, #88	; 0x58
 800bf92:	d14d      	bne.n	800c030 <_strtol_l.constprop.0+0xec>
 800bf94:	786c      	ldrb	r4, [r5, #1]
 800bf96:	2310      	movs	r3, #16
 800bf98:	3502      	adds	r5, #2
 800bf9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bf9e:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfa2:	f04f 0e00 	mov.w	lr, #0
 800bfa6:	fbb8 f9f3 	udiv	r9, r8, r3
 800bfaa:	4676      	mov	r6, lr
 800bfac:	fb03 8a19 	mls	sl, r3, r9, r8
 800bfb0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bfb4:	f1bc 0f09 	cmp.w	ip, #9
 800bfb8:	d816      	bhi.n	800bfe8 <_strtol_l.constprop.0+0xa4>
 800bfba:	4664      	mov	r4, ip
 800bfbc:	42a3      	cmp	r3, r4
 800bfbe:	dd24      	ble.n	800c00a <_strtol_l.constprop.0+0xc6>
 800bfc0:	f1be 3fff 	cmp.w	lr, #4294967295
 800bfc4:	d008      	beq.n	800bfd8 <_strtol_l.constprop.0+0x94>
 800bfc6:	45b1      	cmp	r9, r6
 800bfc8:	d31c      	bcc.n	800c004 <_strtol_l.constprop.0+0xc0>
 800bfca:	d101      	bne.n	800bfd0 <_strtol_l.constprop.0+0x8c>
 800bfcc:	45a2      	cmp	sl, r4
 800bfce:	db19      	blt.n	800c004 <_strtol_l.constprop.0+0xc0>
 800bfd0:	fb06 4603 	mla	r6, r6, r3, r4
 800bfd4:	f04f 0e01 	mov.w	lr, #1
 800bfd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfdc:	e7e8      	b.n	800bfb0 <_strtol_l.constprop.0+0x6c>
 800bfde:	2c2b      	cmp	r4, #43	; 0x2b
 800bfe0:	bf04      	itt	eq
 800bfe2:	782c      	ldrbeq	r4, [r5, #0]
 800bfe4:	1cb5      	addeq	r5, r6, #2
 800bfe6:	e7ca      	b.n	800bf7e <_strtol_l.constprop.0+0x3a>
 800bfe8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bfec:	f1bc 0f19 	cmp.w	ip, #25
 800bff0:	d801      	bhi.n	800bff6 <_strtol_l.constprop.0+0xb2>
 800bff2:	3c37      	subs	r4, #55	; 0x37
 800bff4:	e7e2      	b.n	800bfbc <_strtol_l.constprop.0+0x78>
 800bff6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bffa:	f1bc 0f19 	cmp.w	ip, #25
 800bffe:	d804      	bhi.n	800c00a <_strtol_l.constprop.0+0xc6>
 800c000:	3c57      	subs	r4, #87	; 0x57
 800c002:	e7db      	b.n	800bfbc <_strtol_l.constprop.0+0x78>
 800c004:	f04f 3eff 	mov.w	lr, #4294967295
 800c008:	e7e6      	b.n	800bfd8 <_strtol_l.constprop.0+0x94>
 800c00a:	f1be 3fff 	cmp.w	lr, #4294967295
 800c00e:	d105      	bne.n	800c01c <_strtol_l.constprop.0+0xd8>
 800c010:	2322      	movs	r3, #34	; 0x22
 800c012:	6003      	str	r3, [r0, #0]
 800c014:	4646      	mov	r6, r8
 800c016:	b942      	cbnz	r2, 800c02a <_strtol_l.constprop.0+0xe6>
 800c018:	4630      	mov	r0, r6
 800c01a:	e79e      	b.n	800bf5a <_strtol_l.constprop.0+0x16>
 800c01c:	b107      	cbz	r7, 800c020 <_strtol_l.constprop.0+0xdc>
 800c01e:	4276      	negs	r6, r6
 800c020:	2a00      	cmp	r2, #0
 800c022:	d0f9      	beq.n	800c018 <_strtol_l.constprop.0+0xd4>
 800c024:	f1be 0f00 	cmp.w	lr, #0
 800c028:	d000      	beq.n	800c02c <_strtol_l.constprop.0+0xe8>
 800c02a:	1e69      	subs	r1, r5, #1
 800c02c:	6011      	str	r1, [r2, #0]
 800c02e:	e7f3      	b.n	800c018 <_strtol_l.constprop.0+0xd4>
 800c030:	2430      	movs	r4, #48	; 0x30
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1b1      	bne.n	800bf9a <_strtol_l.constprop.0+0x56>
 800c036:	2308      	movs	r3, #8
 800c038:	e7af      	b.n	800bf9a <_strtol_l.constprop.0+0x56>
 800c03a:	2c30      	cmp	r4, #48	; 0x30
 800c03c:	d0a5      	beq.n	800bf8a <_strtol_l.constprop.0+0x46>
 800c03e:	230a      	movs	r3, #10
 800c040:	e7ab      	b.n	800bf9a <_strtol_l.constprop.0+0x56>
 800c042:	bf00      	nop
 800c044:	0800e791 	.word	0x0800e791

0800c048 <_strtol_r>:
 800c048:	f7ff bf7c 	b.w	800bf44 <_strtol_l.constprop.0>

0800c04c <__ssputs_r>:
 800c04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c050:	688e      	ldr	r6, [r1, #8]
 800c052:	461f      	mov	r7, r3
 800c054:	42be      	cmp	r6, r7
 800c056:	680b      	ldr	r3, [r1, #0]
 800c058:	4682      	mov	sl, r0
 800c05a:	460c      	mov	r4, r1
 800c05c:	4690      	mov	r8, r2
 800c05e:	d82c      	bhi.n	800c0ba <__ssputs_r+0x6e>
 800c060:	898a      	ldrh	r2, [r1, #12]
 800c062:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c066:	d026      	beq.n	800c0b6 <__ssputs_r+0x6a>
 800c068:	6965      	ldr	r5, [r4, #20]
 800c06a:	6909      	ldr	r1, [r1, #16]
 800c06c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c070:	eba3 0901 	sub.w	r9, r3, r1
 800c074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c078:	1c7b      	adds	r3, r7, #1
 800c07a:	444b      	add	r3, r9
 800c07c:	106d      	asrs	r5, r5, #1
 800c07e:	429d      	cmp	r5, r3
 800c080:	bf38      	it	cc
 800c082:	461d      	movcc	r5, r3
 800c084:	0553      	lsls	r3, r2, #21
 800c086:	d527      	bpl.n	800c0d8 <__ssputs_r+0x8c>
 800c088:	4629      	mov	r1, r5
 800c08a:	f7fe fc0f 	bl	800a8ac <_malloc_r>
 800c08e:	4606      	mov	r6, r0
 800c090:	b360      	cbz	r0, 800c0ec <__ssputs_r+0xa0>
 800c092:	6921      	ldr	r1, [r4, #16]
 800c094:	464a      	mov	r2, r9
 800c096:	f000 fa1b 	bl	800c4d0 <memcpy>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0a4:	81a3      	strh	r3, [r4, #12]
 800c0a6:	6126      	str	r6, [r4, #16]
 800c0a8:	6165      	str	r5, [r4, #20]
 800c0aa:	444e      	add	r6, r9
 800c0ac:	eba5 0509 	sub.w	r5, r5, r9
 800c0b0:	6026      	str	r6, [r4, #0]
 800c0b2:	60a5      	str	r5, [r4, #8]
 800c0b4:	463e      	mov	r6, r7
 800c0b6:	42be      	cmp	r6, r7
 800c0b8:	d900      	bls.n	800c0bc <__ssputs_r+0x70>
 800c0ba:	463e      	mov	r6, r7
 800c0bc:	6820      	ldr	r0, [r4, #0]
 800c0be:	4632      	mov	r2, r6
 800c0c0:	4641      	mov	r1, r8
 800c0c2:	f000 f9c9 	bl	800c458 <memmove>
 800c0c6:	68a3      	ldr	r3, [r4, #8]
 800c0c8:	1b9b      	subs	r3, r3, r6
 800c0ca:	60a3      	str	r3, [r4, #8]
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	4433      	add	r3, r6
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0d8:	462a      	mov	r2, r5
 800c0da:	f000 fdae 	bl	800cc3a <_realloc_r>
 800c0de:	4606      	mov	r6, r0
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d1e0      	bne.n	800c0a6 <__ssputs_r+0x5a>
 800c0e4:	6921      	ldr	r1, [r4, #16]
 800c0e6:	4650      	mov	r0, sl
 800c0e8:	f7fe fb6c 	bl	800a7c4 <_free_r>
 800c0ec:	230c      	movs	r3, #12
 800c0ee:	f8ca 3000 	str.w	r3, [sl]
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0f8:	81a3      	strh	r3, [r4, #12]
 800c0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fe:	e7e9      	b.n	800c0d4 <__ssputs_r+0x88>

0800c100 <_svfiprintf_r>:
 800c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c104:	4698      	mov	r8, r3
 800c106:	898b      	ldrh	r3, [r1, #12]
 800c108:	061b      	lsls	r3, r3, #24
 800c10a:	b09d      	sub	sp, #116	; 0x74
 800c10c:	4607      	mov	r7, r0
 800c10e:	460d      	mov	r5, r1
 800c110:	4614      	mov	r4, r2
 800c112:	d50e      	bpl.n	800c132 <_svfiprintf_r+0x32>
 800c114:	690b      	ldr	r3, [r1, #16]
 800c116:	b963      	cbnz	r3, 800c132 <_svfiprintf_r+0x32>
 800c118:	2140      	movs	r1, #64	; 0x40
 800c11a:	f7fe fbc7 	bl	800a8ac <_malloc_r>
 800c11e:	6028      	str	r0, [r5, #0]
 800c120:	6128      	str	r0, [r5, #16]
 800c122:	b920      	cbnz	r0, 800c12e <_svfiprintf_r+0x2e>
 800c124:	230c      	movs	r3, #12
 800c126:	603b      	str	r3, [r7, #0]
 800c128:	f04f 30ff 	mov.w	r0, #4294967295
 800c12c:	e0d0      	b.n	800c2d0 <_svfiprintf_r+0x1d0>
 800c12e:	2340      	movs	r3, #64	; 0x40
 800c130:	616b      	str	r3, [r5, #20]
 800c132:	2300      	movs	r3, #0
 800c134:	9309      	str	r3, [sp, #36]	; 0x24
 800c136:	2320      	movs	r3, #32
 800c138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c13c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c140:	2330      	movs	r3, #48	; 0x30
 800c142:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2e8 <_svfiprintf_r+0x1e8>
 800c146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c14a:	f04f 0901 	mov.w	r9, #1
 800c14e:	4623      	mov	r3, r4
 800c150:	469a      	mov	sl, r3
 800c152:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c156:	b10a      	cbz	r2, 800c15c <_svfiprintf_r+0x5c>
 800c158:	2a25      	cmp	r2, #37	; 0x25
 800c15a:	d1f9      	bne.n	800c150 <_svfiprintf_r+0x50>
 800c15c:	ebba 0b04 	subs.w	fp, sl, r4
 800c160:	d00b      	beq.n	800c17a <_svfiprintf_r+0x7a>
 800c162:	465b      	mov	r3, fp
 800c164:	4622      	mov	r2, r4
 800c166:	4629      	mov	r1, r5
 800c168:	4638      	mov	r0, r7
 800c16a:	f7ff ff6f 	bl	800c04c <__ssputs_r>
 800c16e:	3001      	adds	r0, #1
 800c170:	f000 80a9 	beq.w	800c2c6 <_svfiprintf_r+0x1c6>
 800c174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c176:	445a      	add	r2, fp
 800c178:	9209      	str	r2, [sp, #36]	; 0x24
 800c17a:	f89a 3000 	ldrb.w	r3, [sl]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 80a1 	beq.w	800c2c6 <_svfiprintf_r+0x1c6>
 800c184:	2300      	movs	r3, #0
 800c186:	f04f 32ff 	mov.w	r2, #4294967295
 800c18a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c18e:	f10a 0a01 	add.w	sl, sl, #1
 800c192:	9304      	str	r3, [sp, #16]
 800c194:	9307      	str	r3, [sp, #28]
 800c196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c19a:	931a      	str	r3, [sp, #104]	; 0x68
 800c19c:	4654      	mov	r4, sl
 800c19e:	2205      	movs	r2, #5
 800c1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1a4:	4850      	ldr	r0, [pc, #320]	; (800c2e8 <_svfiprintf_r+0x1e8>)
 800c1a6:	f7f4 f813 	bl	80001d0 <memchr>
 800c1aa:	9a04      	ldr	r2, [sp, #16]
 800c1ac:	b9d8      	cbnz	r0, 800c1e6 <_svfiprintf_r+0xe6>
 800c1ae:	06d0      	lsls	r0, r2, #27
 800c1b0:	bf44      	itt	mi
 800c1b2:	2320      	movmi	r3, #32
 800c1b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1b8:	0711      	lsls	r1, r2, #28
 800c1ba:	bf44      	itt	mi
 800c1bc:	232b      	movmi	r3, #43	; 0x2b
 800c1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c1c8:	d015      	beq.n	800c1f6 <_svfiprintf_r+0xf6>
 800c1ca:	9a07      	ldr	r2, [sp, #28]
 800c1cc:	4654      	mov	r4, sl
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	f04f 0c0a 	mov.w	ip, #10
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1da:	3b30      	subs	r3, #48	; 0x30
 800c1dc:	2b09      	cmp	r3, #9
 800c1de:	d94d      	bls.n	800c27c <_svfiprintf_r+0x17c>
 800c1e0:	b1b0      	cbz	r0, 800c210 <_svfiprintf_r+0x110>
 800c1e2:	9207      	str	r2, [sp, #28]
 800c1e4:	e014      	b.n	800c210 <_svfiprintf_r+0x110>
 800c1e6:	eba0 0308 	sub.w	r3, r0, r8
 800c1ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	46a2      	mov	sl, r4
 800c1f4:	e7d2      	b.n	800c19c <_svfiprintf_r+0x9c>
 800c1f6:	9b03      	ldr	r3, [sp, #12]
 800c1f8:	1d19      	adds	r1, r3, #4
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	9103      	str	r1, [sp, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	bfbb      	ittet	lt
 800c202:	425b      	neglt	r3, r3
 800c204:	f042 0202 	orrlt.w	r2, r2, #2
 800c208:	9307      	strge	r3, [sp, #28]
 800c20a:	9307      	strlt	r3, [sp, #28]
 800c20c:	bfb8      	it	lt
 800c20e:	9204      	strlt	r2, [sp, #16]
 800c210:	7823      	ldrb	r3, [r4, #0]
 800c212:	2b2e      	cmp	r3, #46	; 0x2e
 800c214:	d10c      	bne.n	800c230 <_svfiprintf_r+0x130>
 800c216:	7863      	ldrb	r3, [r4, #1]
 800c218:	2b2a      	cmp	r3, #42	; 0x2a
 800c21a:	d134      	bne.n	800c286 <_svfiprintf_r+0x186>
 800c21c:	9b03      	ldr	r3, [sp, #12]
 800c21e:	1d1a      	adds	r2, r3, #4
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	9203      	str	r2, [sp, #12]
 800c224:	2b00      	cmp	r3, #0
 800c226:	bfb8      	it	lt
 800c228:	f04f 33ff 	movlt.w	r3, #4294967295
 800c22c:	3402      	adds	r4, #2
 800c22e:	9305      	str	r3, [sp, #20]
 800c230:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c2f8 <_svfiprintf_r+0x1f8>
 800c234:	7821      	ldrb	r1, [r4, #0]
 800c236:	2203      	movs	r2, #3
 800c238:	4650      	mov	r0, sl
 800c23a:	f7f3 ffc9 	bl	80001d0 <memchr>
 800c23e:	b138      	cbz	r0, 800c250 <_svfiprintf_r+0x150>
 800c240:	9b04      	ldr	r3, [sp, #16]
 800c242:	eba0 000a 	sub.w	r0, r0, sl
 800c246:	2240      	movs	r2, #64	; 0x40
 800c248:	4082      	lsls	r2, r0
 800c24a:	4313      	orrs	r3, r2
 800c24c:	3401      	adds	r4, #1
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c254:	4825      	ldr	r0, [pc, #148]	; (800c2ec <_svfiprintf_r+0x1ec>)
 800c256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c25a:	2206      	movs	r2, #6
 800c25c:	f7f3 ffb8 	bl	80001d0 <memchr>
 800c260:	2800      	cmp	r0, #0
 800c262:	d038      	beq.n	800c2d6 <_svfiprintf_r+0x1d6>
 800c264:	4b22      	ldr	r3, [pc, #136]	; (800c2f0 <_svfiprintf_r+0x1f0>)
 800c266:	bb1b      	cbnz	r3, 800c2b0 <_svfiprintf_r+0x1b0>
 800c268:	9b03      	ldr	r3, [sp, #12]
 800c26a:	3307      	adds	r3, #7
 800c26c:	f023 0307 	bic.w	r3, r3, #7
 800c270:	3308      	adds	r3, #8
 800c272:	9303      	str	r3, [sp, #12]
 800c274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c276:	4433      	add	r3, r6
 800c278:	9309      	str	r3, [sp, #36]	; 0x24
 800c27a:	e768      	b.n	800c14e <_svfiprintf_r+0x4e>
 800c27c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c280:	460c      	mov	r4, r1
 800c282:	2001      	movs	r0, #1
 800c284:	e7a6      	b.n	800c1d4 <_svfiprintf_r+0xd4>
 800c286:	2300      	movs	r3, #0
 800c288:	3401      	adds	r4, #1
 800c28a:	9305      	str	r3, [sp, #20]
 800c28c:	4619      	mov	r1, r3
 800c28e:	f04f 0c0a 	mov.w	ip, #10
 800c292:	4620      	mov	r0, r4
 800c294:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c298:	3a30      	subs	r2, #48	; 0x30
 800c29a:	2a09      	cmp	r2, #9
 800c29c:	d903      	bls.n	800c2a6 <_svfiprintf_r+0x1a6>
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d0c6      	beq.n	800c230 <_svfiprintf_r+0x130>
 800c2a2:	9105      	str	r1, [sp, #20]
 800c2a4:	e7c4      	b.n	800c230 <_svfiprintf_r+0x130>
 800c2a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e7f0      	b.n	800c292 <_svfiprintf_r+0x192>
 800c2b0:	ab03      	add	r3, sp, #12
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	462a      	mov	r2, r5
 800c2b6:	4b0f      	ldr	r3, [pc, #60]	; (800c2f4 <_svfiprintf_r+0x1f4>)
 800c2b8:	a904      	add	r1, sp, #16
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7fc fc86 	bl	8008bcc <_printf_float>
 800c2c0:	1c42      	adds	r2, r0, #1
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	d1d6      	bne.n	800c274 <_svfiprintf_r+0x174>
 800c2c6:	89ab      	ldrh	r3, [r5, #12]
 800c2c8:	065b      	lsls	r3, r3, #25
 800c2ca:	f53f af2d 	bmi.w	800c128 <_svfiprintf_r+0x28>
 800c2ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2d0:	b01d      	add	sp, #116	; 0x74
 800c2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d6:	ab03      	add	r3, sp, #12
 800c2d8:	9300      	str	r3, [sp, #0]
 800c2da:	462a      	mov	r2, r5
 800c2dc:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <_svfiprintf_r+0x1f4>)
 800c2de:	a904      	add	r1, sp, #16
 800c2e0:	4638      	mov	r0, r7
 800c2e2:	f7fc ff17 	bl	8009114 <_printf_i>
 800c2e6:	e7eb      	b.n	800c2c0 <_svfiprintf_r+0x1c0>
 800c2e8:	0800e891 	.word	0x0800e891
 800c2ec:	0800e89b 	.word	0x0800e89b
 800c2f0:	08008bcd 	.word	0x08008bcd
 800c2f4:	0800c04d 	.word	0x0800c04d
 800c2f8:	0800e897 	.word	0x0800e897

0800c2fc <__sflush_r>:
 800c2fc:	898a      	ldrh	r2, [r1, #12]
 800c2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c302:	4605      	mov	r5, r0
 800c304:	0710      	lsls	r0, r2, #28
 800c306:	460c      	mov	r4, r1
 800c308:	d458      	bmi.n	800c3bc <__sflush_r+0xc0>
 800c30a:	684b      	ldr	r3, [r1, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	dc05      	bgt.n	800c31c <__sflush_r+0x20>
 800c310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c312:	2b00      	cmp	r3, #0
 800c314:	dc02      	bgt.n	800c31c <__sflush_r+0x20>
 800c316:	2000      	movs	r0, #0
 800c318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c31c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c31e:	2e00      	cmp	r6, #0
 800c320:	d0f9      	beq.n	800c316 <__sflush_r+0x1a>
 800c322:	2300      	movs	r3, #0
 800c324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c328:	682f      	ldr	r7, [r5, #0]
 800c32a:	6a21      	ldr	r1, [r4, #32]
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	d032      	beq.n	800c396 <__sflush_r+0x9a>
 800c330:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	075a      	lsls	r2, r3, #29
 800c336:	d505      	bpl.n	800c344 <__sflush_r+0x48>
 800c338:	6863      	ldr	r3, [r4, #4]
 800c33a:	1ac0      	subs	r0, r0, r3
 800c33c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c33e:	b10b      	cbz	r3, 800c344 <__sflush_r+0x48>
 800c340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c342:	1ac0      	subs	r0, r0, r3
 800c344:	2300      	movs	r3, #0
 800c346:	4602      	mov	r2, r0
 800c348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c34a:	6a21      	ldr	r1, [r4, #32]
 800c34c:	4628      	mov	r0, r5
 800c34e:	47b0      	blx	r6
 800c350:	1c43      	adds	r3, r0, #1
 800c352:	89a3      	ldrh	r3, [r4, #12]
 800c354:	d106      	bne.n	800c364 <__sflush_r+0x68>
 800c356:	6829      	ldr	r1, [r5, #0]
 800c358:	291d      	cmp	r1, #29
 800c35a:	d82b      	bhi.n	800c3b4 <__sflush_r+0xb8>
 800c35c:	4a29      	ldr	r2, [pc, #164]	; (800c404 <__sflush_r+0x108>)
 800c35e:	410a      	asrs	r2, r1
 800c360:	07d6      	lsls	r6, r2, #31
 800c362:	d427      	bmi.n	800c3b4 <__sflush_r+0xb8>
 800c364:	2200      	movs	r2, #0
 800c366:	6062      	str	r2, [r4, #4]
 800c368:	04d9      	lsls	r1, r3, #19
 800c36a:	6922      	ldr	r2, [r4, #16]
 800c36c:	6022      	str	r2, [r4, #0]
 800c36e:	d504      	bpl.n	800c37a <__sflush_r+0x7e>
 800c370:	1c42      	adds	r2, r0, #1
 800c372:	d101      	bne.n	800c378 <__sflush_r+0x7c>
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	b903      	cbnz	r3, 800c37a <__sflush_r+0x7e>
 800c378:	6560      	str	r0, [r4, #84]	; 0x54
 800c37a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c37c:	602f      	str	r7, [r5, #0]
 800c37e:	2900      	cmp	r1, #0
 800c380:	d0c9      	beq.n	800c316 <__sflush_r+0x1a>
 800c382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c386:	4299      	cmp	r1, r3
 800c388:	d002      	beq.n	800c390 <__sflush_r+0x94>
 800c38a:	4628      	mov	r0, r5
 800c38c:	f7fe fa1a 	bl	800a7c4 <_free_r>
 800c390:	2000      	movs	r0, #0
 800c392:	6360      	str	r0, [r4, #52]	; 0x34
 800c394:	e7c0      	b.n	800c318 <__sflush_r+0x1c>
 800c396:	2301      	movs	r3, #1
 800c398:	4628      	mov	r0, r5
 800c39a:	47b0      	blx	r6
 800c39c:	1c41      	adds	r1, r0, #1
 800c39e:	d1c8      	bne.n	800c332 <__sflush_r+0x36>
 800c3a0:	682b      	ldr	r3, [r5, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0c5      	beq.n	800c332 <__sflush_r+0x36>
 800c3a6:	2b1d      	cmp	r3, #29
 800c3a8:	d001      	beq.n	800c3ae <__sflush_r+0xb2>
 800c3aa:	2b16      	cmp	r3, #22
 800c3ac:	d101      	bne.n	800c3b2 <__sflush_r+0xb6>
 800c3ae:	602f      	str	r7, [r5, #0]
 800c3b0:	e7b1      	b.n	800c316 <__sflush_r+0x1a>
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b8:	81a3      	strh	r3, [r4, #12]
 800c3ba:	e7ad      	b.n	800c318 <__sflush_r+0x1c>
 800c3bc:	690f      	ldr	r7, [r1, #16]
 800c3be:	2f00      	cmp	r7, #0
 800c3c0:	d0a9      	beq.n	800c316 <__sflush_r+0x1a>
 800c3c2:	0793      	lsls	r3, r2, #30
 800c3c4:	680e      	ldr	r6, [r1, #0]
 800c3c6:	bf08      	it	eq
 800c3c8:	694b      	ldreq	r3, [r1, #20]
 800c3ca:	600f      	str	r7, [r1, #0]
 800c3cc:	bf18      	it	ne
 800c3ce:	2300      	movne	r3, #0
 800c3d0:	eba6 0807 	sub.w	r8, r6, r7
 800c3d4:	608b      	str	r3, [r1, #8]
 800c3d6:	f1b8 0f00 	cmp.w	r8, #0
 800c3da:	dd9c      	ble.n	800c316 <__sflush_r+0x1a>
 800c3dc:	6a21      	ldr	r1, [r4, #32]
 800c3de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3e0:	4643      	mov	r3, r8
 800c3e2:	463a      	mov	r2, r7
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	47b0      	blx	r6
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	dc06      	bgt.n	800c3fa <__sflush_r+0xfe>
 800c3ec:	89a3      	ldrh	r3, [r4, #12]
 800c3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3f2:	81a3      	strh	r3, [r4, #12]
 800c3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f8:	e78e      	b.n	800c318 <__sflush_r+0x1c>
 800c3fa:	4407      	add	r7, r0
 800c3fc:	eba8 0800 	sub.w	r8, r8, r0
 800c400:	e7e9      	b.n	800c3d6 <__sflush_r+0xda>
 800c402:	bf00      	nop
 800c404:	dfbffffe 	.word	0xdfbffffe

0800c408 <_fflush_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	690b      	ldr	r3, [r1, #16]
 800c40c:	4605      	mov	r5, r0
 800c40e:	460c      	mov	r4, r1
 800c410:	b913      	cbnz	r3, 800c418 <_fflush_r+0x10>
 800c412:	2500      	movs	r5, #0
 800c414:	4628      	mov	r0, r5
 800c416:	bd38      	pop	{r3, r4, r5, pc}
 800c418:	b118      	cbz	r0, 800c422 <_fflush_r+0x1a>
 800c41a:	6a03      	ldr	r3, [r0, #32]
 800c41c:	b90b      	cbnz	r3, 800c422 <_fflush_r+0x1a>
 800c41e:	f7fd fa37 	bl	8009890 <__sinit>
 800c422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d0f3      	beq.n	800c412 <_fflush_r+0xa>
 800c42a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c42c:	07d0      	lsls	r0, r2, #31
 800c42e:	d404      	bmi.n	800c43a <_fflush_r+0x32>
 800c430:	0599      	lsls	r1, r3, #22
 800c432:	d402      	bmi.n	800c43a <_fflush_r+0x32>
 800c434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c436:	f7fd fb42 	bl	8009abe <__retarget_lock_acquire_recursive>
 800c43a:	4628      	mov	r0, r5
 800c43c:	4621      	mov	r1, r4
 800c43e:	f7ff ff5d 	bl	800c2fc <__sflush_r>
 800c442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c444:	07da      	lsls	r2, r3, #31
 800c446:	4605      	mov	r5, r0
 800c448:	d4e4      	bmi.n	800c414 <_fflush_r+0xc>
 800c44a:	89a3      	ldrh	r3, [r4, #12]
 800c44c:	059b      	lsls	r3, r3, #22
 800c44e:	d4e1      	bmi.n	800c414 <_fflush_r+0xc>
 800c450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c452:	f7fd fb35 	bl	8009ac0 <__retarget_lock_release_recursive>
 800c456:	e7dd      	b.n	800c414 <_fflush_r+0xc>

0800c458 <memmove>:
 800c458:	4288      	cmp	r0, r1
 800c45a:	b510      	push	{r4, lr}
 800c45c:	eb01 0402 	add.w	r4, r1, r2
 800c460:	d902      	bls.n	800c468 <memmove+0x10>
 800c462:	4284      	cmp	r4, r0
 800c464:	4623      	mov	r3, r4
 800c466:	d807      	bhi.n	800c478 <memmove+0x20>
 800c468:	1e43      	subs	r3, r0, #1
 800c46a:	42a1      	cmp	r1, r4
 800c46c:	d008      	beq.n	800c480 <memmove+0x28>
 800c46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c472:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c476:	e7f8      	b.n	800c46a <memmove+0x12>
 800c478:	4402      	add	r2, r0
 800c47a:	4601      	mov	r1, r0
 800c47c:	428a      	cmp	r2, r1
 800c47e:	d100      	bne.n	800c482 <memmove+0x2a>
 800c480:	bd10      	pop	{r4, pc}
 800c482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c48a:	e7f7      	b.n	800c47c <memmove+0x24>

0800c48c <strncmp>:
 800c48c:	b510      	push	{r4, lr}
 800c48e:	b16a      	cbz	r2, 800c4ac <strncmp+0x20>
 800c490:	3901      	subs	r1, #1
 800c492:	1884      	adds	r4, r0, r2
 800c494:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c498:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d103      	bne.n	800c4a8 <strncmp+0x1c>
 800c4a0:	42a0      	cmp	r0, r4
 800c4a2:	d001      	beq.n	800c4a8 <strncmp+0x1c>
 800c4a4:	2a00      	cmp	r2, #0
 800c4a6:	d1f5      	bne.n	800c494 <strncmp+0x8>
 800c4a8:	1ad0      	subs	r0, r2, r3
 800c4aa:	bd10      	pop	{r4, pc}
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	e7fc      	b.n	800c4aa <strncmp+0x1e>

0800c4b0 <_sbrk_r>:
 800c4b0:	b538      	push	{r3, r4, r5, lr}
 800c4b2:	4d06      	ldr	r5, [pc, #24]	; (800c4cc <_sbrk_r+0x1c>)
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4604      	mov	r4, r0
 800c4b8:	4608      	mov	r0, r1
 800c4ba:	602b      	str	r3, [r5, #0]
 800c4bc:	f7f6 fc16 	bl	8002cec <_sbrk>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d102      	bne.n	800c4ca <_sbrk_r+0x1a>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b103      	cbz	r3, 800c4ca <_sbrk_r+0x1a>
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	bd38      	pop	{r3, r4, r5, pc}
 800c4cc:	200006d8 	.word	0x200006d8

0800c4d0 <memcpy>:
 800c4d0:	440a      	add	r2, r1
 800c4d2:	4291      	cmp	r1, r2
 800c4d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4d8:	d100      	bne.n	800c4dc <memcpy+0xc>
 800c4da:	4770      	bx	lr
 800c4dc:	b510      	push	{r4, lr}
 800c4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4e6:	4291      	cmp	r1, r2
 800c4e8:	d1f9      	bne.n	800c4de <memcpy+0xe>
 800c4ea:	bd10      	pop	{r4, pc}
 800c4ec:	0000      	movs	r0, r0
	...

0800c4f0 <nan>:
 800c4f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c4f8 <nan+0x8>
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	00000000 	.word	0x00000000
 800c4fc:	7ff80000 	.word	0x7ff80000

0800c500 <__assert_func>:
 800c500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c502:	4614      	mov	r4, r2
 800c504:	461a      	mov	r2, r3
 800c506:	4b09      	ldr	r3, [pc, #36]	; (800c52c <__assert_func+0x2c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4605      	mov	r5, r0
 800c50c:	68d8      	ldr	r0, [r3, #12]
 800c50e:	b14c      	cbz	r4, 800c524 <__assert_func+0x24>
 800c510:	4b07      	ldr	r3, [pc, #28]	; (800c530 <__assert_func+0x30>)
 800c512:	9100      	str	r1, [sp, #0]
 800c514:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c518:	4906      	ldr	r1, [pc, #24]	; (800c534 <__assert_func+0x34>)
 800c51a:	462b      	mov	r3, r5
 800c51c:	f000 fbca 	bl	800ccb4 <fiprintf>
 800c520:	f000 fbda 	bl	800ccd8 <abort>
 800c524:	4b04      	ldr	r3, [pc, #16]	; (800c538 <__assert_func+0x38>)
 800c526:	461c      	mov	r4, r3
 800c528:	e7f3      	b.n	800c512 <__assert_func+0x12>
 800c52a:	bf00      	nop
 800c52c:	20000064 	.word	0x20000064
 800c530:	0800e8aa 	.word	0x0800e8aa
 800c534:	0800e8b7 	.word	0x0800e8b7
 800c538:	0800e8e5 	.word	0x0800e8e5

0800c53c <_calloc_r>:
 800c53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c53e:	fba1 2402 	umull	r2, r4, r1, r2
 800c542:	b94c      	cbnz	r4, 800c558 <_calloc_r+0x1c>
 800c544:	4611      	mov	r1, r2
 800c546:	9201      	str	r2, [sp, #4]
 800c548:	f7fe f9b0 	bl	800a8ac <_malloc_r>
 800c54c:	9a01      	ldr	r2, [sp, #4]
 800c54e:	4605      	mov	r5, r0
 800c550:	b930      	cbnz	r0, 800c560 <_calloc_r+0x24>
 800c552:	4628      	mov	r0, r5
 800c554:	b003      	add	sp, #12
 800c556:	bd30      	pop	{r4, r5, pc}
 800c558:	220c      	movs	r2, #12
 800c55a:	6002      	str	r2, [r0, #0]
 800c55c:	2500      	movs	r5, #0
 800c55e:	e7f8      	b.n	800c552 <_calloc_r+0x16>
 800c560:	4621      	mov	r1, r4
 800c562:	f7fd fa2e 	bl	80099c2 <memset>
 800c566:	e7f4      	b.n	800c552 <_calloc_r+0x16>

0800c568 <rshift>:
 800c568:	6903      	ldr	r3, [r0, #16]
 800c56a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c56e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c572:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c576:	f100 0414 	add.w	r4, r0, #20
 800c57a:	dd45      	ble.n	800c608 <rshift+0xa0>
 800c57c:	f011 011f 	ands.w	r1, r1, #31
 800c580:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c584:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c588:	d10c      	bne.n	800c5a4 <rshift+0x3c>
 800c58a:	f100 0710 	add.w	r7, r0, #16
 800c58e:	4629      	mov	r1, r5
 800c590:	42b1      	cmp	r1, r6
 800c592:	d334      	bcc.n	800c5fe <rshift+0x96>
 800c594:	1a9b      	subs	r3, r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	1eea      	subs	r2, r5, #3
 800c59a:	4296      	cmp	r6, r2
 800c59c:	bf38      	it	cc
 800c59e:	2300      	movcc	r3, #0
 800c5a0:	4423      	add	r3, r4
 800c5a2:	e015      	b.n	800c5d0 <rshift+0x68>
 800c5a4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c5a8:	f1c1 0820 	rsb	r8, r1, #32
 800c5ac:	40cf      	lsrs	r7, r1
 800c5ae:	f105 0e04 	add.w	lr, r5, #4
 800c5b2:	46a1      	mov	r9, r4
 800c5b4:	4576      	cmp	r6, lr
 800c5b6:	46f4      	mov	ip, lr
 800c5b8:	d815      	bhi.n	800c5e6 <rshift+0x7e>
 800c5ba:	1a9a      	subs	r2, r3, r2
 800c5bc:	0092      	lsls	r2, r2, #2
 800c5be:	3a04      	subs	r2, #4
 800c5c0:	3501      	adds	r5, #1
 800c5c2:	42ae      	cmp	r6, r5
 800c5c4:	bf38      	it	cc
 800c5c6:	2200      	movcc	r2, #0
 800c5c8:	18a3      	adds	r3, r4, r2
 800c5ca:	50a7      	str	r7, [r4, r2]
 800c5cc:	b107      	cbz	r7, 800c5d0 <rshift+0x68>
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	1b1a      	subs	r2, r3, r4
 800c5d2:	42a3      	cmp	r3, r4
 800c5d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5d8:	bf08      	it	eq
 800c5da:	2300      	moveq	r3, #0
 800c5dc:	6102      	str	r2, [r0, #16]
 800c5de:	bf08      	it	eq
 800c5e0:	6143      	streq	r3, [r0, #20]
 800c5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e6:	f8dc c000 	ldr.w	ip, [ip]
 800c5ea:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5ee:	ea4c 0707 	orr.w	r7, ip, r7
 800c5f2:	f849 7b04 	str.w	r7, [r9], #4
 800c5f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5fa:	40cf      	lsrs	r7, r1
 800c5fc:	e7da      	b.n	800c5b4 <rshift+0x4c>
 800c5fe:	f851 cb04 	ldr.w	ip, [r1], #4
 800c602:	f847 cf04 	str.w	ip, [r7, #4]!
 800c606:	e7c3      	b.n	800c590 <rshift+0x28>
 800c608:	4623      	mov	r3, r4
 800c60a:	e7e1      	b.n	800c5d0 <rshift+0x68>

0800c60c <__hexdig_fun>:
 800c60c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c610:	2b09      	cmp	r3, #9
 800c612:	d802      	bhi.n	800c61a <__hexdig_fun+0xe>
 800c614:	3820      	subs	r0, #32
 800c616:	b2c0      	uxtb	r0, r0
 800c618:	4770      	bx	lr
 800c61a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c61e:	2b05      	cmp	r3, #5
 800c620:	d801      	bhi.n	800c626 <__hexdig_fun+0x1a>
 800c622:	3847      	subs	r0, #71	; 0x47
 800c624:	e7f7      	b.n	800c616 <__hexdig_fun+0xa>
 800c626:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c62a:	2b05      	cmp	r3, #5
 800c62c:	d801      	bhi.n	800c632 <__hexdig_fun+0x26>
 800c62e:	3827      	subs	r0, #39	; 0x27
 800c630:	e7f1      	b.n	800c616 <__hexdig_fun+0xa>
 800c632:	2000      	movs	r0, #0
 800c634:	4770      	bx	lr
	...

0800c638 <__gethex>:
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	4617      	mov	r7, r2
 800c63e:	680a      	ldr	r2, [r1, #0]
 800c640:	b085      	sub	sp, #20
 800c642:	f102 0b02 	add.w	fp, r2, #2
 800c646:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c64a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c64e:	4681      	mov	r9, r0
 800c650:	468a      	mov	sl, r1
 800c652:	9302      	str	r3, [sp, #8]
 800c654:	32fe      	adds	r2, #254	; 0xfe
 800c656:	eb02 030b 	add.w	r3, r2, fp
 800c65a:	46d8      	mov	r8, fp
 800c65c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c660:	9301      	str	r3, [sp, #4]
 800c662:	2830      	cmp	r0, #48	; 0x30
 800c664:	d0f7      	beq.n	800c656 <__gethex+0x1e>
 800c666:	f7ff ffd1 	bl	800c60c <__hexdig_fun>
 800c66a:	4604      	mov	r4, r0
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d138      	bne.n	800c6e2 <__gethex+0xaa>
 800c670:	49a7      	ldr	r1, [pc, #668]	; (800c910 <__gethex+0x2d8>)
 800c672:	2201      	movs	r2, #1
 800c674:	4640      	mov	r0, r8
 800c676:	f7ff ff09 	bl	800c48c <strncmp>
 800c67a:	4606      	mov	r6, r0
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d169      	bne.n	800c754 <__gethex+0x11c>
 800c680:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c684:	465d      	mov	r5, fp
 800c686:	f7ff ffc1 	bl	800c60c <__hexdig_fun>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d064      	beq.n	800c758 <__gethex+0x120>
 800c68e:	465a      	mov	r2, fp
 800c690:	7810      	ldrb	r0, [r2, #0]
 800c692:	2830      	cmp	r0, #48	; 0x30
 800c694:	4690      	mov	r8, r2
 800c696:	f102 0201 	add.w	r2, r2, #1
 800c69a:	d0f9      	beq.n	800c690 <__gethex+0x58>
 800c69c:	f7ff ffb6 	bl	800c60c <__hexdig_fun>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	fab0 f480 	clz	r4, r0
 800c6a6:	0964      	lsrs	r4, r4, #5
 800c6a8:	465e      	mov	r6, fp
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	4642      	mov	r2, r8
 800c6ae:	4615      	mov	r5, r2
 800c6b0:	3201      	adds	r2, #1
 800c6b2:	7828      	ldrb	r0, [r5, #0]
 800c6b4:	f7ff ffaa 	bl	800c60c <__hexdig_fun>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d1f8      	bne.n	800c6ae <__gethex+0x76>
 800c6bc:	4994      	ldr	r1, [pc, #592]	; (800c910 <__gethex+0x2d8>)
 800c6be:	2201      	movs	r2, #1
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	f7ff fee3 	bl	800c48c <strncmp>
 800c6c6:	b978      	cbnz	r0, 800c6e8 <__gethex+0xb0>
 800c6c8:	b946      	cbnz	r6, 800c6dc <__gethex+0xa4>
 800c6ca:	1c6e      	adds	r6, r5, #1
 800c6cc:	4632      	mov	r2, r6
 800c6ce:	4615      	mov	r5, r2
 800c6d0:	3201      	adds	r2, #1
 800c6d2:	7828      	ldrb	r0, [r5, #0]
 800c6d4:	f7ff ff9a 	bl	800c60c <__hexdig_fun>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d1f8      	bne.n	800c6ce <__gethex+0x96>
 800c6dc:	1b73      	subs	r3, r6, r5
 800c6de:	009e      	lsls	r6, r3, #2
 800c6e0:	e004      	b.n	800c6ec <__gethex+0xb4>
 800c6e2:	2400      	movs	r4, #0
 800c6e4:	4626      	mov	r6, r4
 800c6e6:	e7e1      	b.n	800c6ac <__gethex+0x74>
 800c6e8:	2e00      	cmp	r6, #0
 800c6ea:	d1f7      	bne.n	800c6dc <__gethex+0xa4>
 800c6ec:	782b      	ldrb	r3, [r5, #0]
 800c6ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c6f2:	2b50      	cmp	r3, #80	; 0x50
 800c6f4:	d13d      	bne.n	800c772 <__gethex+0x13a>
 800c6f6:	786b      	ldrb	r3, [r5, #1]
 800c6f8:	2b2b      	cmp	r3, #43	; 0x2b
 800c6fa:	d02f      	beq.n	800c75c <__gethex+0x124>
 800c6fc:	2b2d      	cmp	r3, #45	; 0x2d
 800c6fe:	d031      	beq.n	800c764 <__gethex+0x12c>
 800c700:	1c69      	adds	r1, r5, #1
 800c702:	f04f 0b00 	mov.w	fp, #0
 800c706:	7808      	ldrb	r0, [r1, #0]
 800c708:	f7ff ff80 	bl	800c60c <__hexdig_fun>
 800c70c:	1e42      	subs	r2, r0, #1
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	2a18      	cmp	r2, #24
 800c712:	d82e      	bhi.n	800c772 <__gethex+0x13a>
 800c714:	f1a0 0210 	sub.w	r2, r0, #16
 800c718:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c71c:	f7ff ff76 	bl	800c60c <__hexdig_fun>
 800c720:	f100 3cff 	add.w	ip, r0, #4294967295
 800c724:	fa5f fc8c 	uxtb.w	ip, ip
 800c728:	f1bc 0f18 	cmp.w	ip, #24
 800c72c:	d91d      	bls.n	800c76a <__gethex+0x132>
 800c72e:	f1bb 0f00 	cmp.w	fp, #0
 800c732:	d000      	beq.n	800c736 <__gethex+0xfe>
 800c734:	4252      	negs	r2, r2
 800c736:	4416      	add	r6, r2
 800c738:	f8ca 1000 	str.w	r1, [sl]
 800c73c:	b1dc      	cbz	r4, 800c776 <__gethex+0x13e>
 800c73e:	9b01      	ldr	r3, [sp, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	bf14      	ite	ne
 800c744:	f04f 0800 	movne.w	r8, #0
 800c748:	f04f 0806 	moveq.w	r8, #6
 800c74c:	4640      	mov	r0, r8
 800c74e:	b005      	add	sp, #20
 800c750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c754:	4645      	mov	r5, r8
 800c756:	4626      	mov	r6, r4
 800c758:	2401      	movs	r4, #1
 800c75a:	e7c7      	b.n	800c6ec <__gethex+0xb4>
 800c75c:	f04f 0b00 	mov.w	fp, #0
 800c760:	1ca9      	adds	r1, r5, #2
 800c762:	e7d0      	b.n	800c706 <__gethex+0xce>
 800c764:	f04f 0b01 	mov.w	fp, #1
 800c768:	e7fa      	b.n	800c760 <__gethex+0x128>
 800c76a:	230a      	movs	r3, #10
 800c76c:	fb03 0002 	mla	r0, r3, r2, r0
 800c770:	e7d0      	b.n	800c714 <__gethex+0xdc>
 800c772:	4629      	mov	r1, r5
 800c774:	e7e0      	b.n	800c738 <__gethex+0x100>
 800c776:	eba5 0308 	sub.w	r3, r5, r8
 800c77a:	3b01      	subs	r3, #1
 800c77c:	4621      	mov	r1, r4
 800c77e:	2b07      	cmp	r3, #7
 800c780:	dc0a      	bgt.n	800c798 <__gethex+0x160>
 800c782:	4648      	mov	r0, r9
 800c784:	f7fe f91e 	bl	800a9c4 <_Balloc>
 800c788:	4604      	mov	r4, r0
 800c78a:	b940      	cbnz	r0, 800c79e <__gethex+0x166>
 800c78c:	4b61      	ldr	r3, [pc, #388]	; (800c914 <__gethex+0x2dc>)
 800c78e:	4602      	mov	r2, r0
 800c790:	21e4      	movs	r1, #228	; 0xe4
 800c792:	4861      	ldr	r0, [pc, #388]	; (800c918 <__gethex+0x2e0>)
 800c794:	f7ff feb4 	bl	800c500 <__assert_func>
 800c798:	3101      	adds	r1, #1
 800c79a:	105b      	asrs	r3, r3, #1
 800c79c:	e7ef      	b.n	800c77e <__gethex+0x146>
 800c79e:	f100 0a14 	add.w	sl, r0, #20
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	495a      	ldr	r1, [pc, #360]	; (800c910 <__gethex+0x2d8>)
 800c7a6:	f8cd a004 	str.w	sl, [sp, #4]
 800c7aa:	469b      	mov	fp, r3
 800c7ac:	45a8      	cmp	r8, r5
 800c7ae:	d342      	bcc.n	800c836 <__gethex+0x1fe>
 800c7b0:	9801      	ldr	r0, [sp, #4]
 800c7b2:	f840 bb04 	str.w	fp, [r0], #4
 800c7b6:	eba0 000a 	sub.w	r0, r0, sl
 800c7ba:	1080      	asrs	r0, r0, #2
 800c7bc:	6120      	str	r0, [r4, #16]
 800c7be:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c7c2:	4658      	mov	r0, fp
 800c7c4:	f7fe f9f0 	bl	800aba8 <__hi0bits>
 800c7c8:	683d      	ldr	r5, [r7, #0]
 800c7ca:	eba8 0000 	sub.w	r0, r8, r0
 800c7ce:	42a8      	cmp	r0, r5
 800c7d0:	dd59      	ble.n	800c886 <__gethex+0x24e>
 800c7d2:	eba0 0805 	sub.w	r8, r0, r5
 800c7d6:	4641      	mov	r1, r8
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f7fe fd7f 	bl	800b2dc <__any_on>
 800c7de:	4683      	mov	fp, r0
 800c7e0:	b1b8      	cbz	r0, 800c812 <__gethex+0x1da>
 800c7e2:	f108 33ff 	add.w	r3, r8, #4294967295
 800c7e6:	1159      	asrs	r1, r3, #5
 800c7e8:	f003 021f 	and.w	r2, r3, #31
 800c7ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c7f0:	f04f 0b01 	mov.w	fp, #1
 800c7f4:	fa0b f202 	lsl.w	r2, fp, r2
 800c7f8:	420a      	tst	r2, r1
 800c7fa:	d00a      	beq.n	800c812 <__gethex+0x1da>
 800c7fc:	455b      	cmp	r3, fp
 800c7fe:	dd06      	ble.n	800c80e <__gethex+0x1d6>
 800c800:	f1a8 0102 	sub.w	r1, r8, #2
 800c804:	4620      	mov	r0, r4
 800c806:	f7fe fd69 	bl	800b2dc <__any_on>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d138      	bne.n	800c880 <__gethex+0x248>
 800c80e:	f04f 0b02 	mov.w	fp, #2
 800c812:	4641      	mov	r1, r8
 800c814:	4620      	mov	r0, r4
 800c816:	f7ff fea7 	bl	800c568 <rshift>
 800c81a:	4446      	add	r6, r8
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	42b3      	cmp	r3, r6
 800c820:	da41      	bge.n	800c8a6 <__gethex+0x26e>
 800c822:	4621      	mov	r1, r4
 800c824:	4648      	mov	r0, r9
 800c826:	f7fe f90d 	bl	800aa44 <_Bfree>
 800c82a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c82c:	2300      	movs	r3, #0
 800c82e:	6013      	str	r3, [r2, #0]
 800c830:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c834:	e78a      	b.n	800c74c <__gethex+0x114>
 800c836:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c83a:	2a2e      	cmp	r2, #46	; 0x2e
 800c83c:	d014      	beq.n	800c868 <__gethex+0x230>
 800c83e:	2b20      	cmp	r3, #32
 800c840:	d106      	bne.n	800c850 <__gethex+0x218>
 800c842:	9b01      	ldr	r3, [sp, #4]
 800c844:	f843 bb04 	str.w	fp, [r3], #4
 800c848:	f04f 0b00 	mov.w	fp, #0
 800c84c:	9301      	str	r3, [sp, #4]
 800c84e:	465b      	mov	r3, fp
 800c850:	7828      	ldrb	r0, [r5, #0]
 800c852:	9303      	str	r3, [sp, #12]
 800c854:	f7ff feda 	bl	800c60c <__hexdig_fun>
 800c858:	9b03      	ldr	r3, [sp, #12]
 800c85a:	f000 000f 	and.w	r0, r0, #15
 800c85e:	4098      	lsls	r0, r3
 800c860:	ea4b 0b00 	orr.w	fp, fp, r0
 800c864:	3304      	adds	r3, #4
 800c866:	e7a1      	b.n	800c7ac <__gethex+0x174>
 800c868:	45a8      	cmp	r8, r5
 800c86a:	d8e8      	bhi.n	800c83e <__gethex+0x206>
 800c86c:	2201      	movs	r2, #1
 800c86e:	4628      	mov	r0, r5
 800c870:	9303      	str	r3, [sp, #12]
 800c872:	f7ff fe0b 	bl	800c48c <strncmp>
 800c876:	4926      	ldr	r1, [pc, #152]	; (800c910 <__gethex+0x2d8>)
 800c878:	9b03      	ldr	r3, [sp, #12]
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d1df      	bne.n	800c83e <__gethex+0x206>
 800c87e:	e795      	b.n	800c7ac <__gethex+0x174>
 800c880:	f04f 0b03 	mov.w	fp, #3
 800c884:	e7c5      	b.n	800c812 <__gethex+0x1da>
 800c886:	da0b      	bge.n	800c8a0 <__gethex+0x268>
 800c888:	eba5 0800 	sub.w	r8, r5, r0
 800c88c:	4621      	mov	r1, r4
 800c88e:	4642      	mov	r2, r8
 800c890:	4648      	mov	r0, r9
 800c892:	f7fe faf1 	bl	800ae78 <__lshift>
 800c896:	eba6 0608 	sub.w	r6, r6, r8
 800c89a:	4604      	mov	r4, r0
 800c89c:	f100 0a14 	add.w	sl, r0, #20
 800c8a0:	f04f 0b00 	mov.w	fp, #0
 800c8a4:	e7ba      	b.n	800c81c <__gethex+0x1e4>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	42b3      	cmp	r3, r6
 800c8aa:	dd73      	ble.n	800c994 <__gethex+0x35c>
 800c8ac:	1b9e      	subs	r6, r3, r6
 800c8ae:	42b5      	cmp	r5, r6
 800c8b0:	dc34      	bgt.n	800c91c <__gethex+0x2e4>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d023      	beq.n	800c900 <__gethex+0x2c8>
 800c8b8:	2b03      	cmp	r3, #3
 800c8ba:	d025      	beq.n	800c908 <__gethex+0x2d0>
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d115      	bne.n	800c8ec <__gethex+0x2b4>
 800c8c0:	42b5      	cmp	r5, r6
 800c8c2:	d113      	bne.n	800c8ec <__gethex+0x2b4>
 800c8c4:	2d01      	cmp	r5, #1
 800c8c6:	d10b      	bne.n	800c8e0 <__gethex+0x2a8>
 800c8c8:	9a02      	ldr	r2, [sp, #8]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6013      	str	r3, [r2, #0]
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	6123      	str	r3, [r4, #16]
 800c8d2:	f8ca 3000 	str.w	r3, [sl]
 800c8d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8d8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c8dc:	601c      	str	r4, [r3, #0]
 800c8de:	e735      	b.n	800c74c <__gethex+0x114>
 800c8e0:	1e69      	subs	r1, r5, #1
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f7fe fcfa 	bl	800b2dc <__any_on>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d1ed      	bne.n	800c8c8 <__gethex+0x290>
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4648      	mov	r0, r9
 800c8f0:	f7fe f8a8 	bl	800aa44 <_Bfree>
 800c8f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	6013      	str	r3, [r2, #0]
 800c8fa:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c8fe:	e725      	b.n	800c74c <__gethex+0x114>
 800c900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1f2      	bne.n	800c8ec <__gethex+0x2b4>
 800c906:	e7df      	b.n	800c8c8 <__gethex+0x290>
 800c908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1dc      	bne.n	800c8c8 <__gethex+0x290>
 800c90e:	e7ed      	b.n	800c8ec <__gethex+0x2b4>
 800c910:	0800e73c 	.word	0x0800e73c
 800c914:	0800e5d5 	.word	0x0800e5d5
 800c918:	0800e8e6 	.word	0x0800e8e6
 800c91c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c920:	f1bb 0f00 	cmp.w	fp, #0
 800c924:	d133      	bne.n	800c98e <__gethex+0x356>
 800c926:	f1b8 0f00 	cmp.w	r8, #0
 800c92a:	d004      	beq.n	800c936 <__gethex+0x2fe>
 800c92c:	4641      	mov	r1, r8
 800c92e:	4620      	mov	r0, r4
 800c930:	f7fe fcd4 	bl	800b2dc <__any_on>
 800c934:	4683      	mov	fp, r0
 800c936:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c93a:	2301      	movs	r3, #1
 800c93c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c940:	f008 081f 	and.w	r8, r8, #31
 800c944:	fa03 f308 	lsl.w	r3, r3, r8
 800c948:	4213      	tst	r3, r2
 800c94a:	4631      	mov	r1, r6
 800c94c:	4620      	mov	r0, r4
 800c94e:	bf18      	it	ne
 800c950:	f04b 0b02 	orrne.w	fp, fp, #2
 800c954:	1bad      	subs	r5, r5, r6
 800c956:	f7ff fe07 	bl	800c568 <rshift>
 800c95a:	687e      	ldr	r6, [r7, #4]
 800c95c:	f04f 0802 	mov.w	r8, #2
 800c960:	f1bb 0f00 	cmp.w	fp, #0
 800c964:	d04a      	beq.n	800c9fc <__gethex+0x3c4>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d016      	beq.n	800c99a <__gethex+0x362>
 800c96c:	2b03      	cmp	r3, #3
 800c96e:	d018      	beq.n	800c9a2 <__gethex+0x36a>
 800c970:	2b01      	cmp	r3, #1
 800c972:	d109      	bne.n	800c988 <__gethex+0x350>
 800c974:	f01b 0f02 	tst.w	fp, #2
 800c978:	d006      	beq.n	800c988 <__gethex+0x350>
 800c97a:	f8da 3000 	ldr.w	r3, [sl]
 800c97e:	ea4b 0b03 	orr.w	fp, fp, r3
 800c982:	f01b 0f01 	tst.w	fp, #1
 800c986:	d10f      	bne.n	800c9a8 <__gethex+0x370>
 800c988:	f048 0810 	orr.w	r8, r8, #16
 800c98c:	e036      	b.n	800c9fc <__gethex+0x3c4>
 800c98e:	f04f 0b01 	mov.w	fp, #1
 800c992:	e7d0      	b.n	800c936 <__gethex+0x2fe>
 800c994:	f04f 0801 	mov.w	r8, #1
 800c998:	e7e2      	b.n	800c960 <__gethex+0x328>
 800c99a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c99c:	f1c3 0301 	rsb	r3, r3, #1
 800c9a0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d0ef      	beq.n	800c988 <__gethex+0x350>
 800c9a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c9ac:	f104 0214 	add.w	r2, r4, #20
 800c9b0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c9b4:	9301      	str	r3, [sp, #4]
 800c9b6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4694      	mov	ip, r2
 800c9be:	f852 1b04 	ldr.w	r1, [r2], #4
 800c9c2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c9c6:	d01e      	beq.n	800ca06 <__gethex+0x3ce>
 800c9c8:	3101      	adds	r1, #1
 800c9ca:	f8cc 1000 	str.w	r1, [ip]
 800c9ce:	f1b8 0f02 	cmp.w	r8, #2
 800c9d2:	f104 0214 	add.w	r2, r4, #20
 800c9d6:	d13d      	bne.n	800ca54 <__gethex+0x41c>
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	42ab      	cmp	r3, r5
 800c9de:	d10b      	bne.n	800c9f8 <__gethex+0x3c0>
 800c9e0:	1169      	asrs	r1, r5, #5
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	f005 051f 	and.w	r5, r5, #31
 800c9e8:	fa03 f505 	lsl.w	r5, r3, r5
 800c9ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9f0:	421d      	tst	r5, r3
 800c9f2:	bf18      	it	ne
 800c9f4:	f04f 0801 	movne.w	r8, #1
 800c9f8:	f048 0820 	orr.w	r8, r8, #32
 800c9fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9fe:	601c      	str	r4, [r3, #0]
 800ca00:	9b02      	ldr	r3, [sp, #8]
 800ca02:	601e      	str	r6, [r3, #0]
 800ca04:	e6a2      	b.n	800c74c <__gethex+0x114>
 800ca06:	4290      	cmp	r0, r2
 800ca08:	f842 3c04 	str.w	r3, [r2, #-4]
 800ca0c:	d8d6      	bhi.n	800c9bc <__gethex+0x384>
 800ca0e:	68a2      	ldr	r2, [r4, #8]
 800ca10:	4593      	cmp	fp, r2
 800ca12:	db17      	blt.n	800ca44 <__gethex+0x40c>
 800ca14:	6861      	ldr	r1, [r4, #4]
 800ca16:	4648      	mov	r0, r9
 800ca18:	3101      	adds	r1, #1
 800ca1a:	f7fd ffd3 	bl	800a9c4 <_Balloc>
 800ca1e:	4682      	mov	sl, r0
 800ca20:	b918      	cbnz	r0, 800ca2a <__gethex+0x3f2>
 800ca22:	4b1b      	ldr	r3, [pc, #108]	; (800ca90 <__gethex+0x458>)
 800ca24:	4602      	mov	r2, r0
 800ca26:	2184      	movs	r1, #132	; 0x84
 800ca28:	e6b3      	b.n	800c792 <__gethex+0x15a>
 800ca2a:	6922      	ldr	r2, [r4, #16]
 800ca2c:	3202      	adds	r2, #2
 800ca2e:	f104 010c 	add.w	r1, r4, #12
 800ca32:	0092      	lsls	r2, r2, #2
 800ca34:	300c      	adds	r0, #12
 800ca36:	f7ff fd4b 	bl	800c4d0 <memcpy>
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	4648      	mov	r0, r9
 800ca3e:	f7fe f801 	bl	800aa44 <_Bfree>
 800ca42:	4654      	mov	r4, sl
 800ca44:	6922      	ldr	r2, [r4, #16]
 800ca46:	1c51      	adds	r1, r2, #1
 800ca48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ca4c:	6121      	str	r1, [r4, #16]
 800ca4e:	2101      	movs	r1, #1
 800ca50:	6151      	str	r1, [r2, #20]
 800ca52:	e7bc      	b.n	800c9ce <__gethex+0x396>
 800ca54:	6921      	ldr	r1, [r4, #16]
 800ca56:	4559      	cmp	r1, fp
 800ca58:	dd0b      	ble.n	800ca72 <__gethex+0x43a>
 800ca5a:	2101      	movs	r1, #1
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f7ff fd83 	bl	800c568 <rshift>
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	3601      	adds	r6, #1
 800ca66:	42b3      	cmp	r3, r6
 800ca68:	f6ff aedb 	blt.w	800c822 <__gethex+0x1ea>
 800ca6c:	f04f 0801 	mov.w	r8, #1
 800ca70:	e7c2      	b.n	800c9f8 <__gethex+0x3c0>
 800ca72:	f015 051f 	ands.w	r5, r5, #31
 800ca76:	d0f9      	beq.n	800ca6c <__gethex+0x434>
 800ca78:	9b01      	ldr	r3, [sp, #4]
 800ca7a:	441a      	add	r2, r3
 800ca7c:	f1c5 0520 	rsb	r5, r5, #32
 800ca80:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ca84:	f7fe f890 	bl	800aba8 <__hi0bits>
 800ca88:	42a8      	cmp	r0, r5
 800ca8a:	dbe6      	blt.n	800ca5a <__gethex+0x422>
 800ca8c:	e7ee      	b.n	800ca6c <__gethex+0x434>
 800ca8e:	bf00      	nop
 800ca90:	0800e5d5 	.word	0x0800e5d5

0800ca94 <L_shift>:
 800ca94:	f1c2 0208 	rsb	r2, r2, #8
 800ca98:	0092      	lsls	r2, r2, #2
 800ca9a:	b570      	push	{r4, r5, r6, lr}
 800ca9c:	f1c2 0620 	rsb	r6, r2, #32
 800caa0:	6843      	ldr	r3, [r0, #4]
 800caa2:	6804      	ldr	r4, [r0, #0]
 800caa4:	fa03 f506 	lsl.w	r5, r3, r6
 800caa8:	432c      	orrs	r4, r5
 800caaa:	40d3      	lsrs	r3, r2
 800caac:	6004      	str	r4, [r0, #0]
 800caae:	f840 3f04 	str.w	r3, [r0, #4]!
 800cab2:	4288      	cmp	r0, r1
 800cab4:	d3f4      	bcc.n	800caa0 <L_shift+0xc>
 800cab6:	bd70      	pop	{r4, r5, r6, pc}

0800cab8 <__match>:
 800cab8:	b530      	push	{r4, r5, lr}
 800caba:	6803      	ldr	r3, [r0, #0]
 800cabc:	3301      	adds	r3, #1
 800cabe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cac2:	b914      	cbnz	r4, 800caca <__match+0x12>
 800cac4:	6003      	str	r3, [r0, #0]
 800cac6:	2001      	movs	r0, #1
 800cac8:	bd30      	pop	{r4, r5, pc}
 800caca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cace:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cad2:	2d19      	cmp	r5, #25
 800cad4:	bf98      	it	ls
 800cad6:	3220      	addls	r2, #32
 800cad8:	42a2      	cmp	r2, r4
 800cada:	d0f0      	beq.n	800cabe <__match+0x6>
 800cadc:	2000      	movs	r0, #0
 800cade:	e7f3      	b.n	800cac8 <__match+0x10>

0800cae0 <__hexnan>:
 800cae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	680b      	ldr	r3, [r1, #0]
 800cae6:	6801      	ldr	r1, [r0, #0]
 800cae8:	115e      	asrs	r6, r3, #5
 800caea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800caee:	f013 031f 	ands.w	r3, r3, #31
 800caf2:	b087      	sub	sp, #28
 800caf4:	bf18      	it	ne
 800caf6:	3604      	addne	r6, #4
 800caf8:	2500      	movs	r5, #0
 800cafa:	1f37      	subs	r7, r6, #4
 800cafc:	4682      	mov	sl, r0
 800cafe:	4690      	mov	r8, r2
 800cb00:	9301      	str	r3, [sp, #4]
 800cb02:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb06:	46b9      	mov	r9, r7
 800cb08:	463c      	mov	r4, r7
 800cb0a:	9502      	str	r5, [sp, #8]
 800cb0c:	46ab      	mov	fp, r5
 800cb0e:	784a      	ldrb	r2, [r1, #1]
 800cb10:	1c4b      	adds	r3, r1, #1
 800cb12:	9303      	str	r3, [sp, #12]
 800cb14:	b342      	cbz	r2, 800cb68 <__hexnan+0x88>
 800cb16:	4610      	mov	r0, r2
 800cb18:	9105      	str	r1, [sp, #20]
 800cb1a:	9204      	str	r2, [sp, #16]
 800cb1c:	f7ff fd76 	bl	800c60c <__hexdig_fun>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d14f      	bne.n	800cbc4 <__hexnan+0xe4>
 800cb24:	9a04      	ldr	r2, [sp, #16]
 800cb26:	9905      	ldr	r1, [sp, #20]
 800cb28:	2a20      	cmp	r2, #32
 800cb2a:	d818      	bhi.n	800cb5e <__hexnan+0x7e>
 800cb2c:	9b02      	ldr	r3, [sp, #8]
 800cb2e:	459b      	cmp	fp, r3
 800cb30:	dd13      	ble.n	800cb5a <__hexnan+0x7a>
 800cb32:	454c      	cmp	r4, r9
 800cb34:	d206      	bcs.n	800cb44 <__hexnan+0x64>
 800cb36:	2d07      	cmp	r5, #7
 800cb38:	dc04      	bgt.n	800cb44 <__hexnan+0x64>
 800cb3a:	462a      	mov	r2, r5
 800cb3c:	4649      	mov	r1, r9
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f7ff ffa8 	bl	800ca94 <L_shift>
 800cb44:	4544      	cmp	r4, r8
 800cb46:	d950      	bls.n	800cbea <__hexnan+0x10a>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f1a4 0904 	sub.w	r9, r4, #4
 800cb4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb52:	f8cd b008 	str.w	fp, [sp, #8]
 800cb56:	464c      	mov	r4, r9
 800cb58:	461d      	mov	r5, r3
 800cb5a:	9903      	ldr	r1, [sp, #12]
 800cb5c:	e7d7      	b.n	800cb0e <__hexnan+0x2e>
 800cb5e:	2a29      	cmp	r2, #41	; 0x29
 800cb60:	d155      	bne.n	800cc0e <__hexnan+0x12e>
 800cb62:	3102      	adds	r1, #2
 800cb64:	f8ca 1000 	str.w	r1, [sl]
 800cb68:	f1bb 0f00 	cmp.w	fp, #0
 800cb6c:	d04f      	beq.n	800cc0e <__hexnan+0x12e>
 800cb6e:	454c      	cmp	r4, r9
 800cb70:	d206      	bcs.n	800cb80 <__hexnan+0xa0>
 800cb72:	2d07      	cmp	r5, #7
 800cb74:	dc04      	bgt.n	800cb80 <__hexnan+0xa0>
 800cb76:	462a      	mov	r2, r5
 800cb78:	4649      	mov	r1, r9
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f7ff ff8a 	bl	800ca94 <L_shift>
 800cb80:	4544      	cmp	r4, r8
 800cb82:	d934      	bls.n	800cbee <__hexnan+0x10e>
 800cb84:	f1a8 0204 	sub.w	r2, r8, #4
 800cb88:	4623      	mov	r3, r4
 800cb8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb92:	429f      	cmp	r7, r3
 800cb94:	d2f9      	bcs.n	800cb8a <__hexnan+0xaa>
 800cb96:	1b3b      	subs	r3, r7, r4
 800cb98:	f023 0303 	bic.w	r3, r3, #3
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	3e03      	subs	r6, #3
 800cba0:	3401      	adds	r4, #1
 800cba2:	42a6      	cmp	r6, r4
 800cba4:	bf38      	it	cc
 800cba6:	2304      	movcc	r3, #4
 800cba8:	4443      	add	r3, r8
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f843 2b04 	str.w	r2, [r3], #4
 800cbb0:	429f      	cmp	r7, r3
 800cbb2:	d2fb      	bcs.n	800cbac <__hexnan+0xcc>
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	b91b      	cbnz	r3, 800cbc0 <__hexnan+0xe0>
 800cbb8:	4547      	cmp	r7, r8
 800cbba:	d126      	bne.n	800cc0a <__hexnan+0x12a>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	603b      	str	r3, [r7, #0]
 800cbc0:	2005      	movs	r0, #5
 800cbc2:	e025      	b.n	800cc10 <__hexnan+0x130>
 800cbc4:	3501      	adds	r5, #1
 800cbc6:	2d08      	cmp	r5, #8
 800cbc8:	f10b 0b01 	add.w	fp, fp, #1
 800cbcc:	dd06      	ble.n	800cbdc <__hexnan+0xfc>
 800cbce:	4544      	cmp	r4, r8
 800cbd0:	d9c3      	bls.n	800cb5a <__hexnan+0x7a>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbd8:	2501      	movs	r5, #1
 800cbda:	3c04      	subs	r4, #4
 800cbdc:	6822      	ldr	r2, [r4, #0]
 800cbde:	f000 000f 	and.w	r0, r0, #15
 800cbe2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cbe6:	6020      	str	r0, [r4, #0]
 800cbe8:	e7b7      	b.n	800cb5a <__hexnan+0x7a>
 800cbea:	2508      	movs	r5, #8
 800cbec:	e7b5      	b.n	800cb5a <__hexnan+0x7a>
 800cbee:	9b01      	ldr	r3, [sp, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d0df      	beq.n	800cbb4 <__hexnan+0xd4>
 800cbf4:	f1c3 0320 	rsb	r3, r3, #32
 800cbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfc:	40da      	lsrs	r2, r3
 800cbfe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc02:	4013      	ands	r3, r2
 800cc04:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc08:	e7d4      	b.n	800cbb4 <__hexnan+0xd4>
 800cc0a:	3f04      	subs	r7, #4
 800cc0c:	e7d2      	b.n	800cbb4 <__hexnan+0xd4>
 800cc0e:	2004      	movs	r0, #4
 800cc10:	b007      	add	sp, #28
 800cc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc16 <__ascii_mbtowc>:
 800cc16:	b082      	sub	sp, #8
 800cc18:	b901      	cbnz	r1, 800cc1c <__ascii_mbtowc+0x6>
 800cc1a:	a901      	add	r1, sp, #4
 800cc1c:	b142      	cbz	r2, 800cc30 <__ascii_mbtowc+0x1a>
 800cc1e:	b14b      	cbz	r3, 800cc34 <__ascii_mbtowc+0x1e>
 800cc20:	7813      	ldrb	r3, [r2, #0]
 800cc22:	600b      	str	r3, [r1, #0]
 800cc24:	7812      	ldrb	r2, [r2, #0]
 800cc26:	1e10      	subs	r0, r2, #0
 800cc28:	bf18      	it	ne
 800cc2a:	2001      	movne	r0, #1
 800cc2c:	b002      	add	sp, #8
 800cc2e:	4770      	bx	lr
 800cc30:	4610      	mov	r0, r2
 800cc32:	e7fb      	b.n	800cc2c <__ascii_mbtowc+0x16>
 800cc34:	f06f 0001 	mvn.w	r0, #1
 800cc38:	e7f8      	b.n	800cc2c <__ascii_mbtowc+0x16>

0800cc3a <_realloc_r>:
 800cc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3e:	4680      	mov	r8, r0
 800cc40:	4614      	mov	r4, r2
 800cc42:	460e      	mov	r6, r1
 800cc44:	b921      	cbnz	r1, 800cc50 <_realloc_r+0x16>
 800cc46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	f7fd be2e 	b.w	800a8ac <_malloc_r>
 800cc50:	b92a      	cbnz	r2, 800cc5e <_realloc_r+0x24>
 800cc52:	f7fd fdb7 	bl	800a7c4 <_free_r>
 800cc56:	4625      	mov	r5, r4
 800cc58:	4628      	mov	r0, r5
 800cc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5e:	f000 f842 	bl	800cce6 <_malloc_usable_size_r>
 800cc62:	4284      	cmp	r4, r0
 800cc64:	4607      	mov	r7, r0
 800cc66:	d802      	bhi.n	800cc6e <_realloc_r+0x34>
 800cc68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc6c:	d812      	bhi.n	800cc94 <_realloc_r+0x5a>
 800cc6e:	4621      	mov	r1, r4
 800cc70:	4640      	mov	r0, r8
 800cc72:	f7fd fe1b 	bl	800a8ac <_malloc_r>
 800cc76:	4605      	mov	r5, r0
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d0ed      	beq.n	800cc58 <_realloc_r+0x1e>
 800cc7c:	42bc      	cmp	r4, r7
 800cc7e:	4622      	mov	r2, r4
 800cc80:	4631      	mov	r1, r6
 800cc82:	bf28      	it	cs
 800cc84:	463a      	movcs	r2, r7
 800cc86:	f7ff fc23 	bl	800c4d0 <memcpy>
 800cc8a:	4631      	mov	r1, r6
 800cc8c:	4640      	mov	r0, r8
 800cc8e:	f7fd fd99 	bl	800a7c4 <_free_r>
 800cc92:	e7e1      	b.n	800cc58 <_realloc_r+0x1e>
 800cc94:	4635      	mov	r5, r6
 800cc96:	e7df      	b.n	800cc58 <_realloc_r+0x1e>

0800cc98 <__ascii_wctomb>:
 800cc98:	b149      	cbz	r1, 800ccae <__ascii_wctomb+0x16>
 800cc9a:	2aff      	cmp	r2, #255	; 0xff
 800cc9c:	bf85      	ittet	hi
 800cc9e:	238a      	movhi	r3, #138	; 0x8a
 800cca0:	6003      	strhi	r3, [r0, #0]
 800cca2:	700a      	strbls	r2, [r1, #0]
 800cca4:	f04f 30ff 	movhi.w	r0, #4294967295
 800cca8:	bf98      	it	ls
 800ccaa:	2001      	movls	r0, #1
 800ccac:	4770      	bx	lr
 800ccae:	4608      	mov	r0, r1
 800ccb0:	4770      	bx	lr
	...

0800ccb4 <fiprintf>:
 800ccb4:	b40e      	push	{r1, r2, r3}
 800ccb6:	b503      	push	{r0, r1, lr}
 800ccb8:	4601      	mov	r1, r0
 800ccba:	ab03      	add	r3, sp, #12
 800ccbc:	4805      	ldr	r0, [pc, #20]	; (800ccd4 <fiprintf+0x20>)
 800ccbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccc2:	6800      	ldr	r0, [r0, #0]
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	f000 f83f 	bl	800cd48 <_vfiprintf_r>
 800ccca:	b002      	add	sp, #8
 800cccc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccd0:	b003      	add	sp, #12
 800ccd2:	4770      	bx	lr
 800ccd4:	20000064 	.word	0x20000064

0800ccd8 <abort>:
 800ccd8:	b508      	push	{r3, lr}
 800ccda:	2006      	movs	r0, #6
 800ccdc:	f000 fa0c 	bl	800d0f8 <raise>
 800cce0:	2001      	movs	r0, #1
 800cce2:	f7f5 ff8b 	bl	8002bfc <_exit>

0800cce6 <_malloc_usable_size_r>:
 800cce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccea:	1f18      	subs	r0, r3, #4
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	bfbc      	itt	lt
 800ccf0:	580b      	ldrlt	r3, [r1, r0]
 800ccf2:	18c0      	addlt	r0, r0, r3
 800ccf4:	4770      	bx	lr

0800ccf6 <__sfputc_r>:
 800ccf6:	6893      	ldr	r3, [r2, #8]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	b410      	push	{r4}
 800ccfe:	6093      	str	r3, [r2, #8]
 800cd00:	da08      	bge.n	800cd14 <__sfputc_r+0x1e>
 800cd02:	6994      	ldr	r4, [r2, #24]
 800cd04:	42a3      	cmp	r3, r4
 800cd06:	db01      	blt.n	800cd0c <__sfputc_r+0x16>
 800cd08:	290a      	cmp	r1, #10
 800cd0a:	d103      	bne.n	800cd14 <__sfputc_r+0x1e>
 800cd0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd10:	f000 b934 	b.w	800cf7c <__swbuf_r>
 800cd14:	6813      	ldr	r3, [r2, #0]
 800cd16:	1c58      	adds	r0, r3, #1
 800cd18:	6010      	str	r0, [r2, #0]
 800cd1a:	7019      	strb	r1, [r3, #0]
 800cd1c:	4608      	mov	r0, r1
 800cd1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <__sfputs_r>:
 800cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd26:	4606      	mov	r6, r0
 800cd28:	460f      	mov	r7, r1
 800cd2a:	4614      	mov	r4, r2
 800cd2c:	18d5      	adds	r5, r2, r3
 800cd2e:	42ac      	cmp	r4, r5
 800cd30:	d101      	bne.n	800cd36 <__sfputs_r+0x12>
 800cd32:	2000      	movs	r0, #0
 800cd34:	e007      	b.n	800cd46 <__sfputs_r+0x22>
 800cd36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd3a:	463a      	mov	r2, r7
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	f7ff ffda 	bl	800ccf6 <__sfputc_r>
 800cd42:	1c43      	adds	r3, r0, #1
 800cd44:	d1f3      	bne.n	800cd2e <__sfputs_r+0xa>
 800cd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd48 <_vfiprintf_r>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	460d      	mov	r5, r1
 800cd4e:	b09d      	sub	sp, #116	; 0x74
 800cd50:	4614      	mov	r4, r2
 800cd52:	4698      	mov	r8, r3
 800cd54:	4606      	mov	r6, r0
 800cd56:	b118      	cbz	r0, 800cd60 <_vfiprintf_r+0x18>
 800cd58:	6a03      	ldr	r3, [r0, #32]
 800cd5a:	b90b      	cbnz	r3, 800cd60 <_vfiprintf_r+0x18>
 800cd5c:	f7fc fd98 	bl	8009890 <__sinit>
 800cd60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd62:	07d9      	lsls	r1, r3, #31
 800cd64:	d405      	bmi.n	800cd72 <_vfiprintf_r+0x2a>
 800cd66:	89ab      	ldrh	r3, [r5, #12]
 800cd68:	059a      	lsls	r2, r3, #22
 800cd6a:	d402      	bmi.n	800cd72 <_vfiprintf_r+0x2a>
 800cd6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd6e:	f7fc fea6 	bl	8009abe <__retarget_lock_acquire_recursive>
 800cd72:	89ab      	ldrh	r3, [r5, #12]
 800cd74:	071b      	lsls	r3, r3, #28
 800cd76:	d501      	bpl.n	800cd7c <_vfiprintf_r+0x34>
 800cd78:	692b      	ldr	r3, [r5, #16]
 800cd7a:	b99b      	cbnz	r3, 800cda4 <_vfiprintf_r+0x5c>
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4630      	mov	r0, r6
 800cd80:	f000 f93a 	bl	800cff8 <__swsetup_r>
 800cd84:	b170      	cbz	r0, 800cda4 <_vfiprintf_r+0x5c>
 800cd86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd88:	07dc      	lsls	r4, r3, #31
 800cd8a:	d504      	bpl.n	800cd96 <_vfiprintf_r+0x4e>
 800cd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd90:	b01d      	add	sp, #116	; 0x74
 800cd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd96:	89ab      	ldrh	r3, [r5, #12]
 800cd98:	0598      	lsls	r0, r3, #22
 800cd9a:	d4f7      	bmi.n	800cd8c <_vfiprintf_r+0x44>
 800cd9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd9e:	f7fc fe8f 	bl	8009ac0 <__retarget_lock_release_recursive>
 800cda2:	e7f3      	b.n	800cd8c <_vfiprintf_r+0x44>
 800cda4:	2300      	movs	r3, #0
 800cda6:	9309      	str	r3, [sp, #36]	; 0x24
 800cda8:	2320      	movs	r3, #32
 800cdaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdae:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdb2:	2330      	movs	r3, #48	; 0x30
 800cdb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cf68 <_vfiprintf_r+0x220>
 800cdb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdbc:	f04f 0901 	mov.w	r9, #1
 800cdc0:	4623      	mov	r3, r4
 800cdc2:	469a      	mov	sl, r3
 800cdc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdc8:	b10a      	cbz	r2, 800cdce <_vfiprintf_r+0x86>
 800cdca:	2a25      	cmp	r2, #37	; 0x25
 800cdcc:	d1f9      	bne.n	800cdc2 <_vfiprintf_r+0x7a>
 800cdce:	ebba 0b04 	subs.w	fp, sl, r4
 800cdd2:	d00b      	beq.n	800cdec <_vfiprintf_r+0xa4>
 800cdd4:	465b      	mov	r3, fp
 800cdd6:	4622      	mov	r2, r4
 800cdd8:	4629      	mov	r1, r5
 800cdda:	4630      	mov	r0, r6
 800cddc:	f7ff ffa2 	bl	800cd24 <__sfputs_r>
 800cde0:	3001      	adds	r0, #1
 800cde2:	f000 80a9 	beq.w	800cf38 <_vfiprintf_r+0x1f0>
 800cde6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cde8:	445a      	add	r2, fp
 800cdea:	9209      	str	r2, [sp, #36]	; 0x24
 800cdec:	f89a 3000 	ldrb.w	r3, [sl]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 80a1 	beq.w	800cf38 <_vfiprintf_r+0x1f0>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce00:	f10a 0a01 	add.w	sl, sl, #1
 800ce04:	9304      	str	r3, [sp, #16]
 800ce06:	9307      	str	r3, [sp, #28]
 800ce08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ce0e:	4654      	mov	r4, sl
 800ce10:	2205      	movs	r2, #5
 800ce12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce16:	4854      	ldr	r0, [pc, #336]	; (800cf68 <_vfiprintf_r+0x220>)
 800ce18:	f7f3 f9da 	bl	80001d0 <memchr>
 800ce1c:	9a04      	ldr	r2, [sp, #16]
 800ce1e:	b9d8      	cbnz	r0, 800ce58 <_vfiprintf_r+0x110>
 800ce20:	06d1      	lsls	r1, r2, #27
 800ce22:	bf44      	itt	mi
 800ce24:	2320      	movmi	r3, #32
 800ce26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce2a:	0713      	lsls	r3, r2, #28
 800ce2c:	bf44      	itt	mi
 800ce2e:	232b      	movmi	r3, #43	; 0x2b
 800ce30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce34:	f89a 3000 	ldrb.w	r3, [sl]
 800ce38:	2b2a      	cmp	r3, #42	; 0x2a
 800ce3a:	d015      	beq.n	800ce68 <_vfiprintf_r+0x120>
 800ce3c:	9a07      	ldr	r2, [sp, #28]
 800ce3e:	4654      	mov	r4, sl
 800ce40:	2000      	movs	r0, #0
 800ce42:	f04f 0c0a 	mov.w	ip, #10
 800ce46:	4621      	mov	r1, r4
 800ce48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce4c:	3b30      	subs	r3, #48	; 0x30
 800ce4e:	2b09      	cmp	r3, #9
 800ce50:	d94d      	bls.n	800ceee <_vfiprintf_r+0x1a6>
 800ce52:	b1b0      	cbz	r0, 800ce82 <_vfiprintf_r+0x13a>
 800ce54:	9207      	str	r2, [sp, #28]
 800ce56:	e014      	b.n	800ce82 <_vfiprintf_r+0x13a>
 800ce58:	eba0 0308 	sub.w	r3, r0, r8
 800ce5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce60:	4313      	orrs	r3, r2
 800ce62:	9304      	str	r3, [sp, #16]
 800ce64:	46a2      	mov	sl, r4
 800ce66:	e7d2      	b.n	800ce0e <_vfiprintf_r+0xc6>
 800ce68:	9b03      	ldr	r3, [sp, #12]
 800ce6a:	1d19      	adds	r1, r3, #4
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	9103      	str	r1, [sp, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	bfbb      	ittet	lt
 800ce74:	425b      	neglt	r3, r3
 800ce76:	f042 0202 	orrlt.w	r2, r2, #2
 800ce7a:	9307      	strge	r3, [sp, #28]
 800ce7c:	9307      	strlt	r3, [sp, #28]
 800ce7e:	bfb8      	it	lt
 800ce80:	9204      	strlt	r2, [sp, #16]
 800ce82:	7823      	ldrb	r3, [r4, #0]
 800ce84:	2b2e      	cmp	r3, #46	; 0x2e
 800ce86:	d10c      	bne.n	800cea2 <_vfiprintf_r+0x15a>
 800ce88:	7863      	ldrb	r3, [r4, #1]
 800ce8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce8c:	d134      	bne.n	800cef8 <_vfiprintf_r+0x1b0>
 800ce8e:	9b03      	ldr	r3, [sp, #12]
 800ce90:	1d1a      	adds	r2, r3, #4
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	9203      	str	r2, [sp, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	bfb8      	it	lt
 800ce9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce9e:	3402      	adds	r4, #2
 800cea0:	9305      	str	r3, [sp, #20]
 800cea2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cf78 <_vfiprintf_r+0x230>
 800cea6:	7821      	ldrb	r1, [r4, #0]
 800cea8:	2203      	movs	r2, #3
 800ceaa:	4650      	mov	r0, sl
 800ceac:	f7f3 f990 	bl	80001d0 <memchr>
 800ceb0:	b138      	cbz	r0, 800cec2 <_vfiprintf_r+0x17a>
 800ceb2:	9b04      	ldr	r3, [sp, #16]
 800ceb4:	eba0 000a 	sub.w	r0, r0, sl
 800ceb8:	2240      	movs	r2, #64	; 0x40
 800ceba:	4082      	lsls	r2, r0
 800cebc:	4313      	orrs	r3, r2
 800cebe:	3401      	adds	r4, #1
 800cec0:	9304      	str	r3, [sp, #16]
 800cec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec6:	4829      	ldr	r0, [pc, #164]	; (800cf6c <_vfiprintf_r+0x224>)
 800cec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cecc:	2206      	movs	r2, #6
 800cece:	f7f3 f97f 	bl	80001d0 <memchr>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d03f      	beq.n	800cf56 <_vfiprintf_r+0x20e>
 800ced6:	4b26      	ldr	r3, [pc, #152]	; (800cf70 <_vfiprintf_r+0x228>)
 800ced8:	bb1b      	cbnz	r3, 800cf22 <_vfiprintf_r+0x1da>
 800ceda:	9b03      	ldr	r3, [sp, #12]
 800cedc:	3307      	adds	r3, #7
 800cede:	f023 0307 	bic.w	r3, r3, #7
 800cee2:	3308      	adds	r3, #8
 800cee4:	9303      	str	r3, [sp, #12]
 800cee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee8:	443b      	add	r3, r7
 800ceea:	9309      	str	r3, [sp, #36]	; 0x24
 800ceec:	e768      	b.n	800cdc0 <_vfiprintf_r+0x78>
 800ceee:	fb0c 3202 	mla	r2, ip, r2, r3
 800cef2:	460c      	mov	r4, r1
 800cef4:	2001      	movs	r0, #1
 800cef6:	e7a6      	b.n	800ce46 <_vfiprintf_r+0xfe>
 800cef8:	2300      	movs	r3, #0
 800cefa:	3401      	adds	r4, #1
 800cefc:	9305      	str	r3, [sp, #20]
 800cefe:	4619      	mov	r1, r3
 800cf00:	f04f 0c0a 	mov.w	ip, #10
 800cf04:	4620      	mov	r0, r4
 800cf06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf0a:	3a30      	subs	r2, #48	; 0x30
 800cf0c:	2a09      	cmp	r2, #9
 800cf0e:	d903      	bls.n	800cf18 <_vfiprintf_r+0x1d0>
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d0c6      	beq.n	800cea2 <_vfiprintf_r+0x15a>
 800cf14:	9105      	str	r1, [sp, #20]
 800cf16:	e7c4      	b.n	800cea2 <_vfiprintf_r+0x15a>
 800cf18:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e7f0      	b.n	800cf04 <_vfiprintf_r+0x1bc>
 800cf22:	ab03      	add	r3, sp, #12
 800cf24:	9300      	str	r3, [sp, #0]
 800cf26:	462a      	mov	r2, r5
 800cf28:	4b12      	ldr	r3, [pc, #72]	; (800cf74 <_vfiprintf_r+0x22c>)
 800cf2a:	a904      	add	r1, sp, #16
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	f7fb fe4d 	bl	8008bcc <_printf_float>
 800cf32:	4607      	mov	r7, r0
 800cf34:	1c78      	adds	r0, r7, #1
 800cf36:	d1d6      	bne.n	800cee6 <_vfiprintf_r+0x19e>
 800cf38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf3a:	07d9      	lsls	r1, r3, #31
 800cf3c:	d405      	bmi.n	800cf4a <_vfiprintf_r+0x202>
 800cf3e:	89ab      	ldrh	r3, [r5, #12]
 800cf40:	059a      	lsls	r2, r3, #22
 800cf42:	d402      	bmi.n	800cf4a <_vfiprintf_r+0x202>
 800cf44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf46:	f7fc fdbb 	bl	8009ac0 <__retarget_lock_release_recursive>
 800cf4a:	89ab      	ldrh	r3, [r5, #12]
 800cf4c:	065b      	lsls	r3, r3, #25
 800cf4e:	f53f af1d 	bmi.w	800cd8c <_vfiprintf_r+0x44>
 800cf52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf54:	e71c      	b.n	800cd90 <_vfiprintf_r+0x48>
 800cf56:	ab03      	add	r3, sp, #12
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	462a      	mov	r2, r5
 800cf5c:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <_vfiprintf_r+0x22c>)
 800cf5e:	a904      	add	r1, sp, #16
 800cf60:	4630      	mov	r0, r6
 800cf62:	f7fc f8d7 	bl	8009114 <_printf_i>
 800cf66:	e7e4      	b.n	800cf32 <_vfiprintf_r+0x1ea>
 800cf68:	0800e891 	.word	0x0800e891
 800cf6c:	0800e89b 	.word	0x0800e89b
 800cf70:	08008bcd 	.word	0x08008bcd
 800cf74:	0800cd25 	.word	0x0800cd25
 800cf78:	0800e897 	.word	0x0800e897

0800cf7c <__swbuf_r>:
 800cf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf7e:	460e      	mov	r6, r1
 800cf80:	4614      	mov	r4, r2
 800cf82:	4605      	mov	r5, r0
 800cf84:	b118      	cbz	r0, 800cf8e <__swbuf_r+0x12>
 800cf86:	6a03      	ldr	r3, [r0, #32]
 800cf88:	b90b      	cbnz	r3, 800cf8e <__swbuf_r+0x12>
 800cf8a:	f7fc fc81 	bl	8009890 <__sinit>
 800cf8e:	69a3      	ldr	r3, [r4, #24]
 800cf90:	60a3      	str	r3, [r4, #8]
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	071a      	lsls	r2, r3, #28
 800cf96:	d525      	bpl.n	800cfe4 <__swbuf_r+0x68>
 800cf98:	6923      	ldr	r3, [r4, #16]
 800cf9a:	b31b      	cbz	r3, 800cfe4 <__swbuf_r+0x68>
 800cf9c:	6823      	ldr	r3, [r4, #0]
 800cf9e:	6922      	ldr	r2, [r4, #16]
 800cfa0:	1a98      	subs	r0, r3, r2
 800cfa2:	6963      	ldr	r3, [r4, #20]
 800cfa4:	b2f6      	uxtb	r6, r6
 800cfa6:	4283      	cmp	r3, r0
 800cfa8:	4637      	mov	r7, r6
 800cfaa:	dc04      	bgt.n	800cfb6 <__swbuf_r+0x3a>
 800cfac:	4621      	mov	r1, r4
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f7ff fa2a 	bl	800c408 <_fflush_r>
 800cfb4:	b9e0      	cbnz	r0, 800cff0 <__swbuf_r+0x74>
 800cfb6:	68a3      	ldr	r3, [r4, #8]
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	60a3      	str	r3, [r4, #8]
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	1c5a      	adds	r2, r3, #1
 800cfc0:	6022      	str	r2, [r4, #0]
 800cfc2:	701e      	strb	r6, [r3, #0]
 800cfc4:	6962      	ldr	r2, [r4, #20]
 800cfc6:	1c43      	adds	r3, r0, #1
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d004      	beq.n	800cfd6 <__swbuf_r+0x5a>
 800cfcc:	89a3      	ldrh	r3, [r4, #12]
 800cfce:	07db      	lsls	r3, r3, #31
 800cfd0:	d506      	bpl.n	800cfe0 <__swbuf_r+0x64>
 800cfd2:	2e0a      	cmp	r6, #10
 800cfd4:	d104      	bne.n	800cfe0 <__swbuf_r+0x64>
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4628      	mov	r0, r5
 800cfda:	f7ff fa15 	bl	800c408 <_fflush_r>
 800cfde:	b938      	cbnz	r0, 800cff0 <__swbuf_r+0x74>
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	f000 f806 	bl	800cff8 <__swsetup_r>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d0d5      	beq.n	800cf9c <__swbuf_r+0x20>
 800cff0:	f04f 37ff 	mov.w	r7, #4294967295
 800cff4:	e7f4      	b.n	800cfe0 <__swbuf_r+0x64>
	...

0800cff8 <__swsetup_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4b2a      	ldr	r3, [pc, #168]	; (800d0a4 <__swsetup_r+0xac>)
 800cffc:	4605      	mov	r5, r0
 800cffe:	6818      	ldr	r0, [r3, #0]
 800d000:	460c      	mov	r4, r1
 800d002:	b118      	cbz	r0, 800d00c <__swsetup_r+0x14>
 800d004:	6a03      	ldr	r3, [r0, #32]
 800d006:	b90b      	cbnz	r3, 800d00c <__swsetup_r+0x14>
 800d008:	f7fc fc42 	bl	8009890 <__sinit>
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d012:	0718      	lsls	r0, r3, #28
 800d014:	d422      	bmi.n	800d05c <__swsetup_r+0x64>
 800d016:	06d9      	lsls	r1, r3, #27
 800d018:	d407      	bmi.n	800d02a <__swsetup_r+0x32>
 800d01a:	2309      	movs	r3, #9
 800d01c:	602b      	str	r3, [r5, #0]
 800d01e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d022:	81a3      	strh	r3, [r4, #12]
 800d024:	f04f 30ff 	mov.w	r0, #4294967295
 800d028:	e034      	b.n	800d094 <__swsetup_r+0x9c>
 800d02a:	0758      	lsls	r0, r3, #29
 800d02c:	d512      	bpl.n	800d054 <__swsetup_r+0x5c>
 800d02e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d030:	b141      	cbz	r1, 800d044 <__swsetup_r+0x4c>
 800d032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d036:	4299      	cmp	r1, r3
 800d038:	d002      	beq.n	800d040 <__swsetup_r+0x48>
 800d03a:	4628      	mov	r0, r5
 800d03c:	f7fd fbc2 	bl	800a7c4 <_free_r>
 800d040:	2300      	movs	r3, #0
 800d042:	6363      	str	r3, [r4, #52]	; 0x34
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d04a:	81a3      	strh	r3, [r4, #12]
 800d04c:	2300      	movs	r3, #0
 800d04e:	6063      	str	r3, [r4, #4]
 800d050:	6923      	ldr	r3, [r4, #16]
 800d052:	6023      	str	r3, [r4, #0]
 800d054:	89a3      	ldrh	r3, [r4, #12]
 800d056:	f043 0308 	orr.w	r3, r3, #8
 800d05a:	81a3      	strh	r3, [r4, #12]
 800d05c:	6923      	ldr	r3, [r4, #16]
 800d05e:	b94b      	cbnz	r3, 800d074 <__swsetup_r+0x7c>
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d06a:	d003      	beq.n	800d074 <__swsetup_r+0x7c>
 800d06c:	4621      	mov	r1, r4
 800d06e:	4628      	mov	r0, r5
 800d070:	f000 f884 	bl	800d17c <__smakebuf_r>
 800d074:	89a0      	ldrh	r0, [r4, #12]
 800d076:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d07a:	f010 0301 	ands.w	r3, r0, #1
 800d07e:	d00a      	beq.n	800d096 <__swsetup_r+0x9e>
 800d080:	2300      	movs	r3, #0
 800d082:	60a3      	str	r3, [r4, #8]
 800d084:	6963      	ldr	r3, [r4, #20]
 800d086:	425b      	negs	r3, r3
 800d088:	61a3      	str	r3, [r4, #24]
 800d08a:	6923      	ldr	r3, [r4, #16]
 800d08c:	b943      	cbnz	r3, 800d0a0 <__swsetup_r+0xa8>
 800d08e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d092:	d1c4      	bne.n	800d01e <__swsetup_r+0x26>
 800d094:	bd38      	pop	{r3, r4, r5, pc}
 800d096:	0781      	lsls	r1, r0, #30
 800d098:	bf58      	it	pl
 800d09a:	6963      	ldrpl	r3, [r4, #20]
 800d09c:	60a3      	str	r3, [r4, #8]
 800d09e:	e7f4      	b.n	800d08a <__swsetup_r+0x92>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	e7f7      	b.n	800d094 <__swsetup_r+0x9c>
 800d0a4:	20000064 	.word	0x20000064

0800d0a8 <_raise_r>:
 800d0a8:	291f      	cmp	r1, #31
 800d0aa:	b538      	push	{r3, r4, r5, lr}
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	460d      	mov	r5, r1
 800d0b0:	d904      	bls.n	800d0bc <_raise_r+0x14>
 800d0b2:	2316      	movs	r3, #22
 800d0b4:	6003      	str	r3, [r0, #0]
 800d0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d0be:	b112      	cbz	r2, 800d0c6 <_raise_r+0x1e>
 800d0c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0c4:	b94b      	cbnz	r3, 800d0da <_raise_r+0x32>
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f000 f830 	bl	800d12c <_getpid_r>
 800d0cc:	462a      	mov	r2, r5
 800d0ce:	4601      	mov	r1, r0
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0d6:	f000 b817 	b.w	800d108 <_kill_r>
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d00a      	beq.n	800d0f4 <_raise_r+0x4c>
 800d0de:	1c59      	adds	r1, r3, #1
 800d0e0:	d103      	bne.n	800d0ea <_raise_r+0x42>
 800d0e2:	2316      	movs	r3, #22
 800d0e4:	6003      	str	r3, [r0, #0]
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	e7e7      	b.n	800d0ba <_raise_r+0x12>
 800d0ea:	2400      	movs	r4, #0
 800d0ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	4798      	blx	r3
 800d0f4:	2000      	movs	r0, #0
 800d0f6:	e7e0      	b.n	800d0ba <_raise_r+0x12>

0800d0f8 <raise>:
 800d0f8:	4b02      	ldr	r3, [pc, #8]	; (800d104 <raise+0xc>)
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	6818      	ldr	r0, [r3, #0]
 800d0fe:	f7ff bfd3 	b.w	800d0a8 <_raise_r>
 800d102:	bf00      	nop
 800d104:	20000064 	.word	0x20000064

0800d108 <_kill_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4d07      	ldr	r5, [pc, #28]	; (800d128 <_kill_r+0x20>)
 800d10c:	2300      	movs	r3, #0
 800d10e:	4604      	mov	r4, r0
 800d110:	4608      	mov	r0, r1
 800d112:	4611      	mov	r1, r2
 800d114:	602b      	str	r3, [r5, #0]
 800d116:	f7f5 fd61 	bl	8002bdc <_kill>
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	d102      	bne.n	800d124 <_kill_r+0x1c>
 800d11e:	682b      	ldr	r3, [r5, #0]
 800d120:	b103      	cbz	r3, 800d124 <_kill_r+0x1c>
 800d122:	6023      	str	r3, [r4, #0]
 800d124:	bd38      	pop	{r3, r4, r5, pc}
 800d126:	bf00      	nop
 800d128:	200006d8 	.word	0x200006d8

0800d12c <_getpid_r>:
 800d12c:	f7f5 bd4e 	b.w	8002bcc <_getpid>

0800d130 <__swhatbuf_r>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	460c      	mov	r4, r1
 800d134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d138:	2900      	cmp	r1, #0
 800d13a:	b096      	sub	sp, #88	; 0x58
 800d13c:	4615      	mov	r5, r2
 800d13e:	461e      	mov	r6, r3
 800d140:	da0d      	bge.n	800d15e <__swhatbuf_r+0x2e>
 800d142:	89a3      	ldrh	r3, [r4, #12]
 800d144:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d148:	f04f 0100 	mov.w	r1, #0
 800d14c:	bf0c      	ite	eq
 800d14e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d152:	2340      	movne	r3, #64	; 0x40
 800d154:	2000      	movs	r0, #0
 800d156:	6031      	str	r1, [r6, #0]
 800d158:	602b      	str	r3, [r5, #0]
 800d15a:	b016      	add	sp, #88	; 0x58
 800d15c:	bd70      	pop	{r4, r5, r6, pc}
 800d15e:	466a      	mov	r2, sp
 800d160:	f000 f848 	bl	800d1f4 <_fstat_r>
 800d164:	2800      	cmp	r0, #0
 800d166:	dbec      	blt.n	800d142 <__swhatbuf_r+0x12>
 800d168:	9901      	ldr	r1, [sp, #4]
 800d16a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d16e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d172:	4259      	negs	r1, r3
 800d174:	4159      	adcs	r1, r3
 800d176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d17a:	e7eb      	b.n	800d154 <__swhatbuf_r+0x24>

0800d17c <__smakebuf_r>:
 800d17c:	898b      	ldrh	r3, [r1, #12]
 800d17e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d180:	079d      	lsls	r5, r3, #30
 800d182:	4606      	mov	r6, r0
 800d184:	460c      	mov	r4, r1
 800d186:	d507      	bpl.n	800d198 <__smakebuf_r+0x1c>
 800d188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	6123      	str	r3, [r4, #16]
 800d190:	2301      	movs	r3, #1
 800d192:	6163      	str	r3, [r4, #20]
 800d194:	b002      	add	sp, #8
 800d196:	bd70      	pop	{r4, r5, r6, pc}
 800d198:	ab01      	add	r3, sp, #4
 800d19a:	466a      	mov	r2, sp
 800d19c:	f7ff ffc8 	bl	800d130 <__swhatbuf_r>
 800d1a0:	9900      	ldr	r1, [sp, #0]
 800d1a2:	4605      	mov	r5, r0
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	f7fd fb81 	bl	800a8ac <_malloc_r>
 800d1aa:	b948      	cbnz	r0, 800d1c0 <__smakebuf_r+0x44>
 800d1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b0:	059a      	lsls	r2, r3, #22
 800d1b2:	d4ef      	bmi.n	800d194 <__smakebuf_r+0x18>
 800d1b4:	f023 0303 	bic.w	r3, r3, #3
 800d1b8:	f043 0302 	orr.w	r3, r3, #2
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	e7e3      	b.n	800d188 <__smakebuf_r+0xc>
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	6020      	str	r0, [r4, #0]
 800d1c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1c8:	81a3      	strh	r3, [r4, #12]
 800d1ca:	9b00      	ldr	r3, [sp, #0]
 800d1cc:	6163      	str	r3, [r4, #20]
 800d1ce:	9b01      	ldr	r3, [sp, #4]
 800d1d0:	6120      	str	r0, [r4, #16]
 800d1d2:	b15b      	cbz	r3, 800d1ec <__smakebuf_r+0x70>
 800d1d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1d8:	4630      	mov	r0, r6
 800d1da:	f000 f81d 	bl	800d218 <_isatty_r>
 800d1de:	b128      	cbz	r0, 800d1ec <__smakebuf_r+0x70>
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	f023 0303 	bic.w	r3, r3, #3
 800d1e6:	f043 0301 	orr.w	r3, r3, #1
 800d1ea:	81a3      	strh	r3, [r4, #12]
 800d1ec:	89a3      	ldrh	r3, [r4, #12]
 800d1ee:	431d      	orrs	r5, r3
 800d1f0:	81a5      	strh	r5, [r4, #12]
 800d1f2:	e7cf      	b.n	800d194 <__smakebuf_r+0x18>

0800d1f4 <_fstat_r>:
 800d1f4:	b538      	push	{r3, r4, r5, lr}
 800d1f6:	4d07      	ldr	r5, [pc, #28]	; (800d214 <_fstat_r+0x20>)
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	4608      	mov	r0, r1
 800d1fe:	4611      	mov	r1, r2
 800d200:	602b      	str	r3, [r5, #0]
 800d202:	f7f5 fd4a 	bl	8002c9a <_fstat>
 800d206:	1c43      	adds	r3, r0, #1
 800d208:	d102      	bne.n	800d210 <_fstat_r+0x1c>
 800d20a:	682b      	ldr	r3, [r5, #0]
 800d20c:	b103      	cbz	r3, 800d210 <_fstat_r+0x1c>
 800d20e:	6023      	str	r3, [r4, #0]
 800d210:	bd38      	pop	{r3, r4, r5, pc}
 800d212:	bf00      	nop
 800d214:	200006d8 	.word	0x200006d8

0800d218 <_isatty_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d06      	ldr	r5, [pc, #24]	; (800d234 <_isatty_r+0x1c>)
 800d21c:	2300      	movs	r3, #0
 800d21e:	4604      	mov	r4, r0
 800d220:	4608      	mov	r0, r1
 800d222:	602b      	str	r3, [r5, #0]
 800d224:	f7f5 fd49 	bl	8002cba <_isatty>
 800d228:	1c43      	adds	r3, r0, #1
 800d22a:	d102      	bne.n	800d232 <_isatty_r+0x1a>
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	b103      	cbz	r3, 800d232 <_isatty_r+0x1a>
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	bd38      	pop	{r3, r4, r5, pc}
 800d234:	200006d8 	.word	0x200006d8

0800d238 <pow>:
 800d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23a:	ed2d 8b02 	vpush	{d8}
 800d23e:	eeb0 8a40 	vmov.f32	s16, s0
 800d242:	eef0 8a60 	vmov.f32	s17, s1
 800d246:	ec55 4b11 	vmov	r4, r5, d1
 800d24a:	f000 fb21 	bl	800d890 <__ieee754_pow>
 800d24e:	4622      	mov	r2, r4
 800d250:	462b      	mov	r3, r5
 800d252:	4620      	mov	r0, r4
 800d254:	4629      	mov	r1, r5
 800d256:	ec57 6b10 	vmov	r6, r7, d0
 800d25a:	f7f3 fc67 	bl	8000b2c <__aeabi_dcmpun>
 800d25e:	2800      	cmp	r0, #0
 800d260:	d13b      	bne.n	800d2da <pow+0xa2>
 800d262:	ec51 0b18 	vmov	r0, r1, d8
 800d266:	2200      	movs	r2, #0
 800d268:	2300      	movs	r3, #0
 800d26a:	f7f3 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d26e:	b1b8      	cbz	r0, 800d2a0 <pow+0x68>
 800d270:	2200      	movs	r2, #0
 800d272:	2300      	movs	r3, #0
 800d274:	4620      	mov	r0, r4
 800d276:	4629      	mov	r1, r5
 800d278:	f7f3 fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d146      	bne.n	800d30e <pow+0xd6>
 800d280:	ec45 4b10 	vmov	d0, r4, r5
 800d284:	f000 fa1d 	bl	800d6c2 <finite>
 800d288:	b338      	cbz	r0, 800d2da <pow+0xa2>
 800d28a:	2200      	movs	r2, #0
 800d28c:	2300      	movs	r3, #0
 800d28e:	4620      	mov	r0, r4
 800d290:	4629      	mov	r1, r5
 800d292:	f7f3 fc23 	bl	8000adc <__aeabi_dcmplt>
 800d296:	b300      	cbz	r0, 800d2da <pow+0xa2>
 800d298:	f7fc fbe6 	bl	8009a68 <__errno>
 800d29c:	2322      	movs	r3, #34	; 0x22
 800d29e:	e01b      	b.n	800d2d8 <pow+0xa0>
 800d2a0:	ec47 6b10 	vmov	d0, r6, r7
 800d2a4:	f000 fa0d 	bl	800d6c2 <finite>
 800d2a8:	b9e0      	cbnz	r0, 800d2e4 <pow+0xac>
 800d2aa:	eeb0 0a48 	vmov.f32	s0, s16
 800d2ae:	eef0 0a68 	vmov.f32	s1, s17
 800d2b2:	f000 fa06 	bl	800d6c2 <finite>
 800d2b6:	b1a8      	cbz	r0, 800d2e4 <pow+0xac>
 800d2b8:	ec45 4b10 	vmov	d0, r4, r5
 800d2bc:	f000 fa01 	bl	800d6c2 <finite>
 800d2c0:	b180      	cbz	r0, 800d2e4 <pow+0xac>
 800d2c2:	4632      	mov	r2, r6
 800d2c4:	463b      	mov	r3, r7
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	f7f3 fc2f 	bl	8000b2c <__aeabi_dcmpun>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d0e2      	beq.n	800d298 <pow+0x60>
 800d2d2:	f7fc fbc9 	bl	8009a68 <__errno>
 800d2d6:	2321      	movs	r3, #33	; 0x21
 800d2d8:	6003      	str	r3, [r0, #0]
 800d2da:	ecbd 8b02 	vpop	{d8}
 800d2de:	ec47 6b10 	vmov	d0, r6, r7
 800d2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	f7f3 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d0f2      	beq.n	800d2da <pow+0xa2>
 800d2f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d2f8:	eef0 0a68 	vmov.f32	s1, s17
 800d2fc:	f000 f9e1 	bl	800d6c2 <finite>
 800d300:	2800      	cmp	r0, #0
 800d302:	d0ea      	beq.n	800d2da <pow+0xa2>
 800d304:	ec45 4b10 	vmov	d0, r4, r5
 800d308:	f000 f9db 	bl	800d6c2 <finite>
 800d30c:	e7c3      	b.n	800d296 <pow+0x5e>
 800d30e:	4f01      	ldr	r7, [pc, #4]	; (800d314 <pow+0xdc>)
 800d310:	2600      	movs	r6, #0
 800d312:	e7e2      	b.n	800d2da <pow+0xa2>
 800d314:	3ff00000 	.word	0x3ff00000

0800d318 <sqrt>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	ed2d 8b02 	vpush	{d8}
 800d31e:	ec55 4b10 	vmov	r4, r5, d0
 800d322:	f000 f9d9 	bl	800d6d8 <__ieee754_sqrt>
 800d326:	4622      	mov	r2, r4
 800d328:	462b      	mov	r3, r5
 800d32a:	4620      	mov	r0, r4
 800d32c:	4629      	mov	r1, r5
 800d32e:	eeb0 8a40 	vmov.f32	s16, s0
 800d332:	eef0 8a60 	vmov.f32	s17, s1
 800d336:	f7f3 fbf9 	bl	8000b2c <__aeabi_dcmpun>
 800d33a:	b990      	cbnz	r0, 800d362 <sqrt+0x4a>
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	4620      	mov	r0, r4
 800d342:	4629      	mov	r1, r5
 800d344:	f7f3 fbca 	bl	8000adc <__aeabi_dcmplt>
 800d348:	b158      	cbz	r0, 800d362 <sqrt+0x4a>
 800d34a:	f7fc fb8d 	bl	8009a68 <__errno>
 800d34e:	2321      	movs	r3, #33	; 0x21
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	2200      	movs	r2, #0
 800d354:	2300      	movs	r3, #0
 800d356:	4610      	mov	r0, r2
 800d358:	4619      	mov	r1, r3
 800d35a:	f7f3 fa77 	bl	800084c <__aeabi_ddiv>
 800d35e:	ec41 0b18 	vmov	d8, r0, r1
 800d362:	eeb0 0a48 	vmov.f32	s0, s16
 800d366:	eef0 0a68 	vmov.f32	s1, s17
 800d36a:	ecbd 8b02 	vpop	{d8}
 800d36e:	bd38      	pop	{r3, r4, r5, pc}

0800d370 <atan>:
 800d370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	ec55 4b10 	vmov	r4, r5, d0
 800d378:	4bc3      	ldr	r3, [pc, #780]	; (800d688 <atan+0x318>)
 800d37a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d37e:	429e      	cmp	r6, r3
 800d380:	46ab      	mov	fp, r5
 800d382:	dd18      	ble.n	800d3b6 <atan+0x46>
 800d384:	4bc1      	ldr	r3, [pc, #772]	; (800d68c <atan+0x31c>)
 800d386:	429e      	cmp	r6, r3
 800d388:	dc01      	bgt.n	800d38e <atan+0x1e>
 800d38a:	d109      	bne.n	800d3a0 <atan+0x30>
 800d38c:	b144      	cbz	r4, 800d3a0 <atan+0x30>
 800d38e:	4622      	mov	r2, r4
 800d390:	462b      	mov	r3, r5
 800d392:	4620      	mov	r0, r4
 800d394:	4629      	mov	r1, r5
 800d396:	f7f2 ff79 	bl	800028c <__adddf3>
 800d39a:	4604      	mov	r4, r0
 800d39c:	460d      	mov	r5, r1
 800d39e:	e006      	b.n	800d3ae <atan+0x3e>
 800d3a0:	f1bb 0f00 	cmp.w	fp, #0
 800d3a4:	f300 8131 	bgt.w	800d60a <atan+0x29a>
 800d3a8:	a59b      	add	r5, pc, #620	; (adr r5, 800d618 <atan+0x2a8>)
 800d3aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d3ae:	ec45 4b10 	vmov	d0, r4, r5
 800d3b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b6:	4bb6      	ldr	r3, [pc, #728]	; (800d690 <atan+0x320>)
 800d3b8:	429e      	cmp	r6, r3
 800d3ba:	dc14      	bgt.n	800d3e6 <atan+0x76>
 800d3bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d3c0:	429e      	cmp	r6, r3
 800d3c2:	dc0d      	bgt.n	800d3e0 <atan+0x70>
 800d3c4:	a396      	add	r3, pc, #600	; (adr r3, 800d620 <atan+0x2b0>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	ee10 0a10 	vmov	r0, s0
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	f7f2 ff5c 	bl	800028c <__adddf3>
 800d3d4:	4baf      	ldr	r3, [pc, #700]	; (800d694 <atan+0x324>)
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	f7f3 fb9e 	bl	8000b18 <__aeabi_dcmpgt>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d1e6      	bne.n	800d3ae <atan+0x3e>
 800d3e0:	f04f 3aff 	mov.w	sl, #4294967295
 800d3e4:	e02b      	b.n	800d43e <atan+0xce>
 800d3e6:	f000 f963 	bl	800d6b0 <fabs>
 800d3ea:	4bab      	ldr	r3, [pc, #684]	; (800d698 <atan+0x328>)
 800d3ec:	429e      	cmp	r6, r3
 800d3ee:	ec55 4b10 	vmov	r4, r5, d0
 800d3f2:	f300 80bf 	bgt.w	800d574 <atan+0x204>
 800d3f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d3fa:	429e      	cmp	r6, r3
 800d3fc:	f300 80a0 	bgt.w	800d540 <atan+0x1d0>
 800d400:	ee10 2a10 	vmov	r2, s0
 800d404:	ee10 0a10 	vmov	r0, s0
 800d408:	462b      	mov	r3, r5
 800d40a:	4629      	mov	r1, r5
 800d40c:	f7f2 ff3e 	bl	800028c <__adddf3>
 800d410:	4ba0      	ldr	r3, [pc, #640]	; (800d694 <atan+0x324>)
 800d412:	2200      	movs	r2, #0
 800d414:	f7f2 ff38 	bl	8000288 <__aeabi_dsub>
 800d418:	2200      	movs	r2, #0
 800d41a:	4606      	mov	r6, r0
 800d41c:	460f      	mov	r7, r1
 800d41e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d422:	4620      	mov	r0, r4
 800d424:	4629      	mov	r1, r5
 800d426:	f7f2 ff31 	bl	800028c <__adddf3>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4630      	mov	r0, r6
 800d430:	4639      	mov	r1, r7
 800d432:	f7f3 fa0b 	bl	800084c <__aeabi_ddiv>
 800d436:	f04f 0a00 	mov.w	sl, #0
 800d43a:	4604      	mov	r4, r0
 800d43c:	460d      	mov	r5, r1
 800d43e:	4622      	mov	r2, r4
 800d440:	462b      	mov	r3, r5
 800d442:	4620      	mov	r0, r4
 800d444:	4629      	mov	r1, r5
 800d446:	f7f3 f8d7 	bl	80005f8 <__aeabi_dmul>
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	4680      	mov	r8, r0
 800d450:	4689      	mov	r9, r1
 800d452:	f7f3 f8d1 	bl	80005f8 <__aeabi_dmul>
 800d456:	a374      	add	r3, pc, #464	; (adr r3, 800d628 <atan+0x2b8>)
 800d458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d45c:	4606      	mov	r6, r0
 800d45e:	460f      	mov	r7, r1
 800d460:	f7f3 f8ca 	bl	80005f8 <__aeabi_dmul>
 800d464:	a372      	add	r3, pc, #456	; (adr r3, 800d630 <atan+0x2c0>)
 800d466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d46a:	f7f2 ff0f 	bl	800028c <__adddf3>
 800d46e:	4632      	mov	r2, r6
 800d470:	463b      	mov	r3, r7
 800d472:	f7f3 f8c1 	bl	80005f8 <__aeabi_dmul>
 800d476:	a370      	add	r3, pc, #448	; (adr r3, 800d638 <atan+0x2c8>)
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	f7f2 ff06 	bl	800028c <__adddf3>
 800d480:	4632      	mov	r2, r6
 800d482:	463b      	mov	r3, r7
 800d484:	f7f3 f8b8 	bl	80005f8 <__aeabi_dmul>
 800d488:	a36d      	add	r3, pc, #436	; (adr r3, 800d640 <atan+0x2d0>)
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	f7f2 fefd 	bl	800028c <__adddf3>
 800d492:	4632      	mov	r2, r6
 800d494:	463b      	mov	r3, r7
 800d496:	f7f3 f8af 	bl	80005f8 <__aeabi_dmul>
 800d49a:	a36b      	add	r3, pc, #428	; (adr r3, 800d648 <atan+0x2d8>)
 800d49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a0:	f7f2 fef4 	bl	800028c <__adddf3>
 800d4a4:	4632      	mov	r2, r6
 800d4a6:	463b      	mov	r3, r7
 800d4a8:	f7f3 f8a6 	bl	80005f8 <__aeabi_dmul>
 800d4ac:	a368      	add	r3, pc, #416	; (adr r3, 800d650 <atan+0x2e0>)
 800d4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b2:	f7f2 feeb 	bl	800028c <__adddf3>
 800d4b6:	4642      	mov	r2, r8
 800d4b8:	464b      	mov	r3, r9
 800d4ba:	f7f3 f89d 	bl	80005f8 <__aeabi_dmul>
 800d4be:	a366      	add	r3, pc, #408	; (adr r3, 800d658 <atan+0x2e8>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	4680      	mov	r8, r0
 800d4c6:	4689      	mov	r9, r1
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	4639      	mov	r1, r7
 800d4cc:	f7f3 f894 	bl	80005f8 <__aeabi_dmul>
 800d4d0:	a363      	add	r3, pc, #396	; (adr r3, 800d660 <atan+0x2f0>)
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	f7f2 fed7 	bl	8000288 <__aeabi_dsub>
 800d4da:	4632      	mov	r2, r6
 800d4dc:	463b      	mov	r3, r7
 800d4de:	f7f3 f88b 	bl	80005f8 <__aeabi_dmul>
 800d4e2:	a361      	add	r3, pc, #388	; (adr r3, 800d668 <atan+0x2f8>)
 800d4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e8:	f7f2 fece 	bl	8000288 <__aeabi_dsub>
 800d4ec:	4632      	mov	r2, r6
 800d4ee:	463b      	mov	r3, r7
 800d4f0:	f7f3 f882 	bl	80005f8 <__aeabi_dmul>
 800d4f4:	a35e      	add	r3, pc, #376	; (adr r3, 800d670 <atan+0x300>)
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f2 fec5 	bl	8000288 <__aeabi_dsub>
 800d4fe:	4632      	mov	r2, r6
 800d500:	463b      	mov	r3, r7
 800d502:	f7f3 f879 	bl	80005f8 <__aeabi_dmul>
 800d506:	a35c      	add	r3, pc, #368	; (adr r3, 800d678 <atan+0x308>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	f7f2 febc 	bl	8000288 <__aeabi_dsub>
 800d510:	4632      	mov	r2, r6
 800d512:	463b      	mov	r3, r7
 800d514:	f7f3 f870 	bl	80005f8 <__aeabi_dmul>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	4640      	mov	r0, r8
 800d51e:	4649      	mov	r1, r9
 800d520:	f7f2 feb4 	bl	800028c <__adddf3>
 800d524:	4622      	mov	r2, r4
 800d526:	462b      	mov	r3, r5
 800d528:	f7f3 f866 	bl	80005f8 <__aeabi_dmul>
 800d52c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d530:	4602      	mov	r2, r0
 800d532:	460b      	mov	r3, r1
 800d534:	d14b      	bne.n	800d5ce <atan+0x25e>
 800d536:	4620      	mov	r0, r4
 800d538:	4629      	mov	r1, r5
 800d53a:	f7f2 fea5 	bl	8000288 <__aeabi_dsub>
 800d53e:	e72c      	b.n	800d39a <atan+0x2a>
 800d540:	ee10 0a10 	vmov	r0, s0
 800d544:	4b53      	ldr	r3, [pc, #332]	; (800d694 <atan+0x324>)
 800d546:	2200      	movs	r2, #0
 800d548:	4629      	mov	r1, r5
 800d54a:	f7f2 fe9d 	bl	8000288 <__aeabi_dsub>
 800d54e:	4b51      	ldr	r3, [pc, #324]	; (800d694 <atan+0x324>)
 800d550:	4606      	mov	r6, r0
 800d552:	460f      	mov	r7, r1
 800d554:	2200      	movs	r2, #0
 800d556:	4620      	mov	r0, r4
 800d558:	4629      	mov	r1, r5
 800d55a:	f7f2 fe97 	bl	800028c <__adddf3>
 800d55e:	4602      	mov	r2, r0
 800d560:	460b      	mov	r3, r1
 800d562:	4630      	mov	r0, r6
 800d564:	4639      	mov	r1, r7
 800d566:	f7f3 f971 	bl	800084c <__aeabi_ddiv>
 800d56a:	f04f 0a01 	mov.w	sl, #1
 800d56e:	4604      	mov	r4, r0
 800d570:	460d      	mov	r5, r1
 800d572:	e764      	b.n	800d43e <atan+0xce>
 800d574:	4b49      	ldr	r3, [pc, #292]	; (800d69c <atan+0x32c>)
 800d576:	429e      	cmp	r6, r3
 800d578:	da1d      	bge.n	800d5b6 <atan+0x246>
 800d57a:	ee10 0a10 	vmov	r0, s0
 800d57e:	4b48      	ldr	r3, [pc, #288]	; (800d6a0 <atan+0x330>)
 800d580:	2200      	movs	r2, #0
 800d582:	4629      	mov	r1, r5
 800d584:	f7f2 fe80 	bl	8000288 <__aeabi_dsub>
 800d588:	4b45      	ldr	r3, [pc, #276]	; (800d6a0 <atan+0x330>)
 800d58a:	4606      	mov	r6, r0
 800d58c:	460f      	mov	r7, r1
 800d58e:	2200      	movs	r2, #0
 800d590:	4620      	mov	r0, r4
 800d592:	4629      	mov	r1, r5
 800d594:	f7f3 f830 	bl	80005f8 <__aeabi_dmul>
 800d598:	4b3e      	ldr	r3, [pc, #248]	; (800d694 <atan+0x324>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	f7f2 fe76 	bl	800028c <__adddf3>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	4639      	mov	r1, r7
 800d5a8:	f7f3 f950 	bl	800084c <__aeabi_ddiv>
 800d5ac:	f04f 0a02 	mov.w	sl, #2
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	e743      	b.n	800d43e <atan+0xce>
 800d5b6:	462b      	mov	r3, r5
 800d5b8:	ee10 2a10 	vmov	r2, s0
 800d5bc:	4939      	ldr	r1, [pc, #228]	; (800d6a4 <atan+0x334>)
 800d5be:	2000      	movs	r0, #0
 800d5c0:	f7f3 f944 	bl	800084c <__aeabi_ddiv>
 800d5c4:	f04f 0a03 	mov.w	sl, #3
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	460d      	mov	r5, r1
 800d5cc:	e737      	b.n	800d43e <atan+0xce>
 800d5ce:	4b36      	ldr	r3, [pc, #216]	; (800d6a8 <atan+0x338>)
 800d5d0:	4e36      	ldr	r6, [pc, #216]	; (800d6ac <atan+0x33c>)
 800d5d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	f7f2 fe55 	bl	8000288 <__aeabi_dsub>
 800d5de:	4622      	mov	r2, r4
 800d5e0:	462b      	mov	r3, r5
 800d5e2:	f7f2 fe51 	bl	8000288 <__aeabi_dsub>
 800d5e6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d5f2:	f7f2 fe49 	bl	8000288 <__aeabi_dsub>
 800d5f6:	f1bb 0f00 	cmp.w	fp, #0
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	460d      	mov	r5, r1
 800d5fe:	f6bf aed6 	bge.w	800d3ae <atan+0x3e>
 800d602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d606:	461d      	mov	r5, r3
 800d608:	e6d1      	b.n	800d3ae <atan+0x3e>
 800d60a:	a51d      	add	r5, pc, #116	; (adr r5, 800d680 <atan+0x310>)
 800d60c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d610:	e6cd      	b.n	800d3ae <atan+0x3e>
 800d612:	bf00      	nop
 800d614:	f3af 8000 	nop.w
 800d618:	54442d18 	.word	0x54442d18
 800d61c:	bff921fb 	.word	0xbff921fb
 800d620:	8800759c 	.word	0x8800759c
 800d624:	7e37e43c 	.word	0x7e37e43c
 800d628:	e322da11 	.word	0xe322da11
 800d62c:	3f90ad3a 	.word	0x3f90ad3a
 800d630:	24760deb 	.word	0x24760deb
 800d634:	3fa97b4b 	.word	0x3fa97b4b
 800d638:	a0d03d51 	.word	0xa0d03d51
 800d63c:	3fb10d66 	.word	0x3fb10d66
 800d640:	c54c206e 	.word	0xc54c206e
 800d644:	3fb745cd 	.word	0x3fb745cd
 800d648:	920083ff 	.word	0x920083ff
 800d64c:	3fc24924 	.word	0x3fc24924
 800d650:	5555550d 	.word	0x5555550d
 800d654:	3fd55555 	.word	0x3fd55555
 800d658:	2c6a6c2f 	.word	0x2c6a6c2f
 800d65c:	bfa2b444 	.word	0xbfa2b444
 800d660:	52defd9a 	.word	0x52defd9a
 800d664:	3fadde2d 	.word	0x3fadde2d
 800d668:	af749a6d 	.word	0xaf749a6d
 800d66c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d670:	fe231671 	.word	0xfe231671
 800d674:	3fbc71c6 	.word	0x3fbc71c6
 800d678:	9998ebc4 	.word	0x9998ebc4
 800d67c:	3fc99999 	.word	0x3fc99999
 800d680:	54442d18 	.word	0x54442d18
 800d684:	3ff921fb 	.word	0x3ff921fb
 800d688:	440fffff 	.word	0x440fffff
 800d68c:	7ff00000 	.word	0x7ff00000
 800d690:	3fdbffff 	.word	0x3fdbffff
 800d694:	3ff00000 	.word	0x3ff00000
 800d698:	3ff2ffff 	.word	0x3ff2ffff
 800d69c:	40038000 	.word	0x40038000
 800d6a0:	3ff80000 	.word	0x3ff80000
 800d6a4:	bff00000 	.word	0xbff00000
 800d6a8:	0800e968 	.word	0x0800e968
 800d6ac:	0800e948 	.word	0x0800e948

0800d6b0 <fabs>:
 800d6b0:	ec51 0b10 	vmov	r0, r1, d0
 800d6b4:	ee10 2a10 	vmov	r2, s0
 800d6b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d6bc:	ec43 2b10 	vmov	d0, r2, r3
 800d6c0:	4770      	bx	lr

0800d6c2 <finite>:
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	ed8d 0b00 	vstr	d0, [sp]
 800d6c8:	9801      	ldr	r0, [sp, #4]
 800d6ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d6ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d6d2:	0fc0      	lsrs	r0, r0, #31
 800d6d4:	b002      	add	sp, #8
 800d6d6:	4770      	bx	lr

0800d6d8 <__ieee754_sqrt>:
 800d6d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6dc:	ec55 4b10 	vmov	r4, r5, d0
 800d6e0:	4e67      	ldr	r6, [pc, #412]	; (800d880 <__ieee754_sqrt+0x1a8>)
 800d6e2:	43ae      	bics	r6, r5
 800d6e4:	ee10 0a10 	vmov	r0, s0
 800d6e8:	ee10 2a10 	vmov	r2, s0
 800d6ec:	4629      	mov	r1, r5
 800d6ee:	462b      	mov	r3, r5
 800d6f0:	d10d      	bne.n	800d70e <__ieee754_sqrt+0x36>
 800d6f2:	f7f2 ff81 	bl	80005f8 <__aeabi_dmul>
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	f7f2 fdc5 	bl	800028c <__adddf3>
 800d702:	4604      	mov	r4, r0
 800d704:	460d      	mov	r5, r1
 800d706:	ec45 4b10 	vmov	d0, r4, r5
 800d70a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70e:	2d00      	cmp	r5, #0
 800d710:	dc0b      	bgt.n	800d72a <__ieee754_sqrt+0x52>
 800d712:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d716:	4326      	orrs	r6, r4
 800d718:	d0f5      	beq.n	800d706 <__ieee754_sqrt+0x2e>
 800d71a:	b135      	cbz	r5, 800d72a <__ieee754_sqrt+0x52>
 800d71c:	f7f2 fdb4 	bl	8000288 <__aeabi_dsub>
 800d720:	4602      	mov	r2, r0
 800d722:	460b      	mov	r3, r1
 800d724:	f7f3 f892 	bl	800084c <__aeabi_ddiv>
 800d728:	e7eb      	b.n	800d702 <__ieee754_sqrt+0x2a>
 800d72a:	1509      	asrs	r1, r1, #20
 800d72c:	f000 808d 	beq.w	800d84a <__ieee754_sqrt+0x172>
 800d730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d734:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800d738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d73c:	07c9      	lsls	r1, r1, #31
 800d73e:	bf5c      	itt	pl
 800d740:	005b      	lslpl	r3, r3, #1
 800d742:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800d746:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d74a:	bf58      	it	pl
 800d74c:	0052      	lslpl	r2, r2, #1
 800d74e:	2500      	movs	r5, #0
 800d750:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d754:	1076      	asrs	r6, r6, #1
 800d756:	0052      	lsls	r2, r2, #1
 800d758:	f04f 0e16 	mov.w	lr, #22
 800d75c:	46ac      	mov	ip, r5
 800d75e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d762:	eb0c 0001 	add.w	r0, ip, r1
 800d766:	4298      	cmp	r0, r3
 800d768:	bfde      	ittt	le
 800d76a:	1a1b      	suble	r3, r3, r0
 800d76c:	eb00 0c01 	addle.w	ip, r0, r1
 800d770:	186d      	addle	r5, r5, r1
 800d772:	005b      	lsls	r3, r3, #1
 800d774:	f1be 0e01 	subs.w	lr, lr, #1
 800d778:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d77c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d780:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d784:	d1ed      	bne.n	800d762 <__ieee754_sqrt+0x8a>
 800d786:	4674      	mov	r4, lr
 800d788:	2720      	movs	r7, #32
 800d78a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800d78e:	4563      	cmp	r3, ip
 800d790:	eb01 000e 	add.w	r0, r1, lr
 800d794:	dc02      	bgt.n	800d79c <__ieee754_sqrt+0xc4>
 800d796:	d113      	bne.n	800d7c0 <__ieee754_sqrt+0xe8>
 800d798:	4290      	cmp	r0, r2
 800d79a:	d811      	bhi.n	800d7c0 <__ieee754_sqrt+0xe8>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	eb00 0e01 	add.w	lr, r0, r1
 800d7a2:	da57      	bge.n	800d854 <__ieee754_sqrt+0x17c>
 800d7a4:	f1be 0f00 	cmp.w	lr, #0
 800d7a8:	db54      	blt.n	800d854 <__ieee754_sqrt+0x17c>
 800d7aa:	f10c 0801 	add.w	r8, ip, #1
 800d7ae:	eba3 030c 	sub.w	r3, r3, ip
 800d7b2:	4290      	cmp	r0, r2
 800d7b4:	bf88      	it	hi
 800d7b6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d7ba:	1a12      	subs	r2, r2, r0
 800d7bc:	440c      	add	r4, r1
 800d7be:	46c4      	mov	ip, r8
 800d7c0:	005b      	lsls	r3, r3, #1
 800d7c2:	3f01      	subs	r7, #1
 800d7c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800d7c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d7cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d7d0:	d1dd      	bne.n	800d78e <__ieee754_sqrt+0xb6>
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	d01b      	beq.n	800d80e <__ieee754_sqrt+0x136>
 800d7d6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800d884 <__ieee754_sqrt+0x1ac>
 800d7da:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800d888 <__ieee754_sqrt+0x1b0>
 800d7de:	e9da 0100 	ldrd	r0, r1, [sl]
 800d7e2:	e9db 2300 	ldrd	r2, r3, [fp]
 800d7e6:	f7f2 fd4f 	bl	8000288 <__aeabi_dsub>
 800d7ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	f7f3 f97b 	bl	8000af0 <__aeabi_dcmple>
 800d7fa:	b140      	cbz	r0, 800d80e <__ieee754_sqrt+0x136>
 800d7fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d800:	e9da 0100 	ldrd	r0, r1, [sl]
 800d804:	e9db 2300 	ldrd	r2, r3, [fp]
 800d808:	d126      	bne.n	800d858 <__ieee754_sqrt+0x180>
 800d80a:	3501      	adds	r5, #1
 800d80c:	463c      	mov	r4, r7
 800d80e:	106a      	asrs	r2, r5, #1
 800d810:	0863      	lsrs	r3, r4, #1
 800d812:	07e9      	lsls	r1, r5, #31
 800d814:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d818:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d81c:	bf48      	it	mi
 800d81e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d822:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800d826:	461c      	mov	r4, r3
 800d828:	e76d      	b.n	800d706 <__ieee754_sqrt+0x2e>
 800d82a:	0ad3      	lsrs	r3, r2, #11
 800d82c:	3815      	subs	r0, #21
 800d82e:	0552      	lsls	r2, r2, #21
 800d830:	2b00      	cmp	r3, #0
 800d832:	d0fa      	beq.n	800d82a <__ieee754_sqrt+0x152>
 800d834:	02dc      	lsls	r4, r3, #11
 800d836:	d50a      	bpl.n	800d84e <__ieee754_sqrt+0x176>
 800d838:	f1c1 0420 	rsb	r4, r1, #32
 800d83c:	fa22 f404 	lsr.w	r4, r2, r4
 800d840:	1e4d      	subs	r5, r1, #1
 800d842:	408a      	lsls	r2, r1
 800d844:	4323      	orrs	r3, r4
 800d846:	1b41      	subs	r1, r0, r5
 800d848:	e772      	b.n	800d730 <__ieee754_sqrt+0x58>
 800d84a:	4608      	mov	r0, r1
 800d84c:	e7f0      	b.n	800d830 <__ieee754_sqrt+0x158>
 800d84e:	005b      	lsls	r3, r3, #1
 800d850:	3101      	adds	r1, #1
 800d852:	e7ef      	b.n	800d834 <__ieee754_sqrt+0x15c>
 800d854:	46e0      	mov	r8, ip
 800d856:	e7aa      	b.n	800d7ae <__ieee754_sqrt+0xd6>
 800d858:	f7f2 fd18 	bl	800028c <__adddf3>
 800d85c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d860:	4602      	mov	r2, r0
 800d862:	460b      	mov	r3, r1
 800d864:	4640      	mov	r0, r8
 800d866:	4649      	mov	r1, r9
 800d868:	f7f3 f938 	bl	8000adc <__aeabi_dcmplt>
 800d86c:	b120      	cbz	r0, 800d878 <__ieee754_sqrt+0x1a0>
 800d86e:	1ca0      	adds	r0, r4, #2
 800d870:	bf08      	it	eq
 800d872:	3501      	addeq	r5, #1
 800d874:	3402      	adds	r4, #2
 800d876:	e7ca      	b.n	800d80e <__ieee754_sqrt+0x136>
 800d878:	3401      	adds	r4, #1
 800d87a:	f024 0401 	bic.w	r4, r4, #1
 800d87e:	e7c6      	b.n	800d80e <__ieee754_sqrt+0x136>
 800d880:	7ff00000 	.word	0x7ff00000
 800d884:	200001d8 	.word	0x200001d8
 800d888:	200001e0 	.word	0x200001e0
 800d88c:	00000000 	.word	0x00000000

0800d890 <__ieee754_pow>:
 800d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	ed2d 8b06 	vpush	{d8-d10}
 800d898:	b089      	sub	sp, #36	; 0x24
 800d89a:	ed8d 1b00 	vstr	d1, [sp]
 800d89e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d8a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d8a6:	ea58 0102 	orrs.w	r1, r8, r2
 800d8aa:	ec57 6b10 	vmov	r6, r7, d0
 800d8ae:	d115      	bne.n	800d8dc <__ieee754_pow+0x4c>
 800d8b0:	19b3      	adds	r3, r6, r6
 800d8b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d8b6:	4152      	adcs	r2, r2
 800d8b8:	4299      	cmp	r1, r3
 800d8ba:	4b89      	ldr	r3, [pc, #548]	; (800dae0 <__ieee754_pow+0x250>)
 800d8bc:	4193      	sbcs	r3, r2
 800d8be:	f080 84d1 	bcs.w	800e264 <__ieee754_pow+0x9d4>
 800d8c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	4639      	mov	r1, r7
 800d8ca:	f7f2 fcdf 	bl	800028c <__adddf3>
 800d8ce:	ec41 0b10 	vmov	d0, r0, r1
 800d8d2:	b009      	add	sp, #36	; 0x24
 800d8d4:	ecbd 8b06 	vpop	{d8-d10}
 800d8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8dc:	4b81      	ldr	r3, [pc, #516]	; (800dae4 <__ieee754_pow+0x254>)
 800d8de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d8e2:	429c      	cmp	r4, r3
 800d8e4:	ee10 aa10 	vmov	sl, s0
 800d8e8:	463d      	mov	r5, r7
 800d8ea:	dc06      	bgt.n	800d8fa <__ieee754_pow+0x6a>
 800d8ec:	d101      	bne.n	800d8f2 <__ieee754_pow+0x62>
 800d8ee:	2e00      	cmp	r6, #0
 800d8f0:	d1e7      	bne.n	800d8c2 <__ieee754_pow+0x32>
 800d8f2:	4598      	cmp	r8, r3
 800d8f4:	dc01      	bgt.n	800d8fa <__ieee754_pow+0x6a>
 800d8f6:	d10f      	bne.n	800d918 <__ieee754_pow+0x88>
 800d8f8:	b172      	cbz	r2, 800d918 <__ieee754_pow+0x88>
 800d8fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d8fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d902:	ea55 050a 	orrs.w	r5, r5, sl
 800d906:	d1dc      	bne.n	800d8c2 <__ieee754_pow+0x32>
 800d908:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d90c:	18db      	adds	r3, r3, r3
 800d90e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d912:	4152      	adcs	r2, r2
 800d914:	429d      	cmp	r5, r3
 800d916:	e7d0      	b.n	800d8ba <__ieee754_pow+0x2a>
 800d918:	2d00      	cmp	r5, #0
 800d91a:	da3b      	bge.n	800d994 <__ieee754_pow+0x104>
 800d91c:	4b72      	ldr	r3, [pc, #456]	; (800dae8 <__ieee754_pow+0x258>)
 800d91e:	4598      	cmp	r8, r3
 800d920:	dc51      	bgt.n	800d9c6 <__ieee754_pow+0x136>
 800d922:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d926:	4598      	cmp	r8, r3
 800d928:	f340 84ab 	ble.w	800e282 <__ieee754_pow+0x9f2>
 800d92c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d930:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d934:	2b14      	cmp	r3, #20
 800d936:	dd0f      	ble.n	800d958 <__ieee754_pow+0xc8>
 800d938:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d93c:	fa22 f103 	lsr.w	r1, r2, r3
 800d940:	fa01 f303 	lsl.w	r3, r1, r3
 800d944:	4293      	cmp	r3, r2
 800d946:	f040 849c 	bne.w	800e282 <__ieee754_pow+0x9f2>
 800d94a:	f001 0101 	and.w	r1, r1, #1
 800d94e:	f1c1 0302 	rsb	r3, r1, #2
 800d952:	9304      	str	r3, [sp, #16]
 800d954:	b182      	cbz	r2, 800d978 <__ieee754_pow+0xe8>
 800d956:	e05f      	b.n	800da18 <__ieee754_pow+0x188>
 800d958:	2a00      	cmp	r2, #0
 800d95a:	d15b      	bne.n	800da14 <__ieee754_pow+0x184>
 800d95c:	f1c3 0314 	rsb	r3, r3, #20
 800d960:	fa48 f103 	asr.w	r1, r8, r3
 800d964:	fa01 f303 	lsl.w	r3, r1, r3
 800d968:	4543      	cmp	r3, r8
 800d96a:	f040 8487 	bne.w	800e27c <__ieee754_pow+0x9ec>
 800d96e:	f001 0101 	and.w	r1, r1, #1
 800d972:	f1c1 0302 	rsb	r3, r1, #2
 800d976:	9304      	str	r3, [sp, #16]
 800d978:	4b5c      	ldr	r3, [pc, #368]	; (800daec <__ieee754_pow+0x25c>)
 800d97a:	4598      	cmp	r8, r3
 800d97c:	d132      	bne.n	800d9e4 <__ieee754_pow+0x154>
 800d97e:	f1b9 0f00 	cmp.w	r9, #0
 800d982:	f280 8477 	bge.w	800e274 <__ieee754_pow+0x9e4>
 800d986:	4959      	ldr	r1, [pc, #356]	; (800daec <__ieee754_pow+0x25c>)
 800d988:	4632      	mov	r2, r6
 800d98a:	463b      	mov	r3, r7
 800d98c:	2000      	movs	r0, #0
 800d98e:	f7f2 ff5d 	bl	800084c <__aeabi_ddiv>
 800d992:	e79c      	b.n	800d8ce <__ieee754_pow+0x3e>
 800d994:	2300      	movs	r3, #0
 800d996:	9304      	str	r3, [sp, #16]
 800d998:	2a00      	cmp	r2, #0
 800d99a:	d13d      	bne.n	800da18 <__ieee754_pow+0x188>
 800d99c:	4b51      	ldr	r3, [pc, #324]	; (800dae4 <__ieee754_pow+0x254>)
 800d99e:	4598      	cmp	r8, r3
 800d9a0:	d1ea      	bne.n	800d978 <__ieee754_pow+0xe8>
 800d9a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d9a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d9aa:	ea53 030a 	orrs.w	r3, r3, sl
 800d9ae:	f000 8459 	beq.w	800e264 <__ieee754_pow+0x9d4>
 800d9b2:	4b4f      	ldr	r3, [pc, #316]	; (800daf0 <__ieee754_pow+0x260>)
 800d9b4:	429c      	cmp	r4, r3
 800d9b6:	dd08      	ble.n	800d9ca <__ieee754_pow+0x13a>
 800d9b8:	f1b9 0f00 	cmp.w	r9, #0
 800d9bc:	f2c0 8456 	blt.w	800e26c <__ieee754_pow+0x9dc>
 800d9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9c4:	e783      	b.n	800d8ce <__ieee754_pow+0x3e>
 800d9c6:	2302      	movs	r3, #2
 800d9c8:	e7e5      	b.n	800d996 <__ieee754_pow+0x106>
 800d9ca:	f1b9 0f00 	cmp.w	r9, #0
 800d9ce:	f04f 0000 	mov.w	r0, #0
 800d9d2:	f04f 0100 	mov.w	r1, #0
 800d9d6:	f6bf af7a 	bge.w	800d8ce <__ieee754_pow+0x3e>
 800d9da:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d9de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d9e2:	e774      	b.n	800d8ce <__ieee754_pow+0x3e>
 800d9e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d9e8:	d106      	bne.n	800d9f8 <__ieee754_pow+0x168>
 800d9ea:	4632      	mov	r2, r6
 800d9ec:	463b      	mov	r3, r7
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	4639      	mov	r1, r7
 800d9f2:	f7f2 fe01 	bl	80005f8 <__aeabi_dmul>
 800d9f6:	e76a      	b.n	800d8ce <__ieee754_pow+0x3e>
 800d9f8:	4b3e      	ldr	r3, [pc, #248]	; (800daf4 <__ieee754_pow+0x264>)
 800d9fa:	4599      	cmp	r9, r3
 800d9fc:	d10c      	bne.n	800da18 <__ieee754_pow+0x188>
 800d9fe:	2d00      	cmp	r5, #0
 800da00:	db0a      	blt.n	800da18 <__ieee754_pow+0x188>
 800da02:	ec47 6b10 	vmov	d0, r6, r7
 800da06:	b009      	add	sp, #36	; 0x24
 800da08:	ecbd 8b06 	vpop	{d8-d10}
 800da0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da10:	f7ff be62 	b.w	800d6d8 <__ieee754_sqrt>
 800da14:	2300      	movs	r3, #0
 800da16:	9304      	str	r3, [sp, #16]
 800da18:	ec47 6b10 	vmov	d0, r6, r7
 800da1c:	f7ff fe48 	bl	800d6b0 <fabs>
 800da20:	ec51 0b10 	vmov	r0, r1, d0
 800da24:	f1ba 0f00 	cmp.w	sl, #0
 800da28:	d129      	bne.n	800da7e <__ieee754_pow+0x1ee>
 800da2a:	b124      	cbz	r4, 800da36 <__ieee754_pow+0x1a6>
 800da2c:	4b2f      	ldr	r3, [pc, #188]	; (800daec <__ieee754_pow+0x25c>)
 800da2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800da32:	429a      	cmp	r2, r3
 800da34:	d123      	bne.n	800da7e <__ieee754_pow+0x1ee>
 800da36:	f1b9 0f00 	cmp.w	r9, #0
 800da3a:	da05      	bge.n	800da48 <__ieee754_pow+0x1b8>
 800da3c:	4602      	mov	r2, r0
 800da3e:	460b      	mov	r3, r1
 800da40:	2000      	movs	r0, #0
 800da42:	492a      	ldr	r1, [pc, #168]	; (800daec <__ieee754_pow+0x25c>)
 800da44:	f7f2 ff02 	bl	800084c <__aeabi_ddiv>
 800da48:	2d00      	cmp	r5, #0
 800da4a:	f6bf af40 	bge.w	800d8ce <__ieee754_pow+0x3e>
 800da4e:	9b04      	ldr	r3, [sp, #16]
 800da50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800da54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800da58:	431c      	orrs	r4, r3
 800da5a:	d108      	bne.n	800da6e <__ieee754_pow+0x1de>
 800da5c:	4602      	mov	r2, r0
 800da5e:	460b      	mov	r3, r1
 800da60:	4610      	mov	r0, r2
 800da62:	4619      	mov	r1, r3
 800da64:	f7f2 fc10 	bl	8000288 <__aeabi_dsub>
 800da68:	4602      	mov	r2, r0
 800da6a:	460b      	mov	r3, r1
 800da6c:	e78f      	b.n	800d98e <__ieee754_pow+0xfe>
 800da6e:	9b04      	ldr	r3, [sp, #16]
 800da70:	2b01      	cmp	r3, #1
 800da72:	f47f af2c 	bne.w	800d8ce <__ieee754_pow+0x3e>
 800da76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da7a:	4619      	mov	r1, r3
 800da7c:	e727      	b.n	800d8ce <__ieee754_pow+0x3e>
 800da7e:	0feb      	lsrs	r3, r5, #31
 800da80:	3b01      	subs	r3, #1
 800da82:	9306      	str	r3, [sp, #24]
 800da84:	9a06      	ldr	r2, [sp, #24]
 800da86:	9b04      	ldr	r3, [sp, #16]
 800da88:	4313      	orrs	r3, r2
 800da8a:	d102      	bne.n	800da92 <__ieee754_pow+0x202>
 800da8c:	4632      	mov	r2, r6
 800da8e:	463b      	mov	r3, r7
 800da90:	e7e6      	b.n	800da60 <__ieee754_pow+0x1d0>
 800da92:	4b19      	ldr	r3, [pc, #100]	; (800daf8 <__ieee754_pow+0x268>)
 800da94:	4598      	cmp	r8, r3
 800da96:	f340 80fb 	ble.w	800dc90 <__ieee754_pow+0x400>
 800da9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800da9e:	4598      	cmp	r8, r3
 800daa0:	4b13      	ldr	r3, [pc, #76]	; (800daf0 <__ieee754_pow+0x260>)
 800daa2:	dd0c      	ble.n	800dabe <__ieee754_pow+0x22e>
 800daa4:	429c      	cmp	r4, r3
 800daa6:	dc0f      	bgt.n	800dac8 <__ieee754_pow+0x238>
 800daa8:	f1b9 0f00 	cmp.w	r9, #0
 800daac:	da0f      	bge.n	800dace <__ieee754_pow+0x23e>
 800daae:	2000      	movs	r0, #0
 800dab0:	b009      	add	sp, #36	; 0x24
 800dab2:	ecbd 8b06 	vpop	{d8-d10}
 800dab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daba:	f000 bcba 	b.w	800e432 <__math_oflow>
 800dabe:	429c      	cmp	r4, r3
 800dac0:	dbf2      	blt.n	800daa8 <__ieee754_pow+0x218>
 800dac2:	4b0a      	ldr	r3, [pc, #40]	; (800daec <__ieee754_pow+0x25c>)
 800dac4:	429c      	cmp	r4, r3
 800dac6:	dd19      	ble.n	800dafc <__ieee754_pow+0x26c>
 800dac8:	f1b9 0f00 	cmp.w	r9, #0
 800dacc:	dcef      	bgt.n	800daae <__ieee754_pow+0x21e>
 800dace:	2000      	movs	r0, #0
 800dad0:	b009      	add	sp, #36	; 0x24
 800dad2:	ecbd 8b06 	vpop	{d8-d10}
 800dad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dada:	f000 bca1 	b.w	800e420 <__math_uflow>
 800dade:	bf00      	nop
 800dae0:	fff00000 	.word	0xfff00000
 800dae4:	7ff00000 	.word	0x7ff00000
 800dae8:	433fffff 	.word	0x433fffff
 800daec:	3ff00000 	.word	0x3ff00000
 800daf0:	3fefffff 	.word	0x3fefffff
 800daf4:	3fe00000 	.word	0x3fe00000
 800daf8:	41e00000 	.word	0x41e00000
 800dafc:	4b60      	ldr	r3, [pc, #384]	; (800dc80 <__ieee754_pow+0x3f0>)
 800dafe:	2200      	movs	r2, #0
 800db00:	f7f2 fbc2 	bl	8000288 <__aeabi_dsub>
 800db04:	a354      	add	r3, pc, #336	; (adr r3, 800dc58 <__ieee754_pow+0x3c8>)
 800db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0a:	4604      	mov	r4, r0
 800db0c:	460d      	mov	r5, r1
 800db0e:	f7f2 fd73 	bl	80005f8 <__aeabi_dmul>
 800db12:	a353      	add	r3, pc, #332	; (adr r3, 800dc60 <__ieee754_pow+0x3d0>)
 800db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db18:	4606      	mov	r6, r0
 800db1a:	460f      	mov	r7, r1
 800db1c:	4620      	mov	r0, r4
 800db1e:	4629      	mov	r1, r5
 800db20:	f7f2 fd6a 	bl	80005f8 <__aeabi_dmul>
 800db24:	4b57      	ldr	r3, [pc, #348]	; (800dc84 <__ieee754_pow+0x3f4>)
 800db26:	4682      	mov	sl, r0
 800db28:	468b      	mov	fp, r1
 800db2a:	2200      	movs	r2, #0
 800db2c:	4620      	mov	r0, r4
 800db2e:	4629      	mov	r1, r5
 800db30:	f7f2 fd62 	bl	80005f8 <__aeabi_dmul>
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	a14b      	add	r1, pc, #300	; (adr r1, 800dc68 <__ieee754_pow+0x3d8>)
 800db3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db3e:	f7f2 fba3 	bl	8000288 <__aeabi_dsub>
 800db42:	4622      	mov	r2, r4
 800db44:	462b      	mov	r3, r5
 800db46:	f7f2 fd57 	bl	80005f8 <__aeabi_dmul>
 800db4a:	4602      	mov	r2, r0
 800db4c:	460b      	mov	r3, r1
 800db4e:	2000      	movs	r0, #0
 800db50:	494d      	ldr	r1, [pc, #308]	; (800dc88 <__ieee754_pow+0x3f8>)
 800db52:	f7f2 fb99 	bl	8000288 <__aeabi_dsub>
 800db56:	4622      	mov	r2, r4
 800db58:	4680      	mov	r8, r0
 800db5a:	4689      	mov	r9, r1
 800db5c:	462b      	mov	r3, r5
 800db5e:	4620      	mov	r0, r4
 800db60:	4629      	mov	r1, r5
 800db62:	f7f2 fd49 	bl	80005f8 <__aeabi_dmul>
 800db66:	4602      	mov	r2, r0
 800db68:	460b      	mov	r3, r1
 800db6a:	4640      	mov	r0, r8
 800db6c:	4649      	mov	r1, r9
 800db6e:	f7f2 fd43 	bl	80005f8 <__aeabi_dmul>
 800db72:	a33f      	add	r3, pc, #252	; (adr r3, 800dc70 <__ieee754_pow+0x3e0>)
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	f7f2 fd3e 	bl	80005f8 <__aeabi_dmul>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4650      	mov	r0, sl
 800db82:	4659      	mov	r1, fp
 800db84:	f7f2 fb80 	bl	8000288 <__aeabi_dsub>
 800db88:	4602      	mov	r2, r0
 800db8a:	460b      	mov	r3, r1
 800db8c:	4680      	mov	r8, r0
 800db8e:	4689      	mov	r9, r1
 800db90:	4630      	mov	r0, r6
 800db92:	4639      	mov	r1, r7
 800db94:	f7f2 fb7a 	bl	800028c <__adddf3>
 800db98:	2000      	movs	r0, #0
 800db9a:	4632      	mov	r2, r6
 800db9c:	463b      	mov	r3, r7
 800db9e:	4604      	mov	r4, r0
 800dba0:	460d      	mov	r5, r1
 800dba2:	f7f2 fb71 	bl	8000288 <__aeabi_dsub>
 800dba6:	4602      	mov	r2, r0
 800dba8:	460b      	mov	r3, r1
 800dbaa:	4640      	mov	r0, r8
 800dbac:	4649      	mov	r1, r9
 800dbae:	f7f2 fb6b 	bl	8000288 <__aeabi_dsub>
 800dbb2:	9b04      	ldr	r3, [sp, #16]
 800dbb4:	9a06      	ldr	r2, [sp, #24]
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	4682      	mov	sl, r0
 800dbbc:	468b      	mov	fp, r1
 800dbbe:	f040 81e7 	bne.w	800df90 <__ieee754_pow+0x700>
 800dbc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800dc78 <__ieee754_pow+0x3e8>
 800dbc6:	eeb0 8a47 	vmov.f32	s16, s14
 800dbca:	eef0 8a67 	vmov.f32	s17, s15
 800dbce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dbd2:	2600      	movs	r6, #0
 800dbd4:	4632      	mov	r2, r6
 800dbd6:	463b      	mov	r3, r7
 800dbd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbdc:	f7f2 fb54 	bl	8000288 <__aeabi_dsub>
 800dbe0:	4622      	mov	r2, r4
 800dbe2:	462b      	mov	r3, r5
 800dbe4:	f7f2 fd08 	bl	80005f8 <__aeabi_dmul>
 800dbe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbec:	4680      	mov	r8, r0
 800dbee:	4689      	mov	r9, r1
 800dbf0:	4650      	mov	r0, sl
 800dbf2:	4659      	mov	r1, fp
 800dbf4:	f7f2 fd00 	bl	80005f8 <__aeabi_dmul>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	4640      	mov	r0, r8
 800dbfe:	4649      	mov	r1, r9
 800dc00:	f7f2 fb44 	bl	800028c <__adddf3>
 800dc04:	4632      	mov	r2, r6
 800dc06:	463b      	mov	r3, r7
 800dc08:	4680      	mov	r8, r0
 800dc0a:	4689      	mov	r9, r1
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	4629      	mov	r1, r5
 800dc10:	f7f2 fcf2 	bl	80005f8 <__aeabi_dmul>
 800dc14:	460b      	mov	r3, r1
 800dc16:	4604      	mov	r4, r0
 800dc18:	460d      	mov	r5, r1
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	4640      	mov	r0, r8
 800dc20:	f7f2 fb34 	bl	800028c <__adddf3>
 800dc24:	4b19      	ldr	r3, [pc, #100]	; (800dc8c <__ieee754_pow+0x3fc>)
 800dc26:	4299      	cmp	r1, r3
 800dc28:	ec45 4b19 	vmov	d9, r4, r5
 800dc2c:	4606      	mov	r6, r0
 800dc2e:	460f      	mov	r7, r1
 800dc30:	468b      	mov	fp, r1
 800dc32:	f340 82f0 	ble.w	800e216 <__ieee754_pow+0x986>
 800dc36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dc3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dc3e:	4303      	orrs	r3, r0
 800dc40:	f000 81e4 	beq.w	800e00c <__ieee754_pow+0x77c>
 800dc44:	ec51 0b18 	vmov	r0, r1, d8
 800dc48:	2200      	movs	r2, #0
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	f7f2 ff46 	bl	8000adc <__aeabi_dcmplt>
 800dc50:	3800      	subs	r0, #0
 800dc52:	bf18      	it	ne
 800dc54:	2001      	movne	r0, #1
 800dc56:	e72b      	b.n	800dab0 <__ieee754_pow+0x220>
 800dc58:	60000000 	.word	0x60000000
 800dc5c:	3ff71547 	.word	0x3ff71547
 800dc60:	f85ddf44 	.word	0xf85ddf44
 800dc64:	3e54ae0b 	.word	0x3e54ae0b
 800dc68:	55555555 	.word	0x55555555
 800dc6c:	3fd55555 	.word	0x3fd55555
 800dc70:	652b82fe 	.word	0x652b82fe
 800dc74:	3ff71547 	.word	0x3ff71547
 800dc78:	00000000 	.word	0x00000000
 800dc7c:	bff00000 	.word	0xbff00000
 800dc80:	3ff00000 	.word	0x3ff00000
 800dc84:	3fd00000 	.word	0x3fd00000
 800dc88:	3fe00000 	.word	0x3fe00000
 800dc8c:	408fffff 	.word	0x408fffff
 800dc90:	4bd5      	ldr	r3, [pc, #852]	; (800dfe8 <__ieee754_pow+0x758>)
 800dc92:	402b      	ands	r3, r5
 800dc94:	2200      	movs	r2, #0
 800dc96:	b92b      	cbnz	r3, 800dca4 <__ieee754_pow+0x414>
 800dc98:	4bd4      	ldr	r3, [pc, #848]	; (800dfec <__ieee754_pow+0x75c>)
 800dc9a:	f7f2 fcad 	bl	80005f8 <__aeabi_dmul>
 800dc9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800dca2:	460c      	mov	r4, r1
 800dca4:	1523      	asrs	r3, r4, #20
 800dca6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dcaa:	4413      	add	r3, r2
 800dcac:	9305      	str	r3, [sp, #20]
 800dcae:	4bd0      	ldr	r3, [pc, #832]	; (800dff0 <__ieee754_pow+0x760>)
 800dcb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dcb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800dcb8:	429c      	cmp	r4, r3
 800dcba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dcbe:	dd08      	ble.n	800dcd2 <__ieee754_pow+0x442>
 800dcc0:	4bcc      	ldr	r3, [pc, #816]	; (800dff4 <__ieee754_pow+0x764>)
 800dcc2:	429c      	cmp	r4, r3
 800dcc4:	f340 8162 	ble.w	800df8c <__ieee754_pow+0x6fc>
 800dcc8:	9b05      	ldr	r3, [sp, #20]
 800dcca:	3301      	adds	r3, #1
 800dccc:	9305      	str	r3, [sp, #20]
 800dcce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800dcd2:	2400      	movs	r4, #0
 800dcd4:	00e3      	lsls	r3, r4, #3
 800dcd6:	9307      	str	r3, [sp, #28]
 800dcd8:	4bc7      	ldr	r3, [pc, #796]	; (800dff8 <__ieee754_pow+0x768>)
 800dcda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dcde:	ed93 7b00 	vldr	d7, [r3]
 800dce2:	4629      	mov	r1, r5
 800dce4:	ec53 2b17 	vmov	r2, r3, d7
 800dce8:	eeb0 9a47 	vmov.f32	s18, s14
 800dcec:	eef0 9a67 	vmov.f32	s19, s15
 800dcf0:	4682      	mov	sl, r0
 800dcf2:	f7f2 fac9 	bl	8000288 <__aeabi_dsub>
 800dcf6:	4652      	mov	r2, sl
 800dcf8:	4606      	mov	r6, r0
 800dcfa:	460f      	mov	r7, r1
 800dcfc:	462b      	mov	r3, r5
 800dcfe:	ec51 0b19 	vmov	r0, r1, d9
 800dd02:	f7f2 fac3 	bl	800028c <__adddf3>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	49bb      	ldr	r1, [pc, #748]	; (800dffc <__ieee754_pow+0x76c>)
 800dd0e:	f7f2 fd9d 	bl	800084c <__aeabi_ddiv>
 800dd12:	ec41 0b1a 	vmov	d10, r0, r1
 800dd16:	4602      	mov	r2, r0
 800dd18:	460b      	mov	r3, r1
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	4639      	mov	r1, r7
 800dd1e:	f7f2 fc6b 	bl	80005f8 <__aeabi_dmul>
 800dd22:	2300      	movs	r3, #0
 800dd24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd28:	9302      	str	r3, [sp, #8]
 800dd2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800dd2e:	46ab      	mov	fp, r5
 800dd30:	106d      	asrs	r5, r5, #1
 800dd32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800dd36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800dd3a:	ec41 0b18 	vmov	d8, r0, r1
 800dd3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800dd42:	2200      	movs	r2, #0
 800dd44:	4640      	mov	r0, r8
 800dd46:	4649      	mov	r1, r9
 800dd48:	4614      	mov	r4, r2
 800dd4a:	461d      	mov	r5, r3
 800dd4c:	f7f2 fc54 	bl	80005f8 <__aeabi_dmul>
 800dd50:	4602      	mov	r2, r0
 800dd52:	460b      	mov	r3, r1
 800dd54:	4630      	mov	r0, r6
 800dd56:	4639      	mov	r1, r7
 800dd58:	f7f2 fa96 	bl	8000288 <__aeabi_dsub>
 800dd5c:	ec53 2b19 	vmov	r2, r3, d9
 800dd60:	4606      	mov	r6, r0
 800dd62:	460f      	mov	r7, r1
 800dd64:	4620      	mov	r0, r4
 800dd66:	4629      	mov	r1, r5
 800dd68:	f7f2 fa8e 	bl	8000288 <__aeabi_dsub>
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4650      	mov	r0, sl
 800dd72:	4659      	mov	r1, fp
 800dd74:	f7f2 fa88 	bl	8000288 <__aeabi_dsub>
 800dd78:	4642      	mov	r2, r8
 800dd7a:	464b      	mov	r3, r9
 800dd7c:	f7f2 fc3c 	bl	80005f8 <__aeabi_dmul>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4630      	mov	r0, r6
 800dd86:	4639      	mov	r1, r7
 800dd88:	f7f2 fa7e 	bl	8000288 <__aeabi_dsub>
 800dd8c:	ec53 2b1a 	vmov	r2, r3, d10
 800dd90:	f7f2 fc32 	bl	80005f8 <__aeabi_dmul>
 800dd94:	ec53 2b18 	vmov	r2, r3, d8
 800dd98:	ec41 0b19 	vmov	d9, r0, r1
 800dd9c:	ec51 0b18 	vmov	r0, r1, d8
 800dda0:	f7f2 fc2a 	bl	80005f8 <__aeabi_dmul>
 800dda4:	a37c      	add	r3, pc, #496	; (adr r3, 800df98 <__ieee754_pow+0x708>)
 800dda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddaa:	4604      	mov	r4, r0
 800ddac:	460d      	mov	r5, r1
 800ddae:	f7f2 fc23 	bl	80005f8 <__aeabi_dmul>
 800ddb2:	a37b      	add	r3, pc, #492	; (adr r3, 800dfa0 <__ieee754_pow+0x710>)
 800ddb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb8:	f7f2 fa68 	bl	800028c <__adddf3>
 800ddbc:	4622      	mov	r2, r4
 800ddbe:	462b      	mov	r3, r5
 800ddc0:	f7f2 fc1a 	bl	80005f8 <__aeabi_dmul>
 800ddc4:	a378      	add	r3, pc, #480	; (adr r3, 800dfa8 <__ieee754_pow+0x718>)
 800ddc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddca:	f7f2 fa5f 	bl	800028c <__adddf3>
 800ddce:	4622      	mov	r2, r4
 800ddd0:	462b      	mov	r3, r5
 800ddd2:	f7f2 fc11 	bl	80005f8 <__aeabi_dmul>
 800ddd6:	a376      	add	r3, pc, #472	; (adr r3, 800dfb0 <__ieee754_pow+0x720>)
 800ddd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dddc:	f7f2 fa56 	bl	800028c <__adddf3>
 800dde0:	4622      	mov	r2, r4
 800dde2:	462b      	mov	r3, r5
 800dde4:	f7f2 fc08 	bl	80005f8 <__aeabi_dmul>
 800dde8:	a373      	add	r3, pc, #460	; (adr r3, 800dfb8 <__ieee754_pow+0x728>)
 800ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddee:	f7f2 fa4d 	bl	800028c <__adddf3>
 800ddf2:	4622      	mov	r2, r4
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	f7f2 fbff 	bl	80005f8 <__aeabi_dmul>
 800ddfa:	a371      	add	r3, pc, #452	; (adr r3, 800dfc0 <__ieee754_pow+0x730>)
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	f7f2 fa44 	bl	800028c <__adddf3>
 800de04:	4622      	mov	r2, r4
 800de06:	4606      	mov	r6, r0
 800de08:	460f      	mov	r7, r1
 800de0a:	462b      	mov	r3, r5
 800de0c:	4620      	mov	r0, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	f7f2 fbf2 	bl	80005f8 <__aeabi_dmul>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	4630      	mov	r0, r6
 800de1a:	4639      	mov	r1, r7
 800de1c:	f7f2 fbec 	bl	80005f8 <__aeabi_dmul>
 800de20:	4642      	mov	r2, r8
 800de22:	4604      	mov	r4, r0
 800de24:	460d      	mov	r5, r1
 800de26:	464b      	mov	r3, r9
 800de28:	ec51 0b18 	vmov	r0, r1, d8
 800de2c:	f7f2 fa2e 	bl	800028c <__adddf3>
 800de30:	ec53 2b19 	vmov	r2, r3, d9
 800de34:	f7f2 fbe0 	bl	80005f8 <__aeabi_dmul>
 800de38:	4622      	mov	r2, r4
 800de3a:	462b      	mov	r3, r5
 800de3c:	f7f2 fa26 	bl	800028c <__adddf3>
 800de40:	4642      	mov	r2, r8
 800de42:	4682      	mov	sl, r0
 800de44:	468b      	mov	fp, r1
 800de46:	464b      	mov	r3, r9
 800de48:	4640      	mov	r0, r8
 800de4a:	4649      	mov	r1, r9
 800de4c:	f7f2 fbd4 	bl	80005f8 <__aeabi_dmul>
 800de50:	4b6b      	ldr	r3, [pc, #428]	; (800e000 <__ieee754_pow+0x770>)
 800de52:	2200      	movs	r2, #0
 800de54:	4606      	mov	r6, r0
 800de56:	460f      	mov	r7, r1
 800de58:	f7f2 fa18 	bl	800028c <__adddf3>
 800de5c:	4652      	mov	r2, sl
 800de5e:	465b      	mov	r3, fp
 800de60:	f7f2 fa14 	bl	800028c <__adddf3>
 800de64:	2000      	movs	r0, #0
 800de66:	4604      	mov	r4, r0
 800de68:	460d      	mov	r5, r1
 800de6a:	4602      	mov	r2, r0
 800de6c:	460b      	mov	r3, r1
 800de6e:	4640      	mov	r0, r8
 800de70:	4649      	mov	r1, r9
 800de72:	f7f2 fbc1 	bl	80005f8 <__aeabi_dmul>
 800de76:	4b62      	ldr	r3, [pc, #392]	; (800e000 <__ieee754_pow+0x770>)
 800de78:	4680      	mov	r8, r0
 800de7a:	4689      	mov	r9, r1
 800de7c:	2200      	movs	r2, #0
 800de7e:	4620      	mov	r0, r4
 800de80:	4629      	mov	r1, r5
 800de82:	f7f2 fa01 	bl	8000288 <__aeabi_dsub>
 800de86:	4632      	mov	r2, r6
 800de88:	463b      	mov	r3, r7
 800de8a:	f7f2 f9fd 	bl	8000288 <__aeabi_dsub>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4650      	mov	r0, sl
 800de94:	4659      	mov	r1, fp
 800de96:	f7f2 f9f7 	bl	8000288 <__aeabi_dsub>
 800de9a:	ec53 2b18 	vmov	r2, r3, d8
 800de9e:	f7f2 fbab 	bl	80005f8 <__aeabi_dmul>
 800dea2:	4622      	mov	r2, r4
 800dea4:	4606      	mov	r6, r0
 800dea6:	460f      	mov	r7, r1
 800dea8:	462b      	mov	r3, r5
 800deaa:	ec51 0b19 	vmov	r0, r1, d9
 800deae:	f7f2 fba3 	bl	80005f8 <__aeabi_dmul>
 800deb2:	4602      	mov	r2, r0
 800deb4:	460b      	mov	r3, r1
 800deb6:	4630      	mov	r0, r6
 800deb8:	4639      	mov	r1, r7
 800deba:	f7f2 f9e7 	bl	800028c <__adddf3>
 800debe:	4606      	mov	r6, r0
 800dec0:	460f      	mov	r7, r1
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	4640      	mov	r0, r8
 800dec8:	4649      	mov	r1, r9
 800deca:	f7f2 f9df 	bl	800028c <__adddf3>
 800dece:	a33e      	add	r3, pc, #248	; (adr r3, 800dfc8 <__ieee754_pow+0x738>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	2000      	movs	r0, #0
 800ded6:	4604      	mov	r4, r0
 800ded8:	460d      	mov	r5, r1
 800deda:	f7f2 fb8d 	bl	80005f8 <__aeabi_dmul>
 800dede:	4642      	mov	r2, r8
 800dee0:	ec41 0b18 	vmov	d8, r0, r1
 800dee4:	464b      	mov	r3, r9
 800dee6:	4620      	mov	r0, r4
 800dee8:	4629      	mov	r1, r5
 800deea:	f7f2 f9cd 	bl	8000288 <__aeabi_dsub>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4630      	mov	r0, r6
 800def4:	4639      	mov	r1, r7
 800def6:	f7f2 f9c7 	bl	8000288 <__aeabi_dsub>
 800defa:	a335      	add	r3, pc, #212	; (adr r3, 800dfd0 <__ieee754_pow+0x740>)
 800defc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df00:	f7f2 fb7a 	bl	80005f8 <__aeabi_dmul>
 800df04:	a334      	add	r3, pc, #208	; (adr r3, 800dfd8 <__ieee754_pow+0x748>)
 800df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0a:	4606      	mov	r6, r0
 800df0c:	460f      	mov	r7, r1
 800df0e:	4620      	mov	r0, r4
 800df10:	4629      	mov	r1, r5
 800df12:	f7f2 fb71 	bl	80005f8 <__aeabi_dmul>
 800df16:	4602      	mov	r2, r0
 800df18:	460b      	mov	r3, r1
 800df1a:	4630      	mov	r0, r6
 800df1c:	4639      	mov	r1, r7
 800df1e:	f7f2 f9b5 	bl	800028c <__adddf3>
 800df22:	9a07      	ldr	r2, [sp, #28]
 800df24:	4b37      	ldr	r3, [pc, #220]	; (800e004 <__ieee754_pow+0x774>)
 800df26:	4413      	add	r3, r2
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	f7f2 f9ae 	bl	800028c <__adddf3>
 800df30:	4682      	mov	sl, r0
 800df32:	9805      	ldr	r0, [sp, #20]
 800df34:	468b      	mov	fp, r1
 800df36:	f7f2 faf5 	bl	8000524 <__aeabi_i2d>
 800df3a:	9a07      	ldr	r2, [sp, #28]
 800df3c:	4b32      	ldr	r3, [pc, #200]	; (800e008 <__ieee754_pow+0x778>)
 800df3e:	4413      	add	r3, r2
 800df40:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df44:	4606      	mov	r6, r0
 800df46:	460f      	mov	r7, r1
 800df48:	4652      	mov	r2, sl
 800df4a:	465b      	mov	r3, fp
 800df4c:	ec51 0b18 	vmov	r0, r1, d8
 800df50:	f7f2 f99c 	bl	800028c <__adddf3>
 800df54:	4642      	mov	r2, r8
 800df56:	464b      	mov	r3, r9
 800df58:	f7f2 f998 	bl	800028c <__adddf3>
 800df5c:	4632      	mov	r2, r6
 800df5e:	463b      	mov	r3, r7
 800df60:	f7f2 f994 	bl	800028c <__adddf3>
 800df64:	2000      	movs	r0, #0
 800df66:	4632      	mov	r2, r6
 800df68:	463b      	mov	r3, r7
 800df6a:	4604      	mov	r4, r0
 800df6c:	460d      	mov	r5, r1
 800df6e:	f7f2 f98b 	bl	8000288 <__aeabi_dsub>
 800df72:	4642      	mov	r2, r8
 800df74:	464b      	mov	r3, r9
 800df76:	f7f2 f987 	bl	8000288 <__aeabi_dsub>
 800df7a:	ec53 2b18 	vmov	r2, r3, d8
 800df7e:	f7f2 f983 	bl	8000288 <__aeabi_dsub>
 800df82:	4602      	mov	r2, r0
 800df84:	460b      	mov	r3, r1
 800df86:	4650      	mov	r0, sl
 800df88:	4659      	mov	r1, fp
 800df8a:	e610      	b.n	800dbae <__ieee754_pow+0x31e>
 800df8c:	2401      	movs	r4, #1
 800df8e:	e6a1      	b.n	800dcd4 <__ieee754_pow+0x444>
 800df90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800dfe0 <__ieee754_pow+0x750>
 800df94:	e617      	b.n	800dbc6 <__ieee754_pow+0x336>
 800df96:	bf00      	nop
 800df98:	4a454eef 	.word	0x4a454eef
 800df9c:	3fca7e28 	.word	0x3fca7e28
 800dfa0:	93c9db65 	.word	0x93c9db65
 800dfa4:	3fcd864a 	.word	0x3fcd864a
 800dfa8:	a91d4101 	.word	0xa91d4101
 800dfac:	3fd17460 	.word	0x3fd17460
 800dfb0:	518f264d 	.word	0x518f264d
 800dfb4:	3fd55555 	.word	0x3fd55555
 800dfb8:	db6fabff 	.word	0xdb6fabff
 800dfbc:	3fdb6db6 	.word	0x3fdb6db6
 800dfc0:	33333303 	.word	0x33333303
 800dfc4:	3fe33333 	.word	0x3fe33333
 800dfc8:	e0000000 	.word	0xe0000000
 800dfcc:	3feec709 	.word	0x3feec709
 800dfd0:	dc3a03fd 	.word	0xdc3a03fd
 800dfd4:	3feec709 	.word	0x3feec709
 800dfd8:	145b01f5 	.word	0x145b01f5
 800dfdc:	be3e2fe0 	.word	0xbe3e2fe0
 800dfe0:	00000000 	.word	0x00000000
 800dfe4:	3ff00000 	.word	0x3ff00000
 800dfe8:	7ff00000 	.word	0x7ff00000
 800dfec:	43400000 	.word	0x43400000
 800dff0:	0003988e 	.word	0x0003988e
 800dff4:	000bb679 	.word	0x000bb679
 800dff8:	0800e988 	.word	0x0800e988
 800dffc:	3ff00000 	.word	0x3ff00000
 800e000:	40080000 	.word	0x40080000
 800e004:	0800e9a8 	.word	0x0800e9a8
 800e008:	0800e998 	.word	0x0800e998
 800e00c:	a3b3      	add	r3, pc, #716	; (adr r3, 800e2dc <__ieee754_pow+0xa4c>)
 800e00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e012:	4640      	mov	r0, r8
 800e014:	4649      	mov	r1, r9
 800e016:	f7f2 f939 	bl	800028c <__adddf3>
 800e01a:	4622      	mov	r2, r4
 800e01c:	ec41 0b1a 	vmov	d10, r0, r1
 800e020:	462b      	mov	r3, r5
 800e022:	4630      	mov	r0, r6
 800e024:	4639      	mov	r1, r7
 800e026:	f7f2 f92f 	bl	8000288 <__aeabi_dsub>
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	ec51 0b1a 	vmov	r0, r1, d10
 800e032:	f7f2 fd71 	bl	8000b18 <__aeabi_dcmpgt>
 800e036:	2800      	cmp	r0, #0
 800e038:	f47f ae04 	bne.w	800dc44 <__ieee754_pow+0x3b4>
 800e03c:	4aa2      	ldr	r2, [pc, #648]	; (800e2c8 <__ieee754_pow+0xa38>)
 800e03e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e042:	4293      	cmp	r3, r2
 800e044:	f340 8107 	ble.w	800e256 <__ieee754_pow+0x9c6>
 800e048:	151b      	asrs	r3, r3, #20
 800e04a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e04e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e052:	fa4a fa03 	asr.w	sl, sl, r3
 800e056:	44da      	add	sl, fp
 800e058:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e05c:	489b      	ldr	r0, [pc, #620]	; (800e2cc <__ieee754_pow+0xa3c>)
 800e05e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e062:	4108      	asrs	r0, r1
 800e064:	ea00 030a 	and.w	r3, r0, sl
 800e068:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e06c:	f1c1 0114 	rsb	r1, r1, #20
 800e070:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e074:	fa4a fa01 	asr.w	sl, sl, r1
 800e078:	f1bb 0f00 	cmp.w	fp, #0
 800e07c:	f04f 0200 	mov.w	r2, #0
 800e080:	4620      	mov	r0, r4
 800e082:	4629      	mov	r1, r5
 800e084:	bfb8      	it	lt
 800e086:	f1ca 0a00 	rsblt	sl, sl, #0
 800e08a:	f7f2 f8fd 	bl	8000288 <__aeabi_dsub>
 800e08e:	ec41 0b19 	vmov	d9, r0, r1
 800e092:	4642      	mov	r2, r8
 800e094:	464b      	mov	r3, r9
 800e096:	ec51 0b19 	vmov	r0, r1, d9
 800e09a:	f7f2 f8f7 	bl	800028c <__adddf3>
 800e09e:	a37a      	add	r3, pc, #488	; (adr r3, 800e288 <__ieee754_pow+0x9f8>)
 800e0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	460d      	mov	r5, r1
 800e0aa:	f7f2 faa5 	bl	80005f8 <__aeabi_dmul>
 800e0ae:	ec53 2b19 	vmov	r2, r3, d9
 800e0b2:	4606      	mov	r6, r0
 800e0b4:	460f      	mov	r7, r1
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	f7f2 f8e5 	bl	8000288 <__aeabi_dsub>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	4640      	mov	r0, r8
 800e0c4:	4649      	mov	r1, r9
 800e0c6:	f7f2 f8df 	bl	8000288 <__aeabi_dsub>
 800e0ca:	a371      	add	r3, pc, #452	; (adr r3, 800e290 <__ieee754_pow+0xa00>)
 800e0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d0:	f7f2 fa92 	bl	80005f8 <__aeabi_dmul>
 800e0d4:	a370      	add	r3, pc, #448	; (adr r3, 800e298 <__ieee754_pow+0xa08>)
 800e0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0da:	4680      	mov	r8, r0
 800e0dc:	4689      	mov	r9, r1
 800e0de:	4620      	mov	r0, r4
 800e0e0:	4629      	mov	r1, r5
 800e0e2:	f7f2 fa89 	bl	80005f8 <__aeabi_dmul>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	f7f2 f8cd 	bl	800028c <__adddf3>
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	460d      	mov	r5, r1
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	4639      	mov	r1, r7
 800e0fe:	f7f2 f8c5 	bl	800028c <__adddf3>
 800e102:	4632      	mov	r2, r6
 800e104:	463b      	mov	r3, r7
 800e106:	4680      	mov	r8, r0
 800e108:	4689      	mov	r9, r1
 800e10a:	f7f2 f8bd 	bl	8000288 <__aeabi_dsub>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	4620      	mov	r0, r4
 800e114:	4629      	mov	r1, r5
 800e116:	f7f2 f8b7 	bl	8000288 <__aeabi_dsub>
 800e11a:	4642      	mov	r2, r8
 800e11c:	4606      	mov	r6, r0
 800e11e:	460f      	mov	r7, r1
 800e120:	464b      	mov	r3, r9
 800e122:	4640      	mov	r0, r8
 800e124:	4649      	mov	r1, r9
 800e126:	f7f2 fa67 	bl	80005f8 <__aeabi_dmul>
 800e12a:	a35d      	add	r3, pc, #372	; (adr r3, 800e2a0 <__ieee754_pow+0xa10>)
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	4604      	mov	r4, r0
 800e132:	460d      	mov	r5, r1
 800e134:	f7f2 fa60 	bl	80005f8 <__aeabi_dmul>
 800e138:	a35b      	add	r3, pc, #364	; (adr r3, 800e2a8 <__ieee754_pow+0xa18>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	f7f2 f8a3 	bl	8000288 <__aeabi_dsub>
 800e142:	4622      	mov	r2, r4
 800e144:	462b      	mov	r3, r5
 800e146:	f7f2 fa57 	bl	80005f8 <__aeabi_dmul>
 800e14a:	a359      	add	r3, pc, #356	; (adr r3, 800e2b0 <__ieee754_pow+0xa20>)
 800e14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e150:	f7f2 f89c 	bl	800028c <__adddf3>
 800e154:	4622      	mov	r2, r4
 800e156:	462b      	mov	r3, r5
 800e158:	f7f2 fa4e 	bl	80005f8 <__aeabi_dmul>
 800e15c:	a356      	add	r3, pc, #344	; (adr r3, 800e2b8 <__ieee754_pow+0xa28>)
 800e15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e162:	f7f2 f891 	bl	8000288 <__aeabi_dsub>
 800e166:	4622      	mov	r2, r4
 800e168:	462b      	mov	r3, r5
 800e16a:	f7f2 fa45 	bl	80005f8 <__aeabi_dmul>
 800e16e:	a354      	add	r3, pc, #336	; (adr r3, 800e2c0 <__ieee754_pow+0xa30>)
 800e170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e174:	f7f2 f88a 	bl	800028c <__adddf3>
 800e178:	4622      	mov	r2, r4
 800e17a:	462b      	mov	r3, r5
 800e17c:	f7f2 fa3c 	bl	80005f8 <__aeabi_dmul>
 800e180:	4602      	mov	r2, r0
 800e182:	460b      	mov	r3, r1
 800e184:	4640      	mov	r0, r8
 800e186:	4649      	mov	r1, r9
 800e188:	f7f2 f87e 	bl	8000288 <__aeabi_dsub>
 800e18c:	4604      	mov	r4, r0
 800e18e:	460d      	mov	r5, r1
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	4640      	mov	r0, r8
 800e196:	4649      	mov	r1, r9
 800e198:	f7f2 fa2e 	bl	80005f8 <__aeabi_dmul>
 800e19c:	2200      	movs	r2, #0
 800e19e:	ec41 0b19 	vmov	d9, r0, r1
 800e1a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7f2 f86d 	bl	8000288 <__aeabi_dsub>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	ec51 0b19 	vmov	r0, r1, d9
 800e1b6:	f7f2 fb49 	bl	800084c <__aeabi_ddiv>
 800e1ba:	4632      	mov	r2, r6
 800e1bc:	4604      	mov	r4, r0
 800e1be:	460d      	mov	r5, r1
 800e1c0:	463b      	mov	r3, r7
 800e1c2:	4640      	mov	r0, r8
 800e1c4:	4649      	mov	r1, r9
 800e1c6:	f7f2 fa17 	bl	80005f8 <__aeabi_dmul>
 800e1ca:	4632      	mov	r2, r6
 800e1cc:	463b      	mov	r3, r7
 800e1ce:	f7f2 f85d 	bl	800028c <__adddf3>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	4629      	mov	r1, r5
 800e1da:	f7f2 f855 	bl	8000288 <__aeabi_dsub>
 800e1de:	4642      	mov	r2, r8
 800e1e0:	464b      	mov	r3, r9
 800e1e2:	f7f2 f851 	bl	8000288 <__aeabi_dsub>
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	4939      	ldr	r1, [pc, #228]	; (800e2d0 <__ieee754_pow+0xa40>)
 800e1ec:	2000      	movs	r0, #0
 800e1ee:	f7f2 f84b 	bl	8000288 <__aeabi_dsub>
 800e1f2:	ec41 0b10 	vmov	d0, r0, r1
 800e1f6:	ee10 3a90 	vmov	r3, s1
 800e1fa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e1fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e202:	da2b      	bge.n	800e25c <__ieee754_pow+0x9cc>
 800e204:	4650      	mov	r0, sl
 800e206:	f000 f86f 	bl	800e2e8 <scalbn>
 800e20a:	ec51 0b10 	vmov	r0, r1, d0
 800e20e:	ec53 2b18 	vmov	r2, r3, d8
 800e212:	f7ff bbee 	b.w	800d9f2 <__ieee754_pow+0x162>
 800e216:	4b2f      	ldr	r3, [pc, #188]	; (800e2d4 <__ieee754_pow+0xa44>)
 800e218:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e21c:	429e      	cmp	r6, r3
 800e21e:	f77f af0d 	ble.w	800e03c <__ieee754_pow+0x7ac>
 800e222:	4b2d      	ldr	r3, [pc, #180]	; (800e2d8 <__ieee754_pow+0xa48>)
 800e224:	440b      	add	r3, r1
 800e226:	4303      	orrs	r3, r0
 800e228:	d009      	beq.n	800e23e <__ieee754_pow+0x9ae>
 800e22a:	ec51 0b18 	vmov	r0, r1, d8
 800e22e:	2200      	movs	r2, #0
 800e230:	2300      	movs	r3, #0
 800e232:	f7f2 fc53 	bl	8000adc <__aeabi_dcmplt>
 800e236:	3800      	subs	r0, #0
 800e238:	bf18      	it	ne
 800e23a:	2001      	movne	r0, #1
 800e23c:	e448      	b.n	800dad0 <__ieee754_pow+0x240>
 800e23e:	4622      	mov	r2, r4
 800e240:	462b      	mov	r3, r5
 800e242:	f7f2 f821 	bl	8000288 <__aeabi_dsub>
 800e246:	4642      	mov	r2, r8
 800e248:	464b      	mov	r3, r9
 800e24a:	f7f2 fc5b 	bl	8000b04 <__aeabi_dcmpge>
 800e24e:	2800      	cmp	r0, #0
 800e250:	f43f aef4 	beq.w	800e03c <__ieee754_pow+0x7ac>
 800e254:	e7e9      	b.n	800e22a <__ieee754_pow+0x99a>
 800e256:	f04f 0a00 	mov.w	sl, #0
 800e25a:	e71a      	b.n	800e092 <__ieee754_pow+0x802>
 800e25c:	ec51 0b10 	vmov	r0, r1, d0
 800e260:	4619      	mov	r1, r3
 800e262:	e7d4      	b.n	800e20e <__ieee754_pow+0x97e>
 800e264:	491a      	ldr	r1, [pc, #104]	; (800e2d0 <__ieee754_pow+0xa40>)
 800e266:	2000      	movs	r0, #0
 800e268:	f7ff bb31 	b.w	800d8ce <__ieee754_pow+0x3e>
 800e26c:	2000      	movs	r0, #0
 800e26e:	2100      	movs	r1, #0
 800e270:	f7ff bb2d 	b.w	800d8ce <__ieee754_pow+0x3e>
 800e274:	4630      	mov	r0, r6
 800e276:	4639      	mov	r1, r7
 800e278:	f7ff bb29 	b.w	800d8ce <__ieee754_pow+0x3e>
 800e27c:	9204      	str	r2, [sp, #16]
 800e27e:	f7ff bb7b 	b.w	800d978 <__ieee754_pow+0xe8>
 800e282:	2300      	movs	r3, #0
 800e284:	f7ff bb65 	b.w	800d952 <__ieee754_pow+0xc2>
 800e288:	00000000 	.word	0x00000000
 800e28c:	3fe62e43 	.word	0x3fe62e43
 800e290:	fefa39ef 	.word	0xfefa39ef
 800e294:	3fe62e42 	.word	0x3fe62e42
 800e298:	0ca86c39 	.word	0x0ca86c39
 800e29c:	be205c61 	.word	0xbe205c61
 800e2a0:	72bea4d0 	.word	0x72bea4d0
 800e2a4:	3e663769 	.word	0x3e663769
 800e2a8:	c5d26bf1 	.word	0xc5d26bf1
 800e2ac:	3ebbbd41 	.word	0x3ebbbd41
 800e2b0:	af25de2c 	.word	0xaf25de2c
 800e2b4:	3f11566a 	.word	0x3f11566a
 800e2b8:	16bebd93 	.word	0x16bebd93
 800e2bc:	3f66c16c 	.word	0x3f66c16c
 800e2c0:	5555553e 	.word	0x5555553e
 800e2c4:	3fc55555 	.word	0x3fc55555
 800e2c8:	3fe00000 	.word	0x3fe00000
 800e2cc:	fff00000 	.word	0xfff00000
 800e2d0:	3ff00000 	.word	0x3ff00000
 800e2d4:	4090cbff 	.word	0x4090cbff
 800e2d8:	3f6f3400 	.word	0x3f6f3400
 800e2dc:	652b82fe 	.word	0x652b82fe
 800e2e0:	3c971547 	.word	0x3c971547
 800e2e4:	00000000 	.word	0x00000000

0800e2e8 <scalbn>:
 800e2e8:	b570      	push	{r4, r5, r6, lr}
 800e2ea:	ec55 4b10 	vmov	r4, r5, d0
 800e2ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	462b      	mov	r3, r5
 800e2f6:	b999      	cbnz	r1, 800e320 <scalbn+0x38>
 800e2f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e2fc:	4323      	orrs	r3, r4
 800e2fe:	d03f      	beq.n	800e380 <scalbn+0x98>
 800e300:	4b35      	ldr	r3, [pc, #212]	; (800e3d8 <scalbn+0xf0>)
 800e302:	4629      	mov	r1, r5
 800e304:	ee10 0a10 	vmov	r0, s0
 800e308:	2200      	movs	r2, #0
 800e30a:	f7f2 f975 	bl	80005f8 <__aeabi_dmul>
 800e30e:	4b33      	ldr	r3, [pc, #204]	; (800e3dc <scalbn+0xf4>)
 800e310:	429e      	cmp	r6, r3
 800e312:	4604      	mov	r4, r0
 800e314:	460d      	mov	r5, r1
 800e316:	da10      	bge.n	800e33a <scalbn+0x52>
 800e318:	a327      	add	r3, pc, #156	; (adr r3, 800e3b8 <scalbn+0xd0>)
 800e31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31e:	e01f      	b.n	800e360 <scalbn+0x78>
 800e320:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e324:	4291      	cmp	r1, r2
 800e326:	d10c      	bne.n	800e342 <scalbn+0x5a>
 800e328:	ee10 2a10 	vmov	r2, s0
 800e32c:	4620      	mov	r0, r4
 800e32e:	4629      	mov	r1, r5
 800e330:	f7f1 ffac 	bl	800028c <__adddf3>
 800e334:	4604      	mov	r4, r0
 800e336:	460d      	mov	r5, r1
 800e338:	e022      	b.n	800e380 <scalbn+0x98>
 800e33a:	460b      	mov	r3, r1
 800e33c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e340:	3936      	subs	r1, #54	; 0x36
 800e342:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e346:	4296      	cmp	r6, r2
 800e348:	dd0d      	ble.n	800e366 <scalbn+0x7e>
 800e34a:	2d00      	cmp	r5, #0
 800e34c:	a11c      	add	r1, pc, #112	; (adr r1, 800e3c0 <scalbn+0xd8>)
 800e34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e352:	da02      	bge.n	800e35a <scalbn+0x72>
 800e354:	a11c      	add	r1, pc, #112	; (adr r1, 800e3c8 <scalbn+0xe0>)
 800e356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e35a:	a319      	add	r3, pc, #100	; (adr r3, 800e3c0 <scalbn+0xd8>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f7f2 f94a 	bl	80005f8 <__aeabi_dmul>
 800e364:	e7e6      	b.n	800e334 <scalbn+0x4c>
 800e366:	1872      	adds	r2, r6, r1
 800e368:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e36c:	428a      	cmp	r2, r1
 800e36e:	dcec      	bgt.n	800e34a <scalbn+0x62>
 800e370:	2a00      	cmp	r2, #0
 800e372:	dd08      	ble.n	800e386 <scalbn+0x9e>
 800e374:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e378:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e37c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e380:	ec45 4b10 	vmov	d0, r4, r5
 800e384:	bd70      	pop	{r4, r5, r6, pc}
 800e386:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e38a:	da08      	bge.n	800e39e <scalbn+0xb6>
 800e38c:	2d00      	cmp	r5, #0
 800e38e:	a10a      	add	r1, pc, #40	; (adr r1, 800e3b8 <scalbn+0xd0>)
 800e390:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e394:	dac0      	bge.n	800e318 <scalbn+0x30>
 800e396:	a10e      	add	r1, pc, #56	; (adr r1, 800e3d0 <scalbn+0xe8>)
 800e398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e39c:	e7bc      	b.n	800e318 <scalbn+0x30>
 800e39e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e3a2:	3236      	adds	r2, #54	; 0x36
 800e3a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e3a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	4b0c      	ldr	r3, [pc, #48]	; (800e3e0 <scalbn+0xf8>)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	e7d5      	b.n	800e360 <scalbn+0x78>
 800e3b4:	f3af 8000 	nop.w
 800e3b8:	c2f8f359 	.word	0xc2f8f359
 800e3bc:	01a56e1f 	.word	0x01a56e1f
 800e3c0:	8800759c 	.word	0x8800759c
 800e3c4:	7e37e43c 	.word	0x7e37e43c
 800e3c8:	8800759c 	.word	0x8800759c
 800e3cc:	fe37e43c 	.word	0xfe37e43c
 800e3d0:	c2f8f359 	.word	0xc2f8f359
 800e3d4:	81a56e1f 	.word	0x81a56e1f
 800e3d8:	43500000 	.word	0x43500000
 800e3dc:	ffff3cb0 	.word	0xffff3cb0
 800e3e0:	3c900000 	.word	0x3c900000

0800e3e4 <with_errno>:
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	4616      	mov	r6, r2
 800e3ec:	f7fb fb3c 	bl	8009a68 <__errno>
 800e3f0:	4629      	mov	r1, r5
 800e3f2:	6006      	str	r6, [r0, #0]
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}

0800e3f8 <xflow>:
 800e3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3fa:	4614      	mov	r4, r2
 800e3fc:	461d      	mov	r5, r3
 800e3fe:	b108      	cbz	r0, 800e404 <xflow+0xc>
 800e400:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e404:	e9cd 2300 	strd	r2, r3, [sp]
 800e408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e40c:	4620      	mov	r0, r4
 800e40e:	4629      	mov	r1, r5
 800e410:	f7f2 f8f2 	bl	80005f8 <__aeabi_dmul>
 800e414:	2222      	movs	r2, #34	; 0x22
 800e416:	b003      	add	sp, #12
 800e418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e41c:	f7ff bfe2 	b.w	800e3e4 <with_errno>

0800e420 <__math_uflow>:
 800e420:	b508      	push	{r3, lr}
 800e422:	2200      	movs	r2, #0
 800e424:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e428:	f7ff ffe6 	bl	800e3f8 <xflow>
 800e42c:	ec41 0b10 	vmov	d0, r0, r1
 800e430:	bd08      	pop	{r3, pc}

0800e432 <__math_oflow>:
 800e432:	b508      	push	{r3, lr}
 800e434:	2200      	movs	r2, #0
 800e436:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e43a:	f7ff ffdd 	bl	800e3f8 <xflow>
 800e43e:	ec41 0b10 	vmov	d0, r0, r1
 800e442:	bd08      	pop	{r3, pc}

0800e444 <_init>:
 800e444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e446:	bf00      	nop
 800e448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e44a:	bc08      	pop	{r3}
 800e44c:	469e      	mov	lr, r3
 800e44e:	4770      	bx	lr

0800e450 <_fini>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	bf00      	nop
 800e454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e456:	bc08      	pop	{r3}
 800e458:	469e      	mov	lr, r3
 800e45a:	4770      	bx	lr
