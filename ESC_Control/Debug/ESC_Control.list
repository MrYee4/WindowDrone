
ESC_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006890  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006aa4  08006aa4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006aa4  08006aa4  00016aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aac  08006aac  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000005c  08006b10  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006b10  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b80  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002528  00000000  00000000  00033c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00036178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e62  00000000  00000000  000373d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ebe  00000000  00000000  00038232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014813  00000000  00000000  000600f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103b8b  00000000  00000000  00074903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005430  00000000  00000000  00178490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0017d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a08 	.word	0x08006a08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006a08 	.word	0x08006a08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t raw;
  char msg[10];
  TIMER_COUNT = 0;
 8000582:	4b42      	ldr	r3, [pc, #264]	; (800068c <main+0x110>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
  ESC_ON = 100;
 8000588:	4b41      	ldr	r3, [pc, #260]	; (8000690 <main+0x114>)
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fd41 	bl	8001014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f889 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fa4f 	bl	8000a38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fa1d 	bl	80009d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800059e:	f000 f8d5 	bl	800074c <MX_ADC1_Init>
  MX_TIM4_Init();
 80005a2:	f000 f999 	bl	80008d8 <MX_TIM4_Init>
  MX_TIM3_Init();
 80005a6:	f000 f947 	bl	8000838 <MX_TIM3_Init>
  MX_TIM16_Init();
 80005aa:	f000 f9ef 	bl	800098c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80005ae:	4839      	ldr	r0, [pc, #228]	; (8000694 <main+0x118>)
 80005b0:	f001 f8e0 	bl	8001774 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005b4:	2100      	movs	r1, #0
 80005b6:	4838      	ldr	r0, [pc, #224]	; (8000698 <main+0x11c>)
 80005b8:	f003 fef8 	bl	80043ac <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 80005bc:	4837      	ldr	r0, [pc, #220]	; (800069c <main+0x120>)
 80005be:	f003 fe2d 	bl	800421c <HAL_TIM_Base_Start_IT>
	// Test: Set GPIO pin high
	 *
	 */

	// Get ADC value
	HAL_ADC_Start(&hadc1);
 80005c2:	4834      	ldr	r0, [pc, #208]	; (8000694 <main+0x118>)
 80005c4:	f001 f8d6 	bl	8001774 <HAL_ADC_Start>
 	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005c8:	f04f 31ff 	mov.w	r1, #4294967295
 80005cc:	4831      	ldr	r0, [pc, #196]	; (8000694 <main+0x118>)
 80005ce:	f001 f98b 	bl	80018e8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 80005d2:	4830      	ldr	r0, [pc, #192]	; (8000694 <main+0x118>)
 80005d4:	f001 fa60 	bl	8001a98 <HAL_ADC_GetValue>
 80005d8:	4603      	mov	r3, r0
 80005da:	81fb      	strh	r3, [r7, #14]
	if (raw > 3319)
 80005dc:	89fb      	ldrh	r3, [r7, #14]
 80005de:	f640 42f7 	movw	r2, #3319	; 0xcf7
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d902      	bls.n	80005ec <main+0x70>
	{
	  raw = 3319;
 80005e6:	f640 43f7 	movw	r3, #3319	; 0xcf7
 80005ea:	81fb      	strh	r3, [r7, #14]
	}

	if (raw > 3000)
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d903      	bls.n	80005fe <main+0x82>
	{
		ESC_ON = 109;
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <main+0x114>)
 80005f8:	226d      	movs	r2, #109	; 0x6d
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e033      	b.n	8000666 <main+0xea>
	}
	else if (raw > 2500)
 80005fe:	89fb      	ldrh	r3, [r7, #14]
 8000600:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000604:	4293      	cmp	r3, r2
 8000606:	d903      	bls.n	8000610 <main+0x94>
	{
		ESC_ON = 108;
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <main+0x114>)
 800060a:	226c      	movs	r2, #108	; 0x6c
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e02a      	b.n	8000666 <main+0xea>
	}
	else if (raw > 2000)
 8000610:	89fb      	ldrh	r3, [r7, #14]
 8000612:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000616:	d903      	bls.n	8000620 <main+0xa4>
	{
		ESC_ON = 107;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <main+0x114>)
 800061a:	226b      	movs	r2, #107	; 0x6b
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e022      	b.n	8000666 <main+0xea>
	}
	else if (raw > 1500)
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000626:	4293      	cmp	r3, r2
 8000628:	d903      	bls.n	8000632 <main+0xb6>
	{
		ESC_ON = 106;
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <main+0x114>)
 800062c:	226a      	movs	r2, #106	; 0x6a
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e019      	b.n	8000666 <main+0xea>
	}
	else if (raw > 1000)
 8000632:	89fb      	ldrh	r3, [r7, #14]
 8000634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000638:	d903      	bls.n	8000642 <main+0xc6>
	{
		ESC_ON = 105;
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <main+0x114>)
 800063c:	2269      	movs	r2, #105	; 0x69
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e011      	b.n	8000666 <main+0xea>
	}
	else if (raw > 500)
 8000642:	89fb      	ldrh	r3, [r7, #14]
 8000644:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000648:	d903      	bls.n	8000652 <main+0xd6>
	{
		ESC_ON = 104;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <main+0x114>)
 800064c:	2268      	movs	r2, #104	; 0x68
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	e009      	b.n	8000666 <main+0xea>
	}
	else if (raw > 0)
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d003      	beq.n	8000660 <main+0xe4>
	{
		ESC_ON = 103;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <main+0x114>)
 800065a:	2267      	movs	r2, #103	; 0x67
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	e002      	b.n	8000666 <main+0xea>
	}
	else
	{
		ESC_ON = 100;
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <main+0x114>)
 8000662:	2264      	movs	r2, #100	; 0x64
 8000664:	701a      	strb	r2, [r3, #0]
	}

	// Convert to string and print
	sprintf(msg, "%hu\r\n", raw);
 8000666:	89fa      	ldrh	r2, [r7, #14]
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <main+0x124>)
 800066c:	4618      	mov	r0, r3
 800066e:	f005 fd27 	bl	80060c0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fdab 	bl	80001d0 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b29a      	uxth	r2, r3
 800067e:	1d39      	adds	r1, r7, #4
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <main+0x128>)
 8000686:	f004 ffc3 	bl	8005610 <HAL_UART_Transmit>
  {
 800068a:	e79a      	b.n	80005c2 <main+0x46>
 800068c:	20000249 	.word	0x20000249
 8000690:	20000248 	.word	0x20000248
 8000694:	20000078 	.word	0x20000078
 8000698:	20000128 	.word	0x20000128
 800069c:	20000174 	.word	0x20000174
 80006a0:	08006a20 	.word	0x08006a20
 80006a4:	200001c0 	.word	0x200001c0

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	; 0x58
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	; 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f005 fd22 	bl	8006100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ce:	f002 fa3b 	bl	8002b48 <HAL_PWREx_ControlVoltageScaling>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d8:	f000 fa64 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e6:	2310      	movs	r3, #16
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006f6:	230a      	movs	r3, #10
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fa72 	bl	8002bf4 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000716:	f000 fa45 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	2104      	movs	r1, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fe3a 	bl	80033ac <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073e:	f000 fa31 	bl	8000ba4 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	; 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800076e:	4b2f      	ldr	r3, [pc, #188]	; (800082c <MX_ADC1_Init+0xe0>)
 8000770:	4a2f      	ldr	r2, [pc, #188]	; (8000830 <MX_ADC1_Init+0xe4>)
 8000772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000774:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_ADC1_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_ADC1_Init+0xe0>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000780:	4b2a      	ldr	r3, [pc, #168]	; (800082c <MX_ADC1_Init+0xe0>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_ADC1_Init+0xe0>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <MX_ADC1_Init+0xe0>)
 800078e:	2204      	movs	r2, #4
 8000790:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_ADC1_Init+0xe0>)
 8000794:	2200      	movs	r2, #0
 8000796:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_ADC1_Init+0xe0>)
 800079a:	2200      	movs	r2, #0
 800079c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_ADC1_Init+0xe0>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_ADC1_Init+0xe0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_ADC1_Init+0xe0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b2:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ADC1_Init+0xe0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_ADC1_Init+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_ADC1_Init+0xe0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_ADC1_Init+0xe0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ce:	4817      	ldr	r0, [pc, #92]	; (800082c <MX_ADC1_Init+0xe0>)
 80007d0:	f000 fe80 	bl	80014d4 <HAL_ADC_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007da:	f000 f9e3 	bl	8000ba4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	4619      	mov	r1, r3
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <MX_ADC1_Init+0xe0>)
 80007ea:	f001 fe01 	bl	80023f0 <HAL_ADCEx_MultiModeConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007f4:	f000 f9d6 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_ADC1_Init+0xe8>)
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fc:	2306      	movs	r3, #6
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000804:	237f      	movs	r3, #127	; 0x7f
 8000806:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000808:	2304      	movs	r3, #4
 800080a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_ADC1_Init+0xe0>)
 8000816:	f001 f94d 	bl	8001ab4 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000820:	f000 f9c0 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000078 	.word	0x20000078
 8000830:	50040000 	.word	0x50040000
 8000834:	14f00020 	.word	0x14f00020

08000838 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM3_Init+0x98>)
 8000858:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <MX_TIM3_Init+0x9c>)
 800085a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_TIM3_Init+0x98>)
 800085e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000862:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM3_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1599;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_TIM3_Init+0x98>)
 800086c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000870:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_TIM3_Init+0x98>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM3_Init+0x98>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <MX_TIM3_Init+0x98>)
 8000880:	f003 fc74 	bl	800416c <HAL_TIM_Base_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800088a:	f000 f98b 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_TIM3_Init+0x98>)
 800089c:	f004 f8a2 	bl	80049e4 <HAL_TIM_ConfigClockSource>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80008a6:	f000 f97d 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_TIM3_Init+0x98>)
 80008b8:	f004 fdb6 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80008c2:	f000 f96f 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000dc 	.word	0x200000dc
 80008d4:	40000400 	.word	0x40000400

080008d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]
 80008fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_TIM4_Init+0xac>)
 80008fe:	4a22      	ldr	r2, [pc, #136]	; (8000988 <MX_TIM4_Init+0xb0>)
 8000900:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_TIM4_Init+0xac>)
 8000904:	f242 720f 	movw	r2, #9999	; 0x270f
 8000908:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_TIM4_Init+0xac>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 23;
 8000910:	4b1c      	ldr	r3, [pc, #112]	; (8000984 <MX_TIM4_Init+0xac>)
 8000912:	2217      	movs	r2, #23
 8000914:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_TIM4_Init+0xac>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_TIM4_Init+0xac>)
 800091e:	2280      	movs	r2, #128	; 0x80
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000922:	4818      	ldr	r0, [pc, #96]	; (8000984 <MX_TIM4_Init+0xac>)
 8000924:	f003 fcea 	bl	80042fc <HAL_TIM_PWM_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800092e:	f000 f939 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4810      	ldr	r0, [pc, #64]	; (8000984 <MX_TIM4_Init+0xac>)
 8000942:	f004 fd71 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800094c:	f000 f92a 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000950:	2360      	movs	r3, #96	; 0x60
 8000952:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	4619      	mov	r1, r3
 8000966:	4807      	ldr	r0, [pc, #28]	; (8000984 <MX_TIM4_Init+0xac>)
 8000968:	f003 ff28 	bl	80047bc <HAL_TIM_PWM_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000972:	f000 f917 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000976:	4803      	ldr	r0, [pc, #12]	; (8000984 <MX_TIM4_Init+0xac>)
 8000978:	f000 fa08 	bl	8000d8c <HAL_TIM_MspPostInit>

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000128 	.word	0x20000128
 8000988:	40000800 	.word	0x40000800

0800098c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_TIM16_Init+0x44>)
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <MX_TIM16_Init+0x48>)
 8000994:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_TIM16_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_TIM16_Init+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 799;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009a4:	f240 321f 	movw	r2, #799	; 0x31f
 80009a8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_TIM16_Init+0x44>)
 80009be:	f003 fbd5 	bl	800416c <HAL_TIM_Base_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80009c8:	f000 f8ec 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000174 	.word	0x20000174
 80009d4:	40014400 	.word	0x40014400

080009d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009de:	4a15      	ldr	r2, [pc, #84]	; (8000a34 <MX_USART2_UART_Init+0x5c>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USART2_UART_Init+0x58>)
 8000a1c:	f004 fdaa 	bl	8005574 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f8bd 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001c0 	.word	0x200001c0
 8000a34:	40004400 	.word	0x40004400

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b36      	ldr	r3, [pc, #216]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a35      	ldr	r2, [pc, #212]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_GPIO_Init+0xf0>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	481e      	ldr	r0, [pc, #120]	; (8000b2c <MX_GPIO_Init+0xf4>)
 8000ab4:	f002 f808 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f002 f801 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000acc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <MX_GPIO_Init+0xf4>)
 8000ade:	f001 fe49 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_GPIO_Init+0xf4>)
 8000afa:	f001 fe3b 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 8000afe:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f001 fe2b 	bl	8002774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	48000800 	.word	0x48000800

08000b30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d124      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x5a>
  {
	if (TIMER_COUNT == 2000)
	{
		TIMER_COUNT = 0;
	}
	if (TIMER_COUNT == 0)
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d10a      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b48:	2120      	movs	r1, #32
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f001 ffd3 	bl	8002af8 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2101      	movs	r1, #1
 8000b56:	4811      	ldr	r0, [pc, #68]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b58:	f001 ffb6 	bl	8002ac8 <HAL_GPIO_WritePin>
 8000b5c:	e00f      	b.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x4e>
	}
	else if (TIMER_COUNT == ESC_ON)
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d109      	bne.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f001 ffc2 	bl	8002af8 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2101      	movs	r1, #1
 8000b78:	4808      	ldr	r0, [pc, #32]	; (8000b9c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b7a:	f001 ffa5 	bl	8002ac8 <HAL_GPIO_WritePin>
	}

    TIMER_COUNT += 1;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b88:	701a      	strb	r2, [r3, #0]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000174 	.word	0x20000174
 8000b98:	20000249 	.word	0x20000249
 8000b9c:	48000800 	.word	0x48000800
 8000ba0:	20000248 	.word	0x20000248

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x44>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b0ac      	sub	sp, #176	; 0xb0
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2288      	movs	r2, #136	; 0x88
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f005 fa71 	bl	8006100 <memset>
  if(hadc->Instance==ADC1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a27      	ldr	r2, [pc, #156]	; (8000cc0 <HAL_ADC_MspInit+0xc8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d147      	bne.n	8000cb8 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c2c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fdcb 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000c64:	f7ff ff9e 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_ADC_MspInit+0xcc>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <HAL_ADC_MspInit+0xcc>)
 8000c6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <HAL_ADC_MspInit+0xcc>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_ADC_MspInit+0xcc>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_ADC_MspInit+0xcc>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_ADC_MspInit+0xcc>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c9e:	230b      	movs	r3, #11
 8000ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f001 fd5e 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	37b0      	adds	r7, #176	; 0xb0
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	50040000 	.word	0x50040000
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <HAL_TIM_Base_MspInit+0x78>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d114      	bne.n	8000d04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_TIM_Base_MspInit+0x7c>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_TIM_Base_MspInit+0x7c>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_TIM_Base_MspInit+0x7c>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	201d      	movs	r0, #29
 8000cf8:	f001 fd05 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cfc:	201d      	movs	r0, #29
 8000cfe:	f001 fd1e 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d02:	e018      	b.n	8000d36 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_TIM_Base_MspInit+0x80>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d113      	bne.n	8000d36 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_TIM_Base_MspInit+0x7c>)
 8000d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d12:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <HAL_TIM_Base_MspInit+0x7c>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_Base_MspInit+0x7c>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2019      	movs	r0, #25
 8000d2c:	f001 fceb 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d30:	2019      	movs	r0, #25
 8000d32:	f001 fd04 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40000400 	.word	0x40000400
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40014400 	.word	0x40014400

08000d4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_TIM_PWM_MspInit+0x38>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d10b      	bne.n	8000d76 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6593      	str	r3, [r2, #88]	; 0x58
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_TIM_PWM_MspInit+0x3c>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40000800 	.word	0x40000800
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <HAL_TIM_MspPostInit+0x64>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d11b      	bne.n	8000de6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_TIM_MspPostInit+0x68>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_TIM_MspPostInit+0x68>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_TIM_MspPostInit+0x68>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dc6:	2340      	movs	r3, #64	; 0x40
 8000dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_TIM_MspPostInit+0x6c>)
 8000de2:	f001 fcc7 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40000800 	.word	0x40000800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ac      	sub	sp, #176	; 0xb0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2288      	movs	r2, #136	; 0x88
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f005 f96f 	bl	8006100 <memset>
  if(huart->Instance==USART2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a21      	ldr	r2, [pc, #132]	; (8000eac <HAL_UART_MspInit+0xb0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d13b      	bne.n	8000ea4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 fcdb 	bl	80037f4 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e44:	f7ff feae 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e52:	6593      	str	r3, [r2, #88]	; 0x58
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_UART_MspInit+0xb4>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e78:	230c      	movs	r3, #12
 8000e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e90:	2307      	movs	r3, #7
 8000e92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f001 fc68 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	37b0      	adds	r7, #176	; 0xb0
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40004400 	.word	0x40004400
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 f8e4 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f0e:	f003 fb53 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000174 	.word	0x20000174

08000f1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM3_IRQHandler+0x10>)
 8000f22:	f003 fb49 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000dc 	.word	0x200000dc

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f005 f8d6 	bl	8006110 <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20018000 	.word	0x20018000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	2000024c 	.word	0x2000024c
 8000f98:	200003a0 	.word	0x200003a0

08000f9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <SystemInit+0x20>)
 8000fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <SystemInit+0x20>)
 8000fa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc4:	f7ff ffea 	bl	8000f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8000fca:	490d      	ldr	r1, [pc, #52]	; (8001000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <LoopForever+0xe>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	; (800100c <LoopForever+0x16>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fee:	f005 f895 	bl	800611c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ff2:	f7ff fac3 	bl	800057c <main>

08000ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff6:	e7fe      	b.n	8000ff6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001004:	08006ab4 	.word	0x08006ab4
  ldr r2, =_sbss
 8001008:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800100c:	2000039c 	.word	0x2000039c

08001010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC1_2_IRQHandler>
	...

08001014 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_Init+0x3c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <HAL_Init+0x3c>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102a:	2003      	movs	r0, #3
 800102c:	f001 fb60 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001030:	2000      	movs	r0, #0
 8001032:	f000 f80f 	bl	8001054 <HAL_InitTick>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	e001      	b.n	8001046 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001042:	f7ff fdb5 	bl	8000bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001046:	79fb      	ldrb	r3, [r7, #7]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40022000 	.word	0x40022000

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_InitTick+0x6c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d023      	beq.n	80010b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_InitTick+0x70>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_InitTick+0x6c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fb6b 	bl	800275a <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10f      	bne.n	80010aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d809      	bhi.n	80010a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f001 fb35 	bl	8002706 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_InitTick+0x74>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e004      	b.n	80010b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	e001      	b.n	80010b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000004 	.word	0x20000004

080010cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x20>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_IncTick+0x24>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000250 	.word	0x20000250

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000250 	.word	0x20000250

0800110c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	431a      	orrs	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	609a      	str	r2, [r3, #8]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	609a      	str	r2, [r3, #8]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3360      	adds	r3, #96	; 0x60
 8001186:	461a      	mov	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <LL_ADC_SetOffset+0x44>)
 8001196:	4013      	ands	r3, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	4313      	orrs	r3, r2
 80011a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	03fff000 	.word	0x03fff000

080011bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3360      	adds	r3, #96	; 0x60
 80011ca:	461a      	mov	r2, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3360      	adds	r3, #96	; 0x60
 80011f8:	461a      	mov	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001212:	bf00      	nop
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3330      	adds	r3, #48	; 0x30
 8001254:	461a      	mov	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	211f      	movs	r1, #31
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0e9b      	lsrs	r3, r3, #26
 800127c:	f003 011f 	and.w	r1, r3, #31
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3314      	adds	r3, #20
 80012ac:	461a      	mov	r2, r3
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	0e5b      	lsrs	r3, r3, #25
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	0d1b      	lsrs	r3, r3, #20
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	2107      	movs	r1, #7
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	401a      	ands	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	0d1b      	lsrs	r3, r3, #20
 80012d6:	f003 031f 	and.w	r3, r3, #31
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800130c:	43db      	mvns	r3, r3
 800130e:	401a      	ands	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0318 	and.w	r3, r3, #24
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001318:	40d9      	lsrs	r1, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	400b      	ands	r3, r1
 800131e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001322:	431a      	orrs	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	0007ffff 	.word	0x0007ffff

0800133c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 031f 	and.w	r3, r3, #31
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6093      	str	r3, [r2, #8]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ac:	d101      	bne.n	80013b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013fc:	d101      	bne.n	8001402 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d101      	bne.n	8001450 <LL_ADC_IsEnabled+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_IsEnabled+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800146e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001472:	f043 0204 	orr.w	r2, r3, #4
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b04      	cmp	r3, #4
 8001498:	d101      	bne.n	800149e <LL_ADC_REG_IsConversionOngoing+0x18>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d101      	bne.n	80014c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e130      	b.n	8001750 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d109      	bne.n	8001510 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fb7b 	bl	8000bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff3f 	bl	8001398 <LL_ADC_IsDeepPowerDownEnabled>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff25 	bl	8001374 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff5a 	bl	80013e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d115      	bne.n	8001566 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff3e 	bl	80013c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001544:	4b84      	ldr	r3, [pc, #528]	; (8001758 <HAL_ADC_Init+0x284>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	099b      	lsrs	r3, r3, #6
 800154a:	4a84      	ldr	r2, [pc, #528]	; (800175c <HAL_ADC_Init+0x288>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	3301      	adds	r3, #1
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001558:	e002      	b.n	8001560 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3b01      	subs	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff3c 	bl	80013e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10d      	bne.n	8001592 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	f043 0210 	orr.w	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff75 	bl	8001486 <LL_ADC_REG_IsConversionOngoing>
 800159c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 80c9 	bne.w	800173e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 80c5 	bne.w	800173e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015bc:	f043 0202 	orr.w	r2, r3, #2
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff35 	bl	8001438 <LL_ADC_IsEnabled>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d115      	bne.n	8001600 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015d4:	4862      	ldr	r0, [pc, #392]	; (8001760 <HAL_ADC_Init+0x28c>)
 80015d6:	f7ff ff2f 	bl	8001438 <LL_ADC_IsEnabled>
 80015da:	4604      	mov	r4, r0
 80015dc:	4861      	ldr	r0, [pc, #388]	; (8001764 <HAL_ADC_Init+0x290>)
 80015de:	f7ff ff2b 	bl	8001438 <LL_ADC_IsEnabled>
 80015e2:	4603      	mov	r3, r0
 80015e4:	431c      	orrs	r4, r3
 80015e6:	4860      	ldr	r0, [pc, #384]	; (8001768 <HAL_ADC_Init+0x294>)
 80015e8:	f7ff ff26 	bl	8001438 <LL_ADC_IsEnabled>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4323      	orrs	r3, r4
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4619      	mov	r1, r3
 80015fa:	485c      	ldr	r0, [pc, #368]	; (800176c <HAL_ADC_Init+0x298>)
 80015fc:	f7ff fd86 	bl	800110c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e5b      	ldrb	r3, [r3, #25]
 8001604:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800160a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001610:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001616:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d106      	bne.n	800163c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	3b01      	subs	r3, #1
 8001634:	045b      	lsls	r3, r3, #17
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	d009      	beq.n	8001658 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4313      	orrs	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	4b44      	ldr	r3, [pc, #272]	; (8001770 <HAL_ADC_Init+0x29c>)
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	69b9      	ldr	r1, [r7, #24]
 8001668:	430b      	orrs	r3, r1
 800166a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff1b 	bl	80014ac <LL_ADC_INJ_IsConversionOngoing>
 8001676:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d13d      	bne.n	80016fa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d13a      	bne.n	80016fa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001688:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001690:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016a0:	f023 0302 	bic.w	r3, r3, #2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	69b9      	ldr	r1, [r7, #24]
 80016aa:	430b      	orrs	r3, r1
 80016ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d118      	bne.n	80016ea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016c2:	f023 0304 	bic.w	r3, r3, #4
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016d4:	4311      	orrs	r1, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016da:	430a      	orrs	r2, r1
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	e007      	b.n	80016fa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d10c      	bne.n	800171c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	f023 010f 	bic.w	r1, r3, #15
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	631a      	str	r2, [r3, #48]	; 0x30
 800171a:	e007      	b.n	800172c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 020f 	bic.w	r2, r2, #15
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	f023 0303 	bic.w	r3, r3, #3
 8001734:	f043 0201 	orr.w	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
 800173c:	e007      	b.n	800174e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	f043 0210 	orr.w	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800174e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3724      	adds	r7, #36	; 0x24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	20000000 	.word	0x20000000
 800175c:	053e2d63 	.word	0x053e2d63
 8001760:	50040000 	.word	0x50040000
 8001764:	50040100 	.word	0x50040100
 8001768:	50040200 	.word	0x50040200
 800176c:	50040300 	.word	0x50040300
 8001770:	fff0c007 	.word	0xfff0c007

08001774 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800177c:	4857      	ldr	r0, [pc, #348]	; (80018dc <HAL_ADC_Start+0x168>)
 800177e:	f7ff fddd 	bl	800133c <LL_ADC_GetMultimode>
 8001782:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fe7c 	bl	8001486 <LL_ADC_REG_IsConversionOngoing>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	f040 809c 	bne.w	80018ce <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_ADC_Start+0x30>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e097      	b.n	80018d4 <HAL_ADC_Start+0x160>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fd73 	bl	8002298 <ADC_Enable>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 8083 	bne.w	80018c4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a42      	ldr	r2, [pc, #264]	; (80018e0 <HAL_ADC_Start+0x16c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d002      	beq.n	80017e2 <HAL_ADC_Start+0x6e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e000      	b.n	80017e4 <HAL_ADC_Start+0x70>
 80017e2:	4b40      	ldr	r3, [pc, #256]	; (80018e4 <HAL_ADC_Start+0x170>)
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d002      	beq.n	80017f2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d105      	bne.n	80017fe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800180a:	d106      	bne.n	800181a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	f023 0206 	bic.w	r2, r3, #6
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	659a      	str	r2, [r3, #88]	; 0x58
 8001818:	e002      	b.n	8001820 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	221c      	movs	r2, #28
 8001826:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2a      	ldr	r2, [pc, #168]	; (80018e0 <HAL_ADC_Start+0x16c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d002      	beq.n	8001840 <HAL_ADC_Start+0xcc>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	e000      	b.n	8001842 <HAL_ADC_Start+0xce>
 8001840:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <HAL_ADC_Start+0x170>)
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4293      	cmp	r3, r2
 8001848:	d008      	beq.n	800185c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d002      	beq.n	800185c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b09      	cmp	r3, #9
 800185a:	d114      	bne.n	8001886 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001872:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fded 	bl	800145e <LL_ADC_REG_StartConversion>
 8001884:	e025      	b.n	80018d2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <HAL_ADC_Start+0x16c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d002      	beq.n	80018a2 <HAL_ADC_Start+0x12e>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	e000      	b.n	80018a4 <HAL_ADC_Start+0x130>
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_ADC_Start+0x170>)
 80018a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00f      	beq.n	80018d2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54
 80018c2:	e006      	b.n	80018d2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80018cc:	e001      	b.n	80018d2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018ce:	2302      	movs	r3, #2
 80018d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	50040300 	.word	0x50040300
 80018e0:	50040100 	.word	0x50040100
 80018e4:	50040000 	.word	0x50040000

080018e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018f2:	4866      	ldr	r0, [pc, #408]	; (8001a8c <HAL_ADC_PollForConversion+0x1a4>)
 80018f4:	f7ff fd22 	bl	800133c <LL_ADC_GetMultimode>
 80018f8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d102      	bne.n	8001908 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001902:	2308      	movs	r3, #8
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e02a      	b.n	800195e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d002      	beq.n	800191a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2b09      	cmp	r3, #9
 8001918:	d111      	bne.n	800193e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192c:	f043 0220 	orr.w	r2, r3, #32
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0a4      	b.n	8001a82 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001938:	2304      	movs	r3, #4
 800193a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800193c:	e00f      	b.n	800195e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800193e:	4853      	ldr	r0, [pc, #332]	; (8001a8c <HAL_ADC_PollForConversion+0x1a4>)
 8001940:	f7ff fd0a 	bl	8001358 <LL_ADC_GetMultiDMATransfer>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194e:	f043 0220 	orr.w	r2, r3, #32
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e093      	b.n	8001a82 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800195a:	2304      	movs	r3, #4
 800195c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800195e:	f7ff fbc9 	bl	80010f4 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001964:	e021      	b.n	80019aa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d01d      	beq.n	80019aa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800196e:	f7ff fbc1 	bl	80010f4 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d302      	bcc.n	8001984 <HAL_ADC_PollForConversion+0x9c>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d112      	bne.n	80019aa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10b      	bne.n	80019aa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	f043 0204 	orr.w	r2, r3, #4
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e06b      	b.n	8001a82 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0d6      	beq.n	8001966 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fc28 	bl	800121e <LL_ADC_REG_IsTriggerSourceSWStart>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01c      	beq.n	8001a0e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e5b      	ldrb	r3, [r3, #25]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d118      	bne.n	8001a0e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d111      	bne.n	8001a0e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a06:	f043 0201 	orr.w	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <HAL_ADC_PollForConversion+0x1a8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d002      	beq.n	8001a1e <HAL_ADC_PollForConversion+0x136>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	e000      	b.n	8001a20 <HAL_ADC_PollForConversion+0x138>
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_ADC_PollForConversion+0x1ac>)
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d008      	beq.n	8001a3a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d002      	beq.n	8001a3a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b09      	cmp	r3, #9
 8001a38:	d104      	bne.n	8001a44 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	e00c      	b.n	8001a5e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a11      	ldr	r2, [pc, #68]	; (8001a90 <HAL_ADC_PollForConversion+0x1a8>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d002      	beq.n	8001a54 <HAL_ADC_PollForConversion+0x16c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	e000      	b.n	8001a56 <HAL_ADC_PollForConversion+0x16e>
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_ADC_PollForConversion+0x1ac>)
 8001a56:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d104      	bne.n	8001a6e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e008      	b.n	8001a80 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	220c      	movs	r2, #12
 8001a7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	50040300 	.word	0x50040300
 8001a90:	50040100 	.word	0x50040100
 8001a94:	50040000 	.word	0x50040000

08001a98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b0b6      	sub	sp, #216	; 0xd8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x22>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e3c9      	b.n	800226a <HAL_ADC_ConfigChannel+0x7b6>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fccf 	bl	8001486 <LL_ADC_REG_IsConversionOngoing>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 83aa 	bne.w	8002244 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b05      	cmp	r3, #5
 8001afe:	d824      	bhi.n	8001b4a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	3b02      	subs	r3, #2
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d81b      	bhi.n	8001b42 <HAL_ADC_ConfigChannel+0x8e>
 8001b0a:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <HAL_ADC_ConfigChannel+0x5c>)
 8001b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b29 	.word	0x08001b29
 8001b18:	08001b31 	.word	0x08001b31
 8001b1c:	08001b39 	.word	0x08001b39
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001b20:	230c      	movs	r3, #12
 8001b22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b26:	e010      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001b28:	2312      	movs	r3, #18
 8001b2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b2e:	e00c      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001b30:	2318      	movs	r3, #24
 8001b32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b36:	e008      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b40:	e003      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001b42:	2306      	movs	r3, #6
 8001b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b48:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6818      	ldr	r0, [r3, #0]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001b58:	f7ff fb74 	bl	8001244 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fc90 	bl	8001486 <LL_ADC_REG_IsConversionOngoing>
 8001b66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fc9c 	bl	80014ac <LL_ADC_INJ_IsConversionOngoing>
 8001b74:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 81a4 	bne.w	8001eca <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 819f 	bne.w	8001eca <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f7ff fb7f 	bl	800129c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d00a      	beq.n	8001bd6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6919      	ldr	r1, [r3, #16]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd0:	f7ff fad0 	bl	8001174 <LL_ADC_SetOffset>
 8001bd4:	e179      	b.n	8001eca <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff faed 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10a      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x14e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fae2 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	0e9b      	lsrs	r3, r3, #26
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	e01e      	b.n	8001c40 <HAL_ADC_ConfigChannel+0x18c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fad7 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001c30:	2320      	movs	r3, #32
 8001c32:	e004      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001c34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1a4>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0e9b      	lsrs	r3, r3, #26
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	e018      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x1d6>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c64:	fa93 f3a3 	rbit	r3, r3
 8001c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	e004      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d106      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff faa6 	bl	80011e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fa8a 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10a      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x214>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fa7f 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	0e9b      	lsrs	r3, r3, #26
 8001cc2:	f003 021f 	and.w	r2, r3, #31
 8001cc6:	e01e      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x252>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fa74 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001ce6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001cf6:	2320      	movs	r3, #32
 8001cf8:	e004      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cfe:	fab3 f383 	clz	r3, r3
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x26a>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0e9b      	lsrs	r3, r3, #26
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	e018      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x29c>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001d42:	2320      	movs	r3, #32
 8001d44:	e004      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d106      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fa43 	bl	80011e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2102      	movs	r1, #2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fa27 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x2da>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fa1c 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	0e9b      	lsrs	r3, r3, #26
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	e01e      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x318>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2102      	movs	r1, #2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fa11 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001dbc:	2320      	movs	r3, #32
 8001dbe:	e004      	b.n	8001dca <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x330>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	e014      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x35a>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001e00:	2320      	movs	r3, #32
 8001e02:	e004      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d106      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2200      	movs	r2, #0
 8001e18:	2102      	movs	r1, #2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f9e4 	bl	80011e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2103      	movs	r1, #3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f9c8 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x398>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff f9bd 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	f003 021f 	and.w	r2, r3, #31
 8001e4a:	e017      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x3c8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2103      	movs	r1, #3
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f9b2 	bl	80011bc <LL_ADC_GetOffsetChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e5e:	fa93 f3a3 	rbit	r3, r3
 8001e62:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e66:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e003      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d105      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x3e0>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	e011      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x404>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ea4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e003      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d106      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f98f 	bl	80011e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fab2 	bl	8001438 <LL_ADC_IsEnabled>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 8140 	bne.w	800215c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f7ff fa03 	bl	80012f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	4a8f      	ldr	r2, [pc, #572]	; (8002130 <HAL_ADC_ConfigChannel+0x67c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	f040 8131 	bne.w	800215c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10b      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x46e>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	0e9b      	lsrs	r3, r3, #26
 8001f10:	3301      	adds	r3, #1
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	2b09      	cmp	r3, #9
 8001f18:	bf94      	ite	ls
 8001f1a:	2301      	movls	r3, #1
 8001f1c:	2300      	movhi	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	e019      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x4a2>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f32:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	e003      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f40:	fab3 f383 	clz	r3, r3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	bf94      	ite	ls
 8001f50:	2301      	movls	r3, #1
 8001f52:	2300      	movhi	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d079      	beq.n	800204e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x4c2>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	069b      	lsls	r3, r3, #26
 8001f70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f74:	e015      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x4ee>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f86:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e003      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f94:	fab3 f383 	clz	r3, r3
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	069b      	lsls	r3, r3, #26
 8001f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x50e>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0e9b      	lsrs	r3, r3, #26
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	e017      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x53e>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e003      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001fde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff2:	ea42 0103 	orr.w	r1, r2, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10a      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x564>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	3301      	adds	r3, #1
 800200a:	f003 021f 	and.w	r2, r3, #31
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	051b      	lsls	r3, r3, #20
 8002016:	e018      	b.n	800204a <HAL_ADC_ConfigChannel+0x596>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002028:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800202a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002030:	2320      	movs	r3, #32
 8002032:	e003      	b.n	800203c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f003 021f 	and.w	r2, r3, #31
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800204a:	430b      	orrs	r3, r1
 800204c:	e081      	b.n	8002152 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d107      	bne.n	800206a <HAL_ADC_ConfigChannel+0x5b6>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	3301      	adds	r3, #1
 8002062:	069b      	lsls	r3, r3, #26
 8002064:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002068:	e015      	b.n	8002096 <HAL_ADC_ConfigChannel+0x5e2>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e003      	b.n	800208e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	069b      	lsls	r3, r3, #26
 8002092:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x602>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	0e9b      	lsrs	r3, r3, #26
 80020a8:	3301      	adds	r3, #1
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2101      	movs	r1, #1
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	e017      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x632>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	61bb      	str	r3, [r7, #24]
  return result;
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80020ce:	2320      	movs	r3, #32
 80020d0:	e003      	b.n	80020da <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f303 	lsl.w	r3, r1, r3
 80020e6:	ea42 0103 	orr.w	r1, r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10d      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x65e>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	3301      	adds	r3, #1
 80020fe:	f003 021f 	and.w	r2, r3, #31
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	3b1e      	subs	r3, #30
 800210a:	051b      	lsls	r3, r3, #20
 800210c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002110:	e01e      	b.n	8002150 <HAL_ADC_ConfigChannel+0x69c>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	60fb      	str	r3, [r7, #12]
  return result;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d104      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800212a:	2320      	movs	r3, #32
 800212c:	e006      	b.n	800213c <HAL_ADC_ConfigChannel+0x688>
 800212e:	bf00      	nop
 8002130:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f003 021f 	and.w	r2, r3, #31
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	3b1e      	subs	r3, #30
 800214a:	051b      	lsls	r3, r3, #20
 800214c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002150:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002156:	4619      	mov	r1, r3
 8002158:	f7ff f8a0 	bl	800129c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b44      	ldr	r3, [pc, #272]	; (8002274 <HAL_ADC_ConfigChannel+0x7c0>)
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d07a      	beq.n	800225e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002168:	4843      	ldr	r0, [pc, #268]	; (8002278 <HAL_ADC_ConfigChannel+0x7c4>)
 800216a:	f7fe fff5 	bl	8001158 <LL_ADC_GetCommonPathInternalCh>
 800216e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a41      	ldr	r2, [pc, #260]	; (800227c <HAL_ADC_ConfigChannel+0x7c8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d12c      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800217c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d126      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3c      	ldr	r2, [pc, #240]	; (8002280 <HAL_ADC_ConfigChannel+0x7cc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_ADC_ConfigChannel+0x6e8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a3b      	ldr	r2, [pc, #236]	; (8002284 <HAL_ADC_ConfigChannel+0x7d0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d15d      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800219c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021a4:	4619      	mov	r1, r3
 80021a6:	4834      	ldr	r0, [pc, #208]	; (8002278 <HAL_ADC_ConfigChannel+0x7c4>)
 80021a8:	f7fe ffc3 	bl	8001132 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ac:	4b36      	ldr	r3, [pc, #216]	; (8002288 <HAL_ADC_ConfigChannel+0x7d4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	4a36      	ldr	r2, [pc, #216]	; (800228c <HAL_ADC_ConfigChannel+0x7d8>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021c6:	e002      	b.n	80021ce <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f9      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021d4:	e040      	b.n	8002258 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <HAL_ADC_ConfigChannel+0x7dc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d118      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d112      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a23      	ldr	r2, [pc, #140]	; (8002280 <HAL_ADC_ConfigChannel+0x7cc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_ADC_ConfigChannel+0x74c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a22      	ldr	r2, [pc, #136]	; (8002284 <HAL_ADC_ConfigChannel+0x7d0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d12d      	bne.n	800225c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002200:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002208:	4619      	mov	r1, r3
 800220a:	481b      	ldr	r0, [pc, #108]	; (8002278 <HAL_ADC_ConfigChannel+0x7c4>)
 800220c:	f7fe ff91 	bl	8001132 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002210:	e024      	b.n	800225c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_ADC_ConfigChannel+0x7e0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d120      	bne.n	800225e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800221c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d11a      	bne.n	800225e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <HAL_ADC_ConfigChannel+0x7cc>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d115      	bne.n	800225e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002232:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800223a:	4619      	mov	r1, r3
 800223c:	480e      	ldr	r0, [pc, #56]	; (8002278 <HAL_ADC_ConfigChannel+0x7c4>)
 800223e:	f7fe ff78 	bl	8001132 <LL_ADC_SetCommonPathInternalCh>
 8002242:	e00c      	b.n	800225e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002256:	e002      	b.n	800225e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002258:	bf00      	nop
 800225a:	e000      	b.n	800225e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800225c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002266:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800226a:	4618      	mov	r0, r3
 800226c:	37d8      	adds	r7, #216	; 0xd8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	80080000 	.word	0x80080000
 8002278:	50040300 	.word	0x50040300
 800227c:	c7520000 	.word	0xc7520000
 8002280:	50040000 	.word	0x50040000
 8002284:	50040200 	.word	0x50040200
 8002288:	20000000 	.word	0x20000000
 800228c:	053e2d63 	.word	0x053e2d63
 8002290:	cb840000 	.word	0xcb840000
 8002294:	80000001 	.word	0x80000001

08002298 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff f8c5 	bl	8001438 <LL_ADC_IsEnabled>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d169      	bne.n	8002388 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	4b36      	ldr	r3, [pc, #216]	; (8002394 <ADC_Enable+0xfc>)
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00d      	beq.n	80022de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e055      	b.n	800238a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f894 	bl	8001410 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022e8:	482b      	ldr	r0, [pc, #172]	; (8002398 <ADC_Enable+0x100>)
 80022ea:	f7fe ff35 	bl	8001158 <LL_ADC_GetCommonPathInternalCh>
 80022ee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80022f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f8:	4b28      	ldr	r3, [pc, #160]	; (800239c <ADC_Enable+0x104>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <ADC_Enable+0x108>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002312:	e002      	b.n	800231a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3b01      	subs	r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f9      	bne.n	8002314 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002320:	f7fe fee8 	bl	80010f4 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002326:	e028      	b.n	800237a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff f883 	bl	8001438 <LL_ADC_IsEnabled>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d104      	bne.n	8002342 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f867 	bl	8001410 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002342:	f7fe fed7 	bl	80010f4 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d914      	bls.n	800237a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d00d      	beq.n	800237a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	f043 0210 	orr.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e007      	b.n	800238a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d1cf      	bne.n	8002328 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	8000003f 	.word	0x8000003f
 8002398:	50040300 	.word	0x50040300
 800239c:	20000000 	.word	0x20000000
 80023a0:	053e2d63 	.word	0x053e2d63

080023a4 <LL_ADC_IsEnabled>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <LL_ADC_IsEnabled+0x18>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <LL_ADC_IsEnabled+0x1a>
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <LL_ADC_REG_IsConversionOngoing>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d101      	bne.n	80023e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b09f      	sub	sp, #124	; 0x7c
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800240a:	2302      	movs	r3, #2
 800240c:	e093      	b.n	8002536 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002416:	2300      	movs	r3, #0
 8002418:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800241a:	2300      	movs	r3, #0
 800241c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a47      	ldr	r2, [pc, #284]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d102      	bne.n	800242e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002428:	4b46      	ldr	r3, [pc, #280]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	e001      	b.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e072      	b.n	8002536 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ffb9 	bl	80023ca <LL_ADC_REG_IsConversionOngoing>
 8002458:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ffb3 	bl	80023ca <LL_ADC_REG_IsConversionOngoing>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d154      	bne.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800246a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800246c:	2b00      	cmp	r3, #0
 800246e:	d151      	bne.n	8002514 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002470:	4b35      	ldr	r3, [pc, #212]	; (8002548 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002472:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02c      	beq.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800247c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800248e:	035b      	lsls	r3, r3, #13
 8002490:	430b      	orrs	r3, r1
 8002492:	431a      	orrs	r2, r3
 8002494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002496:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002498:	4829      	ldr	r0, [pc, #164]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800249a:	f7ff ff83 	bl	80023a4 <LL_ADC_IsEnabled>
 800249e:	4604      	mov	r4, r0
 80024a0:	4828      	ldr	r0, [pc, #160]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024a2:	f7ff ff7f 	bl	80023a4 <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	431c      	orrs	r4, r3
 80024aa:	4828      	ldr	r0, [pc, #160]	; (800254c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024ac:	f7ff ff7a 	bl	80023a4 <LL_ADC_IsEnabled>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4323      	orrs	r3, r4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d137      	bne.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80024b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024c0:	f023 030f 	bic.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	6811      	ldr	r1, [r2, #0]
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	6892      	ldr	r2, [r2, #8]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80024d4:	e028      	b.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80024d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e2:	4817      	ldr	r0, [pc, #92]	; (8002540 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80024e4:	f7ff ff5e 	bl	80023a4 <LL_ADC_IsEnabled>
 80024e8:	4604      	mov	r4, r0
 80024ea:	4816      	ldr	r0, [pc, #88]	; (8002544 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024ec:	f7ff ff5a 	bl	80023a4 <LL_ADC_IsEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	431c      	orrs	r4, r3
 80024f4:	4815      	ldr	r0, [pc, #84]	; (800254c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024f6:	f7ff ff55 	bl	80023a4 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4323      	orrs	r3, r4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d112      	bne.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800250a:	f023 030f 	bic.w	r3, r3, #15
 800250e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002510:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002512:	e009      	b.n	8002528 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002526:	e000      	b.n	800252a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002528:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002532:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002536:	4618      	mov	r0, r3
 8002538:	377c      	adds	r7, #124	; 0x7c
 800253a:	46bd      	mov	sp, r7
 800253c:	bd90      	pop	{r4, r7, pc}
 800253e:	bf00      	nop
 8002540:	50040000 	.word	0x50040000
 8002544:	50040100 	.word	0x50040100
 8002548:	50040300 	.word	0x50040300
 800254c:	50040200 	.word	0x50040200

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	; (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002782:	e17f      	b.n	8002a84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8171 	beq.w	8002a7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d005      	beq.n	80027b4 <HAL_GPIO_Init+0x40>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d130      	bne.n	8002816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ea:	2201      	movs	r2, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 0201 	and.w	r2, r3, #1
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b03      	cmp	r3, #3
 8002820:	d118      	bne.n	8002854 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d017      	beq.n	8002890 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d123      	bne.n	80028e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80ac 	beq.w	8002a7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	4b5f      	ldr	r3, [pc, #380]	; (8002aa4 <HAL_GPIO_Init+0x330>)
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	4a5e      	ldr	r2, [pc, #376]	; (8002aa4 <HAL_GPIO_Init+0x330>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6613      	str	r3, [r2, #96]	; 0x60
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <HAL_GPIO_Init+0x330>)
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800293e:	4a5a      	ldr	r2, [pc, #360]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002968:	d025      	beq.n	80029b6 <HAL_GPIO_Init+0x242>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4f      	ldr	r2, [pc, #316]	; (8002aac <HAL_GPIO_Init+0x338>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <HAL_GPIO_Init+0x23e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <HAL_GPIO_Init+0x33c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0x23a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4d      	ldr	r2, [pc, #308]	; (8002ab4 <HAL_GPIO_Init+0x340>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0x236>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4c      	ldr	r2, [pc, #304]	; (8002ab8 <HAL_GPIO_Init+0x344>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00d      	beq.n	80029a6 <HAL_GPIO_Init+0x232>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <HAL_GPIO_Init+0x348>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x22e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_GPIO_Init+0x34c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_GPIO_Init+0x22a>
 800299a:	2306      	movs	r3, #6
 800299c:	e00c      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00a      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029a2:	2305      	movs	r3, #5
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029b6:	2300      	movs	r3, #0
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029c8:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	43db      	mvns	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029fa:	4a32      	ldr	r2, [pc, #200]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a24:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f47f ae78 	bne.w	8002784 <HAL_GPIO_Init+0x10>
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	48000400 	.word	0x48000400
 8002ab0:	48000800 	.word	0x48000800
 8002ab4:	48000c00 	.word	0x48000c00
 8002ab8:	48001000 	.word	0x48001000
 8002abc:	48001400 	.word	0x48001400
 8002ac0:	48001800 	.word	0x48001800
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43d9      	mvns	r1, r3
 8002b16:	887b      	ldrh	r3, [r7, #2]
 8002b18:	400b      	ands	r3, r1
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40007000 	.word	0x40007000

08002b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b56:	d130      	bne.n	8002bba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b64:	d038      	beq.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2232      	movs	r2, #50	; 0x32
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	3301      	adds	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b8c:	e002      	b.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba0:	d102      	bne.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f2      	bne.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ba8:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb4:	d110      	bne.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e00f      	b.n	8002bda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc6:	d007      	beq.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bc8:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bd0:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40007000 	.word	0x40007000
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	431bde83 	.word	0x431bde83

08002bf4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e3ca      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c06:	4b97      	ldr	r3, [pc, #604]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c10:	4b94      	ldr	r3, [pc, #592]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80e4 	beq.w	8002df0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_RCC_OscConfig+0x4a>
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	f040 808b 	bne.w	8002d4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	f040 8087 	bne.w	8002d4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c3e:	4b89      	ldr	r3, [pc, #548]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x62>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e3a2      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1a      	ldr	r2, [r3, #32]
 8002c5a:	4b82      	ldr	r3, [pc, #520]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <HAL_RCC_OscConfig+0x7c>
 8002c66:	4b7f      	ldr	r3, [pc, #508]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_OscConfig+0x88>
 8002c70:	4b7c      	ldr	r3, [pc, #496]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d223      	bcs.n	8002cc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fd55 	bl	8003734 <RCC_SetFlashLatencyFromMSIRange>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e383      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c94:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a72      	ldr	r2, [pc, #456]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b70      	ldr	r3, [pc, #448]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	496d      	ldr	r1, [pc, #436]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	4968      	ldr	r1, [pc, #416]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
 8002cc6:	e025      	b.n	8002d14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc8:	4b66      	ldr	r3, [pc, #408]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a65      	ldr	r2, [pc, #404]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002cce:	f043 0308 	orr.w	r3, r3, #8
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4960      	ldr	r1, [pc, #384]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ce6:	4b5f      	ldr	r3, [pc, #380]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	495b      	ldr	r1, [pc, #364]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fd15 	bl	8003734 <RCC_SetFlashLatencyFromMSIRange>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e343      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d14:	f000 fc4a 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b52      	ldr	r3, [pc, #328]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	4950      	ldr	r1, [pc, #320]	; (8002e68 <HAL_RCC_OscConfig+0x274>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d30:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <HAL_RCC_OscConfig+0x278>)
 8002d32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d34:	4b4e      	ldr	r3, [pc, #312]	; (8002e70 <HAL_RCC_OscConfig+0x27c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe f98b 	bl	8001054 <HAL_InitTick>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d052      	beq.n	8002dee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	e327      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d032      	beq.n	8002dba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d54:	4b43      	ldr	r3, [pc, #268]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a42      	ldr	r2, [pc, #264]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d60:	f7fe f9c8 	bl	80010f4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d68:	f7fe f9c4 	bl	80010f4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e310      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d7a:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a36      	ldr	r2, [pc, #216]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	f043 0308 	orr.w	r3, r3, #8
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4931      	ldr	r1, [pc, #196]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da4:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	492c      	ldr	r1, [pc, #176]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]
 8002db8:	e01a      	b.n	8002df0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe f995 	bl	80010f4 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dce:	f7fe f991 	bl	80010f4 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e2dd      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002de0:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x1da>
 8002dec:	e000      	b.n	8002df0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d074      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d005      	beq.n	8002e0e <HAL_RCC_OscConfig+0x21a>
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	d10e      	bne.n	8002e26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d10b      	bne.n	8002e26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d064      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x2f0>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d160      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e2ba      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x24a>
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	e026      	b.n	8002e8c <HAL_RCC_OscConfig+0x298>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e46:	d115      	bne.n	8002e74 <HAL_RCC_OscConfig+0x280>
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a02      	ldr	r2, [pc, #8]	; (8002e64 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	e014      	b.n	8002e8c <HAL_RCC_OscConfig+0x298>
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	08006a28 	.word	0x08006a28
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	20000004 	.word	0x20000004
 8002e74:	4ba0      	ldr	r3, [pc, #640]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a9f      	ldr	r2, [pc, #636]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b9d      	ldr	r3, [pc, #628]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a9c      	ldr	r2, [pc, #624]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe f92e 	bl	80010f4 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7fe f92a 	bl	80010f4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e276      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eae:	4b92      	ldr	r3, [pc, #584]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x2a8>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f91a 	bl	80010f4 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe f916 	bl	80010f4 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e262      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ed6:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x2d0>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d060      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_OscConfig+0x310>
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d119      	bne.n	8002f32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d116      	bne.n	8002f32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f04:	4b7c      	ldr	r3, [pc, #496]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_OscConfig+0x328>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e23f      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b76      	ldr	r3, [pc, #472]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	061b      	lsls	r3, r3, #24
 8002f2a:	4973      	ldr	r1, [pc, #460]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f30:	e040      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d023      	beq.n	8002f82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f3a:	4b6f      	ldr	r3, [pc, #444]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6e      	ldr	r2, [pc, #440]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fe f8d5 	bl	80010f4 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7fe f8d1 	bl	80010f4 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e21d      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f60:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6c:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	061b      	lsls	r3, r3, #24
 8002f7a:	495f      	ldr	r1, [pc, #380]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
 8002f80:	e018      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	4b5d      	ldr	r3, [pc, #372]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5c      	ldr	r2, [pc, #368]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe f8b1 	bl	80010f4 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fe f8ad 	bl	80010f4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e1f9      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d03c      	beq.n	800303a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01c      	beq.n	8003002 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc8:	4b4b      	ldr	r3, [pc, #300]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fce:	4a4a      	ldr	r2, [pc, #296]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe f88c 	bl	80010f4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fe f888 	bl	80010f4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1d4      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff2:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0ef      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x3ec>
 8003000:	e01b      	b.n	800303a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003002:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8003004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003008:	4a3b      	ldr	r2, [pc, #236]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003012:	f7fe f86f 	bl	80010f4 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301a:	f7fe f86b 	bl	80010f4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1b7      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800302c:	4b32      	ldr	r3, [pc, #200]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 800302e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ef      	bne.n	800301a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80a6 	beq.w	8003194 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003048:	2300      	movs	r3, #0
 800304a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800304c:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10d      	bne.n	8003074 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	4a26      	ldr	r2, [pc, #152]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003062:	6593      	str	r3, [r2, #88]	; 0x58
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003070:	2301      	movs	r3, #1
 8003072:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003074:	4b21      	ldr	r3, [pc, #132]	; (80030fc <HAL_RCC_OscConfig+0x508>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d118      	bne.n	80030b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_OscConfig+0x508>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <HAL_RCC_OscConfig+0x508>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308c:	f7fe f832 	bl	80010f4 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003094:	f7fe f82e 	bl	80010f4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e17a      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_RCC_OscConfig+0x508>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d108      	bne.n	80030cc <HAL_RCC_OscConfig+0x4d8>
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c0:	4a0d      	ldr	r2, [pc, #52]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030ca:	e029      	b.n	8003120 <HAL_RCC_OscConfig+0x52c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d115      	bne.n	8003100 <HAL_RCC_OscConfig+0x50c>
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	4a03      	ldr	r2, [pc, #12]	; (80030f8 <HAL_RCC_OscConfig+0x504>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030f4:	e014      	b.n	8003120 <HAL_RCC_OscConfig+0x52c>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
 8003100:	4b9c      	ldr	r3, [pc, #624]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	4a9b      	ldr	r2, [pc, #620]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003110:	4b98      	ldr	r3, [pc, #608]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	4a97      	ldr	r2, [pc, #604]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fd ffe4 	bl	80010f4 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fd ffe0 	bl	80010f4 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e12a      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003146:	4b8b      	ldr	r3, [pc, #556]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0ed      	beq.n	8003130 <HAL_RCC_OscConfig+0x53c>
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003156:	f7fd ffcd 	bl	80010f4 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800315c:	e00a      	b.n	8003174 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fd ffc9 	bl	80010f4 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f241 3288 	movw	r2, #5000	; 0x1388
 800316c:	4293      	cmp	r3, r2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e113      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003174:	4b7f      	ldr	r3, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1ed      	bne.n	800315e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003182:	7ffb      	ldrb	r3, [r7, #31]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003188:	4b7a      	ldr	r3, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	4a79      	ldr	r2, [pc, #484]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 800318e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003192:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80fe 	beq.w	800339a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	f040 80d0 	bne.w	8003348 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031a8:	4b72      	ldr	r3, [pc, #456]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f003 0203 	and.w	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d130      	bne.n	800321e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	3b01      	subs	r3, #1
 80031c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d127      	bne.n	800321e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d11f      	bne.n	800321e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031e8:	2a07      	cmp	r2, #7
 80031ea:	bf14      	ite	ne
 80031ec:	2201      	movne	r2, #1
 80031ee:	2200      	moveq	r2, #0
 80031f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d113      	bne.n	800321e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	3b01      	subs	r3, #1
 8003204:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d109      	bne.n	800321e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	3b01      	subs	r3, #1
 8003218:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321a:	429a      	cmp	r2, r3
 800321c:	d06e      	beq.n	80032fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d069      	beq.n	80032f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003224:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003230:	4b50      	ldr	r3, [pc, #320]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0ad      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003240:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a4b      	ldr	r2, [pc, #300]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800324a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800324c:	f7fd ff52 	bl	80010f4 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7fd ff4e 	bl	80010f4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e09a      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003266:	4b43      	ldr	r3, [pc, #268]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003272:	4b40      	ldr	r3, [pc, #256]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	4b40      	ldr	r3, [pc, #256]	; (8003378 <HAL_RCC_OscConfig+0x784>)
 8003278:	4013      	ands	r3, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003282:	3a01      	subs	r2, #1
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	4311      	orrs	r1, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800328c:	0212      	lsls	r2, r2, #8
 800328e:	4311      	orrs	r1, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003294:	0852      	lsrs	r2, r2, #1
 8003296:	3a01      	subs	r2, #1
 8003298:	0552      	lsls	r2, r2, #21
 800329a:	4311      	orrs	r1, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032a0:	0852      	lsrs	r2, r2, #1
 80032a2:	3a01      	subs	r2, #1
 80032a4:	0652      	lsls	r2, r2, #25
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032ac:	0912      	lsrs	r2, r2, #4
 80032ae:	0452      	lsls	r2, r2, #17
 80032b0:	430a      	orrs	r2, r1
 80032b2:	4930      	ldr	r1, [pc, #192]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032b8:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 80032be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032c4:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032d0:	f7fd ff10 	bl	80010f4 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fd ff0c 	bl	80010f4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e058      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032f6:	e050      	b.n	800339a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e04f      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d148      	bne.n	800339a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a19      	ldr	r2, [pc, #100]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 800330e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003312:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003314:	4b17      	ldr	r3, [pc, #92]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 800331a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800331e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003320:	f7fd fee8 	bl	80010f4 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003328:	f7fd fee4 	bl	80010f4 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e030      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0f0      	beq.n	8003328 <HAL_RCC_OscConfig+0x734>
 8003346:	e028      	b.n	800339a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b0c      	cmp	r3, #12
 800334c:	d023      	beq.n	8003396 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_RCC_OscConfig+0x780>)
 8003354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fd fecb 	bl	80010f4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003360:	e00c      	b.n	800337c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003362:	f7fd fec7 	bl	80010f4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d905      	bls.n	800337c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e013      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
 8003374:	40021000 	.word	0x40021000
 8003378:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_OscConfig+0x7b0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1ec      	bne.n	8003362 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x7b0>)
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	4905      	ldr	r1, [pc, #20]	; (80033a4 <HAL_RCC_OscConfig+0x7b0>)
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_RCC_OscConfig+0x7b4>)
 8003390:	4013      	ands	r3, r2
 8003392:	60cb      	str	r3, [r1, #12]
 8003394:	e001      	b.n	800339a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000
 80033a8:	feeefffc 	.word	0xfeeefffc

080033ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0e7      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b75      	ldr	r3, [pc, #468]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b72      	ldr	r3, [pc, #456]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 0207 	bic.w	r2, r3, #7
 80033d6:	4970      	ldr	r1, [pc, #448]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b6e      	ldr	r3, [pc, #440]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0cf      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d010      	beq.n	800341e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	4b66      	ldr	r3, [pc, #408]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003408:	429a      	cmp	r2, r3
 800340a:	d908      	bls.n	800341e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b63      	ldr	r3, [pc, #396]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4960      	ldr	r1, [pc, #384]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d04c      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003432:	4b5a      	ldr	r3, [pc, #360]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d121      	bne.n	8003482 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e0a6      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d107      	bne.n	800345a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800344a:	4b54      	ldr	r3, [pc, #336]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d115      	bne.n	8003482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e09a      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003462:	4b4e      	ldr	r3, [pc, #312]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e08e      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003472:	4b4a      	ldr	r3, [pc, #296]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e086      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4943      	ldr	r1, [pc, #268]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003494:	f7fd fe2e 	bl	80010f4 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7fd fe2a 	bl	80010f4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e06e      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 020c 	and.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1eb      	bne.n	800349c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034dc:	429a      	cmp	r2, r3
 80034de:	d208      	bcs.n	80034f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e0:	4b2e      	ldr	r3, [pc, #184]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	492b      	ldr	r1, [pc, #172]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d210      	bcs.n	8003522 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0207 	bic.w	r2, r3, #7
 8003508:	4923      	ldr	r1, [pc, #140]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003510:	4b21      	ldr	r3, [pc, #132]	; (8003598 <HAL_RCC_ClockConfig+0x1ec>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e036      	b.n	8003590 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4918      	ldr	r1, [pc, #96]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354c:	4b13      	ldr	r3, [pc, #76]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4910      	ldr	r1, [pc, #64]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003560:	f000 f824 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	490b      	ldr	r1, [pc, #44]	; (80035a0 <HAL_RCC_ClockConfig+0x1f4>)
 8003572:	5ccb      	ldrb	r3, [r1, r3]
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1f8>)
 800357e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCC_ClockConfig+0x1fc>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd fd65 	bl	8001054 <HAL_InitTick>
 800358a:	4603      	mov	r3, r0
 800358c:	72fb      	strb	r3, [r7, #11]

  return status;
 800358e:	7afb      	ldrb	r3, [r7, #11]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40022000 	.word	0x40022000
 800359c:	40021000 	.word	0x40021000
 80035a0:	08006a28 	.word	0x08006a28
 80035a4:	20000000 	.word	0x20000000
 80035a8:	20000004 	.word	0x20000004

080035ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035c4:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x34>
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d121      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d11e      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035ec:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035f2:	0a1b      	lsrs	r3, r3, #8
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	e005      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035fc:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003608:	4a2b      	ldr	r2, [pc, #172]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003610:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800361c:	e00a      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d102      	bne.n	800362a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	e004      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d101      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003630:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003632:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b0c      	cmp	r3, #12
 8003638:	d134      	bne.n	80036a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d003      	beq.n	8003652 <HAL_RCC_GetSysClockFreq+0xa6>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b03      	cmp	r3, #3
 800364e:	d003      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0xac>
 8003650:	e005      	b.n	800365e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003654:	617b      	str	r3, [r7, #20]
      break;
 8003656:	e005      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003658:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800365a:	617b      	str	r3, [r7, #20]
      break;
 800365c:	e002      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	617b      	str	r3, [r7, #20]
      break;
 8003662:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	3301      	adds	r3, #1
 8003670:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	fb03 f202 	mul.w	r2, r3, r2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	0e5b      	lsrs	r3, r3, #25
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	3301      	adds	r3, #1
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036a4:	69bb      	ldr	r3, [r7, #24]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08006a40 	.word	0x08006a40
 80036bc:	00f42400 	.word	0x00f42400
 80036c0:	007a1200 	.word	0x007a1200

080036c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c8:	4b03      	ldr	r3, [pc, #12]	; (80036d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000000 	.word	0x20000000

080036dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036e0:	f7ff fff0 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4904      	ldr	r1, [pc, #16]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	08006a38 	.word	0x08006a38

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800370c:	f7ff ffda 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0adb      	lsrs	r3, r3, #11
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x28>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	08006a38 	.word	0x08006a38

08003734 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003740:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800374c:	f7ff f9ee 	bl	8002b2c <HAL_PWREx_GetVoltageRange>
 8003750:	6178      	str	r0, [r7, #20]
 8003752:	e014      	b.n	800377e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	4a24      	ldr	r2, [pc, #144]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800375a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800376c:	f7ff f9de 	bl	8002b2c <HAL_PWREx_GetVoltageRange>
 8003770:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	4a1d      	ldr	r2, [pc, #116]	; (80037ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003784:	d10b      	bne.n	800379e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b80      	cmp	r3, #128	; 0x80
 800378a:	d919      	bls.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2ba0      	cmp	r3, #160	; 0xa0
 8003790:	d902      	bls.n	8003798 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003792:	2302      	movs	r3, #2
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e013      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003798:	2301      	movs	r3, #1
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	e010      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d902      	bls.n	80037aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037a4:	2303      	movs	r3, #3
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	e00a      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b80      	cmp	r3, #128	; 0x80
 80037ae:	d102      	bne.n	80037b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037b0:	2302      	movs	r3, #2
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	e004      	b.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b70      	cmp	r3, #112	; 0x70
 80037ba:	d101      	bne.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037bc:	2301      	movs	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 0207 	bic.w	r2, r3, #7
 80037c8:	4909      	ldr	r1, [pc, #36]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037d0:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d001      	beq.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40022000 	.word	0x40022000

080037f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037fc:	2300      	movs	r3, #0
 80037fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003800:	2300      	movs	r3, #0
 8003802:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380c:	2b00      	cmp	r3, #0
 800380e:	d041      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003814:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003818:	d02a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800381a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800381e:	d824      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003820:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003824:	d008      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003826:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800382a:	d81e      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003834:	d010      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003836:	e018      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003838:	4b86      	ldr	r3, [pc, #536]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a85      	ldr	r2, [pc, #532]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003842:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003844:	e015      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fabb 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003856:	e00c      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3320      	adds	r3, #32
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fba6 	bl	8003fb0 <RCCEx_PLLSAI2_Config>
 8003864:	4603      	mov	r3, r0
 8003866:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003868:	e003      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	74fb      	strb	r3, [r7, #19]
      break;
 800386e:	e000      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10b      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003878:	4b76      	ldr	r3, [pc, #472]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003886:	4973      	ldr	r1, [pc, #460]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800388e:	e001      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003890:	7cfb      	ldrb	r3, [r7, #19]
 8003892:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d041      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038a8:	d02a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038ae:	d824      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038b4:	d008      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ba:	d81e      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c4:	d010      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038c6:	e018      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038c8:	4b62      	ldr	r3, [pc, #392]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a61      	ldr	r2, [pc, #388]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038d4:	e015      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fa73 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038e6:	e00c      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3320      	adds	r3, #32
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fb5e 	bl	8003fb0 <RCCEx_PLLSAI2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	74fb      	strb	r3, [r7, #19]
      break;
 80038fe:	e000      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10b      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003908:	4b52      	ldr	r3, [pc, #328]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003916:	494f      	ldr	r1, [pc, #316]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800391e:	e001      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80a0 	beq.w	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00d      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394c:	4b41      	ldr	r3, [pc, #260]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	4a40      	ldr	r2, [pc, #256]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003956:	6593      	str	r3, [r2, #88]	; 0x58
 8003958:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003964:	2301      	movs	r3, #1
 8003966:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003968:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003974:	f7fd fbbe 	bl	80010f4 <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800397a:	e009      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397c:	f7fd fbba 	bl	80010f4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	74fb      	strb	r3, [r7, #19]
        break;
 800398e:	e005      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800399c:	7cfb      	ldrb	r3, [r7, #19]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d15c      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039a2:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01f      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d019      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039cc:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039dc:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fb79 	bl	80010f4 <HAL_GetTick>
 8003a02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a04:	e00b      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fd fb75 	bl	80010f4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d902      	bls.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ec      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a32:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a42:	4904      	ldr	r1, [pc, #16]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a4a:	e009      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
 8003a50:	e006      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a52:	bf00      	nop
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a60:	7c7b      	ldrb	r3, [r7, #17]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a66:	4b9e      	ldr	r3, [pc, #632]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	4a9d      	ldr	r2, [pc, #628]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a7e:	4b98      	ldr	r3, [pc, #608]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f023 0203 	bic.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	4994      	ldr	r1, [pc, #592]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa0:	4b8f      	ldr	r3, [pc, #572]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 020c 	bic.w	r2, r3, #12
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aae:	498c      	ldr	r1, [pc, #560]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ac2:	4b87      	ldr	r3, [pc, #540]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	4983      	ldr	r1, [pc, #524]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ae4:	4b7e      	ldr	r3, [pc, #504]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	497b      	ldr	r1, [pc, #492]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b06:	4b76      	ldr	r3, [pc, #472]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b14:	4972      	ldr	r1, [pc, #456]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b28:	4b6d      	ldr	r3, [pc, #436]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	496a      	ldr	r1, [pc, #424]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b4a:	4b65      	ldr	r3, [pc, #404]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	4961      	ldr	r1, [pc, #388]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b6c:	4b5c      	ldr	r3, [pc, #368]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7a:	4959      	ldr	r1, [pc, #356]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b8e:	4b54      	ldr	r3, [pc, #336]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	4950      	ldr	r1, [pc, #320]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	4948      	ldr	r1, [pc, #288]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bd2:	4b43      	ldr	r3, [pc, #268]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	493f      	ldr	r1, [pc, #252]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d028      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bf4:	4b3a      	ldr	r3, [pc, #232]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c02:	4937      	ldr	r1, [pc, #220]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c12:	d106      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c14:	4b32      	ldr	r3, [pc, #200]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a31      	ldr	r2, [pc, #196]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c1e:	60d3      	str	r3, [r2, #12]
 8003c20:	e011      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c2a:	d10c      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	2101      	movs	r1, #1
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f8c8 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c42:	7cfb      	ldrb	r3, [r7, #19]
 8003c44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c52:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	491f      	ldr	r1, [pc, #124]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c70:	d106      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c72:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4a1a      	ldr	r2, [pc, #104]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c7c:	60d3      	str	r3, [r2, #12]
 8003c7e:	e011      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f899 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9a:	7cfb      	ldrb	r3, [r7, #19]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02b      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbe:	4908      	ldr	r1, [pc, #32]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a02      	ldr	r2, [pc, #8]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cda:	60d3      	str	r3, [r2, #12]
 8003cdc:	e014      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 f867 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02f      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d14:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d22:	4928      	ldr	r1, [pc, #160]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d32:	d10d      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f844 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	74bb      	strb	r3, [r7, #18]
 8003d4e:	e011      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3320      	adds	r3, #32
 8003d5e:	2102      	movs	r1, #2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f925 	bl	8003fb0 <RCCEx_PLLSAI2_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d8e:	490d      	ldr	r1, [pc, #52]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db2:	4904      	ldr	r1, [pc, #16]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dba:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40021000 	.word	0x40021000

08003dc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dd6:	4b75      	ldr	r3, [pc, #468]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003de2:	4b72      	ldr	r3, [pc, #456]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0203 	and.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10d      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
       ||
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dfa:	4b6c      	ldr	r3, [pc, #432]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
       ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d047      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	e044      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d018      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0x86>
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d825      	bhi.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d002      	beq.n	8003e2a <RCCEx_PLLSAI1_Config+0x62>
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d009      	beq.n	8003e3c <RCCEx_PLLSAI1_Config+0x74>
 8003e28:	e020      	b.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e2a:	4b60      	ldr	r3, [pc, #384]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11d      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3a:	e01a      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e3c:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4c:	e013      	b.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e4e:	4b57      	ldr	r3, [pc, #348]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e5a:	4b54      	ldr	r3, [pc, #336]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e6a:	e006      	b.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e004      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e82:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	430b      	orrs	r3, r1
 8003e98:	4944      	ldr	r1, [pc, #272]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d17d      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ea4:	4b41      	ldr	r3, [pc, #260]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a40      	ldr	r2, [pc, #256]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb0:	f7fd f920 	bl	80010f4 <HAL_GetTick>
 8003eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eb6:	e009      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eb8:	f7fd f91c 	bl	80010f4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d902      	bls.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eca:	e005      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ecc:	4b37      	ldr	r3, [pc, #220]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ef      	bne.n	8003eb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d160      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d111      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee4:	4b31      	ldr	r3, [pc, #196]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6892      	ldr	r2, [r2, #8]
 8003ef4:	0211      	lsls	r1, r2, #8
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68d2      	ldr	r2, [r2, #12]
 8003efa:	0912      	lsrs	r2, r2, #4
 8003efc:	0452      	lsls	r2, r2, #17
 8003efe:	430a      	orrs	r2, r1
 8003f00:	492a      	ldr	r1, [pc, #168]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	610b      	str	r3, [r1, #16]
 8003f06:	e027      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d112      	bne.n	8003f34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f0e:	4b27      	ldr	r3, [pc, #156]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6892      	ldr	r2, [r2, #8]
 8003f1e:	0211      	lsls	r1, r2, #8
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6912      	ldr	r2, [r2, #16]
 8003f24:	0852      	lsrs	r2, r2, #1
 8003f26:	3a01      	subs	r2, #1
 8003f28:	0552      	lsls	r2, r2, #21
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	491f      	ldr	r1, [pc, #124]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	610b      	str	r3, [r1, #16]
 8003f32:	e011      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	0211      	lsls	r1, r2, #8
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6952      	ldr	r2, [r2, #20]
 8003f4a:	0852      	lsrs	r2, r2, #1
 8003f4c:	3a01      	subs	r2, #1
 8003f4e:	0652      	lsls	r2, r2, #25
 8003f50:	430a      	orrs	r2, r1
 8003f52:	4916      	ldr	r1, [pc, #88]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f58:	4b14      	ldr	r3, [pc, #80]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f64:	f7fd f8c6 	bl	80010f4 <HAL_GetTick>
 8003f68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f6a:	e009      	b.n	8003f80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f6c:	f7fd f8c2 	bl	80010f4 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d902      	bls.n	8003f80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	73fb      	strb	r3, [r7, #15]
          break;
 8003f7e:	e005      	b.n	8003f8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ef      	beq.n	8003f6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f92:	4b06      	ldr	r3, [pc, #24]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	4904      	ldr	r1, [pc, #16]	; (8003fac <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000

08003fb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fbe:	4b6a      	ldr	r3, [pc, #424]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d018      	beq.n	8003ffc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003fca:	4b67      	ldr	r3, [pc, #412]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0203 	and.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d10d      	bne.n	8003ff6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
       ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003fe2:	4b61      	ldr	r3, [pc, #388]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d047      	beq.n	8004086 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	e044      	b.n	8004086 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d018      	beq.n	8004036 <RCCEx_PLLSAI2_Config+0x86>
 8004004:	2b03      	cmp	r3, #3
 8004006:	d825      	bhi.n	8004054 <RCCEx_PLLSAI2_Config+0xa4>
 8004008:	2b01      	cmp	r3, #1
 800400a:	d002      	beq.n	8004012 <RCCEx_PLLSAI2_Config+0x62>
 800400c:	2b02      	cmp	r3, #2
 800400e:	d009      	beq.n	8004024 <RCCEx_PLLSAI2_Config+0x74>
 8004010:	e020      	b.n	8004054 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004012:	4b55      	ldr	r3, [pc, #340]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11d      	bne.n	800405a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004022:	e01a      	b.n	800405a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004024:	4b50      	ldr	r3, [pc, #320]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402c:	2b00      	cmp	r3, #0
 800402e:	d116      	bne.n	800405e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004034:	e013      	b.n	800405e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004036:	4b4c      	ldr	r3, [pc, #304]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004042:	4b49      	ldr	r3, [pc, #292]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004052:	e006      	b.n	8004062 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e004      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004062:	bf00      	nop
    }

    if(status == HAL_OK)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	3b01      	subs	r3, #1
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	430b      	orrs	r3, r1
 8004080:	4939      	ldr	r1, [pc, #228]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004082:	4313      	orrs	r3, r2
 8004084:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d167      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800408c:	4b36      	ldr	r3, [pc, #216]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a35      	ldr	r2, [pc, #212]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004098:	f7fd f82c 	bl	80010f4 <HAL_GetTick>
 800409c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800409e:	e009      	b.n	80040b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040a0:	f7fd f828 	bl	80010f4 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d902      	bls.n	80040b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	73fb      	strb	r3, [r7, #15]
        break;
 80040b2:	e005      	b.n	80040c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040b4:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ef      	bne.n	80040a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d14a      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d111      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040cc:	4b26      	ldr	r3, [pc, #152]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80040d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	0211      	lsls	r1, r2, #8
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	0912      	lsrs	r2, r2, #4
 80040e4:	0452      	lsls	r2, r2, #17
 80040e6:	430a      	orrs	r2, r1
 80040e8:	491f      	ldr	r1, [pc, #124]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	614b      	str	r3, [r1, #20]
 80040ee:	e011      	b.n	8004114 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6892      	ldr	r2, [r2, #8]
 8004100:	0211      	lsls	r1, r2, #8
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6912      	ldr	r2, [r2, #16]
 8004106:	0852      	lsrs	r2, r2, #1
 8004108:	3a01      	subs	r2, #1
 800410a:	0652      	lsls	r2, r2, #25
 800410c:	430a      	orrs	r2, r1
 800410e:	4916      	ldr	r1, [pc, #88]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004110:	4313      	orrs	r3, r2
 8004112:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a13      	ldr	r2, [pc, #76]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fc ffe8 	bl	80010f4 <HAL_GetTick>
 8004124:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004126:	e009      	b.n	800413c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004128:	f7fc ffe4 	bl	80010f4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d902      	bls.n	800413c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	73fb      	strb	r3, [r7, #15]
          break;
 800413a:	e005      	b.n	8004148 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ef      	beq.n	8004128 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4904      	ldr	r1, [pc, #16]	; (8004168 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	4313      	orrs	r3, r2
 800415a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000

0800416c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e049      	b.n	8004212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fc fd98 	bl	8000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fd0c 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	d001      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e04f      	b.n	80042d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01d      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425e:	d018      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d00e      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <HAL_TIM_Base_Start_IT+0xd0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1b      	ldr	r2, [pc, #108]	; (80042f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d004      	beq.n	8004292 <HAL_TIM_Base_Start_IT+0x76>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a19      	ldr	r2, [pc, #100]	; (80042f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d115      	bne.n	80042be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800429a:	4013      	ands	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b06      	cmp	r3, #6
 80042a2:	d015      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0xb4>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042aa:	d011      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042bc:	e008      	b.n	80042d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0201 	orr.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	e000      	b.n	80042d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	40013400 	.word	0x40013400
 80042f4:	40014000 	.word	0x40014000
 80042f8:	00010007 	.word	0x00010007

080042fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e049      	b.n	80043a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc fd12 	bl	8000d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f000 fc44 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <HAL_TIM_PWM_Start+0x24>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e03c      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d109      	bne.n	80043ea <HAL_TIM_PWM_Start+0x3e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	bf14      	ite	ne
 80043e2:	2301      	movne	r3, #1
 80043e4:	2300      	moveq	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	e02f      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d109      	bne.n	8004404 <HAL_TIM_PWM_Start+0x58>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e022      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d109      	bne.n	800441e <HAL_TIM_PWM_Start+0x72>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	bf14      	ite	ne
 8004416:	2301      	movne	r3, #1
 8004418:	2300      	moveq	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e015      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b10      	cmp	r3, #16
 8004422:	d109      	bne.n	8004438 <HAL_TIM_PWM_Start+0x8c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e008      	b.n	800444a <HAL_TIM_PWM_Start+0x9e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e09c      	b.n	800458c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0xb6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004460:	e023      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b04      	cmp	r3, #4
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xc6>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004470:	e01b      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d104      	bne.n	8004482 <HAL_TIM_PWM_Start+0xd6>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	e013      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b0c      	cmp	r3, #12
 8004486:	d104      	bne.n	8004492 <HAL_TIM_PWM_Start+0xe6>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004490:	e00b      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b10      	cmp	r3, #16
 8004496:	d104      	bne.n	80044a2 <HAL_TIM_PWM_Start+0xf6>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a0:	e003      	b.n	80044aa <HAL_TIM_PWM_Start+0xfe>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 ff92 	bl	80053dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a35      	ldr	r2, [pc, #212]	; (8004594 <HAL_TIM_PWM_Start+0x1e8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_TIM_PWM_Start+0x13e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a34      	ldr	r2, [pc, #208]	; (8004598 <HAL_TIM_PWM_Start+0x1ec>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_TIM_PWM_Start+0x13e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a32      	ldr	r2, [pc, #200]	; (800459c <HAL_TIM_PWM_Start+0x1f0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d009      	beq.n	80044ea <HAL_TIM_PWM_Start+0x13e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a31      	ldr	r2, [pc, #196]	; (80045a0 <HAL_TIM_PWM_Start+0x1f4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIM_PWM_Start+0x13e>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2f      	ldr	r2, [pc, #188]	; (80045a4 <HAL_TIM_PWM_Start+0x1f8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_PWM_Start+0x142>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_TIM_PWM_Start+0x144>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d007      	beq.n	8004504 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004502:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a22      	ldr	r2, [pc, #136]	; (8004594 <HAL_TIM_PWM_Start+0x1e8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_TIM_PWM_Start+0x19e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004516:	d018      	beq.n	800454a <HAL_TIM_PWM_Start+0x19e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a22      	ldr	r2, [pc, #136]	; (80045a8 <HAL_TIM_PWM_Start+0x1fc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_TIM_PWM_Start+0x19e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a21      	ldr	r2, [pc, #132]	; (80045ac <HAL_TIM_PWM_Start+0x200>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_TIM_PWM_Start+0x19e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1f      	ldr	r2, [pc, #124]	; (80045b0 <HAL_TIM_PWM_Start+0x204>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_TIM_PWM_Start+0x19e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a17      	ldr	r2, [pc, #92]	; (8004598 <HAL_TIM_PWM_Start+0x1ec>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_TIM_PWM_Start+0x19e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a15      	ldr	r2, [pc, #84]	; (800459c <HAL_TIM_PWM_Start+0x1f0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d115      	bne.n	8004576 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <HAL_TIM_PWM_Start+0x208>)
 8004552:	4013      	ands	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d015      	beq.n	8004588 <HAL_TIM_PWM_Start+0x1dc>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004562:	d011      	beq.n	8004588 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004574:	e008      	b.n	8004588 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e000      	b.n	800458a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004588:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40013400 	.word	0x40013400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40014400 	.word	0x40014400
 80045a4:	40014800 	.word	0x40014800
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	00010007 	.word	0x00010007

080045b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d020      	beq.n	800461c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01b      	beq.n	800461c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0202 	mvn.w	r2, #2
 80045ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fac1 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fab3 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fac4 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	d020      	beq.n	8004668 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01b      	beq.n	8004668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0204 	mvn.w	r2, #4
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa9b 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa8d 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fa9e 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d020      	beq.n	80046b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0308 	and.w	r3, r3, #8
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0208 	mvn.w	r2, #8
 8004684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2204      	movs	r2, #4
 800468a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fa75 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 80046a0:	e005      	b.n	80046ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa67 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fa78 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d020      	beq.n	8004700 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01b      	beq.n	8004700 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0210 	mvn.w	r2, #16
 80046d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2208      	movs	r2, #8
 80046d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa4f 	bl	8004b8a <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fa41 	bl	8004b76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fa52 	bl	8004b9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0201 	mvn.w	r2, #1
 800471c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fa06 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 ff02 	bl	800554c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fefa 	bl	8005560 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00c      	beq.n	8004790 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 fa11 	bl	8004bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0220 	mvn.w	r2, #32
 80047ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fec2 	bl	8005538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e0ff      	b.n	80049da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b14      	cmp	r3, #20
 80047e6:	f200 80f0 	bhi.w	80049ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80047ea:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004845 	.word	0x08004845
 80047f4:	080049cb 	.word	0x080049cb
 80047f8:	080049cb 	.word	0x080049cb
 80047fc:	080049cb 	.word	0x080049cb
 8004800:	08004885 	.word	0x08004885
 8004804:	080049cb 	.word	0x080049cb
 8004808:	080049cb 	.word	0x080049cb
 800480c:	080049cb 	.word	0x080049cb
 8004810:	080048c7 	.word	0x080048c7
 8004814:	080049cb 	.word	0x080049cb
 8004818:	080049cb 	.word	0x080049cb
 800481c:	080049cb 	.word	0x080049cb
 8004820:	08004907 	.word	0x08004907
 8004824:	080049cb 	.word	0x080049cb
 8004828:	080049cb 	.word	0x080049cb
 800482c:	080049cb 	.word	0x080049cb
 8004830:	08004949 	.word	0x08004949
 8004834:	080049cb 	.word	0x080049cb
 8004838:	080049cb 	.word	0x080049cb
 800483c:	080049cb 	.word	0x080049cb
 8004840:	08004989 	.word	0x08004989
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fa56 	bl	8004cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0208 	orr.w	r2, r2, #8
 800485e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0204 	bic.w	r2, r2, #4
 800486e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6999      	ldr	r1, [r3, #24]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	619a      	str	r2, [r3, #24]
      break;
 8004882:	e0a5      	b.n	80049d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68b9      	ldr	r1, [r7, #8]
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fac6 	bl	8004e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6999      	ldr	r1, [r3, #24]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	021a      	lsls	r2, r3, #8
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	619a      	str	r2, [r3, #24]
      break;
 80048c4:	e084      	b.n	80049d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fb2f 	bl	8004f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0208 	orr.w	r2, r2, #8
 80048e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69da      	ldr	r2, [r3, #28]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0204 	bic.w	r2, r2, #4
 80048f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69d9      	ldr	r1, [r3, #28]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	61da      	str	r2, [r3, #28]
      break;
 8004904:	e064      	b.n	80049d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fb97 	bl	8005040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69da      	ldr	r2, [r3, #28]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69d9      	ldr	r1, [r3, #28]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	021a      	lsls	r2, r3, #8
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	61da      	str	r2, [r3, #28]
      break;
 8004946:	e043      	b.n	80049d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 fbe0 	bl	8005114 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0208 	orr.w	r2, r2, #8
 8004962:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 0204 	bic.w	r2, r2, #4
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004986:	e023      	b.n	80049d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fc24 	bl	80051dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	021a      	lsls	r2, r3, #8
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049c8:	e002      	b.n	80049d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75fb      	strb	r3, [r7, #23]
      break;
 80049ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop

080049e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_TIM_ConfigClockSource+0x1c>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e0b6      	b.n	8004b6e <HAL_TIM_ConfigClockSource+0x18a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a3c:	d03e      	beq.n	8004abc <HAL_TIM_ConfigClockSource+0xd8>
 8004a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a42:	f200 8087 	bhi.w	8004b54 <HAL_TIM_ConfigClockSource+0x170>
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	f000 8086 	beq.w	8004b5a <HAL_TIM_ConfigClockSource+0x176>
 8004a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a52:	d87f      	bhi.n	8004b54 <HAL_TIM_ConfigClockSource+0x170>
 8004a54:	2b70      	cmp	r3, #112	; 0x70
 8004a56:	d01a      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0xaa>
 8004a58:	2b70      	cmp	r3, #112	; 0x70
 8004a5a:	d87b      	bhi.n	8004b54 <HAL_TIM_ConfigClockSource+0x170>
 8004a5c:	2b60      	cmp	r3, #96	; 0x60
 8004a5e:	d050      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x11e>
 8004a60:	2b60      	cmp	r3, #96	; 0x60
 8004a62:	d877      	bhi.n	8004b54 <HAL_TIM_ConfigClockSource+0x170>
 8004a64:	2b50      	cmp	r3, #80	; 0x50
 8004a66:	d03c      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0xfe>
 8004a68:	2b50      	cmp	r3, #80	; 0x50
 8004a6a:	d873      	bhi.n	8004b54 <HAL_TIM_ConfigClockSource+0x170>
 8004a6c:	2b40      	cmp	r3, #64	; 0x40
 8004a6e:	d058      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x13e>
 8004a70:	2b40      	cmp	r3, #64	; 0x40
 8004a72:	d86f      	bhi.n	8004b54 <HAL_TIM_ConfigClockSource+0x170>
 8004a74:	2b30      	cmp	r3, #48	; 0x30
 8004a76:	d064      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0x15e>
 8004a78:	2b30      	cmp	r3, #48	; 0x30
 8004a7a:	d86b      	bhi.n	8004b54 <HAL_TIM_ConfigClockSource+0x170>
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d060      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0x15e>
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d867      	bhi.n	8004b54 <HAL_TIM_ConfigClockSource+0x170>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d05c      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0x15e>
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d05a      	beq.n	8004b42 <HAL_TIM_ConfigClockSource+0x15e>
 8004a8c:	e062      	b.n	8004b54 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a9e:	f000 fc7d 	bl	800539c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ab0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	609a      	str	r2, [r3, #8]
      break;
 8004aba:	e04f      	b.n	8004b5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004acc:	f000 fc66 	bl	800539c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ade:	609a      	str	r2, [r3, #8]
      break;
 8004ae0:	e03c      	b.n	8004b5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 fbda 	bl	80052a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2150      	movs	r1, #80	; 0x50
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fc33 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8004b00:	e02c      	b.n	8004b5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f000 fbf9 	bl	8005306 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2160      	movs	r1, #96	; 0x60
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fc23 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8004b20:	e01c      	b.n	8004b5c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f000 fbba 	bl	80052a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2140      	movs	r1, #64	; 0x40
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fc13 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8004b40:	e00c      	b.n	8004b5c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f000 fc0a 	bl	8005366 <TIM_ITRx_SetConfig>
      break;
 8004b52:	e003      	b.n	8004b5c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
      break;
 8004b58:	e000      	b.n	8004b5c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b92:	bf00      	nop
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a40      	ldr	r2, [pc, #256]	; (8004cdc <TIM_Base_SetConfig+0x114>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d013      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a3d      	ldr	r2, [pc, #244]	; (8004ce0 <TIM_Base_SetConfig+0x118>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a3c      	ldr	r2, [pc, #240]	; (8004ce4 <TIM_Base_SetConfig+0x11c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a3b      	ldr	r2, [pc, #236]	; (8004ce8 <TIM_Base_SetConfig+0x120>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a3a      	ldr	r2, [pc, #232]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d108      	bne.n	8004c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2f      	ldr	r2, [pc, #188]	; (8004cdc <TIM_Base_SetConfig+0x114>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01f      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c28:	d01b      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <TIM_Base_SetConfig+0x118>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d017      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <TIM_Base_SetConfig+0x11c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2a      	ldr	r2, [pc, #168]	; (8004ce8 <TIM_Base_SetConfig+0x120>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00f      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a29      	ldr	r2, [pc, #164]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a28      	ldr	r2, [pc, #160]	; (8004cf0 <TIM_Base_SetConfig+0x128>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d007      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a27      	ldr	r2, [pc, #156]	; (8004cf4 <TIM_Base_SetConfig+0x12c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_Base_SetConfig+0x9a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a26      	ldr	r2, [pc, #152]	; (8004cf8 <TIM_Base_SetConfig+0x130>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d108      	bne.n	8004c74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <TIM_Base_SetConfig+0x114>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00f      	beq.n	8004cc0 <TIM_Base_SetConfig+0xf8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a12      	ldr	r2, [pc, #72]	; (8004cec <TIM_Base_SetConfig+0x124>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d00b      	beq.n	8004cc0 <TIM_Base_SetConfig+0xf8>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a11      	ldr	r2, [pc, #68]	; (8004cf0 <TIM_Base_SetConfig+0x128>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d007      	beq.n	8004cc0 <TIM_Base_SetConfig+0xf8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <TIM_Base_SetConfig+0x12c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d003      	beq.n	8004cc0 <TIM_Base_SetConfig+0xf8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a0f      	ldr	r2, [pc, #60]	; (8004cf8 <TIM_Base_SetConfig+0x130>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d103      	bne.n	8004cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	615a      	str	r2, [r3, #20]
}
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	40013400 	.word	0x40013400
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800

08004cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f023 0201 	bic.w	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0303 	bic.w	r3, r3, #3
 8004d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f023 0302 	bic.w	r3, r3, #2
 8004d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a2c      	ldr	r2, [pc, #176]	; (8004e08 <TIM_OC1_SetConfig+0x10c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00f      	beq.n	8004d7c <TIM_OC1_SetConfig+0x80>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a2b      	ldr	r2, [pc, #172]	; (8004e0c <TIM_OC1_SetConfig+0x110>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <TIM_OC1_SetConfig+0x80>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a2a      	ldr	r2, [pc, #168]	; (8004e10 <TIM_OC1_SetConfig+0x114>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_OC1_SetConfig+0x80>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a29      	ldr	r2, [pc, #164]	; (8004e14 <TIM_OC1_SetConfig+0x118>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_OC1_SetConfig+0x80>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a28      	ldr	r2, [pc, #160]	; (8004e18 <TIM_OC1_SetConfig+0x11c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d10c      	bne.n	8004d96 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f023 0308 	bic.w	r3, r3, #8
 8004d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f023 0304 	bic.w	r3, r3, #4
 8004d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <TIM_OC1_SetConfig+0x10c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_OC1_SetConfig+0xc2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <TIM_OC1_SetConfig+0x110>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_OC1_SetConfig+0xc2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a19      	ldr	r2, [pc, #100]	; (8004e10 <TIM_OC1_SetConfig+0x114>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_OC1_SetConfig+0xc2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a18      	ldr	r2, [pc, #96]	; (8004e14 <TIM_OC1_SetConfig+0x118>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_OC1_SetConfig+0xc2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <TIM_OC1_SetConfig+0x11c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d111      	bne.n	8004de2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40013400 	.word	0x40013400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f023 0210 	bic.w	r2, r3, #16
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f023 0320 	bic.w	r3, r3, #32
 8004e6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a28      	ldr	r2, [pc, #160]	; (8004f1c <TIM_OC2_SetConfig+0x100>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC2_SetConfig+0x6c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <TIM_OC2_SetConfig+0x104>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d10d      	bne.n	8004ea4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <TIM_OC2_SetConfig+0x100>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00f      	beq.n	8004ecc <TIM_OC2_SetConfig+0xb0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <TIM_OC2_SetConfig+0x104>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <TIM_OC2_SetConfig+0xb0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <TIM_OC2_SetConfig+0x108>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d007      	beq.n	8004ecc <TIM_OC2_SetConfig+0xb0>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a1a      	ldr	r2, [pc, #104]	; (8004f28 <TIM_OC2_SetConfig+0x10c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_OC2_SetConfig+0xb0>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <TIM_OC2_SetConfig+0x110>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d113      	bne.n	8004ef4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40013400 	.word	0x40013400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800

08004f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	021b      	lsls	r3, r3, #8
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a27      	ldr	r2, [pc, #156]	; (800502c <TIM_OC3_SetConfig+0xfc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_OC3_SetConfig+0x6a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a26      	ldr	r2, [pc, #152]	; (8005030 <TIM_OC3_SetConfig+0x100>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d10d      	bne.n	8004fb6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a1c      	ldr	r2, [pc, #112]	; (800502c <TIM_OC3_SetConfig+0xfc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00f      	beq.n	8004fde <TIM_OC3_SetConfig+0xae>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a1b      	ldr	r2, [pc, #108]	; (8005030 <TIM_OC3_SetConfig+0x100>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <TIM_OC3_SetConfig+0xae>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <TIM_OC3_SetConfig+0x104>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_OC3_SetConfig+0xae>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a19      	ldr	r2, [pc, #100]	; (8005038 <TIM_OC3_SetConfig+0x108>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_OC3_SetConfig+0xae>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a18      	ldr	r2, [pc, #96]	; (800503c <TIM_OC3_SetConfig+0x10c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d113      	bne.n	8005006 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	621a      	str	r2, [r3, #32]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40013400 	.word	0x40013400
 8005034:	40014000 	.word	0x40014000
 8005038:	40014400 	.word	0x40014400
 800503c:	40014800 	.word	0x40014800

08005040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800507a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800508e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	031b      	lsls	r3, r3, #12
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a18      	ldr	r2, [pc, #96]	; (8005100 <TIM_OC4_SetConfig+0xc0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00f      	beq.n	80050c4 <TIM_OC4_SetConfig+0x84>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a17      	ldr	r2, [pc, #92]	; (8005104 <TIM_OC4_SetConfig+0xc4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_OC4_SetConfig+0x84>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a16      	ldr	r2, [pc, #88]	; (8005108 <TIM_OC4_SetConfig+0xc8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_OC4_SetConfig+0x84>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a15      	ldr	r2, [pc, #84]	; (800510c <TIM_OC4_SetConfig+0xcc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_OC4_SetConfig+0x84>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a14      	ldr	r2, [pc, #80]	; (8005110 <TIM_OC4_SetConfig+0xd0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d109      	bne.n	80050d8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	019b      	lsls	r3, r3, #6
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	621a      	str	r2, [r3, #32]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40012c00 	.word	0x40012c00
 8005104:	40013400 	.word	0x40013400
 8005108:	40014000 	.word	0x40014000
 800510c:	40014400 	.word	0x40014400
 8005110:	40014800 	.word	0x40014800

08005114 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005158:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	041b      	lsls	r3, r3, #16
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <TIM_OC5_SetConfig+0xb4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00f      	beq.n	800518e <TIM_OC5_SetConfig+0x7a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a16      	ldr	r2, [pc, #88]	; (80051cc <TIM_OC5_SetConfig+0xb8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00b      	beq.n	800518e <TIM_OC5_SetConfig+0x7a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <TIM_OC5_SetConfig+0xbc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d007      	beq.n	800518e <TIM_OC5_SetConfig+0x7a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <TIM_OC5_SetConfig+0xc0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_OC5_SetConfig+0x7a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <TIM_OC5_SetConfig+0xc4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d109      	bne.n	80051a2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005194:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40013400 	.word	0x40013400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800

080051dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	051b      	lsls	r3, r3, #20
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a18      	ldr	r2, [pc, #96]	; (8005294 <TIM_OC6_SetConfig+0xb8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00f      	beq.n	8005258 <TIM_OC6_SetConfig+0x7c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <TIM_OC6_SetConfig+0xbc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00b      	beq.n	8005258 <TIM_OC6_SetConfig+0x7c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <TIM_OC6_SetConfig+0xc0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d007      	beq.n	8005258 <TIM_OC6_SetConfig+0x7c>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a15      	ldr	r2, [pc, #84]	; (80052a0 <TIM_OC6_SetConfig+0xc4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC6_SetConfig+0x7c>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <TIM_OC6_SetConfig+0xc8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d109      	bne.n	800526c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800525e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	029b      	lsls	r3, r3, #10
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40013400 	.word	0x40013400
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800

080052a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0201 	bic.w	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 030a 	bic.w	r3, r3, #10
 80052e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005306:	b480      	push	{r7}
 8005308:	b087      	sub	sp, #28
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f023 0210 	bic.w	r2, r3, #16
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	031b      	lsls	r3, r3, #12
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005342:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	f043 0307 	orr.w	r3, r3, #7
 8005388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]
}
 8005390:	bf00      	nop
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	431a      	orrs	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	609a      	str	r2, [r3, #8]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	2201      	movs	r2, #1
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1a      	ldr	r2, [r3, #32]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	401a      	ands	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	fa01 f303 	lsl.w	r3, r1, r3
 8005414:	431a      	orrs	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	bf00      	nop
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800543c:	2302      	movs	r3, #2
 800543e:	e068      	b.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a2e      	ldr	r2, [pc, #184]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a2d      	ldr	r2, [pc, #180]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d108      	bne.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800547a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a1e      	ldr	r2, [pc, #120]	; (8005520 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01d      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b2:	d018      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1a      	ldr	r2, [pc, #104]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a13      	ldr	r2, [pc, #76]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d10c      	bne.n	8005500 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40013400 	.word	0x40013400
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40014000 	.word	0x40014000

08005538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e040      	b.n	8005608 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fb fc30 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2224      	movs	r2, #36	; 0x24
 80055a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fb6a 	bl	8005c94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f8af 	bl	8005724 <UART_SetConfig>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e01b      	b.n	8005608 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 fbe9 	bl	8005dd8 <UART_CheckIdleState>
 8005606:	4603      	mov	r3, r0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b08a      	sub	sp, #40	; 0x28
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005624:	2b20      	cmp	r3, #32
 8005626:	d178      	bne.n	800571a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_UART_Transmit+0x24>
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e071      	b.n	800571c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2221      	movs	r2, #33	; 0x21
 8005644:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005646:	f7fb fd55 	bl	80010f4 <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005664:	d108      	bne.n	8005678 <HAL_UART_Transmit+0x68>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e003      	b.n	8005680 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800567c:	2300      	movs	r3, #0
 800567e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005680:	e030      	b.n	80056e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2200      	movs	r2, #0
 800568a:	2180      	movs	r1, #128	; 0x80
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fc4b 	bl	8005f28 <UART_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d004      	beq.n	80056a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e03c      	b.n	800571c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	881a      	ldrh	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b4:	b292      	uxth	r2, r2
 80056b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	3302      	adds	r3, #2
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	e008      	b.n	80056d2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	781a      	ldrb	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	b292      	uxth	r2, r2
 80056ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1c8      	bne.n	8005682 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2200      	movs	r2, #0
 80056f8:	2140      	movs	r1, #64	; 0x40
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fc14 	bl	8005f28 <UART_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e005      	b.n	800571c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2220      	movs	r2, #32
 8005714:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e000      	b.n	800571c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800571a:	2302      	movs	r3, #2
  }
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005728:	b08a      	sub	sp, #40	; 0x28
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	431a      	orrs	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	431a      	orrs	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	4313      	orrs	r3, r2
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4ba4      	ldr	r3, [pc, #656]	; (80059e4 <UART_SetConfig+0x2c0>)
 8005754:	4013      	ands	r3, r2
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800575c:	430b      	orrs	r3, r1
 800575e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a99      	ldr	r2, [pc, #612]	; (80059e8 <UART_SetConfig+0x2c4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	4313      	orrs	r3, r2
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a0:	430a      	orrs	r2, r1
 80057a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a90      	ldr	r2, [pc, #576]	; (80059ec <UART_SetConfig+0x2c8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d126      	bne.n	80057fc <UART_SetConfig+0xd8>
 80057ae:	4b90      	ldr	r3, [pc, #576]	; (80059f0 <UART_SetConfig+0x2cc>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d81b      	bhi.n	80057f4 <UART_SetConfig+0xd0>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0xa0>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057e5 	.word	0x080057e5
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057da:	e116      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057dc:	2302      	movs	r3, #2
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e2:	e112      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ea:	e10e      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057ec:	2308      	movs	r3, #8
 80057ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057f2:	e10a      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057f4:	2310      	movs	r3, #16
 80057f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057fa:	e106      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a7c      	ldr	r2, [pc, #496]	; (80059f4 <UART_SetConfig+0x2d0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d138      	bne.n	8005878 <UART_SetConfig+0x154>
 8005806:	4b7a      	ldr	r3, [pc, #488]	; (80059f0 <UART_SetConfig+0x2cc>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b0c      	cmp	r3, #12
 8005812:	d82d      	bhi.n	8005870 <UART_SetConfig+0x14c>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <UART_SetConfig+0xf8>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005851 	.word	0x08005851
 8005820:	08005871 	.word	0x08005871
 8005824:	08005871 	.word	0x08005871
 8005828:	08005871 	.word	0x08005871
 800582c:	08005861 	.word	0x08005861
 8005830:	08005871 	.word	0x08005871
 8005834:	08005871 	.word	0x08005871
 8005838:	08005871 	.word	0x08005871
 800583c:	08005859 	.word	0x08005859
 8005840:	08005871 	.word	0x08005871
 8005844:	08005871 	.word	0x08005871
 8005848:	08005871 	.word	0x08005871
 800584c:	08005869 	.word	0x08005869
 8005850:	2300      	movs	r3, #0
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005856:	e0d8      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005858:	2302      	movs	r3, #2
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800585e:	e0d4      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005866:	e0d0      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800586e:	e0cc      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005876:	e0c8      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5e      	ldr	r2, [pc, #376]	; (80059f8 <UART_SetConfig+0x2d4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d125      	bne.n	80058ce <UART_SetConfig+0x1aa>
 8005882:	4b5b      	ldr	r3, [pc, #364]	; (80059f0 <UART_SetConfig+0x2cc>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800588c:	2b30      	cmp	r3, #48	; 0x30
 800588e:	d016      	beq.n	80058be <UART_SetConfig+0x19a>
 8005890:	2b30      	cmp	r3, #48	; 0x30
 8005892:	d818      	bhi.n	80058c6 <UART_SetConfig+0x1a2>
 8005894:	2b20      	cmp	r3, #32
 8005896:	d00a      	beq.n	80058ae <UART_SetConfig+0x18a>
 8005898:	2b20      	cmp	r3, #32
 800589a:	d814      	bhi.n	80058c6 <UART_SetConfig+0x1a2>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <UART_SetConfig+0x182>
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d008      	beq.n	80058b6 <UART_SetConfig+0x192>
 80058a4:	e00f      	b.n	80058c6 <UART_SetConfig+0x1a2>
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ac:	e0ad      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058ae:	2302      	movs	r3, #2
 80058b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058b4:	e0a9      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058b6:	2304      	movs	r3, #4
 80058b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058bc:	e0a5      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058be:	2308      	movs	r3, #8
 80058c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058c4:	e0a1      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058c6:	2310      	movs	r3, #16
 80058c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058cc:	e09d      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a4a      	ldr	r2, [pc, #296]	; (80059fc <UART_SetConfig+0x2d8>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d125      	bne.n	8005924 <UART_SetConfig+0x200>
 80058d8:	4b45      	ldr	r3, [pc, #276]	; (80059f0 <UART_SetConfig+0x2cc>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058e2:	2bc0      	cmp	r3, #192	; 0xc0
 80058e4:	d016      	beq.n	8005914 <UART_SetConfig+0x1f0>
 80058e6:	2bc0      	cmp	r3, #192	; 0xc0
 80058e8:	d818      	bhi.n	800591c <UART_SetConfig+0x1f8>
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d00a      	beq.n	8005904 <UART_SetConfig+0x1e0>
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	d814      	bhi.n	800591c <UART_SetConfig+0x1f8>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <UART_SetConfig+0x1d8>
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d008      	beq.n	800590c <UART_SetConfig+0x1e8>
 80058fa:	e00f      	b.n	800591c <UART_SetConfig+0x1f8>
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005902:	e082      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005904:	2302      	movs	r3, #2
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800590a:	e07e      	b.n	8005a0a <UART_SetConfig+0x2e6>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005912:	e07a      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800591a:	e076      	b.n	8005a0a <UART_SetConfig+0x2e6>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005922:	e072      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a35      	ldr	r2, [pc, #212]	; (8005a00 <UART_SetConfig+0x2dc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d12a      	bne.n	8005984 <UART_SetConfig+0x260>
 800592e:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <UART_SetConfig+0x2cc>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593c:	d01a      	beq.n	8005974 <UART_SetConfig+0x250>
 800593e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005942:	d81b      	bhi.n	800597c <UART_SetConfig+0x258>
 8005944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005948:	d00c      	beq.n	8005964 <UART_SetConfig+0x240>
 800594a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594e:	d815      	bhi.n	800597c <UART_SetConfig+0x258>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <UART_SetConfig+0x238>
 8005954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005958:	d008      	beq.n	800596c <UART_SetConfig+0x248>
 800595a:	e00f      	b.n	800597c <UART_SetConfig+0x258>
 800595c:	2300      	movs	r3, #0
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005962:	e052      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005964:	2302      	movs	r3, #2
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596a:	e04e      	b.n	8005a0a <UART_SetConfig+0x2e6>
 800596c:	2304      	movs	r3, #4
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005972:	e04a      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005974:	2308      	movs	r3, #8
 8005976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800597a:	e046      	b.n	8005a0a <UART_SetConfig+0x2e6>
 800597c:	2310      	movs	r3, #16
 800597e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005982:	e042      	b.n	8005a0a <UART_SetConfig+0x2e6>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <UART_SetConfig+0x2c4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d13a      	bne.n	8005a04 <UART_SetConfig+0x2e0>
 800598e:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <UART_SetConfig+0x2cc>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800599c:	d01a      	beq.n	80059d4 <UART_SetConfig+0x2b0>
 800599e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059a2:	d81b      	bhi.n	80059dc <UART_SetConfig+0x2b8>
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a8:	d00c      	beq.n	80059c4 <UART_SetConfig+0x2a0>
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ae:	d815      	bhi.n	80059dc <UART_SetConfig+0x2b8>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <UART_SetConfig+0x298>
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b8:	d008      	beq.n	80059cc <UART_SetConfig+0x2a8>
 80059ba:	e00f      	b.n	80059dc <UART_SetConfig+0x2b8>
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c2:	e022      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059c4:	2302      	movs	r3, #2
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ca:	e01e      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059cc:	2304      	movs	r3, #4
 80059ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059d2:	e01a      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059d4:	2308      	movs	r3, #8
 80059d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059da:	e016      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059dc:	2310      	movs	r3, #16
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e2:	e012      	b.n	8005a0a <UART_SetConfig+0x2e6>
 80059e4:	efff69f3 	.word	0xefff69f3
 80059e8:	40008000 	.word	0x40008000
 80059ec:	40013800 	.word	0x40013800
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40004400 	.word	0x40004400
 80059f8:	40004800 	.word	0x40004800
 80059fc:	40004c00 	.word	0x40004c00
 8005a00:	40005000 	.word	0x40005000
 8005a04:	2310      	movs	r3, #16
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a9f      	ldr	r2, [pc, #636]	; (8005c8c <UART_SetConfig+0x568>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d17a      	bne.n	8005b0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d824      	bhi.n	8005a66 <UART_SetConfig+0x342>
 8005a1c:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x300>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a67 	.word	0x08005a67
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a67 	.word	0x08005a67
 8005a34:	08005a57 	.word	0x08005a57
 8005a38:	08005a67 	.word	0x08005a67
 8005a3c:	08005a67 	.word	0x08005a67
 8005a40:	08005a67 	.word	0x08005a67
 8005a44:	08005a5f 	.word	0x08005a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fd fe48 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8005a4c:	61f8      	str	r0, [r7, #28]
        break;
 8005a4e:	e010      	b.n	8005a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a50:	4b8f      	ldr	r3, [pc, #572]	; (8005c90 <UART_SetConfig+0x56c>)
 8005a52:	61fb      	str	r3, [r7, #28]
        break;
 8005a54:	e00d      	b.n	8005a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a56:	f7fd fda9 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 8005a5a:	61f8      	str	r0, [r7, #28]
        break;
 8005a5c:	e009      	b.n	8005a72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a62:	61fb      	str	r3, [r7, #28]
        break;
 8005a64:	e005      	b.n	8005a72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80fb 	beq.w	8005c70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	4413      	add	r3, r2
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d305      	bcc.n	8005a96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d903      	bls.n	8005a9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005a9c:	e0e8      	b.n	8005c70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	4615      	mov	r5, r2
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	022b      	lsls	r3, r5, #8
 8005ab0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005ab4:	0222      	lsls	r2, r4, #8
 8005ab6:	68f9      	ldr	r1, [r7, #12]
 8005ab8:	6849      	ldr	r1, [r1, #4]
 8005aba:	0849      	lsrs	r1, r1, #1
 8005abc:	2000      	movs	r0, #0
 8005abe:	4688      	mov	r8, r1
 8005ac0:	4681      	mov	r9, r0
 8005ac2:	eb12 0a08 	adds.w	sl, r2, r8
 8005ac6:	eb43 0b09 	adc.w	fp, r3, r9
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	603b      	str	r3, [r7, #0]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad8:	4650      	mov	r0, sl
 8005ada:	4659      	mov	r1, fp
 8005adc:	f7fa fbd0 	bl	8000280 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aee:	d308      	bcc.n	8005b02 <UART_SetConfig+0x3de>
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af6:	d204      	bcs.n	8005b02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	60da      	str	r2, [r3, #12]
 8005b00:	e0b6      	b.n	8005c70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b08:	e0b2      	b.n	8005c70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	d15e      	bne.n	8005bd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d828      	bhi.n	8005b6e <UART_SetConfig+0x44a>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <UART_SetConfig+0x400>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b51 	.word	0x08005b51
 8005b2c:	08005b59 	.word	0x08005b59
 8005b30:	08005b6f 	.word	0x08005b6f
 8005b34:	08005b5f 	.word	0x08005b5f
 8005b38:	08005b6f 	.word	0x08005b6f
 8005b3c:	08005b6f 	.word	0x08005b6f
 8005b40:	08005b6f 	.word	0x08005b6f
 8005b44:	08005b67 	.word	0x08005b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b48:	f7fd fdc8 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8005b4c:	61f8      	str	r0, [r7, #28]
        break;
 8005b4e:	e014      	b.n	8005b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b50:	f7fd fdda 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8005b54:	61f8      	str	r0, [r7, #28]
        break;
 8005b56:	e010      	b.n	8005b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b58:	4b4d      	ldr	r3, [pc, #308]	; (8005c90 <UART_SetConfig+0x56c>)
 8005b5a:	61fb      	str	r3, [r7, #28]
        break;
 8005b5c:	e00d      	b.n	8005b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5e:	f7fd fd25 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 8005b62:	61f8      	str	r0, [r7, #28]
        break;
 8005b64:	e009      	b.n	8005b7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6a:	61fb      	str	r3, [r7, #28]
        break;
 8005b6c:	e005      	b.n	8005b7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d077      	beq.n	8005c70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	005a      	lsls	r2, r3, #1
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b0f      	cmp	r3, #15
 8005b9a:	d916      	bls.n	8005bca <UART_SetConfig+0x4a6>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba2:	d212      	bcs.n	8005bca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f023 030f 	bic.w	r3, r3, #15
 8005bac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	8afb      	ldrh	r3, [r7, #22]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	8afa      	ldrh	r2, [r7, #22]
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	e052      	b.n	8005c70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bd0:	e04e      	b.n	8005c70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d827      	bhi.n	8005c2a <UART_SetConfig+0x506>
 8005bda:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x4bc>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	08005c2b 	.word	0x08005c2b
 8005bf0:	08005c1b 	.word	0x08005c1b
 8005bf4:	08005c2b 	.word	0x08005c2b
 8005bf8:	08005c2b 	.word	0x08005c2b
 8005bfc:	08005c2b 	.word	0x08005c2b
 8005c00:	08005c23 	.word	0x08005c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c04:	f7fd fd6a 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8005c08:	61f8      	str	r0, [r7, #28]
        break;
 8005c0a:	e014      	b.n	8005c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c0c:	f7fd fd7c 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8005c10:	61f8      	str	r0, [r7, #28]
        break;
 8005c12:	e010      	b.n	8005c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c14:	4b1e      	ldr	r3, [pc, #120]	; (8005c90 <UART_SetConfig+0x56c>)
 8005c16:	61fb      	str	r3, [r7, #28]
        break;
 8005c18:	e00d      	b.n	8005c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c1a:	f7fd fcc7 	bl	80035ac <HAL_RCC_GetSysClockFreq>
 8005c1e:	61f8      	str	r0, [r7, #28]
        break;
 8005c20:	e009      	b.n	8005c36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c26:	61fb      	str	r3, [r7, #28]
        break;
 8005c28:	e005      	b.n	8005c36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c34:	bf00      	nop
    }

    if (pclk != 0U)
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d019      	beq.n	8005c70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	085a      	lsrs	r2, r3, #1
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	d909      	bls.n	8005c6a <UART_SetConfig+0x546>
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5c:	d205      	bcs.n	8005c6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	e002      	b.n	8005c70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005c7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3728      	adds	r7, #40	; 0x28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40008000 	.word	0x40008000
 8005c90:	00f42400 	.word	0x00f42400

08005c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00a      	beq.n	8005cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01a      	beq.n	8005daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d92:	d10a      	bne.n	8005daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	605a      	str	r2, [r3, #4]
  }
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b098      	sub	sp, #96	; 0x60
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005de8:	f7fb f984 	bl	80010f4 <HAL_GetTick>
 8005dec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d12e      	bne.n	8005e5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e04:	2200      	movs	r2, #0
 8005e06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f88c 	bl	8005f28 <UART_WaitOnFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d021      	beq.n	8005e5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	647b      	str	r3, [r7, #68]	; 0x44
 8005e36:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e6      	bne.n	8005e16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e062      	b.n	8005f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d149      	bne.n	8005efc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e70:	2200      	movs	r2, #0
 8005e72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f856 	bl	8005f28 <UART_WaitOnFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d03c      	beq.n	8005efc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ea2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e6      	bne.n	8005e82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0301 	bic.w	r3, r3, #1
 8005eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ed4:	61fa      	str	r2, [r7, #28]
 8005ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	69b9      	ldr	r1, [r7, #24]
 8005eda:	69fa      	ldr	r2, [r7, #28]
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e5      	bne.n	8005eb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e011      	b.n	8005f20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3758      	adds	r7, #88	; 0x58
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f38:	e049      	b.n	8005fce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d045      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f42:	f7fb f8d7 	bl	80010f4 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e048      	b.n	8005fee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d031      	beq.n	8005fce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d110      	bne.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f838 	bl	8005ff6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e029      	b.n	8005fee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa8:	d111      	bne.n	8005fce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f81e 	bl	8005ff6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e00f      	b.n	8005fee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	bf0c      	ite	eq
 8005fde:	2301      	moveq	r3, #1
 8005fe0:	2300      	movne	r3, #0
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d0a6      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b095      	sub	sp, #84	; 0x54
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006006:	e853 3f00 	ldrex	r3, [r3]
 800600a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601c:	643b      	str	r3, [r7, #64]	; 0x40
 800601e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e6      	bne.n	8005ffe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	64bb      	str	r3, [r7, #72]	; 0x48
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006050:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e5      	bne.n	8006030 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006068:	2b01      	cmp	r3, #1
 800606a:	d118      	bne.n	800609e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	60bb      	str	r3, [r7, #8]
   return(result);
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f023 0310 	bic.w	r3, r3, #16
 8006080:	647b      	str	r3, [r7, #68]	; 0x44
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6979      	ldr	r1, [r7, #20]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	613b      	str	r3, [r7, #16]
   return(result);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e6      	bne.n	800606c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80060b2:	bf00      	nop
 80060b4:	3754      	adds	r7, #84	; 0x54
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <siprintf>:
 80060c0:	b40e      	push	{r1, r2, r3}
 80060c2:	b500      	push	{lr}
 80060c4:	b09c      	sub	sp, #112	; 0x70
 80060c6:	ab1d      	add	r3, sp, #116	; 0x74
 80060c8:	9002      	str	r0, [sp, #8]
 80060ca:	9006      	str	r0, [sp, #24]
 80060cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80060d0:	4809      	ldr	r0, [pc, #36]	; (80060f8 <siprintf+0x38>)
 80060d2:	9107      	str	r1, [sp, #28]
 80060d4:	9104      	str	r1, [sp, #16]
 80060d6:	4909      	ldr	r1, [pc, #36]	; (80060fc <siprintf+0x3c>)
 80060d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80060dc:	9105      	str	r1, [sp, #20]
 80060de:	6800      	ldr	r0, [r0, #0]
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	a902      	add	r1, sp, #8
 80060e4:	f000 f992 	bl	800640c <_svfiprintf_r>
 80060e8:	9b02      	ldr	r3, [sp, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	b01c      	add	sp, #112	; 0x70
 80060f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060f4:	b003      	add	sp, #12
 80060f6:	4770      	bx	lr
 80060f8:	20000058 	.word	0x20000058
 80060fc:	ffff0208 	.word	0xffff0208

08006100 <memset>:
 8006100:	4402      	add	r2, r0
 8006102:	4603      	mov	r3, r0
 8006104:	4293      	cmp	r3, r2
 8006106:	d100      	bne.n	800610a <memset+0xa>
 8006108:	4770      	bx	lr
 800610a:	f803 1b01 	strb.w	r1, [r3], #1
 800610e:	e7f9      	b.n	8006104 <memset+0x4>

08006110 <__errno>:
 8006110:	4b01      	ldr	r3, [pc, #4]	; (8006118 <__errno+0x8>)
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	20000058 	.word	0x20000058

0800611c <__libc_init_array>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4d0d      	ldr	r5, [pc, #52]	; (8006154 <__libc_init_array+0x38>)
 8006120:	4c0d      	ldr	r4, [pc, #52]	; (8006158 <__libc_init_array+0x3c>)
 8006122:	1b64      	subs	r4, r4, r5
 8006124:	10a4      	asrs	r4, r4, #2
 8006126:	2600      	movs	r6, #0
 8006128:	42a6      	cmp	r6, r4
 800612a:	d109      	bne.n	8006140 <__libc_init_array+0x24>
 800612c:	4d0b      	ldr	r5, [pc, #44]	; (800615c <__libc_init_array+0x40>)
 800612e:	4c0c      	ldr	r4, [pc, #48]	; (8006160 <__libc_init_array+0x44>)
 8006130:	f000 fc6a 	bl	8006a08 <_init>
 8006134:	1b64      	subs	r4, r4, r5
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	2600      	movs	r6, #0
 800613a:	42a6      	cmp	r6, r4
 800613c:	d105      	bne.n	800614a <__libc_init_array+0x2e>
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	f855 3b04 	ldr.w	r3, [r5], #4
 8006144:	4798      	blx	r3
 8006146:	3601      	adds	r6, #1
 8006148:	e7ee      	b.n	8006128 <__libc_init_array+0xc>
 800614a:	f855 3b04 	ldr.w	r3, [r5], #4
 800614e:	4798      	blx	r3
 8006150:	3601      	adds	r6, #1
 8006152:	e7f2      	b.n	800613a <__libc_init_array+0x1e>
 8006154:	08006aac 	.word	0x08006aac
 8006158:	08006aac 	.word	0x08006aac
 800615c:	08006aac 	.word	0x08006aac
 8006160:	08006ab0 	.word	0x08006ab0

08006164 <__retarget_lock_acquire_recursive>:
 8006164:	4770      	bx	lr

08006166 <__retarget_lock_release_recursive>:
 8006166:	4770      	bx	lr

08006168 <_free_r>:
 8006168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800616a:	2900      	cmp	r1, #0
 800616c:	d044      	beq.n	80061f8 <_free_r+0x90>
 800616e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006172:	9001      	str	r0, [sp, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f1a1 0404 	sub.w	r4, r1, #4
 800617a:	bfb8      	it	lt
 800617c:	18e4      	addlt	r4, r4, r3
 800617e:	f000 f8df 	bl	8006340 <__malloc_lock>
 8006182:	4a1e      	ldr	r2, [pc, #120]	; (80061fc <_free_r+0x94>)
 8006184:	9801      	ldr	r0, [sp, #4]
 8006186:	6813      	ldr	r3, [r2, #0]
 8006188:	b933      	cbnz	r3, 8006198 <_free_r+0x30>
 800618a:	6063      	str	r3, [r4, #4]
 800618c:	6014      	str	r4, [r2, #0]
 800618e:	b003      	add	sp, #12
 8006190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006194:	f000 b8da 	b.w	800634c <__malloc_unlock>
 8006198:	42a3      	cmp	r3, r4
 800619a:	d908      	bls.n	80061ae <_free_r+0x46>
 800619c:	6825      	ldr	r5, [r4, #0]
 800619e:	1961      	adds	r1, r4, r5
 80061a0:	428b      	cmp	r3, r1
 80061a2:	bf01      	itttt	eq
 80061a4:	6819      	ldreq	r1, [r3, #0]
 80061a6:	685b      	ldreq	r3, [r3, #4]
 80061a8:	1949      	addeq	r1, r1, r5
 80061aa:	6021      	streq	r1, [r4, #0]
 80061ac:	e7ed      	b.n	800618a <_free_r+0x22>
 80061ae:	461a      	mov	r2, r3
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	b10b      	cbz	r3, 80061b8 <_free_r+0x50>
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	d9fa      	bls.n	80061ae <_free_r+0x46>
 80061b8:	6811      	ldr	r1, [r2, #0]
 80061ba:	1855      	adds	r5, r2, r1
 80061bc:	42a5      	cmp	r5, r4
 80061be:	d10b      	bne.n	80061d8 <_free_r+0x70>
 80061c0:	6824      	ldr	r4, [r4, #0]
 80061c2:	4421      	add	r1, r4
 80061c4:	1854      	adds	r4, r2, r1
 80061c6:	42a3      	cmp	r3, r4
 80061c8:	6011      	str	r1, [r2, #0]
 80061ca:	d1e0      	bne.n	800618e <_free_r+0x26>
 80061cc:	681c      	ldr	r4, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	6053      	str	r3, [r2, #4]
 80061d2:	440c      	add	r4, r1
 80061d4:	6014      	str	r4, [r2, #0]
 80061d6:	e7da      	b.n	800618e <_free_r+0x26>
 80061d8:	d902      	bls.n	80061e0 <_free_r+0x78>
 80061da:	230c      	movs	r3, #12
 80061dc:	6003      	str	r3, [r0, #0]
 80061de:	e7d6      	b.n	800618e <_free_r+0x26>
 80061e0:	6825      	ldr	r5, [r4, #0]
 80061e2:	1961      	adds	r1, r4, r5
 80061e4:	428b      	cmp	r3, r1
 80061e6:	bf04      	itt	eq
 80061e8:	6819      	ldreq	r1, [r3, #0]
 80061ea:	685b      	ldreq	r3, [r3, #4]
 80061ec:	6063      	str	r3, [r4, #4]
 80061ee:	bf04      	itt	eq
 80061f0:	1949      	addeq	r1, r1, r5
 80061f2:	6021      	streq	r1, [r4, #0]
 80061f4:	6054      	str	r4, [r2, #4]
 80061f6:	e7ca      	b.n	800618e <_free_r+0x26>
 80061f8:	b003      	add	sp, #12
 80061fa:	bd30      	pop	{r4, r5, pc}
 80061fc:	20000394 	.word	0x20000394

08006200 <sbrk_aligned>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4e0e      	ldr	r6, [pc, #56]	; (800623c <sbrk_aligned+0x3c>)
 8006204:	460c      	mov	r4, r1
 8006206:	6831      	ldr	r1, [r6, #0]
 8006208:	4605      	mov	r5, r0
 800620a:	b911      	cbnz	r1, 8006212 <sbrk_aligned+0x12>
 800620c:	f000 fba6 	bl	800695c <_sbrk_r>
 8006210:	6030      	str	r0, [r6, #0]
 8006212:	4621      	mov	r1, r4
 8006214:	4628      	mov	r0, r5
 8006216:	f000 fba1 	bl	800695c <_sbrk_r>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	d00a      	beq.n	8006234 <sbrk_aligned+0x34>
 800621e:	1cc4      	adds	r4, r0, #3
 8006220:	f024 0403 	bic.w	r4, r4, #3
 8006224:	42a0      	cmp	r0, r4
 8006226:	d007      	beq.n	8006238 <sbrk_aligned+0x38>
 8006228:	1a21      	subs	r1, r4, r0
 800622a:	4628      	mov	r0, r5
 800622c:	f000 fb96 	bl	800695c <_sbrk_r>
 8006230:	3001      	adds	r0, #1
 8006232:	d101      	bne.n	8006238 <sbrk_aligned+0x38>
 8006234:	f04f 34ff 	mov.w	r4, #4294967295
 8006238:	4620      	mov	r0, r4
 800623a:	bd70      	pop	{r4, r5, r6, pc}
 800623c:	20000398 	.word	0x20000398

08006240 <_malloc_r>:
 8006240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006244:	1ccd      	adds	r5, r1, #3
 8006246:	f025 0503 	bic.w	r5, r5, #3
 800624a:	3508      	adds	r5, #8
 800624c:	2d0c      	cmp	r5, #12
 800624e:	bf38      	it	cc
 8006250:	250c      	movcc	r5, #12
 8006252:	2d00      	cmp	r5, #0
 8006254:	4607      	mov	r7, r0
 8006256:	db01      	blt.n	800625c <_malloc_r+0x1c>
 8006258:	42a9      	cmp	r1, r5
 800625a:	d905      	bls.n	8006268 <_malloc_r+0x28>
 800625c:	230c      	movs	r3, #12
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	2600      	movs	r6, #0
 8006262:	4630      	mov	r0, r6
 8006264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006268:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800633c <_malloc_r+0xfc>
 800626c:	f000 f868 	bl	8006340 <__malloc_lock>
 8006270:	f8d8 3000 	ldr.w	r3, [r8]
 8006274:	461c      	mov	r4, r3
 8006276:	bb5c      	cbnz	r4, 80062d0 <_malloc_r+0x90>
 8006278:	4629      	mov	r1, r5
 800627a:	4638      	mov	r0, r7
 800627c:	f7ff ffc0 	bl	8006200 <sbrk_aligned>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	4604      	mov	r4, r0
 8006284:	d155      	bne.n	8006332 <_malloc_r+0xf2>
 8006286:	f8d8 4000 	ldr.w	r4, [r8]
 800628a:	4626      	mov	r6, r4
 800628c:	2e00      	cmp	r6, #0
 800628e:	d145      	bne.n	800631c <_malloc_r+0xdc>
 8006290:	2c00      	cmp	r4, #0
 8006292:	d048      	beq.n	8006326 <_malloc_r+0xe6>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	4631      	mov	r1, r6
 8006298:	4638      	mov	r0, r7
 800629a:	eb04 0903 	add.w	r9, r4, r3
 800629e:	f000 fb5d 	bl	800695c <_sbrk_r>
 80062a2:	4581      	cmp	r9, r0
 80062a4:	d13f      	bne.n	8006326 <_malloc_r+0xe6>
 80062a6:	6821      	ldr	r1, [r4, #0]
 80062a8:	1a6d      	subs	r5, r5, r1
 80062aa:	4629      	mov	r1, r5
 80062ac:	4638      	mov	r0, r7
 80062ae:	f7ff ffa7 	bl	8006200 <sbrk_aligned>
 80062b2:	3001      	adds	r0, #1
 80062b4:	d037      	beq.n	8006326 <_malloc_r+0xe6>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	442b      	add	r3, r5
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	f8d8 3000 	ldr.w	r3, [r8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d038      	beq.n	8006336 <_malloc_r+0xf6>
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	42a2      	cmp	r2, r4
 80062c8:	d12b      	bne.n	8006322 <_malloc_r+0xe2>
 80062ca:	2200      	movs	r2, #0
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	e00f      	b.n	80062f0 <_malloc_r+0xb0>
 80062d0:	6822      	ldr	r2, [r4, #0]
 80062d2:	1b52      	subs	r2, r2, r5
 80062d4:	d41f      	bmi.n	8006316 <_malloc_r+0xd6>
 80062d6:	2a0b      	cmp	r2, #11
 80062d8:	d917      	bls.n	800630a <_malloc_r+0xca>
 80062da:	1961      	adds	r1, r4, r5
 80062dc:	42a3      	cmp	r3, r4
 80062de:	6025      	str	r5, [r4, #0]
 80062e0:	bf18      	it	ne
 80062e2:	6059      	strne	r1, [r3, #4]
 80062e4:	6863      	ldr	r3, [r4, #4]
 80062e6:	bf08      	it	eq
 80062e8:	f8c8 1000 	streq.w	r1, [r8]
 80062ec:	5162      	str	r2, [r4, r5]
 80062ee:	604b      	str	r3, [r1, #4]
 80062f0:	4638      	mov	r0, r7
 80062f2:	f104 060b 	add.w	r6, r4, #11
 80062f6:	f000 f829 	bl	800634c <__malloc_unlock>
 80062fa:	f026 0607 	bic.w	r6, r6, #7
 80062fe:	1d23      	adds	r3, r4, #4
 8006300:	1af2      	subs	r2, r6, r3
 8006302:	d0ae      	beq.n	8006262 <_malloc_r+0x22>
 8006304:	1b9b      	subs	r3, r3, r6
 8006306:	50a3      	str	r3, [r4, r2]
 8006308:	e7ab      	b.n	8006262 <_malloc_r+0x22>
 800630a:	42a3      	cmp	r3, r4
 800630c:	6862      	ldr	r2, [r4, #4]
 800630e:	d1dd      	bne.n	80062cc <_malloc_r+0x8c>
 8006310:	f8c8 2000 	str.w	r2, [r8]
 8006314:	e7ec      	b.n	80062f0 <_malloc_r+0xb0>
 8006316:	4623      	mov	r3, r4
 8006318:	6864      	ldr	r4, [r4, #4]
 800631a:	e7ac      	b.n	8006276 <_malloc_r+0x36>
 800631c:	4634      	mov	r4, r6
 800631e:	6876      	ldr	r6, [r6, #4]
 8006320:	e7b4      	b.n	800628c <_malloc_r+0x4c>
 8006322:	4613      	mov	r3, r2
 8006324:	e7cc      	b.n	80062c0 <_malloc_r+0x80>
 8006326:	230c      	movs	r3, #12
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	4638      	mov	r0, r7
 800632c:	f000 f80e 	bl	800634c <__malloc_unlock>
 8006330:	e797      	b.n	8006262 <_malloc_r+0x22>
 8006332:	6025      	str	r5, [r4, #0]
 8006334:	e7dc      	b.n	80062f0 <_malloc_r+0xb0>
 8006336:	605b      	str	r3, [r3, #4]
 8006338:	deff      	udf	#255	; 0xff
 800633a:	bf00      	nop
 800633c:	20000394 	.word	0x20000394

08006340 <__malloc_lock>:
 8006340:	4801      	ldr	r0, [pc, #4]	; (8006348 <__malloc_lock+0x8>)
 8006342:	f7ff bf0f 	b.w	8006164 <__retarget_lock_acquire_recursive>
 8006346:	bf00      	nop
 8006348:	20000390 	.word	0x20000390

0800634c <__malloc_unlock>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__malloc_unlock+0x8>)
 800634e:	f7ff bf0a 	b.w	8006166 <__retarget_lock_release_recursive>
 8006352:	bf00      	nop
 8006354:	20000390 	.word	0x20000390

08006358 <__ssputs_r>:
 8006358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	688e      	ldr	r6, [r1, #8]
 800635e:	461f      	mov	r7, r3
 8006360:	42be      	cmp	r6, r7
 8006362:	680b      	ldr	r3, [r1, #0]
 8006364:	4682      	mov	sl, r0
 8006366:	460c      	mov	r4, r1
 8006368:	4690      	mov	r8, r2
 800636a:	d82c      	bhi.n	80063c6 <__ssputs_r+0x6e>
 800636c:	898a      	ldrh	r2, [r1, #12]
 800636e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006372:	d026      	beq.n	80063c2 <__ssputs_r+0x6a>
 8006374:	6965      	ldr	r5, [r4, #20]
 8006376:	6909      	ldr	r1, [r1, #16]
 8006378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800637c:	eba3 0901 	sub.w	r9, r3, r1
 8006380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006384:	1c7b      	adds	r3, r7, #1
 8006386:	444b      	add	r3, r9
 8006388:	106d      	asrs	r5, r5, #1
 800638a:	429d      	cmp	r5, r3
 800638c:	bf38      	it	cc
 800638e:	461d      	movcc	r5, r3
 8006390:	0553      	lsls	r3, r2, #21
 8006392:	d527      	bpl.n	80063e4 <__ssputs_r+0x8c>
 8006394:	4629      	mov	r1, r5
 8006396:	f7ff ff53 	bl	8006240 <_malloc_r>
 800639a:	4606      	mov	r6, r0
 800639c:	b360      	cbz	r0, 80063f8 <__ssputs_r+0xa0>
 800639e:	6921      	ldr	r1, [r4, #16]
 80063a0:	464a      	mov	r2, r9
 80063a2:	f000 faeb 	bl	800697c <memcpy>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	6126      	str	r6, [r4, #16]
 80063b4:	6165      	str	r5, [r4, #20]
 80063b6:	444e      	add	r6, r9
 80063b8:	eba5 0509 	sub.w	r5, r5, r9
 80063bc:	6026      	str	r6, [r4, #0]
 80063be:	60a5      	str	r5, [r4, #8]
 80063c0:	463e      	mov	r6, r7
 80063c2:	42be      	cmp	r6, r7
 80063c4:	d900      	bls.n	80063c8 <__ssputs_r+0x70>
 80063c6:	463e      	mov	r6, r7
 80063c8:	6820      	ldr	r0, [r4, #0]
 80063ca:	4632      	mov	r2, r6
 80063cc:	4641      	mov	r1, r8
 80063ce:	f000 faab 	bl	8006928 <memmove>
 80063d2:	68a3      	ldr	r3, [r4, #8]
 80063d4:	1b9b      	subs	r3, r3, r6
 80063d6:	60a3      	str	r3, [r4, #8]
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	4433      	add	r3, r6
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	2000      	movs	r0, #0
 80063e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e4:	462a      	mov	r2, r5
 80063e6:	f000 fad7 	bl	8006998 <_realloc_r>
 80063ea:	4606      	mov	r6, r0
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d1e0      	bne.n	80063b2 <__ssputs_r+0x5a>
 80063f0:	6921      	ldr	r1, [r4, #16]
 80063f2:	4650      	mov	r0, sl
 80063f4:	f7ff feb8 	bl	8006168 <_free_r>
 80063f8:	230c      	movs	r3, #12
 80063fa:	f8ca 3000 	str.w	r3, [sl]
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006404:	81a3      	strh	r3, [r4, #12]
 8006406:	f04f 30ff 	mov.w	r0, #4294967295
 800640a:	e7e9      	b.n	80063e0 <__ssputs_r+0x88>

0800640c <_svfiprintf_r>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	4698      	mov	r8, r3
 8006412:	898b      	ldrh	r3, [r1, #12]
 8006414:	061b      	lsls	r3, r3, #24
 8006416:	b09d      	sub	sp, #116	; 0x74
 8006418:	4607      	mov	r7, r0
 800641a:	460d      	mov	r5, r1
 800641c:	4614      	mov	r4, r2
 800641e:	d50e      	bpl.n	800643e <_svfiprintf_r+0x32>
 8006420:	690b      	ldr	r3, [r1, #16]
 8006422:	b963      	cbnz	r3, 800643e <_svfiprintf_r+0x32>
 8006424:	2140      	movs	r1, #64	; 0x40
 8006426:	f7ff ff0b 	bl	8006240 <_malloc_r>
 800642a:	6028      	str	r0, [r5, #0]
 800642c:	6128      	str	r0, [r5, #16]
 800642e:	b920      	cbnz	r0, 800643a <_svfiprintf_r+0x2e>
 8006430:	230c      	movs	r3, #12
 8006432:	603b      	str	r3, [r7, #0]
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	e0d0      	b.n	80065dc <_svfiprintf_r+0x1d0>
 800643a:	2340      	movs	r3, #64	; 0x40
 800643c:	616b      	str	r3, [r5, #20]
 800643e:	2300      	movs	r3, #0
 8006440:	9309      	str	r3, [sp, #36]	; 0x24
 8006442:	2320      	movs	r3, #32
 8006444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006448:	f8cd 800c 	str.w	r8, [sp, #12]
 800644c:	2330      	movs	r3, #48	; 0x30
 800644e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065f4 <_svfiprintf_r+0x1e8>
 8006452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006456:	f04f 0901 	mov.w	r9, #1
 800645a:	4623      	mov	r3, r4
 800645c:	469a      	mov	sl, r3
 800645e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006462:	b10a      	cbz	r2, 8006468 <_svfiprintf_r+0x5c>
 8006464:	2a25      	cmp	r2, #37	; 0x25
 8006466:	d1f9      	bne.n	800645c <_svfiprintf_r+0x50>
 8006468:	ebba 0b04 	subs.w	fp, sl, r4
 800646c:	d00b      	beq.n	8006486 <_svfiprintf_r+0x7a>
 800646e:	465b      	mov	r3, fp
 8006470:	4622      	mov	r2, r4
 8006472:	4629      	mov	r1, r5
 8006474:	4638      	mov	r0, r7
 8006476:	f7ff ff6f 	bl	8006358 <__ssputs_r>
 800647a:	3001      	adds	r0, #1
 800647c:	f000 80a9 	beq.w	80065d2 <_svfiprintf_r+0x1c6>
 8006480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006482:	445a      	add	r2, fp
 8006484:	9209      	str	r2, [sp, #36]	; 0x24
 8006486:	f89a 3000 	ldrb.w	r3, [sl]
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 80a1 	beq.w	80065d2 <_svfiprintf_r+0x1c6>
 8006490:	2300      	movs	r3, #0
 8006492:	f04f 32ff 	mov.w	r2, #4294967295
 8006496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800649a:	f10a 0a01 	add.w	sl, sl, #1
 800649e:	9304      	str	r3, [sp, #16]
 80064a0:	9307      	str	r3, [sp, #28]
 80064a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064a6:	931a      	str	r3, [sp, #104]	; 0x68
 80064a8:	4654      	mov	r4, sl
 80064aa:	2205      	movs	r2, #5
 80064ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b0:	4850      	ldr	r0, [pc, #320]	; (80065f4 <_svfiprintf_r+0x1e8>)
 80064b2:	f7f9 fe95 	bl	80001e0 <memchr>
 80064b6:	9a04      	ldr	r2, [sp, #16]
 80064b8:	b9d8      	cbnz	r0, 80064f2 <_svfiprintf_r+0xe6>
 80064ba:	06d0      	lsls	r0, r2, #27
 80064bc:	bf44      	itt	mi
 80064be:	2320      	movmi	r3, #32
 80064c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064c4:	0711      	lsls	r1, r2, #28
 80064c6:	bf44      	itt	mi
 80064c8:	232b      	movmi	r3, #43	; 0x2b
 80064ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ce:	f89a 3000 	ldrb.w	r3, [sl]
 80064d2:	2b2a      	cmp	r3, #42	; 0x2a
 80064d4:	d015      	beq.n	8006502 <_svfiprintf_r+0xf6>
 80064d6:	9a07      	ldr	r2, [sp, #28]
 80064d8:	4654      	mov	r4, sl
 80064da:	2000      	movs	r0, #0
 80064dc:	f04f 0c0a 	mov.w	ip, #10
 80064e0:	4621      	mov	r1, r4
 80064e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064e6:	3b30      	subs	r3, #48	; 0x30
 80064e8:	2b09      	cmp	r3, #9
 80064ea:	d94d      	bls.n	8006588 <_svfiprintf_r+0x17c>
 80064ec:	b1b0      	cbz	r0, 800651c <_svfiprintf_r+0x110>
 80064ee:	9207      	str	r2, [sp, #28]
 80064f0:	e014      	b.n	800651c <_svfiprintf_r+0x110>
 80064f2:	eba0 0308 	sub.w	r3, r0, r8
 80064f6:	fa09 f303 	lsl.w	r3, r9, r3
 80064fa:	4313      	orrs	r3, r2
 80064fc:	9304      	str	r3, [sp, #16]
 80064fe:	46a2      	mov	sl, r4
 8006500:	e7d2      	b.n	80064a8 <_svfiprintf_r+0x9c>
 8006502:	9b03      	ldr	r3, [sp, #12]
 8006504:	1d19      	adds	r1, r3, #4
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	9103      	str	r1, [sp, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	bfbb      	ittet	lt
 800650e:	425b      	neglt	r3, r3
 8006510:	f042 0202 	orrlt.w	r2, r2, #2
 8006514:	9307      	strge	r3, [sp, #28]
 8006516:	9307      	strlt	r3, [sp, #28]
 8006518:	bfb8      	it	lt
 800651a:	9204      	strlt	r2, [sp, #16]
 800651c:	7823      	ldrb	r3, [r4, #0]
 800651e:	2b2e      	cmp	r3, #46	; 0x2e
 8006520:	d10c      	bne.n	800653c <_svfiprintf_r+0x130>
 8006522:	7863      	ldrb	r3, [r4, #1]
 8006524:	2b2a      	cmp	r3, #42	; 0x2a
 8006526:	d134      	bne.n	8006592 <_svfiprintf_r+0x186>
 8006528:	9b03      	ldr	r3, [sp, #12]
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	9203      	str	r2, [sp, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	bfb8      	it	lt
 8006534:	f04f 33ff 	movlt.w	r3, #4294967295
 8006538:	3402      	adds	r4, #2
 800653a:	9305      	str	r3, [sp, #20]
 800653c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006604 <_svfiprintf_r+0x1f8>
 8006540:	7821      	ldrb	r1, [r4, #0]
 8006542:	2203      	movs	r2, #3
 8006544:	4650      	mov	r0, sl
 8006546:	f7f9 fe4b 	bl	80001e0 <memchr>
 800654a:	b138      	cbz	r0, 800655c <_svfiprintf_r+0x150>
 800654c:	9b04      	ldr	r3, [sp, #16]
 800654e:	eba0 000a 	sub.w	r0, r0, sl
 8006552:	2240      	movs	r2, #64	; 0x40
 8006554:	4082      	lsls	r2, r0
 8006556:	4313      	orrs	r3, r2
 8006558:	3401      	adds	r4, #1
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006560:	4825      	ldr	r0, [pc, #148]	; (80065f8 <_svfiprintf_r+0x1ec>)
 8006562:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006566:	2206      	movs	r2, #6
 8006568:	f7f9 fe3a 	bl	80001e0 <memchr>
 800656c:	2800      	cmp	r0, #0
 800656e:	d038      	beq.n	80065e2 <_svfiprintf_r+0x1d6>
 8006570:	4b22      	ldr	r3, [pc, #136]	; (80065fc <_svfiprintf_r+0x1f0>)
 8006572:	bb1b      	cbnz	r3, 80065bc <_svfiprintf_r+0x1b0>
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	3307      	adds	r3, #7
 8006578:	f023 0307 	bic.w	r3, r3, #7
 800657c:	3308      	adds	r3, #8
 800657e:	9303      	str	r3, [sp, #12]
 8006580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006582:	4433      	add	r3, r6
 8006584:	9309      	str	r3, [sp, #36]	; 0x24
 8006586:	e768      	b.n	800645a <_svfiprintf_r+0x4e>
 8006588:	fb0c 3202 	mla	r2, ip, r2, r3
 800658c:	460c      	mov	r4, r1
 800658e:	2001      	movs	r0, #1
 8006590:	e7a6      	b.n	80064e0 <_svfiprintf_r+0xd4>
 8006592:	2300      	movs	r3, #0
 8006594:	3401      	adds	r4, #1
 8006596:	9305      	str	r3, [sp, #20]
 8006598:	4619      	mov	r1, r3
 800659a:	f04f 0c0a 	mov.w	ip, #10
 800659e:	4620      	mov	r0, r4
 80065a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065a4:	3a30      	subs	r2, #48	; 0x30
 80065a6:	2a09      	cmp	r2, #9
 80065a8:	d903      	bls.n	80065b2 <_svfiprintf_r+0x1a6>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0c6      	beq.n	800653c <_svfiprintf_r+0x130>
 80065ae:	9105      	str	r1, [sp, #20]
 80065b0:	e7c4      	b.n	800653c <_svfiprintf_r+0x130>
 80065b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80065b6:	4604      	mov	r4, r0
 80065b8:	2301      	movs	r3, #1
 80065ba:	e7f0      	b.n	800659e <_svfiprintf_r+0x192>
 80065bc:	ab03      	add	r3, sp, #12
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	462a      	mov	r2, r5
 80065c2:	4b0f      	ldr	r3, [pc, #60]	; (8006600 <_svfiprintf_r+0x1f4>)
 80065c4:	a904      	add	r1, sp, #16
 80065c6:	4638      	mov	r0, r7
 80065c8:	f3af 8000 	nop.w
 80065cc:	1c42      	adds	r2, r0, #1
 80065ce:	4606      	mov	r6, r0
 80065d0:	d1d6      	bne.n	8006580 <_svfiprintf_r+0x174>
 80065d2:	89ab      	ldrh	r3, [r5, #12]
 80065d4:	065b      	lsls	r3, r3, #25
 80065d6:	f53f af2d 	bmi.w	8006434 <_svfiprintf_r+0x28>
 80065da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065dc:	b01d      	add	sp, #116	; 0x74
 80065de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e2:	ab03      	add	r3, sp, #12
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	462a      	mov	r2, r5
 80065e8:	4b05      	ldr	r3, [pc, #20]	; (8006600 <_svfiprintf_r+0x1f4>)
 80065ea:	a904      	add	r1, sp, #16
 80065ec:	4638      	mov	r0, r7
 80065ee:	f000 f879 	bl	80066e4 <_printf_i>
 80065f2:	e7eb      	b.n	80065cc <_svfiprintf_r+0x1c0>
 80065f4:	08006a70 	.word	0x08006a70
 80065f8:	08006a7a 	.word	0x08006a7a
 80065fc:	00000000 	.word	0x00000000
 8006600:	08006359 	.word	0x08006359
 8006604:	08006a76 	.word	0x08006a76

08006608 <_printf_common>:
 8006608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	4616      	mov	r6, r2
 800660e:	4699      	mov	r9, r3
 8006610:	688a      	ldr	r2, [r1, #8]
 8006612:	690b      	ldr	r3, [r1, #16]
 8006614:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006618:	4293      	cmp	r3, r2
 800661a:	bfb8      	it	lt
 800661c:	4613      	movlt	r3, r2
 800661e:	6033      	str	r3, [r6, #0]
 8006620:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006624:	4607      	mov	r7, r0
 8006626:	460c      	mov	r4, r1
 8006628:	b10a      	cbz	r2, 800662e <_printf_common+0x26>
 800662a:	3301      	adds	r3, #1
 800662c:	6033      	str	r3, [r6, #0]
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	0699      	lsls	r1, r3, #26
 8006632:	bf42      	ittt	mi
 8006634:	6833      	ldrmi	r3, [r6, #0]
 8006636:	3302      	addmi	r3, #2
 8006638:	6033      	strmi	r3, [r6, #0]
 800663a:	6825      	ldr	r5, [r4, #0]
 800663c:	f015 0506 	ands.w	r5, r5, #6
 8006640:	d106      	bne.n	8006650 <_printf_common+0x48>
 8006642:	f104 0a19 	add.w	sl, r4, #25
 8006646:	68e3      	ldr	r3, [r4, #12]
 8006648:	6832      	ldr	r2, [r6, #0]
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	42ab      	cmp	r3, r5
 800664e:	dc26      	bgt.n	800669e <_printf_common+0x96>
 8006650:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006654:	1e13      	subs	r3, r2, #0
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	bf18      	it	ne
 800665a:	2301      	movne	r3, #1
 800665c:	0692      	lsls	r2, r2, #26
 800665e:	d42b      	bmi.n	80066b8 <_printf_common+0xb0>
 8006660:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006664:	4649      	mov	r1, r9
 8006666:	4638      	mov	r0, r7
 8006668:	47c0      	blx	r8
 800666a:	3001      	adds	r0, #1
 800666c:	d01e      	beq.n	80066ac <_printf_common+0xa4>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	6922      	ldr	r2, [r4, #16]
 8006672:	f003 0306 	and.w	r3, r3, #6
 8006676:	2b04      	cmp	r3, #4
 8006678:	bf02      	ittt	eq
 800667a:	68e5      	ldreq	r5, [r4, #12]
 800667c:	6833      	ldreq	r3, [r6, #0]
 800667e:	1aed      	subeq	r5, r5, r3
 8006680:	68a3      	ldr	r3, [r4, #8]
 8006682:	bf0c      	ite	eq
 8006684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006688:	2500      	movne	r5, #0
 800668a:	4293      	cmp	r3, r2
 800668c:	bfc4      	itt	gt
 800668e:	1a9b      	subgt	r3, r3, r2
 8006690:	18ed      	addgt	r5, r5, r3
 8006692:	2600      	movs	r6, #0
 8006694:	341a      	adds	r4, #26
 8006696:	42b5      	cmp	r5, r6
 8006698:	d11a      	bne.n	80066d0 <_printf_common+0xc8>
 800669a:	2000      	movs	r0, #0
 800669c:	e008      	b.n	80066b0 <_printf_common+0xa8>
 800669e:	2301      	movs	r3, #1
 80066a0:	4652      	mov	r2, sl
 80066a2:	4649      	mov	r1, r9
 80066a4:	4638      	mov	r0, r7
 80066a6:	47c0      	blx	r8
 80066a8:	3001      	adds	r0, #1
 80066aa:	d103      	bne.n	80066b4 <_printf_common+0xac>
 80066ac:	f04f 30ff 	mov.w	r0, #4294967295
 80066b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b4:	3501      	adds	r5, #1
 80066b6:	e7c6      	b.n	8006646 <_printf_common+0x3e>
 80066b8:	18e1      	adds	r1, r4, r3
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	2030      	movs	r0, #48	; 0x30
 80066be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066c2:	4422      	add	r2, r4
 80066c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066cc:	3302      	adds	r3, #2
 80066ce:	e7c7      	b.n	8006660 <_printf_common+0x58>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4622      	mov	r2, r4
 80066d4:	4649      	mov	r1, r9
 80066d6:	4638      	mov	r0, r7
 80066d8:	47c0      	blx	r8
 80066da:	3001      	adds	r0, #1
 80066dc:	d0e6      	beq.n	80066ac <_printf_common+0xa4>
 80066de:	3601      	adds	r6, #1
 80066e0:	e7d9      	b.n	8006696 <_printf_common+0x8e>
	...

080066e4 <_printf_i>:
 80066e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066e8:	7e0f      	ldrb	r7, [r1, #24]
 80066ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066ec:	2f78      	cmp	r7, #120	; 0x78
 80066ee:	4691      	mov	r9, r2
 80066f0:	4680      	mov	r8, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	469a      	mov	sl, r3
 80066f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066fa:	d807      	bhi.n	800670c <_printf_i+0x28>
 80066fc:	2f62      	cmp	r7, #98	; 0x62
 80066fe:	d80a      	bhi.n	8006716 <_printf_i+0x32>
 8006700:	2f00      	cmp	r7, #0
 8006702:	f000 80d4 	beq.w	80068ae <_printf_i+0x1ca>
 8006706:	2f58      	cmp	r7, #88	; 0x58
 8006708:	f000 80c0 	beq.w	800688c <_printf_i+0x1a8>
 800670c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006710:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006714:	e03a      	b.n	800678c <_printf_i+0xa8>
 8006716:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800671a:	2b15      	cmp	r3, #21
 800671c:	d8f6      	bhi.n	800670c <_printf_i+0x28>
 800671e:	a101      	add	r1, pc, #4	; (adr r1, 8006724 <_printf_i+0x40>)
 8006720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006724:	0800677d 	.word	0x0800677d
 8006728:	08006791 	.word	0x08006791
 800672c:	0800670d 	.word	0x0800670d
 8006730:	0800670d 	.word	0x0800670d
 8006734:	0800670d 	.word	0x0800670d
 8006738:	0800670d 	.word	0x0800670d
 800673c:	08006791 	.word	0x08006791
 8006740:	0800670d 	.word	0x0800670d
 8006744:	0800670d 	.word	0x0800670d
 8006748:	0800670d 	.word	0x0800670d
 800674c:	0800670d 	.word	0x0800670d
 8006750:	08006895 	.word	0x08006895
 8006754:	080067bd 	.word	0x080067bd
 8006758:	0800684f 	.word	0x0800684f
 800675c:	0800670d 	.word	0x0800670d
 8006760:	0800670d 	.word	0x0800670d
 8006764:	080068b7 	.word	0x080068b7
 8006768:	0800670d 	.word	0x0800670d
 800676c:	080067bd 	.word	0x080067bd
 8006770:	0800670d 	.word	0x0800670d
 8006774:	0800670d 	.word	0x0800670d
 8006778:	08006857 	.word	0x08006857
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	1d1a      	adds	r2, r3, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	602a      	str	r2, [r5, #0]
 8006784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800678c:	2301      	movs	r3, #1
 800678e:	e09f      	b.n	80068d0 <_printf_i+0x1ec>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	682b      	ldr	r3, [r5, #0]
 8006794:	0607      	lsls	r7, r0, #24
 8006796:	f103 0104 	add.w	r1, r3, #4
 800679a:	6029      	str	r1, [r5, #0]
 800679c:	d501      	bpl.n	80067a2 <_printf_i+0xbe>
 800679e:	681e      	ldr	r6, [r3, #0]
 80067a0:	e003      	b.n	80067aa <_printf_i+0xc6>
 80067a2:	0646      	lsls	r6, r0, #25
 80067a4:	d5fb      	bpl.n	800679e <_printf_i+0xba>
 80067a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80067aa:	2e00      	cmp	r6, #0
 80067ac:	da03      	bge.n	80067b6 <_printf_i+0xd2>
 80067ae:	232d      	movs	r3, #45	; 0x2d
 80067b0:	4276      	negs	r6, r6
 80067b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b6:	485a      	ldr	r0, [pc, #360]	; (8006920 <_printf_i+0x23c>)
 80067b8:	230a      	movs	r3, #10
 80067ba:	e012      	b.n	80067e2 <_printf_i+0xfe>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	6820      	ldr	r0, [r4, #0]
 80067c0:	1d19      	adds	r1, r3, #4
 80067c2:	6029      	str	r1, [r5, #0]
 80067c4:	0605      	lsls	r5, r0, #24
 80067c6:	d501      	bpl.n	80067cc <_printf_i+0xe8>
 80067c8:	681e      	ldr	r6, [r3, #0]
 80067ca:	e002      	b.n	80067d2 <_printf_i+0xee>
 80067cc:	0641      	lsls	r1, r0, #25
 80067ce:	d5fb      	bpl.n	80067c8 <_printf_i+0xe4>
 80067d0:	881e      	ldrh	r6, [r3, #0]
 80067d2:	4853      	ldr	r0, [pc, #332]	; (8006920 <_printf_i+0x23c>)
 80067d4:	2f6f      	cmp	r7, #111	; 0x6f
 80067d6:	bf0c      	ite	eq
 80067d8:	2308      	moveq	r3, #8
 80067da:	230a      	movne	r3, #10
 80067dc:	2100      	movs	r1, #0
 80067de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067e2:	6865      	ldr	r5, [r4, #4]
 80067e4:	60a5      	str	r5, [r4, #8]
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	bfa2      	ittt	ge
 80067ea:	6821      	ldrge	r1, [r4, #0]
 80067ec:	f021 0104 	bicge.w	r1, r1, #4
 80067f0:	6021      	strge	r1, [r4, #0]
 80067f2:	b90e      	cbnz	r6, 80067f8 <_printf_i+0x114>
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	d04b      	beq.n	8006890 <_printf_i+0x1ac>
 80067f8:	4615      	mov	r5, r2
 80067fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80067fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006802:	5dc7      	ldrb	r7, [r0, r7]
 8006804:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006808:	4637      	mov	r7, r6
 800680a:	42bb      	cmp	r3, r7
 800680c:	460e      	mov	r6, r1
 800680e:	d9f4      	bls.n	80067fa <_printf_i+0x116>
 8006810:	2b08      	cmp	r3, #8
 8006812:	d10b      	bne.n	800682c <_printf_i+0x148>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	07de      	lsls	r6, r3, #31
 8006818:	d508      	bpl.n	800682c <_printf_i+0x148>
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	6861      	ldr	r1, [r4, #4]
 800681e:	4299      	cmp	r1, r3
 8006820:	bfde      	ittt	le
 8006822:	2330      	movle	r3, #48	; 0x30
 8006824:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006828:	f105 35ff 	addle.w	r5, r5, #4294967295
 800682c:	1b52      	subs	r2, r2, r5
 800682e:	6122      	str	r2, [r4, #16]
 8006830:	f8cd a000 	str.w	sl, [sp]
 8006834:	464b      	mov	r3, r9
 8006836:	aa03      	add	r2, sp, #12
 8006838:	4621      	mov	r1, r4
 800683a:	4640      	mov	r0, r8
 800683c:	f7ff fee4 	bl	8006608 <_printf_common>
 8006840:	3001      	adds	r0, #1
 8006842:	d14a      	bne.n	80068da <_printf_i+0x1f6>
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	b004      	add	sp, #16
 800684a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	f043 0320 	orr.w	r3, r3, #32
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	4833      	ldr	r0, [pc, #204]	; (8006924 <_printf_i+0x240>)
 8006858:	2778      	movs	r7, #120	; 0x78
 800685a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	6829      	ldr	r1, [r5, #0]
 8006862:	061f      	lsls	r7, r3, #24
 8006864:	f851 6b04 	ldr.w	r6, [r1], #4
 8006868:	d402      	bmi.n	8006870 <_printf_i+0x18c>
 800686a:	065f      	lsls	r7, r3, #25
 800686c:	bf48      	it	mi
 800686e:	b2b6      	uxthmi	r6, r6
 8006870:	07df      	lsls	r7, r3, #31
 8006872:	bf48      	it	mi
 8006874:	f043 0320 	orrmi.w	r3, r3, #32
 8006878:	6029      	str	r1, [r5, #0]
 800687a:	bf48      	it	mi
 800687c:	6023      	strmi	r3, [r4, #0]
 800687e:	b91e      	cbnz	r6, 8006888 <_printf_i+0x1a4>
 8006880:	6823      	ldr	r3, [r4, #0]
 8006882:	f023 0320 	bic.w	r3, r3, #32
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	2310      	movs	r3, #16
 800688a:	e7a7      	b.n	80067dc <_printf_i+0xf8>
 800688c:	4824      	ldr	r0, [pc, #144]	; (8006920 <_printf_i+0x23c>)
 800688e:	e7e4      	b.n	800685a <_printf_i+0x176>
 8006890:	4615      	mov	r5, r2
 8006892:	e7bd      	b.n	8006810 <_printf_i+0x12c>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	6826      	ldr	r6, [r4, #0]
 8006898:	6961      	ldr	r1, [r4, #20]
 800689a:	1d18      	adds	r0, r3, #4
 800689c:	6028      	str	r0, [r5, #0]
 800689e:	0635      	lsls	r5, r6, #24
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	d501      	bpl.n	80068a8 <_printf_i+0x1c4>
 80068a4:	6019      	str	r1, [r3, #0]
 80068a6:	e002      	b.n	80068ae <_printf_i+0x1ca>
 80068a8:	0670      	lsls	r0, r6, #25
 80068aa:	d5fb      	bpl.n	80068a4 <_printf_i+0x1c0>
 80068ac:	8019      	strh	r1, [r3, #0]
 80068ae:	2300      	movs	r3, #0
 80068b0:	6123      	str	r3, [r4, #16]
 80068b2:	4615      	mov	r5, r2
 80068b4:	e7bc      	b.n	8006830 <_printf_i+0x14c>
 80068b6:	682b      	ldr	r3, [r5, #0]
 80068b8:	1d1a      	adds	r2, r3, #4
 80068ba:	602a      	str	r2, [r5, #0]
 80068bc:	681d      	ldr	r5, [r3, #0]
 80068be:	6862      	ldr	r2, [r4, #4]
 80068c0:	2100      	movs	r1, #0
 80068c2:	4628      	mov	r0, r5
 80068c4:	f7f9 fc8c 	bl	80001e0 <memchr>
 80068c8:	b108      	cbz	r0, 80068ce <_printf_i+0x1ea>
 80068ca:	1b40      	subs	r0, r0, r5
 80068cc:	6060      	str	r0, [r4, #4]
 80068ce:	6863      	ldr	r3, [r4, #4]
 80068d0:	6123      	str	r3, [r4, #16]
 80068d2:	2300      	movs	r3, #0
 80068d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d8:	e7aa      	b.n	8006830 <_printf_i+0x14c>
 80068da:	6923      	ldr	r3, [r4, #16]
 80068dc:	462a      	mov	r2, r5
 80068de:	4649      	mov	r1, r9
 80068e0:	4640      	mov	r0, r8
 80068e2:	47d0      	blx	sl
 80068e4:	3001      	adds	r0, #1
 80068e6:	d0ad      	beq.n	8006844 <_printf_i+0x160>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	079b      	lsls	r3, r3, #30
 80068ec:	d413      	bmi.n	8006916 <_printf_i+0x232>
 80068ee:	68e0      	ldr	r0, [r4, #12]
 80068f0:	9b03      	ldr	r3, [sp, #12]
 80068f2:	4298      	cmp	r0, r3
 80068f4:	bfb8      	it	lt
 80068f6:	4618      	movlt	r0, r3
 80068f8:	e7a6      	b.n	8006848 <_printf_i+0x164>
 80068fa:	2301      	movs	r3, #1
 80068fc:	4632      	mov	r2, r6
 80068fe:	4649      	mov	r1, r9
 8006900:	4640      	mov	r0, r8
 8006902:	47d0      	blx	sl
 8006904:	3001      	adds	r0, #1
 8006906:	d09d      	beq.n	8006844 <_printf_i+0x160>
 8006908:	3501      	adds	r5, #1
 800690a:	68e3      	ldr	r3, [r4, #12]
 800690c:	9903      	ldr	r1, [sp, #12]
 800690e:	1a5b      	subs	r3, r3, r1
 8006910:	42ab      	cmp	r3, r5
 8006912:	dcf2      	bgt.n	80068fa <_printf_i+0x216>
 8006914:	e7eb      	b.n	80068ee <_printf_i+0x20a>
 8006916:	2500      	movs	r5, #0
 8006918:	f104 0619 	add.w	r6, r4, #25
 800691c:	e7f5      	b.n	800690a <_printf_i+0x226>
 800691e:	bf00      	nop
 8006920:	08006a81 	.word	0x08006a81
 8006924:	08006a92 	.word	0x08006a92

08006928 <memmove>:
 8006928:	4288      	cmp	r0, r1
 800692a:	b510      	push	{r4, lr}
 800692c:	eb01 0402 	add.w	r4, r1, r2
 8006930:	d902      	bls.n	8006938 <memmove+0x10>
 8006932:	4284      	cmp	r4, r0
 8006934:	4623      	mov	r3, r4
 8006936:	d807      	bhi.n	8006948 <memmove+0x20>
 8006938:	1e43      	subs	r3, r0, #1
 800693a:	42a1      	cmp	r1, r4
 800693c:	d008      	beq.n	8006950 <memmove+0x28>
 800693e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006946:	e7f8      	b.n	800693a <memmove+0x12>
 8006948:	4402      	add	r2, r0
 800694a:	4601      	mov	r1, r0
 800694c:	428a      	cmp	r2, r1
 800694e:	d100      	bne.n	8006952 <memmove+0x2a>
 8006950:	bd10      	pop	{r4, pc}
 8006952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800695a:	e7f7      	b.n	800694c <memmove+0x24>

0800695c <_sbrk_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d06      	ldr	r5, [pc, #24]	; (8006978 <_sbrk_r+0x1c>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	f7fa fae2 	bl	8000f30 <_sbrk>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_sbrk_r+0x1a>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_sbrk_r+0x1a>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	2000038c 	.word	0x2000038c

0800697c <memcpy>:
 800697c:	440a      	add	r2, r1
 800697e:	4291      	cmp	r1, r2
 8006980:	f100 33ff 	add.w	r3, r0, #4294967295
 8006984:	d100      	bne.n	8006988 <memcpy+0xc>
 8006986:	4770      	bx	lr
 8006988:	b510      	push	{r4, lr}
 800698a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800698e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006992:	4291      	cmp	r1, r2
 8006994:	d1f9      	bne.n	800698a <memcpy+0xe>
 8006996:	bd10      	pop	{r4, pc}

08006998 <_realloc_r>:
 8006998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699c:	4680      	mov	r8, r0
 800699e:	4614      	mov	r4, r2
 80069a0:	460e      	mov	r6, r1
 80069a2:	b921      	cbnz	r1, 80069ae <_realloc_r+0x16>
 80069a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a8:	4611      	mov	r1, r2
 80069aa:	f7ff bc49 	b.w	8006240 <_malloc_r>
 80069ae:	b92a      	cbnz	r2, 80069bc <_realloc_r+0x24>
 80069b0:	f7ff fbda 	bl	8006168 <_free_r>
 80069b4:	4625      	mov	r5, r4
 80069b6:	4628      	mov	r0, r5
 80069b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069bc:	f000 f81b 	bl	80069f6 <_malloc_usable_size_r>
 80069c0:	4284      	cmp	r4, r0
 80069c2:	4607      	mov	r7, r0
 80069c4:	d802      	bhi.n	80069cc <_realloc_r+0x34>
 80069c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069ca:	d812      	bhi.n	80069f2 <_realloc_r+0x5a>
 80069cc:	4621      	mov	r1, r4
 80069ce:	4640      	mov	r0, r8
 80069d0:	f7ff fc36 	bl	8006240 <_malloc_r>
 80069d4:	4605      	mov	r5, r0
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d0ed      	beq.n	80069b6 <_realloc_r+0x1e>
 80069da:	42bc      	cmp	r4, r7
 80069dc:	4622      	mov	r2, r4
 80069de:	4631      	mov	r1, r6
 80069e0:	bf28      	it	cs
 80069e2:	463a      	movcs	r2, r7
 80069e4:	f7ff ffca 	bl	800697c <memcpy>
 80069e8:	4631      	mov	r1, r6
 80069ea:	4640      	mov	r0, r8
 80069ec:	f7ff fbbc 	bl	8006168 <_free_r>
 80069f0:	e7e1      	b.n	80069b6 <_realloc_r+0x1e>
 80069f2:	4635      	mov	r5, r6
 80069f4:	e7df      	b.n	80069b6 <_realloc_r+0x1e>

080069f6 <_malloc_usable_size_r>:
 80069f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fa:	1f18      	subs	r0, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bfbc      	itt	lt
 8006a00:	580b      	ldrlt	r3, [r1, r0]
 8006a02:	18c0      	addlt	r0, r0, r3
 8006a04:	4770      	bx	lr
	...

08006a08 <_init>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr

08006a14 <_fini>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr
