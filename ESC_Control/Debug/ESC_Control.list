
ESC_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf0  08007bf0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bf0  08007bf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf8  08007bf8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bfc  08007bfc  00017bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007c00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  2000005c  08007c5c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08007c5c  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001424a  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000250e  00000000  00000000  00034319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00036828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8c  00000000  00000000  00037ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027ebe  00000000  00000000  0003893c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014be4  00000000  00000000  000607fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103c41  00000000  00000000  000753de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005634  00000000  00000000  00179020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0017e654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b38 	.word	0x08007b38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08007b38 	.word	0x08007b38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b970 	b.w	8000d64 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4694      	mov	ip, r2
 8000ab0:	d965      	bls.n	8000b7e <__udivmoddi4+0xe2>
 8000ab2:	fab2 f382 	clz	r3, r2
 8000ab6:	b143      	cbz	r3, 8000aca <__udivmoddi4+0x2e>
 8000ab8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000abc:	f1c3 0220 	rsb	r2, r3, #32
 8000ac0:	409f      	lsls	r7, r3
 8000ac2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	409c      	lsls	r4, r3
 8000aca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ace:	fa1f f58c 	uxth.w	r5, ip
 8000ad2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ad6:	0c22      	lsrs	r2, r4, #16
 8000ad8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000adc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae0:	fb01 f005 	mul.w	r0, r1, r5
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d90a      	bls.n	8000afe <__udivmoddi4+0x62>
 8000ae8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aec:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af0:	f080 811c 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000af4:	4290      	cmp	r0, r2
 8000af6:	f240 8119 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000afa:	3902      	subs	r1, #2
 8000afc:	4462      	add	r2, ip
 8000afe:	1a12      	subs	r2, r2, r0
 8000b00:	b2a4      	uxth	r4, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b0e:	fb00 f505 	mul.w	r5, r0, r5
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x90>
 8000b16:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1e:	f080 8107 	bcs.w	8000d30 <__udivmoddi4+0x294>
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	f240 8104 	bls.w	8000d30 <__udivmoddi4+0x294>
 8000b28:	4464      	add	r4, ip
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b30:	1b64      	subs	r4, r4, r5
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11e      	cbz	r6, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40dc      	lsrs	r4, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0xbc>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80ed 	beq.w	8000d26 <__udivmoddi4+0x28a>
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b52:	4608      	mov	r0, r1
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	fab3 f183 	clz	r1, r3
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	d149      	bne.n	8000bf4 <__udivmoddi4+0x158>
 8000b60:	42ab      	cmp	r3, r5
 8000b62:	d302      	bcc.n	8000b6a <__udivmoddi4+0xce>
 8000b64:	4282      	cmp	r2, r0
 8000b66:	f200 80f8 	bhi.w	8000d5a <__udivmoddi4+0x2be>
 8000b6a:	1a84      	subs	r4, r0, r2
 8000b6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	4617      	mov	r7, r2
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d0e2      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	e9c6 4700 	strd	r4, r7, [r6]
 8000b7c:	e7df      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b7e:	b902      	cbnz	r2, 8000b82 <__udivmoddi4+0xe6>
 8000b80:	deff      	udf	#255	; 0xff
 8000b82:	fab2 f382 	clz	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 8090 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8c:	1a8a      	subs	r2, r1, r2
 8000b8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b92:	fa1f fe8c 	uxth.w	lr, ip
 8000b96:	2101      	movs	r1, #1
 8000b98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba0:	0c22      	lsrs	r2, r4, #16
 8000ba2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ba6:	fb0e f005 	mul.w	r0, lr, r5
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d908      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bae:	eb1c 0202 	adds.w	r2, ip, r2
 8000bb2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4290      	cmp	r0, r2
 8000bba:	f200 80cb 	bhi.w	8000d54 <__udivmoddi4+0x2b8>
 8000bbe:	4645      	mov	r5, r8
 8000bc0:	1a12      	subs	r2, r2, r0
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bcc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bd4:	45a6      	cmp	lr, r4
 8000bd6:	d908      	bls.n	8000bea <__udivmoddi4+0x14e>
 8000bd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be0:	d202      	bcs.n	8000be8 <__udivmoddi4+0x14c>
 8000be2:	45a6      	cmp	lr, r4
 8000be4:	f200 80bb 	bhi.w	8000d5e <__udivmoddi4+0x2c2>
 8000be8:	4610      	mov	r0, r2
 8000bea:	eba4 040e 	sub.w	r4, r4, lr
 8000bee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bf2:	e79f      	b.n	8000b34 <__udivmoddi4+0x98>
 8000bf4:	f1c1 0720 	rsb	r7, r1, #32
 8000bf8:	408b      	lsls	r3, r1
 8000bfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c02:	fa05 f401 	lsl.w	r4, r5, r1
 8000c06:	fa20 f307 	lsr.w	r3, r0, r7
 8000c0a:	40fd      	lsrs	r5, r7
 8000c0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c10:	4323      	orrs	r3, r4
 8000c12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c1e:	0c1c      	lsrs	r4, r3, #16
 8000c20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c24:	fb08 f50e 	mul.w	r5, r8, lr
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1c 0404 	adds.w	r4, ip, r4
 8000c38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c3c:	f080 8088 	bcs.w	8000d50 <__udivmoddi4+0x2b4>
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	f240 8085 	bls.w	8000d50 <__udivmoddi4+0x2b4>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	4464      	add	r4, ip
 8000c4c:	1b64      	subs	r4, r4, r5
 8000c4e:	b29d      	uxth	r5, r3
 8000c50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c54:	fb09 4413 	mls	r4, r9, r3, r4
 8000c58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c6c:	d26c      	bcs.n	8000d48 <__udivmoddi4+0x2ac>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d96a      	bls.n	8000d48 <__udivmoddi4+0x2ac>
 8000c72:	3b02      	subs	r3, #2
 8000c74:	4464      	add	r4, ip
 8000c76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	42ac      	cmp	r4, r5
 8000c84:	46c8      	mov	r8, r9
 8000c86:	46ae      	mov	lr, r5
 8000c88:	d356      	bcc.n	8000d38 <__udivmoddi4+0x29c>
 8000c8a:	d053      	beq.n	8000d34 <__udivmoddi4+0x298>
 8000c8c:	b156      	cbz	r6, 8000ca4 <__udivmoddi4+0x208>
 8000c8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c92:	eb64 040e 	sbc.w	r4, r4, lr
 8000c96:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9a:	40ca      	lsrs	r2, r1
 8000c9c:	40cc      	lsrs	r4, r1
 8000c9e:	4317      	orrs	r7, r2
 8000ca0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cac:	f1c3 0120 	rsb	r1, r3, #32
 8000cb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cbc:	409d      	lsls	r5, r3
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ccc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cda:	428d      	cmp	r5, r1
 8000cdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x258>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cea:	d22f      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d92d      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1b49      	subs	r1, r1, r5
 8000cf6:	b292      	uxth	r2, r2
 8000cf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000d00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d04:	fb05 f10e 	mul.w	r1, r5, lr
 8000d08:	4291      	cmp	r1, r2
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x282>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d14:	d216      	bcs.n	8000d44 <__udivmoddi4+0x2a8>
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d914      	bls.n	8000d44 <__udivmoddi4+0x2a8>
 8000d1a:	3d02      	subs	r5, #2
 8000d1c:	4462      	add	r2, ip
 8000d1e:	1a52      	subs	r2, r2, r1
 8000d20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d24:	e738      	b.n	8000b98 <__udivmoddi4+0xfc>
 8000d26:	4631      	mov	r1, r6
 8000d28:	4630      	mov	r0, r6
 8000d2a:	e708      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e6e6      	b.n	8000afe <__udivmoddi4+0x62>
 8000d30:	4610      	mov	r0, r2
 8000d32:	e6fb      	b.n	8000b2c <__udivmoddi4+0x90>
 8000d34:	4548      	cmp	r0, r9
 8000d36:	d2a9      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d38:	ebb9 0802 	subs.w	r8, r9, r2
 8000d3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d40:	3b01      	subs	r3, #1
 8000d42:	e7a3      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d44:	4645      	mov	r5, r8
 8000d46:	e7ea      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d48:	462b      	mov	r3, r5
 8000d4a:	e794      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4c:	4640      	mov	r0, r8
 8000d4e:	e7d1      	b.n	8000cf4 <__udivmoddi4+0x258>
 8000d50:	46d0      	mov	r8, sl
 8000d52:	e77b      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d54:	3d02      	subs	r5, #2
 8000d56:	4462      	add	r2, ip
 8000d58:	e732      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e70a      	b.n	8000b74 <__udivmoddi4+0xd8>
 8000d5e:	4464      	add	r4, ip
 8000d60:	3802      	subs	r0, #2
 8000d62:	e742      	b.n	8000bea <__udivmoddi4+0x14e>

08000d64 <__aeabi_idiv0>:
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	b0a7      	sub	sp, #156	; 0x9c
 8000d6c:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  char msg[100];
  TIMER_COUNT = 0;
 8000d6e:	4b9e      	ldr	r3, [pc, #632]	; (8000fe8 <main+0x280>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
  ESC_ON = 100;
 8000d74:	4b9d      	ldr	r3, [pc, #628]	; (8000fec <main+0x284>)
 8000d76:	2264      	movs	r2, #100	; 0x64
 8000d78:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7a:	f001 f965 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d7e:	f000 f9ad 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d82:	f000 fd3d 	bl	8001800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d86:	f000 fd0b 	bl	80017a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d8a:	f000 f9f9 	bl	8001180 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000d8e:	f000 fb5d 	bl	800144c <MX_TIM4_Init>
  MX_TIM3_Init();
 8000d92:	f000 fae3 	bl	800135c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d96:	f000 fa69 	bl	800126c <MX_TIM2_Init>
  MX_TIM8_Init();
 8000d9a:	f000 fbeb 	bl	8001574 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000d9e:	f000 fc53 	bl	8001648 <MX_TIM15_Init>
  MX_TIM6_Init();
 8000da2:	f000 fbaf 	bl	8001504 <MX_TIM6_Init>
  MX_TIM16_Init();
 8000da6:	f000 fcd5 	bl	8001754 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000daa:	4891      	ldr	r0, [pc, #580]	; (8000ff0 <main+0x288>)
 8000dac:	f001 fcda 	bl	8002764 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000db0:	2100      	movs	r1, #0
 8000db2:	4890      	ldr	r0, [pc, #576]	; (8000ff4 <main+0x28c>)
 8000db4:	f004 fa40 	bl	8005238 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000db8:	2104      	movs	r1, #4
 8000dba:	488f      	ldr	r0, [pc, #572]	; (8000ff8 <main+0x290>)
 8000dbc:	f004 fa3c 	bl	8005238 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	488e      	ldr	r0, [pc, #568]	; (8000ffc <main+0x294>)
 8000dc4:	f004 fa38 	bl	8005238 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000dc8:	210c      	movs	r1, #12
 8000dca:	488d      	ldr	r0, [pc, #564]	; (8001000 <main+0x298>)
 8000dcc:	f004 fa34 	bl	8005238 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int throttle_pwm = 80;
 8000dd0:	2350      	movs	r3, #80	; 0x50
 8000dd2:	67bb      	str	r3, [r7, #120]	; 0x78
  int roll_pwm = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	677b      	str	r3, [r7, #116]	; 0x74
  int pitch_pwm = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	67fb      	str	r3, [r7, #124]	; 0x7c
  int yaw_pwm = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	673b      	str	r3, [r7, #112]	; 0x70
  {
	/**************************************************/
	/**************** reset Control *******************/
	/**************************************************/

	FL_Motor = 0;
 8000de0:	4b88      	ldr	r3, [pc, #544]	; (8001004 <main+0x29c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
	FR_Motor = 0;
 8000de6:	4b88      	ldr	r3, [pc, #544]	; (8001008 <main+0x2a0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
	BL_Motor = 0;
 8000dec:	4b87      	ldr	r3, [pc, #540]	; (800100c <main+0x2a4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
	BR_Motor = 0;
 8000df2:	4b87      	ldr	r3, [pc, #540]	; (8001010 <main+0x2a8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]

	/**************************************************/
	/**************** Throttle Control ****************/
	/**************************************************/

	if (Throttle < 400)
 8000df8:	4b86      	ldr	r3, [pc, #536]	; (8001014 <main+0x2ac>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000e00:	da03      	bge.n	8000e0a <main+0xa2>
	{
		Throttle = 400;
 8000e02:	4b84      	ldr	r3, [pc, #528]	; (8001014 <main+0x2ac>)
 8000e04:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000e08:	601a      	str	r2, [r3, #0]
	}
	throttle_pwm = Min_Throttle + ((Throttle - 400) / 5.7);
 8000e0a:	4b82      	ldr	r3, [pc, #520]	; (8001014 <main+0x2ac>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fb86 	bl	8000524 <__aeabi_i2d>
 8000e18:	a371      	add	r3, pc, #452	; (adr r3, 8000fe0 <main+0x278>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff fd15 	bl	800084c <__aeabi_ddiv>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4b7a      	ldr	r3, [pc, #488]	; (8001018 <main+0x2b0>)
 8000e30:	f7ff fa2c 	bl	800028c <__adddf3>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fdee 	bl	8000a1c <__aeabi_d2iz>
 8000e40:	4603      	mov	r3, r0
 8000e42:	67bb      	str	r3, [r7, #120]	; 0x78
	FL_Motor = throttle_pwm;
 8000e44:	4a6f      	ldr	r2, [pc, #444]	; (8001004 <main+0x29c>)
 8000e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e48:	6013      	str	r3, [r2, #0]
	FR_Motor = throttle_pwm;
 8000e4a:	4a6f      	ldr	r2, [pc, #444]	; (8001008 <main+0x2a0>)
 8000e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e4e:	6013      	str	r3, [r2, #0]
	BL_Motor = throttle_pwm;
 8000e50:	4a6e      	ldr	r2, [pc, #440]	; (800100c <main+0x2a4>)
 8000e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e54:	6013      	str	r3, [r2, #0]
	BR_Motor = throttle_pwm;
 8000e56:	4a6e      	ldr	r2, [pc, #440]	; (8001010 <main+0x2a8>)
 8000e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e5a:	6013      	str	r3, [r2, #0]

	/**************************************************/
	/****************** Roll Control ******************/
	/**************************************************/

	roll_pwm = ((Roll - 400) / 5.7);
 8000e5c:	4b6f      	ldr	r3, [pc, #444]	; (800101c <main+0x2b4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fb5d 	bl	8000524 <__aeabi_i2d>
 8000e6a:	a35d      	add	r3, pc, #372	; (adr r3, 8000fe0 <main+0x278>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff fcec 	bl	800084c <__aeabi_ddiv>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f7ff fdce 	bl	8000a1c <__aeabi_d2iz>
 8000e80:	4603      	mov	r3, r0
 8000e82:	677b      	str	r3, [r7, #116]	; 0x74
	if(roll_pwm > 40)
 8000e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e86:	2b28      	cmp	r3, #40	; 0x28
 8000e88:	dd23      	ble.n	8000ed2 <main+0x16a>
	{
		roll_pwm -= 40;
 8000e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e8c:	3b28      	subs	r3, #40	; 0x28
 8000e8e:	677b      	str	r3, [r7, #116]	; 0x74
		if(throttle_pwm + roll_pwm < Max_Throttle)
 8000e90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e94:	4413      	add	r3, r2
 8000e96:	2b9f      	cmp	r3, #159	; 0x9f
 8000e98:	dc14      	bgt.n	8000ec4 <main+0x15c>
		{
			FL_Motor += (roll_pwm/2);
 8000e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e9c:	0fda      	lsrs	r2, r3, #31
 8000e9e:	4413      	add	r3, r2
 8000ea0:	105b      	asrs	r3, r3, #1
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b57      	ldr	r3, [pc, #348]	; (8001004 <main+0x29c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a56      	ldr	r2, [pc, #344]	; (8001004 <main+0x29c>)
 8000eac:	6013      	str	r3, [r2, #0]
			BL_Motor += (roll_pwm/2);
 8000eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eb0:	0fda      	lsrs	r2, r3, #31
 8000eb2:	4413      	add	r3, r2
 8000eb4:	105b      	asrs	r3, r3, #1
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b54      	ldr	r3, [pc, #336]	; (800100c <main+0x2a4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a53      	ldr	r2, [pc, #332]	; (800100c <main+0x2a4>)
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e02f      	b.n	8000f24 <main+0x1bc>
		}
		else
		{
			FL_Motor = Max_Throttle;
 8000ec4:	4b4f      	ldr	r3, [pc, #316]	; (8001004 <main+0x29c>)
 8000ec6:	22a0      	movs	r2, #160	; 0xa0
 8000ec8:	601a      	str	r2, [r3, #0]
			BL_Motor = Max_Throttle;
 8000eca:	4b50      	ldr	r3, [pc, #320]	; (800100c <main+0x2a4>)
 8000ecc:	22a0      	movs	r2, #160	; 0xa0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e028      	b.n	8000f24 <main+0x1bc>
		}
	}
	else if(roll_pwm < 30)
 8000ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ed4:	2b1d      	cmp	r3, #29
 8000ed6:	dc25      	bgt.n	8000f24 <main+0x1bc>
	{
		roll_pwm -= 30;
 8000ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eda:	3b1e      	subs	r3, #30
 8000edc:	677b      	str	r3, [r7, #116]	; 0x74
		roll_pwm *= -1;
 8000ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	677b      	str	r3, [r7, #116]	; 0x74
		if(throttle_pwm + roll_pwm < Max_Throttle)
 8000ee4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee8:	4413      	add	r3, r2
 8000eea:	2b9f      	cmp	r3, #159	; 0x9f
 8000eec:	dc14      	bgt.n	8000f18 <main+0x1b0>
		{
			FR_Motor += (roll_pwm/2);
 8000eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ef0:	0fda      	lsrs	r2, r3, #31
 8000ef2:	4413      	add	r3, r2
 8000ef4:	105b      	asrs	r3, r3, #1
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b43      	ldr	r3, [pc, #268]	; (8001008 <main+0x2a0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a42      	ldr	r2, [pc, #264]	; (8001008 <main+0x2a0>)
 8000f00:	6013      	str	r3, [r2, #0]
			BR_Motor += (roll_pwm/2);
 8000f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f04:	0fda      	lsrs	r2, r3, #31
 8000f06:	4413      	add	r3, r2
 8000f08:	105b      	asrs	r3, r3, #1
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b40      	ldr	r3, [pc, #256]	; (8001010 <main+0x2a8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a3f      	ldr	r2, [pc, #252]	; (8001010 <main+0x2a8>)
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e005      	b.n	8000f24 <main+0x1bc>
		}
		else
		{
			FR_Motor = Max_Throttle;
 8000f18:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <main+0x2a0>)
 8000f1a:	22a0      	movs	r2, #160	; 0xa0
 8000f1c:	601a      	str	r2, [r3, #0]
			BR_Motor = Max_Throttle;
 8000f1e:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <main+0x2a8>)
 8000f20:	22a0      	movs	r2, #160	; 0xa0
 8000f22:	601a      	str	r2, [r3, #0]

	/**************************************************/
	/****************** Pitch Control *****************/
	/**************************************************/

	pitch_pwm = ((Pitch - 400) / 5.7);
 8000f24:	4b3e      	ldr	r3, [pc, #248]	; (8001020 <main+0x2b8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff faf9 	bl	8000524 <__aeabi_i2d>
 8000f32:	a32b      	add	r3, pc, #172	; (adr r3, 8000fe0 <main+0x278>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f7ff fc88 	bl	800084c <__aeabi_ddiv>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f7ff fd6a 	bl	8000a1c <__aeabi_d2iz>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
	if(pitch_pwm > 40)
 8000f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f4e:	2b28      	cmp	r3, #40	; 0x28
 8000f50:	dd23      	ble.n	8000f9a <main+0x232>
	{
		pitch_pwm -= 40;
 8000f52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f54:	3b28      	subs	r3, #40	; 0x28
 8000f56:	67fb      	str	r3, [r7, #124]	; 0x7c
		if(throttle_pwm + pitch_pwm < Max_Throttle)
 8000f58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000f5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f5c:	4413      	add	r3, r2
 8000f5e:	2b9f      	cmp	r3, #159	; 0x9f
 8000f60:	dc14      	bgt.n	8000f8c <main+0x224>
		{
			BL_Motor += (pitch_pwm/2);
 8000f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f64:	0fda      	lsrs	r2, r3, #31
 8000f66:	4413      	add	r3, r2
 8000f68:	105b      	asrs	r3, r3, #1
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	4b27      	ldr	r3, [pc, #156]	; (800100c <main+0x2a4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a26      	ldr	r2, [pc, #152]	; (800100c <main+0x2a4>)
 8000f74:	6013      	str	r3, [r2, #0]
			BR_Motor += (pitch_pwm/2);
 8000f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f78:	0fda      	lsrs	r2, r3, #31
 8000f7a:	4413      	add	r3, r2
 8000f7c:	105b      	asrs	r3, r3, #1
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <main+0x2a8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <main+0x2a8>)
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	e051      	b.n	8001030 <main+0x2c8>
		}
		else
		{
			BL_Motor = Max_Throttle;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <main+0x2a4>)
 8000f8e:	22a0      	movs	r2, #160	; 0xa0
 8000f90:	601a      	str	r2, [r3, #0]
			BR_Motor = Max_Throttle;
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <main+0x2a8>)
 8000f94:	22a0      	movs	r2, #160	; 0xa0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e04a      	b.n	8001030 <main+0x2c8>
		}
	}
	else if(pitch_pwm < 30)
 8000f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f9c:	2b1d      	cmp	r3, #29
 8000f9e:	dc47      	bgt.n	8001030 <main+0x2c8>
	{
		pitch_pwm -= 30;
 8000fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa2:	3b1e      	subs	r3, #30
 8000fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
		pitch_pwm *= -1;
 8000fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa8:	425b      	negs	r3, r3
 8000faa:	67fb      	str	r3, [r7, #124]	; 0x7c
		if(throttle_pwm + pitch_pwm < Max_Throttle)
 8000fac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb0:	4413      	add	r3, r2
 8000fb2:	2b9f      	cmp	r3, #159	; 0x9f
 8000fb4:	dc36      	bgt.n	8001024 <main+0x2bc>
		{
			FL_Motor += (pitch_pwm/2);
 8000fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb8:	0fda      	lsrs	r2, r3, #31
 8000fba:	4413      	add	r3, r2
 8000fbc:	105b      	asrs	r3, r3, #1
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <main+0x29c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <main+0x29c>)
 8000fc8:	6013      	str	r3, [r2, #0]
			FR_Motor += (pitch_pwm/2);
 8000fca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fcc:	0fda      	lsrs	r2, r3, #31
 8000fce:	4413      	add	r3, r2
 8000fd0:	105b      	asrs	r3, r3, #1
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <main+0x2a0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <main+0x2a0>)
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e027      	b.n	8001030 <main+0x2c8>
 8000fe0:	cccccccd 	.word	0xcccccccd
 8000fe4:	4016cccc 	.word	0x4016cccc
 8000fe8:	20000379 	.word	0x20000379
 8000fec:	20000378 	.word	0x20000378
 8000ff0:	20000078 	.word	0x20000078
 8000ff4:	20000174 	.word	0x20000174
 8000ff8:	20000258 	.word	0x20000258
 8000ffc:	200000dc 	.word	0x200000dc
 8001000:	20000128 	.word	0x20000128
 8001004:	2000038c 	.word	0x2000038c
 8001008:	20000390 	.word	0x20000390
 800100c:	20000394 	.word	0x20000394
 8001010:	20000398 	.word	0x20000398
 8001014:	2000037c 	.word	0x2000037c
 8001018:	40540000 	.word	0x40540000
 800101c:	20000380 	.word	0x20000380
 8001020:	20000384 	.word	0x20000384
		}
		else
		{
			FL_Motor = Max_Throttle;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <main+0x344>)
 8001026:	22a0      	movs	r2, #160	; 0xa0
 8001028:	601a      	str	r2, [r3, #0]
			FR_Motor = Max_Throttle;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <main+0x348>)
 800102c:	22a0      	movs	r2, #160	; 0xa0
 800102e:	601a      	str	r2, [r3, #0]
	*/
	/**************************************************/
	/**************** Set Motor Values ****************/
	/**************************************************/

	TIM2->CCR3 = BR_Motor;
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <main+0x34c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001038:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = FL_Motor;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <main+0x344>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <main+0x350>)
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR1 = FR_Motor;
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <main+0x348>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <main+0x354>)
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
	TIM15->CCR2 = BL_Motor;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <main+0x358>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <main+0x35c>)
 8001050:	639a      	str	r2, [r3, #56]	; 0x38


	// Convert to string and print
	sprintf(msg, "%i   %i   %i  %i  %i  %i  %i  %i\r\n", Throttle, pitch_pwm, Pitch, Yaw, FL_Motor, FR_Motor, BL_Motor, BR_Motor);
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <main+0x360>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <main+0x364>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <main+0x368>)
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	4912      	ldr	r1, [pc, #72]	; (80010ac <main+0x344>)
 8001062:	6809      	ldr	r1, [r1, #0]
 8001064:	4812      	ldr	r0, [pc, #72]	; (80010b0 <main+0x348>)
 8001066:	6800      	ldr	r0, [r0, #0]
 8001068:	4c15      	ldr	r4, [pc, #84]	; (80010c0 <main+0x358>)
 800106a:	6824      	ldr	r4, [r4, #0]
 800106c:	4d11      	ldr	r5, [pc, #68]	; (80010b4 <main+0x34c>)
 800106e:	682d      	ldr	r5, [r5, #0]
 8001070:	f107 060c 	add.w	r6, r7, #12
 8001074:	9505      	str	r5, [sp, #20]
 8001076:	9404      	str	r4, [sp, #16]
 8001078:	9003      	str	r0, [sp, #12]
 800107a:	9102      	str	r1, [sp, #8]
 800107c:	9201      	str	r2, [sp, #4]
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4913      	ldr	r1, [pc, #76]	; (80010d4 <main+0x36c>)
 8001086:	4630      	mov	r0, r6
 8001088:	f006 f8b2 	bl	80071f0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f89d 	bl	80001d0 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	f107 010c 	add.w	r1, r7, #12
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	480d      	ldr	r0, [pc, #52]	; (80010d8 <main+0x370>)
 80010a4:	f005 fb4c 	bl	8006740 <HAL_UART_Transmit>
  {
 80010a8:	e69a      	b.n	8000de0 <main+0x78>
 80010aa:	bf00      	nop
 80010ac:	2000038c 	.word	0x2000038c
 80010b0:	20000390 	.word	0x20000390
 80010b4:	20000398 	.word	0x20000398
 80010b8:	40000400 	.word	0x40000400
 80010bc:	40000800 	.word	0x40000800
 80010c0:	20000394 	.word	0x20000394
 80010c4:	40014000 	.word	0x40014000
 80010c8:	2000037c 	.word	0x2000037c
 80010cc:	20000384 	.word	0x20000384
 80010d0:	20000388 	.word	0x20000388
 80010d4:	08007b50 	.word	0x08007b50
 80010d8:	200002f0 	.word	0x200002f0

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b096      	sub	sp, #88	; 0x58
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	2244      	movs	r2, #68	; 0x44
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f006 f8a0 	bl	8007230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	463b      	mov	r3, r7
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001102:	f002 fc49 	bl	8003998 <HAL_PWREx_ControlVoltageScaling>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800110c:	f000 fcb2 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001110:	2302      	movs	r3, #2
 8001112:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001118:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111a:	2310      	movs	r3, #16
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001122:	2302      	movs	r3, #2
 8001124:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001126:	2301      	movs	r3, #1
 8001128:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800112a:	230a      	movs	r3, #10
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800112e:	2307      	movs	r3, #7
 8001130:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001136:	2302      	movs	r3, #2
 8001138:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fc80 	bl	8003a44 <HAL_RCC_OscConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800114a:	f000 fc93 	bl	8001a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114e:	230f      	movs	r3, #15
 8001150:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	2303      	movs	r3, #3
 8001154:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	2104      	movs	r1, #4
 8001166:	4618      	mov	r0, r3
 8001168:	f003 f848 	bl	80041fc <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001172:	f000 fc7f 	bl	8001a74 <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3758      	adds	r7, #88	; 0x58
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011a4:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <MX_ADC1_Init+0xe4>)
 80011a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b4:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_ADC1_Init+0xe0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <MX_ADC1_Init+0xe0>)
 8001204:	f001 f95e 	bl	80024c4 <HAL_ADC_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800120e:	f000 fc31 	bl	8001a74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4810      	ldr	r0, [pc, #64]	; (8001260 <MX_ADC1_Init+0xe0>)
 800121e:	f001 fff9 	bl	8003214 <HAL_ADCEx_MultiModeConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001228:	f000 fc24 	bl	8001a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_ADC1_Init+0xe8>)
 800122e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001230:	2306      	movs	r3, #6
 8001232:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001238:	237f      	movs	r3, #127	; 0x7f
 800123a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800123c:	2304      	movs	r3, #4
 800123e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_ADC1_Init+0xe0>)
 800124a:	f001 fb45 	bl	80028d8 <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001254:	f000 fc0e 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3728      	adds	r7, #40	; 0x28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000078 	.word	0x20000078
 8001264:	50040000 	.word	0x50040000
 8001268:	14f00020 	.word	0x14f00020

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <MX_TIM2_Init+0xec>)
 80012a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80012a6:	4b2c      	ldr	r3, [pc, #176]	; (8001358 <MX_TIM2_Init+0xec>)
 80012a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <MX_TIM2_Init+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <MX_TIM2_Init+0xec>)
 80012b6:	f240 623f 	movw	r2, #1599	; 0x63f
 80012ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_TIM2_Init+0xec>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <MX_TIM2_Init+0xec>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c8:	4823      	ldr	r0, [pc, #140]	; (8001358 <MX_TIM2_Init+0xec>)
 80012ca:	f003 fe77 	bl	8004fbc <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80012d4:	f000 fbce 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	4619      	mov	r1, r3
 80012e4:	481c      	ldr	r0, [pc, #112]	; (8001358 <MX_TIM2_Init+0xec>)
 80012e6:	f004 fac3 	bl	8005870 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80012f0:	f000 fbc0 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <MX_TIM2_Init+0xec>)
 80012f6:	f003 ff48 	bl	800518a <HAL_TIM_PWM_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001300:	f000 fbb8 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <MX_TIM2_Init+0xec>)
 8001314:	f005 f8a2 	bl	800645c <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800131e:	f000 fba9 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001322:	2360      	movs	r3, #96	; 0x60
 8001324:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 8001326:	231e      	movs	r3, #30
 8001328:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	2208      	movs	r2, #8
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM2_Init+0xec>)
 800133a:	f004 f985 	bl	8005648 <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001344:	f000 fb96 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM2_Init+0xec>)
 800134a:	f000 fccd 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	; 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000dc 	.word	0x200000dc

0800135c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08e      	sub	sp, #56	; 0x38
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800138e:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <MX_TIM3_Init+0xe8>)
 8001390:	4a2d      	ldr	r2, [pc, #180]	; (8001448 <MX_TIM3_Init+0xec>)
 8001392:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8001394:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <MX_TIM3_Init+0xe8>)
 8001396:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <MX_TIM3_Init+0xe8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <MX_TIM3_Init+0xe8>)
 80013a4:	f240 623f 	movw	r2, #1599	; 0x63f
 80013a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_TIM3_Init+0xe8>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <MX_TIM3_Init+0xe8>)
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013b6:	4823      	ldr	r0, [pc, #140]	; (8001444 <MX_TIM3_Init+0xe8>)
 80013b8:	f003 fe00 	bl	8004fbc <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80013c2:	f000 fb57 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d0:	4619      	mov	r1, r3
 80013d2:	481c      	ldr	r0, [pc, #112]	; (8001444 <MX_TIM3_Init+0xe8>)
 80013d4:	f004 fa4c 	bl	8005870 <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80013de:	f000 fb49 	bl	8001a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_TIM3_Init+0xe8>)
 80013e4:	f003 fed1 	bl	800518a <HAL_TIM_PWM_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80013ee:	f000 fb41 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	4810      	ldr	r0, [pc, #64]	; (8001444 <MX_TIM3_Init+0xe8>)
 8001402:	f005 f82b 	bl	800645c <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800140c:	f000 fb32 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001410:	2360      	movs	r3, #96	; 0x60
 8001412:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 60;
 8001414:	233c      	movs	r3, #60	; 0x3c
 8001416:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	220c      	movs	r2, #12
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM3_Init+0xe8>)
 8001428:	f004 f90e 	bl	8005648 <HAL_TIM_PWM_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001432:	f000 fb1f 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM3_Init+0xe8>)
 8001438:	f000 fc56 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	; 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000128 	.word	0x20000128
 8001448:	40000400 	.word	0x40000400

0800144c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145e:	463b      	mov	r3, r7
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <MX_TIM4_Init+0xb0>)
 8001472:	4a23      	ldr	r2, [pc, #140]	; (8001500 <MX_TIM4_Init+0xb4>)
 8001474:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000-1;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <MX_TIM4_Init+0xb0>)
 8001478:	f240 32e7 	movw	r2, #999	; 0x3e7
 800147c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <MX_TIM4_Init+0xb0>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1600-1;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <MX_TIM4_Init+0xb0>)
 8001486:	f240 623f 	movw	r2, #1599	; 0x63f
 800148a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_TIM4_Init+0xb0>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_TIM4_Init+0xb0>)
 8001494:	2280      	movs	r2, #128	; 0x80
 8001496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001498:	4818      	ldr	r0, [pc, #96]	; (80014fc <MX_TIM4_Init+0xb0>)
 800149a:	f003 fe76 	bl	800518a <HAL_TIM_PWM_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80014a4:	f000 fae6 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_TIM4_Init+0xb0>)
 80014b8:	f004 ffd0 	bl	800645c <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80014c2:	f000 fad7 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c6:	2360      	movs	r3, #96	; 0x60
 80014c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 120;
 80014ca:	2378      	movs	r3, #120	; 0x78
 80014cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <MX_TIM4_Init+0xb0>)
 80014de:	f004 f8b3 	bl	8005648 <HAL_TIM_PWM_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80014e8:	f000 fac4 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <MX_TIM4_Init+0xb0>)
 80014ee:	f000 fbfb 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000174 	.word	0x20000174
 8001500:	40000800 	.word	0x40000800

08001504 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM6_Init+0x68>)
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <MX_TIM6_Init+0x6c>)
 8001518:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000-1;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_TIM6_Init+0x68>)
 800151c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001520:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_TIM6_Init+0x68>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1600-1;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_TIM6_Init+0x68>)
 800152a:	f240 623f 	movw	r2, #1599	; 0x63f
 800152e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_TIM6_Init+0x68>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_TIM6_Init+0x68>)
 8001538:	f003 fd40 	bl	8004fbc <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001542:	f000 fa97 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_TIM6_Init+0x68>)
 8001554:	f004 ff82 	bl	800645c <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800155e:	f000 fa89 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200001c0 	.word	0x200001c0
 8001570:	40001000 	.word	0x40001000

08001574 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	; 0x30
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <MX_TIM8_Init+0xcc>)
 80015a4:	4a27      	ldr	r2, [pc, #156]	; (8001644 <MX_TIM8_Init+0xd0>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <MX_TIM8_Init+0xcc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <MX_TIM8_Init+0xcc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <MX_TIM8_Init+0xcc>)
 80015b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <MX_TIM8_Init+0xcc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <MX_TIM8_Init+0xcc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <MX_TIM8_Init+0xcc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015ce:	481c      	ldr	r0, [pc, #112]	; (8001640 <MX_TIM8_Init+0xcc>)
 80015d0:	f003 fcf4 	bl	8004fbc <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 80015da:	f000 fa4b 	bl	8001a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	4619      	mov	r1, r3
 80015ea:	4815      	ldr	r0, [pc, #84]	; (8001640 <MX_TIM8_Init+0xcc>)
 80015ec:	f004 f940 	bl	8005870 <HAL_TIM_ConfigClockSource>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 80015f6:	f000 fa3d 	bl	8001a74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80015fa:	2305      	movs	r3, #5
 80015fc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	4619      	mov	r1, r3
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_TIM8_Init+0xcc>)
 800160a:	f004 f9fa 	bl	8005a02 <HAL_TIM_SlaveConfigSynchro>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001614:	f000 fa2e 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	4619      	mov	r1, r3
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_TIM8_Init+0xcc>)
 800162a:	f004 ff17 	bl	800645c <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001634:	f000 fa1e 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	3730      	adds	r7, #48	; 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000020c 	.word	0x2000020c
 8001644:	40013400 	.word	0x40013400

08001648 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b096      	sub	sp, #88	; 0x58
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	222c      	movs	r2, #44	; 0x2c
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f005 fddb 	bl	8007230 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <MX_TIM15_Init+0x104>)
 800167c:	4a34      	ldr	r2, [pc, #208]	; (8001750 <MX_TIM15_Init+0x108>)
 800167e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1000-1;
 8001680:	4b32      	ldr	r3, [pc, #200]	; (800174c <MX_TIM15_Init+0x104>)
 8001682:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001686:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <MX_TIM15_Init+0x104>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1600-1;
 800168e:	4b2f      	ldr	r3, [pc, #188]	; (800174c <MX_TIM15_Init+0x104>)
 8001690:	f240 623f 	movw	r2, #1599	; 0x63f
 8001694:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <MX_TIM15_Init+0x104>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <MX_TIM15_Init+0x104>)
 800169e:	2200      	movs	r2, #0
 80016a0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <MX_TIM15_Init+0x104>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80016a8:	4828      	ldr	r0, [pc, #160]	; (800174c <MX_TIM15_Init+0x104>)
 80016aa:	f003 fd6e 	bl	800518a <HAL_TIM_PWM_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80016b4:	f000 f9de 	bl	8001a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b8:	2300      	movs	r3, #0
 80016ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80016c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016c4:	4619      	mov	r1, r3
 80016c6:	4821      	ldr	r0, [pc, #132]	; (800174c <MX_TIM15_Init+0x104>)
 80016c8:	f004 fec8 	bl	800645c <HAL_TIMEx_MasterConfigSynchronization>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80016d2:	f000 f9cf 	bl	8001a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d6:	2360      	movs	r3, #96	; 0x60
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 145;
 80016da:	2391      	movs	r3, #145	; 0x91
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016de:	2300      	movs	r3, #0
 80016e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016e2:	2300      	movs	r3, #0
 80016e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f6:	2204      	movs	r2, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4814      	ldr	r0, [pc, #80]	; (800174c <MX_TIM15_Init+0x104>)
 80016fc:	f003 ffa4 	bl	8005648 <HAL_TIM_PWM_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8001706:	f000 f9b5 	bl	8001a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800171e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001722:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_TIM15_Init+0x104>)
 800172e:	f004 ff1d 	bl	800656c <HAL_TIMEx_ConfigBreakDeadTime>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM15_Init+0xf4>
  {
    Error_Handler();
 8001738:	f000 f99c 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <MX_TIM15_Init+0x104>)
 800173e:	f000 fad3 	bl	8001ce8 <HAL_TIM_MspPostInit>

}
 8001742:	bf00      	nop
 8001744:	3758      	adds	r7, #88	; 0x58
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000258 	.word	0x20000258
 8001750:	40014000 	.word	0x40014000

08001754 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_TIM16_Init+0x44>)
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <MX_TIM16_Init+0x48>)
 800175c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 100-1;
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_TIM16_Init+0x44>)
 8001760:	2263      	movs	r2, #99	; 0x63
 8001762:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_TIM16_Init+0x44>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3200-1;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_TIM16_Init+0x44>)
 800176c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001770:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_TIM16_Init+0x44>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001778:	4b07      	ldr	r3, [pc, #28]	; (8001798 <MX_TIM16_Init+0x44>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_TIM16_Init+0x44>)
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_TIM16_Init+0x44>)
 8001786:	f003 fc19 	bl	8004fbc <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001790:	f000 f970 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200002a4 	.word	0x200002a4
 800179c:	40014400 	.word	0x40014400

080017a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017a6:	4a15      	ldr	r2, [pc, #84]	; (80017fc <MX_USART2_UART_Init+0x5c>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017e4:	f004 ff5e 	bl	80066a4 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017ee:	f000 f941 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200002f0 	.word	0x200002f0
 80017fc:	40004400 	.word	0x40004400

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <MX_GPIO_Init+0x13c>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a48      	ldr	r2, [pc, #288]	; (800193c <MX_GPIO_Init+0x13c>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b46      	ldr	r3, [pc, #280]	; (800193c <MX_GPIO_Init+0x13c>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <MX_GPIO_Init+0x13c>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a42      	ldr	r2, [pc, #264]	; (800193c <MX_GPIO_Init+0x13c>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <MX_GPIO_Init+0x13c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <MX_GPIO_Init+0x13c>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a3c      	ldr	r2, [pc, #240]	; (800193c <MX_GPIO_Init+0x13c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b3a      	ldr	r3, [pc, #232]	; (800193c <MX_GPIO_Init+0x13c>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <MX_GPIO_Init+0x13c>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a36      	ldr	r2, [pc, #216]	; (800193c <MX_GPIO_Init+0x13c>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <MX_GPIO_Init+0x13c>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800187c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001880:	f002 f84c 	bl	800391c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	4829      	ldr	r0, [pc, #164]	; (8001940 <MX_GPIO_Init+0x140>)
 800189c:	f001 fe7c 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018a0:	2301      	movs	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4822      	ldr	r0, [pc, #136]	; (8001940 <MX_GPIO_Init+0x140>)
 80018b6:	f001 fe6f 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018ba:	2302      	movs	r3, #2
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	481c      	ldr	r0, [pc, #112]	; (8001940 <MX_GPIO_Init+0x140>)
 80018ce:	f001 fe63 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018d2:	2310      	movs	r3, #16
 80018d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e8:	f001 fe56 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018ec:	2301      	movs	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4811      	ldr	r0, [pc, #68]	; (8001944 <MX_GPIO_Init+0x144>)
 8001900:	f001 fe4a 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	2301      	movs	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001920:	f001 fe3a 	bl	8003598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2006      	movs	r0, #6
 800192a:	f001 fdfe 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800192e:	2006      	movs	r0, #6
 8001930:	f001 fe17 	bl	8003562 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	48000800 	.word	0x48000800
 8001944:	48000400 	.word	0x48000400

08001948 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  ///if (htim == &htim16)
  //{
  //  TIMER_COUNT += 1;
  //}
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) {
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d102      	bne.n	8001972 <HAL_GPIO_EXTI_Callback+0x16>
		Get_Pulses();
 800196c:	f000 f806 	bl	800197c <Get_Pulses>
	} else {
	   __NOP();
	}
}
 8001970:	e000      	b.n	8001974 <HAL_GPIO_EXTI_Callback+0x18>
	   __NOP();
 8001972:	bf00      	nop
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <Get_Pulses>:

void Get_Pulses(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	TIM16->CNT = 0;
 8001982:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <Get_Pulses+0xd8>)
 8001984:	2200      	movs	r2, #0
 8001986:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim16);
 8001988:	4833      	ldr	r0, [pc, #204]	; (8001a58 <Get_Pulses+0xdc>)
 800198a:	f003 fb6f 	bl	800506c <HAL_TIM_Base_Start>
	uint32_t time_count = TIM16->CNT;
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <Get_Pulses+0xd8>)
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	607b      	str	r3, [r7, #4]
	Throttle = 0;
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <Get_Pulses+0xe0>)
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
	Roll = 0;
 800199a:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <Get_Pulses+0xe4>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
	Pitch = 0;
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <Get_Pulses+0xe8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
	Yaw = 0;
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <Get_Pulses+0xec>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
	while ((TIM16->CNT - time_count) < 2400)
 80019ac:	e044      	b.n	8001a38 <Get_Pulses+0xbc>
	{
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))
 80019ae:	2101      	movs	r1, #1
 80019b0:	482e      	ldr	r0, [pc, #184]	; (8001a6c <Get_Pulses+0xf0>)
 80019b2:	f001 ff9b 	bl	80038ec <HAL_GPIO_ReadPin>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <Get_Pulses+0x4c>
		{
			Throttle += 1;
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <Get_Pulses+0xe0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <Get_Pulses+0xe0>)
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e003      	b.n	80019d0 <Get_Pulses+0x54>
		}
		else
		{
			Throttle = Throttle;
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <Get_Pulses+0xe0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <Get_Pulses+0xe0>)
 80019ce:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))
 80019d0:	2102      	movs	r1, #2
 80019d2:	4826      	ldr	r0, [pc, #152]	; (8001a6c <Get_Pulses+0xf0>)
 80019d4:	f001 ff8a 	bl	80038ec <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <Get_Pulses+0x6e>
		{
			Roll += 1;
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <Get_Pulses+0xe4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	4a1e      	ldr	r2, [pc, #120]	; (8001a60 <Get_Pulses+0xe4>)
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e003      	b.n	80019f2 <Get_Pulses+0x76>
		}
		else
		{
			Roll = Roll;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <Get_Pulses+0xe4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <Get_Pulses+0xe4>)
 80019f0:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 80019f2:	2101      	movs	r1, #1
 80019f4:	481e      	ldr	r0, [pc, #120]	; (8001a70 <Get_Pulses+0xf4>)
 80019f6:	f001 ff79 	bl	80038ec <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <Get_Pulses+0x90>
		{
			Pitch += 1;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <Get_Pulses+0xe8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <Get_Pulses+0xe8>)
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e003      	b.n	8001a14 <Get_Pulses+0x98>
		}
		else
		{
			Pitch = Pitch;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <Get_Pulses+0xe8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <Get_Pulses+0xe8>)
 8001a12:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))
 8001a14:	2110      	movs	r1, #16
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1a:	f001 ff67 	bl	80038ec <HAL_GPIO_ReadPin>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <Get_Pulses+0xb4>
		{
			Yaw += 1;
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <Get_Pulses+0xec>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <Get_Pulses+0xec>)
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e003      	b.n	8001a38 <Get_Pulses+0xbc>
		}
		else
		{
			Yaw = Yaw;
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <Get_Pulses+0xec>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <Get_Pulses+0xec>)
 8001a36:	6013      	str	r3, [r2, #0]
	while ((TIM16->CNT - time_count) < 2400)
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <Get_Pulses+0xd8>)
 8001a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001a44:	d3b3      	bcc.n	80019ae <Get_Pulses+0x32>
		}
	}
	HAL_TIM_Base_Stop(&htim16);
 8001a46:	4804      	ldr	r0, [pc, #16]	; (8001a58 <Get_Pulses+0xdc>)
 8001a48:	f003 fb78 	bl	800513c <HAL_TIM_Base_Stop>

}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40014400 	.word	0x40014400
 8001a58:	200002a4 	.word	0x200002a4
 8001a5c:	2000037c 	.word	0x2000037c
 8001a60:	20000380 	.word	0x20000380
 8001a64:	20000384 	.word	0x20000384
 8001a68:	20000388 	.word	0x20000388
 8001a6c:	48000800 	.word	0x48000800
 8001a70:	48000400 	.word	0x48000400

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <Error_Handler+0x8>
	...

08001a80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6613      	str	r3, [r2, #96]	; 0x60
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0ac      	sub	sp, #176	; 0xb0
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2288      	movs	r2, #136	; 0x88
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f005 fba1 	bl	8007230 <memset>
  if(hadc->Instance==ADC1)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <HAL_ADC_MspInit+0xc8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d147      	bne.n	8001b88 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001af8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001afc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001afe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b0e:	2308      	movs	r3, #8
 8001b10:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b12:	2307      	movs	r3, #7
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b16:	2302      	movs	r3, #2
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f002 fd8b 	bl	8004644 <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b34:	f7ff ff9e 	bl	8001a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_ADC_MspInit+0xcc>)
 8001b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3c:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <HAL_ADC_MspInit+0xcc>)
 8001b3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_ADC_MspInit+0xcc>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_ADC_MspInit+0xcc>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	4a0f      	ldr	r2, [pc, #60]	; (8001b94 <HAL_ADC_MspInit+0xcc>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_ADC_MspInit+0xcc>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b6e:	230b      	movs	r3, #11
 8001b70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b84:	f001 fd08 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b88:	bf00      	nop
 8001b8a:	37b0      	adds	r7, #176	; 0xb0
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	50040000 	.word	0x50040000
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001baa:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	4a2f      	ldr	r2, [pc, #188]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001bc2:	e04e      	b.n	8001c62 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM3)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a29      	ldr	r2, [pc, #164]	; (8001c70 <HAL_TIM_Base_MspInit+0xd8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d114      	bne.n	8001bf8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bce:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	201d      	movs	r0, #29
 8001bec:	f001 fc9d 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bf0:	201d      	movs	r0, #29
 8001bf2:	f001 fcb6 	bl	8003562 <HAL_NVIC_EnableIRQ>
}
 8001bf6:	e034      	b.n	8001c62 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_TIM_Base_MspInit+0xdc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d10c      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c02:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	4a19      	ldr	r2, [pc, #100]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001c08:	f043 0310 	orr.w	r3, r3, #16
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
}
 8001c1a:	e022      	b.n	8001c62 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_TIM_Base_MspInit+0xe0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10c      	bne.n	8001c40 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	4a10      	ldr	r2, [pc, #64]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c30:	6613      	str	r3, [r2, #96]	; 0x60
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
}
 8001c3e:	e010      	b.n	8001c62 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <HAL_TIM_Base_MspInit+0xe4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10b      	bne.n	8001c62 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c54:	6613      	str	r3, [r2, #96]	; 0x60
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_TIM_Base_MspInit+0xd4>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	bf00      	nop
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40001000 	.word	0x40001000
 8001c78:	40013400 	.word	0x40013400
 8001c7c:	40014400 	.word	0x40014400

08001c80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <HAL_TIM_PWM_MspInit+0x5c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10c      	bne.n	8001cac <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x60>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x60>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x60>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001caa:	e010      	b.n	8001cce <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x64>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d10b      	bne.n	8001cce <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x60>)
 8001cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x60>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x60>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40014000 	.word	0x40014000

08001ce8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	; 0x30
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d11d      	bne.n	8001d46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	4a43      	ldr	r2, [pc, #268]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d16:	4b41      	ldr	r3, [pc, #260]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d34:	2301      	movs	r3, #1
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4838      	ldr	r0, [pc, #224]	; (8001e20 <HAL_TIM_MspPostInit+0x138>)
 8001d40:	f001 fc2a 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001d44:	e066      	b.n	8001e14 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a36      	ldr	r2, [pc, #216]	; (8001e24 <HAL_TIM_MspPostInit+0x13c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d11d      	bne.n	8001d8c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d50:	4b32      	ldr	r3, [pc, #200]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d54:	4a31      	ldr	r2, [pc, #196]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001d56:	f043 0304 	orr.w	r3, r3, #4
 8001d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4828      	ldr	r0, [pc, #160]	; (8001e28 <HAL_TIM_MspPostInit+0x140>)
 8001d86:	f001 fc07 	bl	8003598 <HAL_GPIO_Init>
}
 8001d8a:	e043      	b.n	8001e14 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_TIM_MspPostInit+0x144>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11c      	bne.n	8001dd0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	4b21      	ldr	r3, [pc, #132]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da2:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dae:	2340      	movs	r3, #64	; 0x40
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	2302      	movs	r3, #2
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4815      	ldr	r0, [pc, #84]	; (8001e20 <HAL_TIM_MspPostInit+0x138>)
 8001dca:	f001 fbe5 	bl	8003598 <HAL_GPIO_Init>
}
 8001dce:	e021      	b.n	8001e14 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM15)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <HAL_TIM_MspPostInit+0x148>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d11c      	bne.n	8001e14 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_TIM_MspPostInit+0x134>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001e04:	230e      	movs	r3, #14
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4804      	ldr	r0, [pc, #16]	; (8001e20 <HAL_TIM_MspPostInit+0x138>)
 8001e10:	f001 fbc2 	bl	8003598 <HAL_GPIO_Init>
}
 8001e14:	bf00      	nop
 8001e16:	3730      	adds	r7, #48	; 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000400 	.word	0x48000400
 8001e24:	40000400 	.word	0x40000400
 8001e28:	48000800 	.word	0x48000800
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40014000 	.word	0x40014000

08001e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0ac      	sub	sp, #176	; 0xb0
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2288      	movs	r2, #136	; 0x88
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f005 f9eb 	bl	8007230 <memset>
  if(huart->Instance==USART2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <HAL_UART_MspInit+0xb0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d13b      	bne.n	8001edc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 fbe7 	bl	8004644 <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e7c:	f7ff fdfa 	bl	8001a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_UART_MspInit+0xb4>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	4a18      	ldr	r2, [pc, #96]	; (8001ee8 <HAL_UART_MspInit+0xb4>)
 8001e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_UART_MspInit+0xb4>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_UART_MspInit+0xb4>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_UART_MspInit+0xb4>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_UART_MspInit+0xb4>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed8:	f001 fb5e 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001edc:	bf00      	nop
 8001ede:	37b0      	adds	r7, #176	; 0xb0
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40004400 	.word	0x40004400
 8001ee8:	40021000 	.word	0x40021000

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f8e2 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f44:	2001      	movs	r0, #1
 8001f46:	f001 fd01 	bl	800394c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <TIM3_IRQHandler+0x10>)
 8001f56:	f003 fa75 	bl	8005444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000128 	.word	0x20000128

08001f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <_sbrk+0x5c>)
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <_sbrk+0x60>)
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <_sbrk+0x64>)
 8001f82:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <_sbrk+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <_sbrk+0x64>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d207      	bcs.n	8001fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f94:	f005 f954 	bl	8007240 <__errno>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	e009      	b.n	8001fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <_sbrk+0x64>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <_sbrk+0x64>)
 8001fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20018000 	.word	0x20018000
 8001fc4:	00000400 	.word	0x00000400
 8001fc8:	2000039c 	.word	0x2000039c
 8001fcc:	200004f0 	.word	0x200004f0

08001fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <SystemInit+0x20>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <SystemInit+0x20>)
 8001fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800202c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ff8:	f7ff ffea 	bl	8001fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ffc:	480c      	ldr	r0, [pc, #48]	; (8002030 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ffe:	490d      	ldr	r1, [pc, #52]	; (8002034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002000:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <LoopForever+0xe>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002004:	e002      	b.n	800200c <LoopCopyDataInit>

08002006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200a:	3304      	adds	r3, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800200c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002010:	d3f9      	bcc.n	8002006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002014:	4c0a      	ldr	r4, [pc, #40]	; (8002040 <LoopForever+0x16>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002018:	e001      	b.n	800201e <LoopFillZerobss>

0800201a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800201c:	3204      	adds	r2, #4

0800201e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002020:	d3fb      	bcc.n	800201a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002022:	f005 f913 	bl	800724c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002026:	f7fe fe9f 	bl	8000d68 <main>

0800202a <LoopForever>:

LoopForever:
    b LoopForever
 800202a:	e7fe      	b.n	800202a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800202c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002034:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002038:	08007c00 	.word	0x08007c00
  ldr r2, =_sbss
 800203c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002040:	200004ec 	.word	0x200004ec

08002044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC1_2_IRQHandler>
	...

08002048 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_Init+0x3c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <HAL_Init+0x3c>)
 8002058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205e:	2003      	movs	r0, #3
 8002060:	f001 fa58 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002064:	2000      	movs	r0, #0
 8002066:	f000 f80f 	bl	8002088 <HAL_InitTick>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	e001      	b.n	800207a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002076:	f7ff fd03 	bl	8001a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800207a:	79fb      	ldrb	r3, [r7, #7]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002094:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <HAL_InitTick+0x6c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d023      	beq.n	80020e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_InitTick+0x70>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_InitTick+0x6c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 fa63 	bl	800357e <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d809      	bhi.n	80020d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f001 fa2d 	bl	800352a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d0:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_InitTick+0x74>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e004      	b.n	80020e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e001      	b.n	80020e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000008 	.word	0x20000008
 8002124:	200003a0 	.word	0x200003a0

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200003a0 	.word	0x200003a0

08002140 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	609a      	str	r2, [r3, #8]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3360      	adds	r3, #96	; 0x60
 80021ba:	461a      	mov	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <LL_ADC_SetOffset+0x44>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021e0:	bf00      	nop
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	03fff000 	.word	0x03fff000

080021f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3360      	adds	r3, #96	; 0x60
 80021fe:	461a      	mov	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3360      	adds	r3, #96	; 0x60
 800222c:	461a      	mov	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	431a      	orrs	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002246:	bf00      	nop
 8002248:	371c      	adds	r7, #28
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002252:	b480      	push	{r7}
 8002254:	b087      	sub	sp, #28
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3330      	adds	r3, #48	; 0x30
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	4413      	add	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	211f      	movs	r1, #31
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	401a      	ands	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 011f 	and.w	r1, r3, #31
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	431a      	orrs	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800229e:	bf00      	nop
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b087      	sub	sp, #28
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3314      	adds	r3, #20
 80022ba:	461a      	mov	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	0e5b      	lsrs	r3, r3, #25
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	4413      	add	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	0d1b      	lsrs	r3, r3, #20
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2107      	movs	r1, #7
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	0d1b      	lsrs	r3, r3, #20
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	431a      	orrs	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	43db      	mvns	r3, r3
 800231a:	401a      	ands	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0318 	and.w	r3, r3, #24
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002324:	40d9      	lsrs	r1, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	400b      	ands	r3, r1
 800232a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232e:	431a      	orrs	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	0007ffff 	.word	0x0007ffff

08002348 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 031f 	and.w	r3, r3, #31
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6093      	str	r3, [r2, #8]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800239c:	d101      	bne.n	80023a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ec:	d101      	bne.n	80023f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002410:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <LL_ADC_IsEnabled+0x18>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <LL_ADC_IsEnabled+0x1a>
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800245e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002462:	f043 0204 	orr.w	r2, r3, #4
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b04      	cmp	r3, #4
 8002488:	d101      	bne.n	800248e <LL_ADC_REG_IsConversionOngoing+0x18>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d101      	bne.n	80024b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e130      	b.n	8002740 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff faeb 	bl	8001ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff3f 	bl	8002388 <LL_ADC_IsDeepPowerDownEnabled>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff25 	bl	8002364 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff5a 	bl	80023d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff3e 	bl	80023b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002534:	4b84      	ldr	r3, [pc, #528]	; (8002748 <HAL_ADC_Init+0x284>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	4a84      	ldr	r2, [pc, #528]	; (800274c <HAL_ADC_Init+0x288>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	099b      	lsrs	r3, r3, #6
 8002542:	3301      	adds	r3, #1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002548:	e002      	b.n	8002550 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3b01      	subs	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f9      	bne.n	800254a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff3c 	bl	80023d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff75 	bl	8002476 <LL_ADC_REG_IsConversionOngoing>
 800258c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 80c9 	bne.w	800272e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 80c5 	bne.w	800272e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025ac:	f043 0202 	orr.w	r2, r3, #2
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff35 	bl	8002428 <LL_ADC_IsEnabled>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d115      	bne.n	80025f0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c4:	4862      	ldr	r0, [pc, #392]	; (8002750 <HAL_ADC_Init+0x28c>)
 80025c6:	f7ff ff2f 	bl	8002428 <LL_ADC_IsEnabled>
 80025ca:	4604      	mov	r4, r0
 80025cc:	4861      	ldr	r0, [pc, #388]	; (8002754 <HAL_ADC_Init+0x290>)
 80025ce:	f7ff ff2b 	bl	8002428 <LL_ADC_IsEnabled>
 80025d2:	4603      	mov	r3, r0
 80025d4:	431c      	orrs	r4, r3
 80025d6:	4860      	ldr	r0, [pc, #384]	; (8002758 <HAL_ADC_Init+0x294>)
 80025d8:	f7ff ff26 	bl	8002428 <LL_ADC_IsEnabled>
 80025dc:	4603      	mov	r3, r0
 80025de:	4323      	orrs	r3, r4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d105      	bne.n	80025f0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4619      	mov	r1, r3
 80025ea:	485c      	ldr	r0, [pc, #368]	; (800275c <HAL_ADC_Init+0x298>)
 80025ec:	f7ff fda8 	bl	8002140 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7e5b      	ldrb	r3, [r3, #25]
 80025f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002600:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002606:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d106      	bne.n	800262c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	3b01      	subs	r3, #1
 8002624:	045b      	lsls	r3, r3, #17
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	2b00      	cmp	r3, #0
 8002632:	d009      	beq.n	8002648 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	4b44      	ldr	r3, [pc, #272]	; (8002760 <HAL_ADC_Init+0x29c>)
 8002650:	4013      	ands	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	430b      	orrs	r3, r1
 800265a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff1b 	bl	800249c <LL_ADC_INJ_IsConversionOngoing>
 8002666:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d13d      	bne.n	80026ea <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d13a      	bne.n	80026ea <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002678:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002680:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002690:	f023 0302 	bic.w	r3, r3, #2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	69b9      	ldr	r1, [r7, #24]
 800269a:	430b      	orrs	r3, r1
 800269c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d118      	bne.n	80026da <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026b2:	f023 0304 	bic.w	r3, r3, #4
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026be:	4311      	orrs	r1, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026c4:	4311      	orrs	r1, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026ca:	430a      	orrs	r2, r1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	611a      	str	r2, [r3, #16]
 80026d8:	e007      	b.n	80026ea <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10c      	bne.n	800270c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f023 010f 	bic.w	r1, r3, #15
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
 800270a:	e007      	b.n	800271c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 020f 	bic.w	r2, r2, #15
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002720:	f023 0303 	bic.w	r3, r3, #3
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
 800272c:	e007      	b.n	800273e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f043 0210 	orr.w	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800273e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3724      	adds	r7, #36	; 0x24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd90      	pop	{r4, r7, pc}
 8002748:	20000000 	.word	0x20000000
 800274c:	053e2d63 	.word	0x053e2d63
 8002750:	50040000 	.word	0x50040000
 8002754:	50040100 	.word	0x50040100
 8002758:	50040200 	.word	0x50040200
 800275c:	50040300 	.word	0x50040300
 8002760:	fff0c007 	.word	0xfff0c007

08002764 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800276c:	4857      	ldr	r0, [pc, #348]	; (80028cc <HAL_ADC_Start+0x168>)
 800276e:	f7ff fdeb 	bl	8002348 <LL_ADC_GetMultimode>
 8002772:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fe7c 	bl	8002476 <LL_ADC_REG_IsConversionOngoing>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 809c 	bne.w	80028be <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_ADC_Start+0x30>
 8002790:	2302      	movs	r3, #2
 8002792:	e097      	b.n	80028c4 <HAL_ADC_Start+0x160>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fc8d 	bl	80030bc <ADC_Enable>
 80027a2:	4603      	mov	r3, r0
 80027a4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f040 8083 	bne.w	80028b4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a42      	ldr	r2, [pc, #264]	; (80028d0 <HAL_ADC_Start+0x16c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d002      	beq.n	80027d2 <HAL_ADC_Start+0x6e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	e000      	b.n	80027d4 <HAL_ADC_Start+0x70>
 80027d2:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_ADC_Start+0x170>)
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6812      	ldr	r2, [r2, #0]
 80027d8:	4293      	cmp	r3, r2
 80027da:	d002      	beq.n	80027e2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fa:	d106      	bne.n	800280a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	f023 0206 	bic.w	r2, r3, #6
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	659a      	str	r2, [r3, #88]	; 0x58
 8002808:	e002      	b.n	8002810 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	221c      	movs	r2, #28
 8002816:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <HAL_ADC_Start+0x16c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d002      	beq.n	8002830 <HAL_ADC_Start+0xcc>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	e000      	b.n	8002832 <HAL_ADC_Start+0xce>
 8002830:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <HAL_ADC_Start+0x170>)
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	4293      	cmp	r3, r2
 8002838:	d008      	beq.n	800284c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d002      	beq.n	800284c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b09      	cmp	r3, #9
 800284a:	d114      	bne.n	8002876 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002862:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fded 	bl	800244e <LL_ADC_REG_StartConversion>
 8002874:	e025      	b.n	80028c2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <HAL_ADC_Start+0x16c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d002      	beq.n	8002892 <HAL_ADC_Start+0x12e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	e000      	b.n	8002894 <HAL_ADC_Start+0x130>
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <HAL_ADC_Start+0x170>)
 8002894:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00f      	beq.n	80028c2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
 80028b2:	e006      	b.n	80028c2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80028bc:	e001      	b.n	80028c2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	50040300 	.word	0x50040300
 80028d0:	50040100 	.word	0x50040100
 80028d4:	50040000 	.word	0x50040000

080028d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0b6      	sub	sp, #216	; 0xd8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x22>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e3c9      	b.n	800308e <HAL_ADC_ConfigChannel+0x7b6>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fdb5 	bl	8002476 <LL_ADC_REG_IsConversionOngoing>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 83aa 	bne.w	8003068 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d824      	bhi.n	800296e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	3b02      	subs	r3, #2
 800292a:	2b03      	cmp	r3, #3
 800292c:	d81b      	bhi.n	8002966 <HAL_ADC_ConfigChannel+0x8e>
 800292e:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_ADC_ConfigChannel+0x5c>)
 8002930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002934:	08002945 	.word	0x08002945
 8002938:	0800294d 	.word	0x0800294d
 800293c:	08002955 	.word	0x08002955
 8002940:	0800295d 	.word	0x0800295d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002944:	230c      	movs	r3, #12
 8002946:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800294a:	e010      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800294c:	2312      	movs	r3, #18
 800294e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002952:	e00c      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002954:	2318      	movs	r3, #24
 8002956:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800295a:	e008      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800295c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002966:	2306      	movs	r3, #6
 8002968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800296c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800297c:	f7ff fc69 	bl	8002252 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fd76 	bl	8002476 <LL_ADC_REG_IsConversionOngoing>
 800298a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fd82 	bl	800249c <LL_ADC_INJ_IsConversionOngoing>
 8002998:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800299c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 81a4 	bne.w	8002cee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 819f 	bne.w	8002cee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	461a      	mov	r2, r3
 80029be:	f7ff fc74 	bl	80022aa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	08db      	lsrs	r3, r3, #3
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d00a      	beq.n	80029fa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f4:	f7ff fbd8 	bl	80021a8 <LL_ADC_SetOffset>
 80029f8:	e179      	b.n	8002cee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fbf5 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x14e>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fbea 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	e01e      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x18c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fbdf 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e004      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002a58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1a4>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	e018      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1d6>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e004      	b.n	8002aae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002aa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d106      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fbae 	bl	800221c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fb92 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x214>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fb87 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	e01e      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x252>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fb7c 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002b0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e004      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d105      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x26a>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	e018      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x29c>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e004      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d106      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fb4b 	bl	800221c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fb2f 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x2da>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fb24 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	e01e      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x318>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fb19 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002bd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e004      	b.n	8002bee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d105      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x330>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	e014      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x35a>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002c16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e004      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d106      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2102      	movs	r1, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff faec 	bl	800221c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2103      	movs	r1, #3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fad0 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x398>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2103      	movs	r1, #3
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fac5 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	0e9b      	lsrs	r3, r3, #26
 8002c6a:	f003 021f 	and.w	r2, r3, #31
 8002c6e:	e017      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x3c8>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2103      	movs	r1, #3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff faba 	bl	80021f0 <LL_ADC_GetOffsetChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002c92:	2320      	movs	r3, #32
 8002c94:	e003      	b.n	8002c9e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x3e0>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	e011      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x404>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002cca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e003      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d106      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fa97 	bl	800221c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fb98 	bl	8002428 <LL_ADC_IsEnabled>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 8140 	bne.w	8002f80 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f7ff faf7 	bl	8002300 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a8f      	ldr	r2, [pc, #572]	; (8002f54 <HAL_ADC_ConfigChannel+0x67c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f040 8131 	bne.w	8002f80 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x46e>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2b09      	cmp	r3, #9
 8002d3c:	bf94      	ite	ls
 8002d3e:	2301      	movls	r3, #1
 8002d40:	2300      	movhi	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	e019      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x4a2>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d56:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002d5e:	2320      	movs	r3, #32
 8002d60:	e003      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2b09      	cmp	r3, #9
 8002d72:	bf94      	ite	ls
 8002d74:	2301      	movls	r3, #1
 8002d76:	2300      	movhi	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d079      	beq.n	8002e72 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x4c2>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	3301      	adds	r3, #1
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d98:	e015      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x4ee>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002daa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002db2:	2320      	movs	r3, #32
 8002db4:	e003      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db8:	fab3 f383 	clz	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	069b      	lsls	r3, r3, #26
 8002dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x50e>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	e017      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x53e>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e003      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	2101      	movs	r1, #1
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	ea42 0103 	orr.w	r1, r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x564>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 021f 	and.w	r2, r3, #31
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	051b      	lsls	r3, r3, #20
 8002e3a:	e018      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x596>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002e54:	2320      	movs	r3, #32
 8002e56:	e003      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	fab3 f383 	clz	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f003 021f 	and.w	r2, r3, #31
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	e081      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x5b6>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	3301      	adds	r3, #1
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e8c:	e015      	b.n	8002eba <HAL_ADC_ConfigChannel+0x5e2>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e003      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	069b      	lsls	r3, r3, #26
 8002eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x602>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	e017      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x632>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002ef2:	2320      	movs	r3, #32
 8002ef4:	e003      	b.n	8002efe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	ea42 0103 	orr.w	r1, r2, r3
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10d      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x65e>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0e9b      	lsrs	r3, r3, #26
 8002f20:	3301      	adds	r3, #1
 8002f22:	f003 021f 	and.w	r2, r3, #31
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3b1e      	subs	r3, #30
 8002f2e:	051b      	lsls	r3, r3, #20
 8002f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f34:	e01e      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x69c>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	60fb      	str	r3, [r7, #12]
  return result;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	e006      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x688>
 8002f52:	bf00      	nop
 8002f54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 021f 	and.w	r2, r3, #31
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b1e      	subs	r3, #30
 8002f6e:	051b      	lsls	r3, r3, #20
 8002f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f74:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f7ff f995 	bl	80022aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d07a      	beq.n	8003082 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f8c:	4843      	ldr	r0, [pc, #268]	; (800309c <HAL_ADC_ConfigChannel+0x7c4>)
 8002f8e:	f7ff f8fd 	bl	800218c <LL_ADC_GetCommonPathInternalCh>
 8002f92:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a41      	ldr	r2, [pc, #260]	; (80030a0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d12c      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d126      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x6e8>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a3b      	ldr	r2, [pc, #236]	; (80030a8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d15d      	bne.n	800307c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4834      	ldr	r0, [pc, #208]	; (800309c <HAL_ADC_ConfigChannel+0x7c4>)
 8002fcc:	f7ff f8cb 	bl	8002166 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_ADC_ConfigChannel+0x7d4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	4a36      	ldr	r2, [pc, #216]	; (80030b0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fea:	e002      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f9      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff8:	e040      	b.n	800307c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2d      	ldr	r2, [pc, #180]	; (80030b4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d118      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003004:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d112      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a23      	ldr	r2, [pc, #140]	; (80030a4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_ADC_ConfigChannel+0x74c>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a22      	ldr	r2, [pc, #136]	; (80030a8 <HAL_ADC_ConfigChannel+0x7d0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d12d      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003024:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302c:	4619      	mov	r1, r3
 800302e:	481b      	ldr	r0, [pc, #108]	; (800309c <HAL_ADC_ConfigChannel+0x7c4>)
 8003030:	f7ff f899 	bl	8002166 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003034:	e024      	b.n	8003080 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_ADC_ConfigChannel+0x7e0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d120      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003040:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d11a      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <HAL_ADC_ConfigChannel+0x7cc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d115      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800305a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800305e:	4619      	mov	r1, r3
 8003060:	480e      	ldr	r0, [pc, #56]	; (800309c <HAL_ADC_ConfigChannel+0x7c4>)
 8003062:	f7ff f880 	bl	8002166 <LL_ADC_SetCommonPathInternalCh>
 8003066:	e00c      	b.n	8003082 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800307a:	e002      	b.n	8003082 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800307c:	bf00      	nop
 800307e:	e000      	b.n	8003082 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003080:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800308a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800308e:	4618      	mov	r0, r3
 8003090:	37d8      	adds	r7, #216	; 0xd8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	80080000 	.word	0x80080000
 800309c:	50040300 	.word	0x50040300
 80030a0:	c7520000 	.word	0xc7520000
 80030a4:	50040000 	.word	0x50040000
 80030a8:	50040200 	.word	0x50040200
 80030ac:	20000000 	.word	0x20000000
 80030b0:	053e2d63 	.word	0x053e2d63
 80030b4:	cb840000 	.word	0xcb840000
 80030b8:	80000001 	.word	0x80000001

080030bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f9ab 	bl	8002428 <LL_ADC_IsEnabled>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d169      	bne.n	80031ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <ADC_Enable+0xfc>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00d      	beq.n	8003102 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f043 0210 	orr.w	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e055      	b.n	80031ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f97a 	bl	8002400 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800310c:	482b      	ldr	r0, [pc, #172]	; (80031bc <ADC_Enable+0x100>)
 800310e:	f7ff f83d 	bl	800218c <LL_ADC_GetCommonPathInternalCh>
 8003112:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003114:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800311c:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <ADC_Enable+0x104>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	4a28      	ldr	r2, [pc, #160]	; (80031c4 <ADC_Enable+0x108>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	099b      	lsrs	r3, r3, #6
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003136:	e002      	b.n	800313e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	3b01      	subs	r3, #1
 800313c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f9      	bne.n	8003138 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003144:	f7fe fff0 	bl	8002128 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800314a:	e028      	b.n	800319e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f969 	bl	8002428 <LL_ADC_IsEnabled>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff f94d 	bl	8002400 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003166:	f7fe ffdf 	bl	8002128 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d914      	bls.n	800319e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d00d      	beq.n	800319e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f043 0210 	orr.w	r2, r3, #16
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e007      	b.n	80031ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d1cf      	bne.n	800314c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	8000003f 	.word	0x8000003f
 80031bc:	50040300 	.word	0x50040300
 80031c0:	20000000 	.word	0x20000000
 80031c4:	053e2d63 	.word	0x053e2d63

080031c8 <LL_ADC_IsEnabled>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <LL_ADC_IsEnabled+0x18>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <LL_ADC_IsEnabled+0x1a>
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_ADC_REG_IsConversionOngoing>:
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d101      	bne.n	8003206 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b09f      	sub	sp, #124	; 0x7c
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e093      	b.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800323a:	2300      	movs	r3, #0
 800323c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800323e:	2300      	movs	r3, #0
 8003240:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a47      	ldr	r2, [pc, #284]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d102      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800324c:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e001      	b.n	8003256 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e072      	b.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff ffb9 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 800327c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff ffb3 	bl	80031ee <LL_ADC_REG_IsConversionOngoing>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d154      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800328e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003290:	2b00      	cmp	r3, #0
 8003292:	d151      	bne.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003294:	4b35      	ldr	r3, [pc, #212]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003296:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02c      	beq.n	80032fa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032b2:	035b      	lsls	r3, r3, #13
 80032b4:	430b      	orrs	r3, r1
 80032b6:	431a      	orrs	r2, r3
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032bc:	4829      	ldr	r0, [pc, #164]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032be:	f7ff ff83 	bl	80031c8 <LL_ADC_IsEnabled>
 80032c2:	4604      	mov	r4, r0
 80032c4:	4828      	ldr	r0, [pc, #160]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032c6:	f7ff ff7f 	bl	80031c8 <LL_ADC_IsEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	431c      	orrs	r4, r3
 80032ce:	4828      	ldr	r0, [pc, #160]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032d0:	f7ff ff7a 	bl	80031c8 <LL_ADC_IsEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4323      	orrs	r3, r4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d137      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032e4:	f023 030f 	bic.w	r3, r3, #15
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	6811      	ldr	r1, [r2, #0]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	6892      	ldr	r2, [r2, #8]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	431a      	orrs	r2, r3
 80032f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032f8:	e028      	b.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003304:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003306:	4817      	ldr	r0, [pc, #92]	; (8003364 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003308:	f7ff ff5e 	bl	80031c8 <LL_ADC_IsEnabled>
 800330c:	4604      	mov	r4, r0
 800330e:	4816      	ldr	r0, [pc, #88]	; (8003368 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003310:	f7ff ff5a 	bl	80031c8 <LL_ADC_IsEnabled>
 8003314:	4603      	mov	r3, r0
 8003316:	431c      	orrs	r4, r3
 8003318:	4815      	ldr	r0, [pc, #84]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800331a:	f7ff ff55 	bl	80031c8 <LL_ADC_IsEnabled>
 800331e:	4603      	mov	r3, r0
 8003320:	4323      	orrs	r3, r4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d112      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800332e:	f023 030f 	bic.w	r3, r3, #15
 8003332:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003334:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003336:	e009      	b.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800334a:	e000      	b.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800334c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003356:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800335a:	4618      	mov	r0, r3
 800335c:	377c      	adds	r7, #124	; 0x7c
 800335e:	46bd      	mov	sp, r7
 8003360:	bd90      	pop	{r4, r7, pc}
 8003362:	bf00      	nop
 8003364:	50040000 	.word	0x50040000
 8003368:	50040100 	.word	0x50040100
 800336c:	50040300 	.word	0x50040300
 8003370:	50040200 	.word	0x50040200

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	; (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	; (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	; (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	; 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	4313      	orrs	r3, r2
         );
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f7ff ff8e 	bl	8003414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f8:	4b05      	ldr	r3, [pc, #20]	; (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff29 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff ff3e 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff8e 	bl	8003468 <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5d 	bl	8003414 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff31 	bl	80033d8 <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a6:	e17f      	b.n	80038a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8171 	beq.w	80038a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d005      	beq.n	80035d8 <HAL_GPIO_Init+0x40>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d130      	bne.n	800363a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360e:	2201      	movs	r2, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0201 	and.w	r2, r3, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b03      	cmp	r3, #3
 8003644:	d118      	bne.n	8003678 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800364c:	2201      	movs	r2, #1
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	08db      	lsrs	r3, r3, #3
 8003662:	f003 0201 	and.w	r2, r3, #1
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b03      	cmp	r3, #3
 8003682:	d017      	beq.n	80036b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	2203      	movs	r2, #3
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d123      	bne.n	8003708 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	08da      	lsrs	r2, r3, #3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3208      	adds	r2, #8
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	220f      	movs	r2, #15
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	08da      	lsrs	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3208      	adds	r2, #8
 8003702:	6939      	ldr	r1, [r7, #16]
 8003704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0203 	and.w	r2, r3, #3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80ac 	beq.w	80038a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374a:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <HAL_GPIO_Init+0x330>)
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	4a5e      	ldr	r2, [pc, #376]	; (80038c8 <HAL_GPIO_Init+0x330>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6613      	str	r3, [r2, #96]	; 0x60
 8003756:	4b5c      	ldr	r3, [pc, #368]	; (80038c8 <HAL_GPIO_Init+0x330>)
 8003758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003762:	4a5a      	ldr	r2, [pc, #360]	; (80038cc <HAL_GPIO_Init+0x334>)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	089b      	lsrs	r3, r3, #2
 8003768:	3302      	adds	r3, #2
 800376a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	220f      	movs	r2, #15
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800378c:	d025      	beq.n	80037da <HAL_GPIO_Init+0x242>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4f      	ldr	r2, [pc, #316]	; (80038d0 <HAL_GPIO_Init+0x338>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01f      	beq.n	80037d6 <HAL_GPIO_Init+0x23e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a4e      	ldr	r2, [pc, #312]	; (80038d4 <HAL_GPIO_Init+0x33c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d019      	beq.n	80037d2 <HAL_GPIO_Init+0x23a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4d      	ldr	r2, [pc, #308]	; (80038d8 <HAL_GPIO_Init+0x340>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d013      	beq.n	80037ce <HAL_GPIO_Init+0x236>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a4c      	ldr	r2, [pc, #304]	; (80038dc <HAL_GPIO_Init+0x344>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00d      	beq.n	80037ca <HAL_GPIO_Init+0x232>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a4b      	ldr	r2, [pc, #300]	; (80038e0 <HAL_GPIO_Init+0x348>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d007      	beq.n	80037c6 <HAL_GPIO_Init+0x22e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a4a      	ldr	r2, [pc, #296]	; (80038e4 <HAL_GPIO_Init+0x34c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d101      	bne.n	80037c2 <HAL_GPIO_Init+0x22a>
 80037be:	2306      	movs	r3, #6
 80037c0:	e00c      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037c2:	2307      	movs	r3, #7
 80037c4:	e00a      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037c6:	2305      	movs	r3, #5
 80037c8:	e008      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037ca:	2304      	movs	r3, #4
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037ce:	2303      	movs	r3, #3
 80037d0:	e004      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e002      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_GPIO_Init+0x244>
 80037da:	2300      	movs	r3, #0
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	f002 0203 	and.w	r2, r2, #3
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	4093      	lsls	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ec:	4937      	ldr	r1, [pc, #220]	; (80038cc <HAL_GPIO_Init+0x334>)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <HAL_GPIO_Init+0x350>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800381e:	4a32      	ldr	r2, [pc, #200]	; (80038e8 <HAL_GPIO_Init+0x350>)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003824:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <HAL_GPIO_Init+0x350>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	43db      	mvns	r3, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003848:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <HAL_GPIO_Init+0x350>)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_GPIO_Init+0x350>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003872:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_GPIO_Init+0x350>)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_GPIO_Init+0x350>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800389c:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <HAL_GPIO_Init+0x350>)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	3301      	adds	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f47f ae78 	bne.w	80035a8 <HAL_GPIO_Init+0x10>
  }
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010000 	.word	0x40010000
 80038d0:	48000400 	.word	0x48000400
 80038d4:	48000800 	.word	0x48000800
 80038d8:	48000c00 	.word	0x48000c00
 80038dc:	48001000 	.word	0x48001000
 80038e0:	48001400 	.word	0x48001400
 80038e4:	48001800 	.word	0x48001800
 80038e8:	40010400 	.word	0x40010400

080038ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	887b      	ldrh	r3, [r7, #2]
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003904:	2301      	movs	r3, #1
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e001      	b.n	800390e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	460b      	mov	r3, r1
 8003926:	807b      	strh	r3, [r7, #2]
 8003928:	4613      	mov	r3, r2
 800392a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800392c:	787b      	ldrb	r3, [r7, #1]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003932:	887a      	ldrh	r2, [r7, #2]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003938:	e002      	b.n	8003940 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003956:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	4013      	ands	r3, r2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd fff6 	bl	800195c <HAL_GPIO_EXTI_Callback>
  }
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40010400 	.word	0x40010400

0800397c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_PWREx_GetVoltageRange+0x18>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40007000 	.word	0x40007000

08003998 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a6:	d130      	bne.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039a8:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b4:	d038      	beq.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039be:	4a1e      	ldr	r2, [pc, #120]	; (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2232      	movs	r2, #50	; 0x32
 80039cc:	fb02 f303 	mul.w	r3, r2, r3
 80039d0:	4a1b      	ldr	r2, [pc, #108]	; (8003a40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	0c9b      	lsrs	r3, r3, #18
 80039d8:	3301      	adds	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039dc:	e002      	b.n	80039e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f0:	d102      	bne.n	80039f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f2      	bne.n	80039de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039f8:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a04:	d110      	bne.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e00f      	b.n	8003a2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a16:	d007      	beq.n	8003a28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a18:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a20:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	431bde83 	.word	0x431bde83

08003a44 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e3ca      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a56:	4b97      	ldr	r3, [pc, #604]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a60:	4b94      	ldr	r3, [pc, #592]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80e4 	beq.w	8003c40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_RCC_OscConfig+0x4a>
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	f040 808b 	bne.w	8003b9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	f040 8087 	bne.w	8003b9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a8e:	4b89      	ldr	r3, [pc, #548]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x62>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e3a2      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1a      	ldr	r2, [r3, #32]
 8003aaa:	4b82      	ldr	r3, [pc, #520]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x7c>
 8003ab6:	4b7f      	ldr	r3, [pc, #508]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003abe:	e005      	b.n	8003acc <HAL_RCC_OscConfig+0x88>
 8003ac0:	4b7c      	ldr	r3, [pc, #496]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d223      	bcs.n	8003b18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fd55 	bl	8004584 <RCC_SetFlashLatencyFromMSIRange>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e383      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ae4:	4b73      	ldr	r3, [pc, #460]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a72      	ldr	r2, [pc, #456]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003aea:	f043 0308 	orr.w	r3, r3, #8
 8003aee:	6013      	str	r3, [r2, #0]
 8003af0:	4b70      	ldr	r3, [pc, #448]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	496d      	ldr	r1, [pc, #436]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b02:	4b6c      	ldr	r3, [pc, #432]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	4968      	ldr	r1, [pc, #416]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
 8003b16:	e025      	b.n	8003b64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b18:	4b66      	ldr	r3, [pc, #408]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a65      	ldr	r2, [pc, #404]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	f043 0308 	orr.w	r3, r3, #8
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b63      	ldr	r3, [pc, #396]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4960      	ldr	r1, [pc, #384]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b36:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	495b      	ldr	r1, [pc, #364]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fd15 	bl	8004584 <RCC_SetFlashLatencyFromMSIRange>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e343      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b64:	f000 fc4a 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b52      	ldr	r3, [pc, #328]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	4950      	ldr	r1, [pc, #320]	; (8003cb8 <HAL_RCC_OscConfig+0x274>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	4a4e      	ldr	r2, [pc, #312]	; (8003cbc <HAL_RCC_OscConfig+0x278>)
 8003b82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b84:	4b4e      	ldr	r3, [pc, #312]	; (8003cc0 <HAL_RCC_OscConfig+0x27c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fa7d 	bl	8002088 <HAL_InitTick>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d052      	beq.n	8003c3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	e327      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d032      	beq.n	8003c0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a42      	ldr	r2, [pc, #264]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe faba 	bl	8002128 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bb8:	f7fe fab6 	bl	8002128 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e310      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bca:	4b3a      	ldr	r3, [pc, #232]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd6:	4b37      	ldr	r3, [pc, #220]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a36      	ldr	r2, [pc, #216]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	f043 0308 	orr.w	r3, r3, #8
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b34      	ldr	r3, [pc, #208]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4931      	ldr	r1, [pc, #196]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bf4:	4b2f      	ldr	r3, [pc, #188]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	492c      	ldr	r1, [pc, #176]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
 8003c08:	e01a      	b.n	8003c40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c0a:	4b2a      	ldr	r3, [pc, #168]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c16:	f7fe fa87 	bl	8002128 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c1e:	f7fe fa83 	bl	8002128 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e2dd      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c30:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x1da>
 8003c3c:	e000      	b.n	8003c40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d074      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d005      	beq.n	8003c5e <HAL_RCC_OscConfig+0x21a>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d10e      	bne.n	8003c76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d064      	beq.n	8003d34 <HAL_RCC_OscConfig+0x2f0>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d160      	bne.n	8003d34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e2ba      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x24a>
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e026      	b.n	8003cdc <HAL_RCC_OscConfig+0x298>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c96:	d115      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x280>
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	4b03      	ldr	r3, [pc, #12]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a02      	ldr	r2, [pc, #8]	; (8003cb4 <HAL_RCC_OscConfig+0x270>)
 8003caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	e014      	b.n	8003cdc <HAL_RCC_OscConfig+0x298>
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	08007b74 	.word	0x08007b74
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	20000004 	.word	0x20000004
 8003cc4:	4ba0      	ldr	r3, [pc, #640]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a9f      	ldr	r2, [pc, #636]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	4b9d      	ldr	r3, [pc, #628]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a9c      	ldr	r2, [pc, #624]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d013      	beq.n	8003d0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fa20 	bl	8002128 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cec:	f7fe fa1c 	bl	8002128 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b64      	cmp	r3, #100	; 0x64
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e276      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cfe:	4b92      	ldr	r3, [pc, #584]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x2a8>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fa0c 	bl	8002128 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d14:	f7fe fa08 	bl	8002128 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e262      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d26:	4b88      	ldr	r3, [pc, #544]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x2d0>
 8003d32:	e000      	b.n	8003d36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d060      	beq.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d005      	beq.n	8003d54 <HAL_RCC_OscConfig+0x310>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b0c      	cmp	r3, #12
 8003d4c:	d119      	bne.n	8003d82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d116      	bne.n	8003d82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d54:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_OscConfig+0x328>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e23f      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6c:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	061b      	lsls	r3, r3, #24
 8003d7a:	4973      	ldr	r1, [pc, #460]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d80:	e040      	b.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d023      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d8a:	4b6f      	ldr	r3, [pc, #444]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6e      	ldr	r2, [pc, #440]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fe f9c7 	bl	8002128 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9e:	f7fe f9c3 	bl	8002128 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e21d      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db0:	4b65      	ldr	r3, [pc, #404]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dbc:	4b62      	ldr	r3, [pc, #392]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	495f      	ldr	r1, [pc, #380]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
 8003dd0:	e018      	b.n	8003e04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a5c      	ldr	r2, [pc, #368]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fe f9a3 	bl	8002128 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de6:	f7fe f99f 	bl	8002128 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e1f9      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003df8:	4b53      	ldr	r3, [pc, #332]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d03c      	beq.n	8003e8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01c      	beq.n	8003e52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e18:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1e:	4a4a      	ldr	r2, [pc, #296]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fe f97e 	bl	8002128 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e30:	f7fe f97a 	bl	8002128 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1d4      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e42:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ef      	beq.n	8003e30 <HAL_RCC_OscConfig+0x3ec>
 8003e50:	e01b      	b.n	8003e8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e52:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e58:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e5a:	f023 0301 	bic.w	r3, r3, #1
 8003e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e62:	f7fe f961 	bl	8002128 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6a:	f7fe f95d 	bl	8002128 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e1b7      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e7c:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ef      	bne.n	8003e6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80a6 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e9c:	4b2a      	ldr	r3, [pc, #168]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10d      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec4:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <HAL_RCC_OscConfig+0x508>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d118      	bne.n	8003f02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	; (8003f4c <HAL_RCC_OscConfig+0x508>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <HAL_RCC_OscConfig+0x508>)
 8003ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003edc:	f7fe f924 	bl	8002128 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee4:	f7fe f920 	bl	8002128 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e17a      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <HAL_RCC_OscConfig+0x508>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d108      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4d8>
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f10:	4a0d      	ldr	r2, [pc, #52]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f1a:	e029      	b.n	8003f70 <HAL_RCC_OscConfig+0x52c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b05      	cmp	r3, #5
 8003f22:	d115      	bne.n	8003f50 <HAL_RCC_OscConfig+0x50c>
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2a:	4a07      	ldr	r2, [pc, #28]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f2c:	f043 0304 	orr.w	r3, r3, #4
 8003f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f34:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3a:	4a03      	ldr	r2, [pc, #12]	; (8003f48 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f44:	e014      	b.n	8003f70 <HAL_RCC_OscConfig+0x52c>
 8003f46:	bf00      	nop
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	4b9c      	ldr	r3, [pc, #624]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	4a9b      	ldr	r2, [pc, #620]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f60:	4b98      	ldr	r3, [pc, #608]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	4a97      	ldr	r2, [pc, #604]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d016      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe f8d6 	bl	8002128 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe f8d2 	bl	8002128 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e12a      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f96:	4b8b      	ldr	r3, [pc, #556]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0ed      	beq.n	8003f80 <HAL_RCC_OscConfig+0x53c>
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fe f8bf 	bl	8002128 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe f8bb 	bl	8002128 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e113      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc4:	4b7f      	ldr	r3, [pc, #508]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ed      	bne.n	8003fae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd2:	7ffb      	ldrb	r3, [r7, #31]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	4b7a      	ldr	r3, [pc, #488]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	4a79      	ldr	r2, [pc, #484]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80fe 	beq.w	80041ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	f040 80d0 	bne.w	8004198 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ff8:	4b72      	ldr	r3, [pc, #456]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0203 	and.w	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	429a      	cmp	r2, r3
 800400a:	d130      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	3b01      	subs	r3, #1
 8004018:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d127      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004028:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d11f      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004038:	2a07      	cmp	r2, #7
 800403a:	bf14      	ite	ne
 800403c:	2201      	movne	r2, #1
 800403e:	2200      	moveq	r2, #0
 8004040:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004042:	4293      	cmp	r3, r2
 8004044:	d113      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	3b01      	subs	r3, #1
 8004054:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d109      	bne.n	800406e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	3b01      	subs	r3, #1
 8004068:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d06e      	beq.n	800414c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d069      	beq.n	8004148 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004074:	4b53      	ldr	r3, [pc, #332]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004080:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0ad      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004090:	4b4c      	ldr	r3, [pc, #304]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a4b      	ldr	r2, [pc, #300]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800409c:	f7fe f844 	bl	8002128 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fe f840 	bl	8002128 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e09a      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b6:	4b43      	ldr	r3, [pc, #268]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c2:	4b40      	ldr	r3, [pc, #256]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	4b40      	ldr	r3, [pc, #256]	; (80041c8 <HAL_RCC_OscConfig+0x784>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040d2:	3a01      	subs	r2, #1
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040dc:	0212      	lsls	r2, r2, #8
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040e4:	0852      	lsrs	r2, r2, #1
 80040e6:	3a01      	subs	r2, #1
 80040e8:	0552      	lsls	r2, r2, #21
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040f0:	0852      	lsrs	r2, r2, #1
 80040f2:	3a01      	subs	r2, #1
 80040f4:	0652      	lsls	r2, r2, #25
 80040f6:	4311      	orrs	r1, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040fc:	0912      	lsrs	r2, r2, #4
 80040fe:	0452      	lsls	r2, r2, #17
 8004100:	430a      	orrs	r2, r1
 8004102:	4930      	ldr	r1, [pc, #192]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004104:	4313      	orrs	r3, r2
 8004106:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004108:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 800410e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004112:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 800411a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004120:	f7fe f802 	bl	8002128 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fd fffe 	bl	8002128 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e058      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413a:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004146:	e050      	b.n	80041ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e04f      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d148      	bne.n	80041ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004158:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 800415e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004162:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004164:	4b17      	ldr	r3, [pc, #92]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 800416a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800416e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004170:	f7fd ffda 	bl	8002128 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004178:	f7fd ffd6 	bl	8002128 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e030      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418a:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x734>
 8004196:	e028      	b.n	80041ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b0c      	cmp	r3, #12
 800419c:	d023      	beq.n	80041e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <HAL_RCC_OscConfig+0x780>)
 80041a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fd ffbd 	bl	8002128 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b0:	e00c      	b.n	80041cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b2:	f7fd ffb9 	bl	8002128 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d905      	bls.n	80041cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e013      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
 80041c4:	40021000 	.word	0x40021000
 80041c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCC_OscConfig+0x7b0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ec      	bne.n	80041b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_RCC_OscConfig+0x7b0>)
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	4905      	ldr	r1, [pc, #20]	; (80041f4 <HAL_RCC_OscConfig+0x7b0>)
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_RCC_OscConfig+0x7b4>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	60cb      	str	r3, [r1, #12]
 80041e4:	e001      	b.n	80041ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	feeefffc 	.word	0xfeeefffc

080041fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0e7      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004210:	4b75      	ldr	r3, [pc, #468]	; (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d910      	bls.n	8004240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b72      	ldr	r3, [pc, #456]	; (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 0207 	bic.w	r2, r3, #7
 8004226:	4970      	ldr	r1, [pc, #448]	; (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b6e      	ldr	r3, [pc, #440]	; (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0cf      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d010      	beq.n	800426e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	4b66      	ldr	r3, [pc, #408]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004258:	429a      	cmp	r2, r3
 800425a:	d908      	bls.n	800426e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800425c:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4960      	ldr	r1, [pc, #384]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d04c      	beq.n	8004314 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004282:	4b5a      	ldr	r3, [pc, #360]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d121      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0a6      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800429a:	4b54      	ldr	r3, [pc, #336]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d115      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e09a      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b2:	4b4e      	ldr	r3, [pc, #312]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e08e      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c2:	4b4a      	ldr	r3, [pc, #296]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e086      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042d2:	4b46      	ldr	r3, [pc, #280]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4943      	ldr	r1, [pc, #268]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e4:	f7fd ff20 	bl	8002128 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7fd ff1c 	bl	8002128 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e06e      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 020c 	and.w	r2, r3, #12
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	429a      	cmp	r2, r3
 8004312:	d1eb      	bne.n	80042ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d010      	beq.n	8004342 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800432c:	429a      	cmp	r2, r3
 800432e:	d208      	bcs.n	8004342 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004330:	4b2e      	ldr	r3, [pc, #184]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	492b      	ldr	r1, [pc, #172]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d210      	bcs.n	8004372 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 0207 	bic.w	r2, r3, #7
 8004358:	4923      	ldr	r1, [pc, #140]	; (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	4313      	orrs	r3, r2
 800435e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004360:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d001      	beq.n	8004372 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e036      	b.n	80043e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437e:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	4918      	ldr	r1, [pc, #96]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d009      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4910      	ldr	r1, [pc, #64]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043b0:	f000 f824 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <HAL_RCC_ClockConfig+0x1f0>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	490b      	ldr	r1, [pc, #44]	; (80043f0 <HAL_RCC_ClockConfig+0x1f4>)
 80043c2:	5ccb      	ldrb	r3, [r1, r3]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	fa22 f303 	lsr.w	r3, r2, r3
 80043cc:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_RCC_ClockConfig+0x1f8>)
 80043ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <HAL_RCC_ClockConfig+0x1fc>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd fe57 	bl	8002088 <HAL_InitTick>
 80043da:	4603      	mov	r3, r0
 80043dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80043de:	7afb      	ldrb	r3, [r7, #11]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40022000 	.word	0x40022000
 80043ec:	40021000 	.word	0x40021000
 80043f0:	08007b74 	.word	0x08007b74
 80043f4:	20000000 	.word	0x20000000
 80043f8:	20000004 	.word	0x20000004

080043fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b089      	sub	sp, #36	; 0x24
 8004400:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800440a:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 030c 	and.w	r3, r3, #12
 8004412:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004414:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_GetSysClockFreq+0x34>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b0c      	cmp	r3, #12
 8004428:	d121      	bne.n	800446e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d11e      	bne.n	800446e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004430:	4b34      	ldr	r3, [pc, #208]	; (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d107      	bne.n	800444c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800443c:	4b31      	ldr	r3, [pc, #196]	; (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	e005      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800444c:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004458:	4a2b      	ldr	r2, [pc, #172]	; (8004508 <HAL_RCC_GetSysClockFreq+0x10c>)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004460:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d102      	bne.n	800447a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004474:	4b25      	ldr	r3, [pc, #148]	; (800450c <HAL_RCC_GetSysClockFreq+0x110>)
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e004      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b08      	cmp	r3, #8
 800447e:	d101      	bne.n	8004484 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004480:	4b23      	ldr	r3, [pc, #140]	; (8004510 <HAL_RCC_GetSysClockFreq+0x114>)
 8004482:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b0c      	cmp	r3, #12
 8004488:	d134      	bne.n	80044f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800448a:	4b1e      	ldr	r3, [pc, #120]	; (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d003      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d003      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0xac>
 80044a0:	e005      	b.n	80044ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044a2:	4b1a      	ldr	r3, [pc, #104]	; (800450c <HAL_RCC_GetSysClockFreq+0x110>)
 80044a4:	617b      	str	r3, [r7, #20]
      break;
 80044a6:	e005      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_RCC_GetSysClockFreq+0x114>)
 80044aa:	617b      	str	r3, [r7, #20]
      break;
 80044ac:	e002      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	617b      	str	r3, [r7, #20]
      break;
 80044b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	3301      	adds	r3, #1
 80044c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	fb03 f202 	mul.w	r2, r3, r2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <HAL_RCC_GetSysClockFreq+0x108>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	0e5b      	lsrs	r3, r3, #25
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	3301      	adds	r3, #1
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044f4:	69bb      	ldr	r3, [r7, #24]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3724      	adds	r7, #36	; 0x24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	08007b8c 	.word	0x08007b8c
 800450c:	00f42400 	.word	0x00f42400
 8004510:	007a1200 	.word	0x007a1200

08004514 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <HAL_RCC_GetHCLKFreq+0x14>)
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000000 	.word	0x20000000

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004530:	f7ff fff0 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4904      	ldr	r1, [pc, #16]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40021000 	.word	0x40021000
 8004554:	08007b84 	.word	0x08007b84

08004558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800455c:	f7ff ffda 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	0adb      	lsrs	r3, r3, #11
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4904      	ldr	r1, [pc, #16]	; (8004580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	f003 031f 	and.w	r3, r3, #31
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	08007b84 	.word	0x08007b84

08004584 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004590:	4b2a      	ldr	r3, [pc, #168]	; (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800459c:	f7ff f9ee 	bl	800397c <HAL_PWREx_GetVoltageRange>
 80045a0:	6178      	str	r0, [r7, #20]
 80045a2:	e014      	b.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045a4:	4b25      	ldr	r3, [pc, #148]	; (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	4a24      	ldr	r2, [pc, #144]	; (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ae:	6593      	str	r3, [r2, #88]	; 0x58
 80045b0:	4b22      	ldr	r3, [pc, #136]	; (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045bc:	f7ff f9de 	bl	800397c <HAL_PWREx_GetVoltageRange>
 80045c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045c2:	4b1e      	ldr	r3, [pc, #120]	; (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	4a1d      	ldr	r2, [pc, #116]	; (800463c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045d4:	d10b      	bne.n	80045ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b80      	cmp	r3, #128	; 0x80
 80045da:	d919      	bls.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2ba0      	cmp	r3, #160	; 0xa0
 80045e0:	d902      	bls.n	80045e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045e2:	2302      	movs	r3, #2
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	e013      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045e8:	2301      	movs	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e010      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	d902      	bls.n	80045fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045f4:	2303      	movs	r3, #3
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	e00a      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b80      	cmp	r3, #128	; 0x80
 80045fe:	d102      	bne.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004600:	2302      	movs	r3, #2
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e004      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b70      	cmp	r3, #112	; 0x70
 800460a:	d101      	bne.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800460c:	2301      	movs	r3, #1
 800460e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 0207 	bic.w	r2, r3, #7
 8004618:	4909      	ldr	r1, [pc, #36]	; (8004640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	429a      	cmp	r2, r3
 800462c:	d001      	beq.n	8004632 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	40022000 	.word	0x40022000

08004644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800464c:	2300      	movs	r3, #0
 800464e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004650:	2300      	movs	r3, #0
 8004652:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d041      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004664:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004668:	d02a      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800466a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800466e:	d824      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004670:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004674:	d008      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800467a:	d81e      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004684:	d010      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004686:	e018      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004688:	4b86      	ldr	r3, [pc, #536]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a85      	ldr	r2, [pc, #532]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004692:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004694:	e015      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fabb 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046a6:	e00c      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3320      	adds	r3, #32
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fba6 	bl	8004e00 <RCCEx_PLLSAI2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b8:	e003      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	74fb      	strb	r3, [r7, #19]
      break;
 80046be:	e000      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c2:	7cfb      	ldrb	r3, [r7, #19]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046c8:	4b76      	ldr	r3, [pc, #472]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d6:	4973      	ldr	r1, [pc, #460]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046de:	e001      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d041      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046f8:	d02a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046fe:	d824      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004700:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004704:	d008      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800470a:	d81e      	bhi.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004714:	d010      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004716:	e018      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004718:	4b62      	ldr	r3, [pc, #392]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a61      	ldr	r2, [pc, #388]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004722:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004724:	e015      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3304      	adds	r3, #4
 800472a:	2100      	movs	r1, #0
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fa73 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004736:	e00c      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3320      	adds	r3, #32
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fb5e 	bl	8004e00 <RCCEx_PLLSAI2_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004748:	e003      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	74fb      	strb	r3, [r7, #19]
      break;
 800474e:	e000      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004758:	4b52      	ldr	r3, [pc, #328]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004766:	494f      	ldr	r1, [pc, #316]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800476e:	e001      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004770:	7cfb      	ldrb	r3, [r7, #19]
 8004772:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a0 	beq.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004786:	4b47      	ldr	r3, [pc, #284]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479c:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	4a40      	ldr	r2, [pc, #256]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047a6:	6593      	str	r3, [r2, #88]	; 0x58
 80047a8:	4b3e      	ldr	r3, [pc, #248]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047b4:	2301      	movs	r3, #1
 80047b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b8:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a3a      	ldr	r2, [pc, #232]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047c4:	f7fd fcb0 	bl	8002128 <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ca:	e009      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047cc:	f7fd fcac 	bl	8002128 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d902      	bls.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	74fb      	strb	r3, [r7, #19]
        break;
 80047de:	e005      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047e0:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ef      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d15c      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047f2:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d01f      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	d019      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800481c:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800482c:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004832:	4a1c      	ldr	r2, [pc, #112]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800483c:	4a19      	ldr	r2, [pc, #100]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fd fc6b 	bl	8002128 <HAL_GetTick>
 8004852:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004854:	e00b      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fd fc67 	bl	8002128 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f241 3288 	movw	r2, #5000	; 0x1388
 8004864:	4293      	cmp	r3, r2
 8004866:	d902      	bls.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	74fb      	strb	r3, [r7, #19]
            break;
 800486c:	e006      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486e:	4b0d      	ldr	r3, [pc, #52]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ec      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800487c:	7cfb      	ldrb	r3, [r7, #19]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10c      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004892:	4904      	ldr	r1, [pc, #16]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800489a:	e009      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
 80048a0:	e006      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000
 80048a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048b0:	7c7b      	ldrb	r3, [r7, #17]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d105      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	4b9e      	ldr	r3, [pc, #632]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	4a9d      	ldr	r2, [pc, #628]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ce:	4b98      	ldr	r3, [pc, #608]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	f023 0203 	bic.w	r2, r3, #3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	4994      	ldr	r1, [pc, #592]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f0:	4b8f      	ldr	r3, [pc, #572]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f6:	f023 020c 	bic.w	r2, r3, #12
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	498c      	ldr	r1, [pc, #560]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004912:	4b87      	ldr	r3, [pc, #540]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	4983      	ldr	r1, [pc, #524]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004934:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	497b      	ldr	r1, [pc, #492]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004956:	4b76      	ldr	r3, [pc, #472]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004964:	4972      	ldr	r1, [pc, #456]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004978:	4b6d      	ldr	r3, [pc, #436]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004986:	496a      	ldr	r1, [pc, #424]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800499a:	4b65      	ldr	r3, [pc, #404]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a8:	4961      	ldr	r1, [pc, #388]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049bc:	4b5c      	ldr	r3, [pc, #368]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ca:	4959      	ldr	r1, [pc, #356]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049de:	4b54      	ldr	r3, [pc, #336]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ec:	4950      	ldr	r1, [pc, #320]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a00:	4b4b      	ldr	r3, [pc, #300]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	4948      	ldr	r1, [pc, #288]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a22:	4b43      	ldr	r3, [pc, #268]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	493f      	ldr	r1, [pc, #252]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d028      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a44:	4b3a      	ldr	r3, [pc, #232]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a52:	4937      	ldr	r1, [pc, #220]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a62:	d106      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a64:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4a31      	ldr	r2, [pc, #196]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a6e:	60d3      	str	r3, [r2, #12]
 8004a70:	e011      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a7a:	d10c      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	2101      	movs	r1, #1
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f8c8 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a92:	7cfb      	ldrb	r3, [r7, #19]
 8004a94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d028      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aa2:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	491f      	ldr	r1, [pc, #124]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004acc:	60d3      	str	r3, [r2, #12]
 8004ace:	e011      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	2101      	movs	r1, #1
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 f899 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d02b      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b00:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0e:	4908      	ldr	r1, [pc, #32]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b1e:	d109      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b20:	4b03      	ldr	r3, [pc, #12]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a02      	ldr	r2, [pc, #8]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2a:	60d3      	str	r3, [r2, #12]
 8004b2c:	e014      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b2e:	bf00      	nop
 8004b30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b3c:	d10c      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	2101      	movs	r1, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f867 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b4e:	7cfb      	ldrb	r3, [r7, #19]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d02f      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b72:	4928      	ldr	r1, [pc, #160]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b82:	d10d      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	2102      	movs	r1, #2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f844 	bl	8004c18 <RCCEx_PLLSAI1_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b94:	7cfb      	ldrb	r3, [r7, #19]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d014      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b9a:	7cfb      	ldrb	r3, [r7, #19]
 8004b9c:	74bb      	strb	r3, [r7, #18]
 8004b9e:	e011      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba8:	d10c      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3320      	adds	r3, #32
 8004bae:	2102      	movs	r1, #2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 f925 	bl	8004e00 <RCCEx_PLLSAI2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bc0:	7cfb      	ldrb	r3, [r7, #19]
 8004bc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bde:	490d      	ldr	r1, [pc, #52]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c02:	4904      	ldr	r1, [pc, #16]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3718      	adds	r7, #24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000

08004c18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c26:	4b75      	ldr	r3, [pc, #468]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d018      	beq.n	8004c64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c32:	4b72      	ldr	r3, [pc, #456]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0203 	and.w	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d10d      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
       ||
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d009      	beq.n	8004c5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c4a:	4b6c      	ldr	r3, [pc, #432]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
       ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d047      	beq.n	8004cee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	e044      	b.n	8004cee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d018      	beq.n	8004c9e <RCCEx_PLLSAI1_Config+0x86>
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d825      	bhi.n	8004cbc <RCCEx_PLLSAI1_Config+0xa4>
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d002      	beq.n	8004c7a <RCCEx_PLLSAI1_Config+0x62>
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d009      	beq.n	8004c8c <RCCEx_PLLSAI1_Config+0x74>
 8004c78:	e020      	b.n	8004cbc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c7a:	4b60      	ldr	r3, [pc, #384]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11d      	bne.n	8004cc2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c8a:	e01a      	b.n	8004cc2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c8c:	4b5b      	ldr	r3, [pc, #364]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d116      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c9c:	e013      	b.n	8004cc6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c9e:	4b57      	ldr	r3, [pc, #348]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004caa:	4b54      	ldr	r3, [pc, #336]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cba:	e006      	b.n	8004cca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc0:	e004      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e002      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10d      	bne.n	8004cee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cd2:	4b4a      	ldr	r3, [pc, #296]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6819      	ldr	r1, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	4944      	ldr	r1, [pc, #272]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d17d      	bne.n	8004df0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cf4:	4b41      	ldr	r3, [pc, #260]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a40      	ldr	r2, [pc, #256]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d00:	f7fd fa12 	bl	8002128 <HAL_GetTick>
 8004d04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d06:	e009      	b.n	8004d1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d08:	f7fd fa0e 	bl	8002128 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d902      	bls.n	8004d1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	73fb      	strb	r3, [r7, #15]
        break;
 8004d1a:	e005      	b.n	8004d28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d1c:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1ef      	bne.n	8004d08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d160      	bne.n	8004df0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d111      	bne.n	8004d58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d34:	4b31      	ldr	r3, [pc, #196]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6892      	ldr	r2, [r2, #8]
 8004d44:	0211      	lsls	r1, r2, #8
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	68d2      	ldr	r2, [r2, #12]
 8004d4a:	0912      	lsrs	r2, r2, #4
 8004d4c:	0452      	lsls	r2, r2, #17
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	492a      	ldr	r1, [pc, #168]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	610b      	str	r3, [r1, #16]
 8004d56:	e027      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d112      	bne.n	8004d84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d5e:	4b27      	ldr	r3, [pc, #156]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6892      	ldr	r2, [r2, #8]
 8004d6e:	0211      	lsls	r1, r2, #8
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6912      	ldr	r2, [r2, #16]
 8004d74:	0852      	lsrs	r2, r2, #1
 8004d76:	3a01      	subs	r2, #1
 8004d78:	0552      	lsls	r2, r2, #21
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	491f      	ldr	r1, [pc, #124]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	610b      	str	r3, [r1, #16]
 8004d82:	e011      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d84:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6892      	ldr	r2, [r2, #8]
 8004d94:	0211      	lsls	r1, r2, #8
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6952      	ldr	r2, [r2, #20]
 8004d9a:	0852      	lsrs	r2, r2, #1
 8004d9c:	3a01      	subs	r2, #1
 8004d9e:	0652      	lsls	r2, r2, #25
 8004da0:	430a      	orrs	r2, r1
 8004da2:	4916      	ldr	r1, [pc, #88]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004da8:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a13      	ldr	r2, [pc, #76]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004db2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db4:	f7fd f9b8 	bl	8002128 <HAL_GetTick>
 8004db8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dba:	e009      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dbc:	f7fd f9b4 	bl	8002128 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d902      	bls.n	8004dd0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	73fb      	strb	r3, [r7, #15]
          break;
 8004dce:	e005      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0ef      	beq.n	8004dbc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	4904      	ldr	r1, [pc, #16]	; (8004dfc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000

08004e00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e0e:	4b6a      	ldr	r3, [pc, #424]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d018      	beq.n	8004e4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e1a:	4b67      	ldr	r3, [pc, #412]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f003 0203 	and.w	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d10d      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e32:	4b61      	ldr	r3, [pc, #388]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
       ||
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d047      	beq.n	8004ed6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	e044      	b.n	8004ed6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d018      	beq.n	8004e86 <RCCEx_PLLSAI2_Config+0x86>
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d825      	bhi.n	8004ea4 <RCCEx_PLLSAI2_Config+0xa4>
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d002      	beq.n	8004e62 <RCCEx_PLLSAI2_Config+0x62>
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d009      	beq.n	8004e74 <RCCEx_PLLSAI2_Config+0x74>
 8004e60:	e020      	b.n	8004ea4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e62:	4b55      	ldr	r3, [pc, #340]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11d      	bne.n	8004eaa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e72:	e01a      	b.n	8004eaa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e74:	4b50      	ldr	r3, [pc, #320]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d116      	bne.n	8004eae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e84:	e013      	b.n	8004eae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e86:	4b4c      	ldr	r3, [pc, #304]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e92:	4b49      	ldr	r3, [pc, #292]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ea2:	e006      	b.n	8004eb2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea8:	e004      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10d      	bne.n	8004ed6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004eba:	4b3f      	ldr	r3, [pc, #252]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6819      	ldr	r1, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	4939      	ldr	r1, [pc, #228]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d167      	bne.n	8004fac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004edc:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a35      	ldr	r2, [pc, #212]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee8:	f7fd f91e 	bl	8002128 <HAL_GetTick>
 8004eec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eee:	e009      	b.n	8004f04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ef0:	f7fd f91a 	bl	8002128 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d902      	bls.n	8004f04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	73fb      	strb	r3, [r7, #15]
        break;
 8004f02:	e005      	b.n	8004f10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f04:	4b2c      	ldr	r3, [pc, #176]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ef      	bne.n	8004ef0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d14a      	bne.n	8004fac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d111      	bne.n	8004f40 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f1c:	4b26      	ldr	r3, [pc, #152]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6892      	ldr	r2, [r2, #8]
 8004f2c:	0211      	lsls	r1, r2, #8
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68d2      	ldr	r2, [r2, #12]
 8004f32:	0912      	lsrs	r2, r2, #4
 8004f34:	0452      	lsls	r2, r2, #17
 8004f36:	430a      	orrs	r2, r1
 8004f38:	491f      	ldr	r1, [pc, #124]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	614b      	str	r3, [r1, #20]
 8004f3e:	e011      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f40:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6892      	ldr	r2, [r2, #8]
 8004f50:	0211      	lsls	r1, r2, #8
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6912      	ldr	r2, [r2, #16]
 8004f56:	0852      	lsrs	r2, r2, #1
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	0652      	lsls	r2, r2, #25
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	4916      	ldr	r1, [pc, #88]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fd f8da 	bl	8002128 <HAL_GetTick>
 8004f74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f76:	e009      	b.n	8004f8c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f78:	f7fd f8d6 	bl	8002128 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d902      	bls.n	8004f8c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	73fb      	strb	r3, [r7, #15]
          break;
 8004f8a:	e005      	b.n	8004f98 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ef      	beq.n	8004f78 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f9e:	4b06      	ldr	r3, [pc, #24]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	4904      	ldr	r1, [pc, #16]	; (8004fb8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40021000 	.word	0x40021000

08004fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e049      	b.n	8005062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fdd8 	bl	8001b98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f000 fd6c 	bl	8005ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b01      	cmp	r3, #1
 800507e:	d001      	beq.n	8005084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e047      	b.n	8005114 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <HAL_TIM_Base_Start+0xb4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01d      	beq.n	80050d2 <HAL_TIM_Base_Start+0x66>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d018      	beq.n	80050d2 <HAL_TIM_Base_Start+0x66>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <HAL_TIM_Base_Start+0xb8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_TIM_Base_Start+0x66>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <HAL_TIM_Base_Start+0xbc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_TIM_Base_Start+0x66>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_TIM_Base_Start+0xc0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_TIM_Base_Start+0x66>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <HAL_TIM_Base_Start+0xc4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIM_Base_Start+0x66>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_TIM_Base_Start+0xc8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d115      	bne.n	80050fe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	4b17      	ldr	r3, [pc, #92]	; (8005138 <HAL_TIM_Base_Start+0xcc>)
 80050da:	4013      	ands	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d015      	beq.n	8005110 <HAL_TIM_Base_Start+0xa4>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ea:	d011      	beq.n	8005110 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	e008      	b.n	8005110 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e000      	b.n	8005112 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40013400 	.word	0x40013400
 8005134:	40014000 	.word	0x40014000
 8005138:	00010007 	.word	0x00010007

0800513c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6a1a      	ldr	r2, [r3, #32]
 800514a:	f241 1311 	movw	r3, #4369	; 0x1111
 800514e:	4013      	ands	r3, r2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10f      	bne.n	8005174 <HAL_TIM_Base_Stop+0x38>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	f240 4344 	movw	r3, #1092	; 0x444
 800515e:	4013      	ands	r3, r2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d107      	bne.n	8005174 <HAL_TIM_Base_Stop+0x38>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0201 	bic.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e049      	b.n	8005230 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fc fd65 	bl	8001c80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f000 fc85 	bl	8005ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start+0x24>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e03c      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b04      	cmp	r3, #4
 8005260:	d109      	bne.n	8005276 <HAL_TIM_PWM_Start+0x3e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	bf14      	ite	ne
 800526e:	2301      	movne	r3, #1
 8005270:	2300      	moveq	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e02f      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d109      	bne.n	8005290 <HAL_TIM_PWM_Start+0x58>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e022      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b0c      	cmp	r3, #12
 8005294:	d109      	bne.n	80052aa <HAL_TIM_PWM_Start+0x72>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b01      	cmp	r3, #1
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e015      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b10      	cmp	r3, #16
 80052ae:	d109      	bne.n	80052c4 <HAL_TIM_PWM_Start+0x8c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	e008      	b.n	80052d6 <HAL_TIM_PWM_Start+0x9e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e09c      	b.n	8005418 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_PWM_Start+0xb6>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ec:	e023      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_PWM_Start+0xc6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fc:	e01b      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d104      	bne.n	800530e <HAL_TIM_PWM_Start+0xd6>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530c:	e013      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b0c      	cmp	r3, #12
 8005312:	d104      	bne.n	800531e <HAL_TIM_PWM_Start+0xe6>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800531c:	e00b      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b10      	cmp	r3, #16
 8005322:	d104      	bne.n	800532e <HAL_TIM_PWM_Start+0xf6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800532c:	e003      	b.n	8005336 <HAL_TIM_PWM_Start+0xfe>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2201      	movs	r2, #1
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f001 f867 	bl	8006412 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a35      	ldr	r2, [pc, #212]	; (8005420 <HAL_TIM_PWM_Start+0x1e8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d013      	beq.n	8005376 <HAL_TIM_PWM_Start+0x13e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a34      	ldr	r2, [pc, #208]	; (8005424 <HAL_TIM_PWM_Start+0x1ec>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00e      	beq.n	8005376 <HAL_TIM_PWM_Start+0x13e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a32      	ldr	r2, [pc, #200]	; (8005428 <HAL_TIM_PWM_Start+0x1f0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d009      	beq.n	8005376 <HAL_TIM_PWM_Start+0x13e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a31      	ldr	r2, [pc, #196]	; (800542c <HAL_TIM_PWM_Start+0x1f4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d004      	beq.n	8005376 <HAL_TIM_PWM_Start+0x13e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a2f      	ldr	r2, [pc, #188]	; (8005430 <HAL_TIM_PWM_Start+0x1f8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d101      	bne.n	800537a <HAL_TIM_PWM_Start+0x142>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <HAL_TIM_PWM_Start+0x144>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800538e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a22      	ldr	r2, [pc, #136]	; (8005420 <HAL_TIM_PWM_Start+0x1e8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01d      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x19e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a2:	d018      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x19e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a22      	ldr	r2, [pc, #136]	; (8005434 <HAL_TIM_PWM_Start+0x1fc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x19e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a21      	ldr	r2, [pc, #132]	; (8005438 <HAL_TIM_PWM_Start+0x200>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x19e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <HAL_TIM_PWM_Start+0x204>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x19e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a17      	ldr	r2, [pc, #92]	; (8005424 <HAL_TIM_PWM_Start+0x1ec>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_TIM_PWM_Start+0x19e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a15      	ldr	r2, [pc, #84]	; (8005428 <HAL_TIM_PWM_Start+0x1f0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d115      	bne.n	8005402 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	4b18      	ldr	r3, [pc, #96]	; (8005440 <HAL_TIM_PWM_Start+0x208>)
 80053de:	4013      	ands	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b06      	cmp	r3, #6
 80053e6:	d015      	beq.n	8005414 <HAL_TIM_PWM_Start+0x1dc>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ee:	d011      	beq.n	8005414 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005400:	e008      	b.n	8005414 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e000      	b.n	8005416 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40013400 	.word	0x40013400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	00010007 	.word	0x00010007

08005444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d020      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01b      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0202 	mvn.w	r2, #2
 8005478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fb03 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 faf5 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fb06 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d020      	beq.n	80054f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01b      	beq.n	80054f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0204 	mvn.w	r2, #4
 80054c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2202      	movs	r2, #2
 80054ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fadd 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 facf 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fae0 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d020      	beq.n	8005540 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01b      	beq.n	8005540 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0208 	mvn.w	r2, #8
 8005510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2204      	movs	r2, #4
 8005516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fab7 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 800552c:	e005      	b.n	800553a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 faa9 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 faba 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b00      	cmp	r3, #0
 8005548:	d020      	beq.n	800558c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01b      	beq.n	800558c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0210 	mvn.w	r2, #16
 800555c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2208      	movs	r2, #8
 8005562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fa91 	bl	8005a9a <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fa83 	bl	8005a86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fa94 	bl	8005aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00c      	beq.n	80055b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d007      	beq.n	80055b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0201 	mvn.w	r2, #1
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc f9cc 	bl	8001948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d007      	beq.n	80055d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 f854 	bl	800667c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00c      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d007      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 f84c 	bl	8006690 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa53 	bl	8005ac2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00c      	beq.n	8005640 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0220 	mvn.w	r2, #32
 8005638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f001 f814 	bl	8006668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005662:	2302      	movs	r3, #2
 8005664:	e0ff      	b.n	8005866 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b14      	cmp	r3, #20
 8005672:	f200 80f0 	bhi.w	8005856 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005676:	a201      	add	r2, pc, #4	; (adr r2, 800567c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	080056d1 	.word	0x080056d1
 8005680:	08005857 	.word	0x08005857
 8005684:	08005857 	.word	0x08005857
 8005688:	08005857 	.word	0x08005857
 800568c:	08005711 	.word	0x08005711
 8005690:	08005857 	.word	0x08005857
 8005694:	08005857 	.word	0x08005857
 8005698:	08005857 	.word	0x08005857
 800569c:	08005753 	.word	0x08005753
 80056a0:	08005857 	.word	0x08005857
 80056a4:	08005857 	.word	0x08005857
 80056a8:	08005857 	.word	0x08005857
 80056ac:	08005793 	.word	0x08005793
 80056b0:	08005857 	.word	0x08005857
 80056b4:	08005857 	.word	0x08005857
 80056b8:	08005857 	.word	0x08005857
 80056bc:	080057d5 	.word	0x080057d5
 80056c0:	08005857 	.word	0x08005857
 80056c4:	08005857 	.word	0x08005857
 80056c8:	08005857 	.word	0x08005857
 80056cc:	08005815 	.word	0x08005815
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fa98 	bl	8005c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699a      	ldr	r2, [r3, #24]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0208 	orr.w	r2, r2, #8
 80056ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0204 	bic.w	r2, r2, #4
 80056fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6999      	ldr	r1, [r3, #24]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	619a      	str	r2, [r3, #24]
      break;
 800570e:	e0a5      	b.n	800585c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fb08 	bl	8005d2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800572a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6999      	ldr	r1, [r3, #24]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	619a      	str	r2, [r3, #24]
      break;
 8005750:	e084      	b.n	800585c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fb71 	bl	8005e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f042 0208 	orr.w	r2, r2, #8
 800576c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0204 	bic.w	r2, r2, #4
 800577c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69d9      	ldr	r1, [r3, #28]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	61da      	str	r2, [r3, #28]
      break;
 8005790:	e064      	b.n	800585c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 fbd9 	bl	8005f50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69da      	ldr	r2, [r3, #28]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69d9      	ldr	r1, [r3, #28]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	021a      	lsls	r2, r3, #8
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	61da      	str	r2, [r3, #28]
      break;
 80057d2:	e043      	b.n	800585c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fc22 	bl	8006024 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0208 	orr.w	r2, r2, #8
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0204 	bic.w	r2, r2, #4
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005812:	e023      	b.n	800585c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fc66 	bl	80060ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800582e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	021a      	lsls	r2, r3, #8
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	430a      	orrs	r2, r1
 8005852:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005854:	e002      	b.n	800585c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	75fb      	strb	r3, [r7, #23]
      break;
 800585a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005864:	7dfb      	ldrb	r3, [r7, #23]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop

08005870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_TIM_ConfigClockSource+0x1c>
 8005888:	2302      	movs	r3, #2
 800588a:	e0b6      	b.n	80059fa <HAL_TIM_ConfigClockSource+0x18a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c8:	d03e      	beq.n	8005948 <HAL_TIM_ConfigClockSource+0xd8>
 80058ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ce:	f200 8087 	bhi.w	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d6:	f000 8086 	beq.w	80059e6 <HAL_TIM_ConfigClockSource+0x176>
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058de:	d87f      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058e0:	2b70      	cmp	r3, #112	; 0x70
 80058e2:	d01a      	beq.n	800591a <HAL_TIM_ConfigClockSource+0xaa>
 80058e4:	2b70      	cmp	r3, #112	; 0x70
 80058e6:	d87b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058e8:	2b60      	cmp	r3, #96	; 0x60
 80058ea:	d050      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x11e>
 80058ec:	2b60      	cmp	r3, #96	; 0x60
 80058ee:	d877      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058f0:	2b50      	cmp	r3, #80	; 0x50
 80058f2:	d03c      	beq.n	800596e <HAL_TIM_ConfigClockSource+0xfe>
 80058f4:	2b50      	cmp	r3, #80	; 0x50
 80058f6:	d873      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 80058f8:	2b40      	cmp	r3, #64	; 0x40
 80058fa:	d058      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x13e>
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d86f      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 8005900:	2b30      	cmp	r3, #48	; 0x30
 8005902:	d064      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15e>
 8005904:	2b30      	cmp	r3, #48	; 0x30
 8005906:	d86b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 8005908:	2b20      	cmp	r3, #32
 800590a:	d060      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15e>
 800590c:	2b20      	cmp	r3, #32
 800590e:	d867      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d05c      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15e>
 8005914:	2b10      	cmp	r3, #16
 8005916:	d05a      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x15e>
 8005918:	e062      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800592a:	f000 fd52 	bl	80063d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800593c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	609a      	str	r2, [r3, #8]
      break;
 8005946:	e04f      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005958:	f000 fd3b 	bl	80063d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800596a:	609a      	str	r2, [r3, #8]
      break;
 800596c:	e03c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	461a      	mov	r2, r3
 800597c:	f000 fcaf 	bl	80062de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2150      	movs	r1, #80	; 0x50
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fd08 	bl	800639c <TIM_ITRx_SetConfig>
      break;
 800598c:	e02c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	461a      	mov	r2, r3
 800599c:	f000 fcce 	bl	800633c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2160      	movs	r1, #96	; 0x60
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fcf8 	bl	800639c <TIM_ITRx_SetConfig>
      break;
 80059ac:	e01c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 fc8f 	bl	80062de <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2140      	movs	r1, #64	; 0x40
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fce8 	bl	800639c <TIM_ITRx_SetConfig>
      break;
 80059cc:	e00c      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4619      	mov	r1, r3
 80059d8:	4610      	mov	r0, r2
 80059da:	f000 fcdf 	bl	800639c <TIM_ITRx_SetConfig>
      break;
 80059de:	e003      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
      break;
 80059e4:	e000      	b.n	80059e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80059e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e031      	b.n	8005a7e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fbc3 	bl	80061b8 <TIM_SlaveTimer_SetConfig>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d009      	beq.n	8005a4c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e018      	b.n	8005a7e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a6a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a40      	ldr	r2, [pc, #256]	; (8005bec <TIM_Base_SetConfig+0x114>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d013      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af6:	d00f      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a3d      	ldr	r2, [pc, #244]	; (8005bf0 <TIM_Base_SetConfig+0x118>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00b      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a3c      	ldr	r2, [pc, #240]	; (8005bf4 <TIM_Base_SetConfig+0x11c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d007      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3b      	ldr	r2, [pc, #236]	; (8005bf8 <TIM_Base_SetConfig+0x120>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a3a      	ldr	r2, [pc, #232]	; (8005bfc <TIM_Base_SetConfig+0x124>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d108      	bne.n	8005b2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a2f      	ldr	r2, [pc, #188]	; (8005bec <TIM_Base_SetConfig+0x114>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01f      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b38:	d01b      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2c      	ldr	r2, [pc, #176]	; (8005bf0 <TIM_Base_SetConfig+0x118>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d017      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2b      	ldr	r2, [pc, #172]	; (8005bf4 <TIM_Base_SetConfig+0x11c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <TIM_Base_SetConfig+0x120>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00f      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a29      	ldr	r2, [pc, #164]	; (8005bfc <TIM_Base_SetConfig+0x124>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00b      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a28      	ldr	r2, [pc, #160]	; (8005c00 <TIM_Base_SetConfig+0x128>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <TIM_Base_SetConfig+0x12c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a26      	ldr	r2, [pc, #152]	; (8005c08 <TIM_Base_SetConfig+0x130>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d108      	bne.n	8005b84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a10      	ldr	r2, [pc, #64]	; (8005bec <TIM_Base_SetConfig+0x114>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00f      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a12      	ldr	r2, [pc, #72]	; (8005bfc <TIM_Base_SetConfig+0x124>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00b      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <TIM_Base_SetConfig+0x128>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d007      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a10      	ldr	r2, [pc, #64]	; (8005c04 <TIM_Base_SetConfig+0x12c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d003      	beq.n	8005bd0 <TIM_Base_SetConfig+0xf8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a0f      	ldr	r2, [pc, #60]	; (8005c08 <TIM_Base_SetConfig+0x130>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d103      	bne.n	8005bd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	615a      	str	r2, [r3, #20]
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40000400 	.word	0x40000400
 8005bf4:	40000800 	.word	0x40000800
 8005bf8:	40000c00 	.word	0x40000c00
 8005bfc:	40013400 	.word	0x40013400
 8005c00:	40014000 	.word	0x40014000
 8005c04:	40014400 	.word	0x40014400
 8005c08:	40014800 	.word	0x40014800

08005c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f023 0201 	bic.w	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0303 	bic.w	r3, r3, #3
 8005c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 0302 	bic.w	r3, r3, #2
 8005c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a2c      	ldr	r2, [pc, #176]	; (8005d18 <TIM_OC1_SetConfig+0x10c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00f      	beq.n	8005c8c <TIM_OC1_SetConfig+0x80>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a2b      	ldr	r2, [pc, #172]	; (8005d1c <TIM_OC1_SetConfig+0x110>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <TIM_OC1_SetConfig+0x80>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a2a      	ldr	r2, [pc, #168]	; (8005d20 <TIM_OC1_SetConfig+0x114>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <TIM_OC1_SetConfig+0x80>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a29      	ldr	r2, [pc, #164]	; (8005d24 <TIM_OC1_SetConfig+0x118>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC1_SetConfig+0x80>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a28      	ldr	r2, [pc, #160]	; (8005d28 <TIM_OC1_SetConfig+0x11c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d10c      	bne.n	8005ca6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0308 	bic.w	r3, r3, #8
 8005c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f023 0304 	bic.w	r3, r3, #4
 8005ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <TIM_OC1_SetConfig+0x10c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00f      	beq.n	8005cce <TIM_OC1_SetConfig+0xc2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <TIM_OC1_SetConfig+0x110>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00b      	beq.n	8005cce <TIM_OC1_SetConfig+0xc2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a19      	ldr	r2, [pc, #100]	; (8005d20 <TIM_OC1_SetConfig+0x114>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d007      	beq.n	8005cce <TIM_OC1_SetConfig+0xc2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <TIM_OC1_SetConfig+0x118>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d003      	beq.n	8005cce <TIM_OC1_SetConfig+0xc2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <TIM_OC1_SetConfig+0x11c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d111      	bne.n	8005cf2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	621a      	str	r2, [r3, #32]
}
 8005d0c:	bf00      	nop
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40012c00 	.word	0x40012c00
 8005d1c:	40013400 	.word	0x40013400
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40014400 	.word	0x40014400
 8005d28:	40014800 	.word	0x40014800

08005d2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f023 0210 	bic.w	r2, r3, #16
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	f023 0320 	bic.w	r3, r3, #32
 8005d7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a28      	ldr	r2, [pc, #160]	; (8005e2c <TIM_OC2_SetConfig+0x100>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d003      	beq.n	8005d98 <TIM_OC2_SetConfig+0x6c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a27      	ldr	r2, [pc, #156]	; (8005e30 <TIM_OC2_SetConfig+0x104>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d10d      	bne.n	8005db4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a1d      	ldr	r2, [pc, #116]	; (8005e2c <TIM_OC2_SetConfig+0x100>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00f      	beq.n	8005ddc <TIM_OC2_SetConfig+0xb0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a1c      	ldr	r2, [pc, #112]	; (8005e30 <TIM_OC2_SetConfig+0x104>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00b      	beq.n	8005ddc <TIM_OC2_SetConfig+0xb0>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a1b      	ldr	r2, [pc, #108]	; (8005e34 <TIM_OC2_SetConfig+0x108>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d007      	beq.n	8005ddc <TIM_OC2_SetConfig+0xb0>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <TIM_OC2_SetConfig+0x10c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC2_SetConfig+0xb0>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <TIM_OC2_SetConfig+0x110>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d113      	bne.n	8005e04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40013400 	.word	0x40013400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40014400 	.word	0x40014400
 8005e3c:	40014800 	.word	0x40014800

08005e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a27      	ldr	r2, [pc, #156]	; (8005f3c <TIM_OC3_SetConfig+0xfc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_OC3_SetConfig+0x6a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a26      	ldr	r2, [pc, #152]	; (8005f40 <TIM_OC3_SetConfig+0x100>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d10d      	bne.n	8005ec6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <TIM_OC3_SetConfig+0xfc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_OC3_SetConfig+0xae>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1b      	ldr	r2, [pc, #108]	; (8005f40 <TIM_OC3_SetConfig+0x100>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_OC3_SetConfig+0xae>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1a      	ldr	r2, [pc, #104]	; (8005f44 <TIM_OC3_SetConfig+0x104>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_OC3_SetConfig+0xae>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <TIM_OC3_SetConfig+0x108>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_OC3_SetConfig+0xae>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <TIM_OC3_SetConfig+0x10c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d113      	bne.n	8005f16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	621a      	str	r2, [r3, #32]
}
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40013400 	.word	0x40013400
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400
 8005f4c:	40014800 	.word	0x40014800

08005f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	031b      	lsls	r3, r3, #12
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a18      	ldr	r2, [pc, #96]	; (8006010 <TIM_OC4_SetConfig+0xc0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00f      	beq.n	8005fd4 <TIM_OC4_SetConfig+0x84>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a17      	ldr	r2, [pc, #92]	; (8006014 <TIM_OC4_SetConfig+0xc4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <TIM_OC4_SetConfig+0x84>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a16      	ldr	r2, [pc, #88]	; (8006018 <TIM_OC4_SetConfig+0xc8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d007      	beq.n	8005fd4 <TIM_OC4_SetConfig+0x84>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a15      	ldr	r2, [pc, #84]	; (800601c <TIM_OC4_SetConfig+0xcc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_OC4_SetConfig+0x84>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a14      	ldr	r2, [pc, #80]	; (8006020 <TIM_OC4_SetConfig+0xd0>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d109      	bne.n	8005fe8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	019b      	lsls	r3, r3, #6
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40013400 	.word	0x40013400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800

08006024 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	041b      	lsls	r3, r3, #16
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a17      	ldr	r2, [pc, #92]	; (80060d8 <TIM_OC5_SetConfig+0xb4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00f      	beq.n	800609e <TIM_OC5_SetConfig+0x7a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a16      	ldr	r2, [pc, #88]	; (80060dc <TIM_OC5_SetConfig+0xb8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00b      	beq.n	800609e <TIM_OC5_SetConfig+0x7a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <TIM_OC5_SetConfig+0xbc>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d007      	beq.n	800609e <TIM_OC5_SetConfig+0x7a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a14      	ldr	r2, [pc, #80]	; (80060e4 <TIM_OC5_SetConfig+0xc0>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d003      	beq.n	800609e <TIM_OC5_SetConfig+0x7a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <TIM_OC5_SetConfig+0xc4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d109      	bne.n	80060b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	621a      	str	r2, [r3, #32]
}
 80060cc:	bf00      	nop
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	40012c00 	.word	0x40012c00
 80060dc:	40013400 	.word	0x40013400
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40014400 	.word	0x40014400
 80060e8:	40014800 	.word	0x40014800

080060ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800611a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	051b      	lsls	r3, r3, #20
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a18      	ldr	r2, [pc, #96]	; (80061a4 <TIM_OC6_SetConfig+0xb8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00f      	beq.n	8006168 <TIM_OC6_SetConfig+0x7c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <TIM_OC6_SetConfig+0xbc>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00b      	beq.n	8006168 <TIM_OC6_SetConfig+0x7c>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a16      	ldr	r2, [pc, #88]	; (80061ac <TIM_OC6_SetConfig+0xc0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d007      	beq.n	8006168 <TIM_OC6_SetConfig+0x7c>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a15      	ldr	r2, [pc, #84]	; (80061b0 <TIM_OC6_SetConfig+0xc4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d003      	beq.n	8006168 <TIM_OC6_SetConfig+0x7c>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a14      	ldr	r2, [pc, #80]	; (80061b4 <TIM_OC6_SetConfig+0xc8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d109      	bne.n	800617c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800616e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	029b      	lsls	r3, r3, #10
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40013400 	.word	0x40013400
 80061ac:	40014000 	.word	0x40014000
 80061b0:	40014400 	.word	0x40014400
 80061b4:	40014800 	.word	0x40014800

080061b8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b70      	cmp	r3, #112	; 0x70
 8006204:	d01a      	beq.n	800623c <TIM_SlaveTimer_SetConfig+0x84>
 8006206:	2b70      	cmp	r3, #112	; 0x70
 8006208:	d860      	bhi.n	80062cc <TIM_SlaveTimer_SetConfig+0x114>
 800620a:	2b60      	cmp	r3, #96	; 0x60
 800620c:	d054      	beq.n	80062b8 <TIM_SlaveTimer_SetConfig+0x100>
 800620e:	2b60      	cmp	r3, #96	; 0x60
 8006210:	d85c      	bhi.n	80062cc <TIM_SlaveTimer_SetConfig+0x114>
 8006212:	2b50      	cmp	r3, #80	; 0x50
 8006214:	d046      	beq.n	80062a4 <TIM_SlaveTimer_SetConfig+0xec>
 8006216:	2b50      	cmp	r3, #80	; 0x50
 8006218:	d858      	bhi.n	80062cc <TIM_SlaveTimer_SetConfig+0x114>
 800621a:	2b40      	cmp	r3, #64	; 0x40
 800621c:	d019      	beq.n	8006252 <TIM_SlaveTimer_SetConfig+0x9a>
 800621e:	2b40      	cmp	r3, #64	; 0x40
 8006220:	d854      	bhi.n	80062cc <TIM_SlaveTimer_SetConfig+0x114>
 8006222:	2b30      	cmp	r3, #48	; 0x30
 8006224:	d055      	beq.n	80062d2 <TIM_SlaveTimer_SetConfig+0x11a>
 8006226:	2b30      	cmp	r3, #48	; 0x30
 8006228:	d850      	bhi.n	80062cc <TIM_SlaveTimer_SetConfig+0x114>
 800622a:	2b20      	cmp	r3, #32
 800622c:	d051      	beq.n	80062d2 <TIM_SlaveTimer_SetConfig+0x11a>
 800622e:	2b20      	cmp	r3, #32
 8006230:	d84c      	bhi.n	80062cc <TIM_SlaveTimer_SetConfig+0x114>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d04d      	beq.n	80062d2 <TIM_SlaveTimer_SetConfig+0x11a>
 8006236:	2b10      	cmp	r3, #16
 8006238:	d04b      	beq.n	80062d2 <TIM_SlaveTimer_SetConfig+0x11a>
 800623a:	e047      	b.n	80062cc <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800624c:	f000 f8c1 	bl	80063d2 <TIM_ETR_SetConfig>
      break;
 8006250:	e040      	b.n	80062d4 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b05      	cmp	r3, #5
 8006258:	d101      	bne.n	800625e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e03b      	b.n	80062d6 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6a1a      	ldr	r2, [r3, #32]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006284:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	621a      	str	r2, [r3, #32]
      break;
 80062a2:	e017      	b.n	80062d4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b0:	461a      	mov	r2, r3
 80062b2:	f000 f814 	bl	80062de <TIM_TI1_ConfigInputStage>
      break;
 80062b6:	e00d      	b.n	80062d4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062c4:	461a      	mov	r2, r3
 80062c6:	f000 f839 	bl	800633c <TIM_TI2_ConfigInputStage>
      break;
 80062ca:	e003      	b.n	80062d4 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	75fb      	strb	r3, [r7, #23]
      break;
 80062d0:	e000      	b.n	80062d4 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80062d2:	bf00      	nop
  }

  return status;
 80062d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062de:	b480      	push	{r7}
 80062e0:	b087      	sub	sp, #28
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
 80062f4:	f023 0201 	bic.w	r2, r3, #1
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006308:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 030a 	bic.w	r3, r3, #10
 800631a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	621a      	str	r2, [r3, #32]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f023 0210 	bic.w	r2, r3, #16
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	031b      	lsls	r3, r3, #12
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006378:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	621a      	str	r2, [r3, #32]
}
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f043 0307 	orr.w	r3, r3, #7
 80063be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	609a      	str	r2, [r3, #8]
}
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b087      	sub	sp, #28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
 80063de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	021a      	lsls	r2, r3, #8
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	431a      	orrs	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	609a      	str	r2, [r3, #8]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006412:	b480      	push	{r7}
 8006414:	b087      	sub	sp, #28
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f003 031f 	and.w	r3, r3, #31
 8006424:	2201      	movs	r2, #1
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	43db      	mvns	r3, r3
 8006434:	401a      	ands	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6a1a      	ldr	r2, [r3, #32]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	fa01 f303 	lsl.w	r3, r1, r3
 800644a:	431a      	orrs	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006470:	2302      	movs	r3, #2
 8006472:	e068      	b.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a2e      	ldr	r2, [pc, #184]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d004      	beq.n	80064a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d108      	bne.n	80064ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1e      	ldr	r2, [pc, #120]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01d      	beq.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e6:	d018      	beq.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1b      	ldr	r2, [pc, #108]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1a      	ldr	r2, [pc, #104]	; (8006560 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00e      	beq.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a18      	ldr	r2, [pc, #96]	; (8006564 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d009      	beq.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a13      	ldr	r2, [pc, #76]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d004      	beq.n	800651a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a14      	ldr	r2, [pc, #80]	; (8006568 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d10c      	bne.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	4313      	orrs	r3, r2
 800652a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40013400 	.word	0x40013400
 800655c:	40000400 	.word	0x40000400
 8006560:	40000800 	.word	0x40000800
 8006564:	40000c00 	.word	0x40000c00
 8006568:	40014000 	.word	0x40014000

0800656c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006584:	2302      	movs	r3, #2
 8006586:	e065      	b.n	8006654 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	041b      	lsls	r3, r3, #16
 80065fe:	4313      	orrs	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a16      	ldr	r2, [pc, #88]	; (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a14      	ldr	r2, [pc, #80]	; (8006664 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d115      	bne.n	8006642 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	051b      	lsls	r3, r3, #20
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40012c00 	.word	0x40012c00
 8006664:	40013400 	.word	0x40013400

08006668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e040      	b.n	8006738 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fb fbb4 	bl	8001e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2224      	movs	r2, #36	; 0x24
 80066d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fb6a 	bl	8006dc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f8af 	bl	8006854 <UART_SetConfig>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e01b      	b.n	8006738 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800670e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800671e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fbe9 	bl	8006f08 <UART_CheckIdleState>
 8006736:	4603      	mov	r3, r0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006754:	2b20      	cmp	r3, #32
 8006756:	d178      	bne.n	800684a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_UART_Transmit+0x24>
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e071      	b.n	800684c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2221      	movs	r2, #33	; 0x21
 8006774:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006776:	f7fb fcd7 	bl	8002128 <HAL_GetTick>
 800677a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	88fa      	ldrh	r2, [r7, #6]
 8006780:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006794:	d108      	bne.n	80067a8 <HAL_UART_Transmit+0x68>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	e003      	b.n	80067b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067b0:	e030      	b.n	8006814 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	2180      	movs	r1, #128	; 0x80
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fc4b 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e03c      	b.n	800684c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10b      	bne.n	80067f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	881a      	ldrh	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067e4:	b292      	uxth	r2, r2
 80067e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	3302      	adds	r3, #2
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	e008      	b.n	8006802 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b292      	uxth	r2, r2
 80067fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	3301      	adds	r3, #1
 8006800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1c8      	bne.n	80067b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2200      	movs	r2, #0
 8006828:	2140      	movs	r1, #64	; 0x40
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fc14 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d004      	beq.n	8006840 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e005      	b.n	800684c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	e000      	b.n	800684c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800684a:	2302      	movs	r3, #2
  }
}
 800684c:	4618      	mov	r0, r3
 800684e:	3720      	adds	r7, #32
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006858:	b08a      	sub	sp, #40	; 0x28
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	431a      	orrs	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	4313      	orrs	r3, r2
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4ba4      	ldr	r3, [pc, #656]	; (8006b14 <UART_SetConfig+0x2c0>)
 8006884:	4013      	ands	r3, r2
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800688c:	430b      	orrs	r3, r1
 800688e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a99      	ldr	r2, [pc, #612]	; (8006b18 <UART_SetConfig+0x2c4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d004      	beq.n	80068c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068bc:	4313      	orrs	r3, r2
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d0:	430a      	orrs	r2, r1
 80068d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a90      	ldr	r2, [pc, #576]	; (8006b1c <UART_SetConfig+0x2c8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d126      	bne.n	800692c <UART_SetConfig+0xd8>
 80068de:	4b90      	ldr	r3, [pc, #576]	; (8006b20 <UART_SetConfig+0x2cc>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d81b      	bhi.n	8006924 <UART_SetConfig+0xd0>
 80068ec:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0xa0>)
 80068ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f2:	bf00      	nop
 80068f4:	08006905 	.word	0x08006905
 80068f8:	08006915 	.word	0x08006915
 80068fc:	0800690d 	.word	0x0800690d
 8006900:	0800691d 	.word	0x0800691d
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690a:	e116      	b.n	8006b3a <UART_SetConfig+0x2e6>
 800690c:	2302      	movs	r3, #2
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006912:	e112      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691a:	e10e      	b.n	8006b3a <UART_SetConfig+0x2e6>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006922:	e10a      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692a:	e106      	b.n	8006b3a <UART_SetConfig+0x2e6>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a7c      	ldr	r2, [pc, #496]	; (8006b24 <UART_SetConfig+0x2d0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d138      	bne.n	80069a8 <UART_SetConfig+0x154>
 8006936:	4b7a      	ldr	r3, [pc, #488]	; (8006b20 <UART_SetConfig+0x2cc>)
 8006938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693c:	f003 030c 	and.w	r3, r3, #12
 8006940:	2b0c      	cmp	r3, #12
 8006942:	d82d      	bhi.n	80069a0 <UART_SetConfig+0x14c>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0xf8>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	08006981 	.word	0x08006981
 8006950:	080069a1 	.word	0x080069a1
 8006954:	080069a1 	.word	0x080069a1
 8006958:	080069a1 	.word	0x080069a1
 800695c:	08006991 	.word	0x08006991
 8006960:	080069a1 	.word	0x080069a1
 8006964:	080069a1 	.word	0x080069a1
 8006968:	080069a1 	.word	0x080069a1
 800696c:	08006989 	.word	0x08006989
 8006970:	080069a1 	.word	0x080069a1
 8006974:	080069a1 	.word	0x080069a1
 8006978:	080069a1 	.word	0x080069a1
 800697c:	08006999 	.word	0x08006999
 8006980:	2300      	movs	r3, #0
 8006982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006986:	e0d8      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006988:	2302      	movs	r3, #2
 800698a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698e:	e0d4      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006990:	2304      	movs	r3, #4
 8006992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006996:	e0d0      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006998:	2308      	movs	r3, #8
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699e:	e0cc      	b.n	8006b3a <UART_SetConfig+0x2e6>
 80069a0:	2310      	movs	r3, #16
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a6:	e0c8      	b.n	8006b3a <UART_SetConfig+0x2e6>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a5e      	ldr	r2, [pc, #376]	; (8006b28 <UART_SetConfig+0x2d4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d125      	bne.n	80069fe <UART_SetConfig+0x1aa>
 80069b2:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <UART_SetConfig+0x2cc>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069bc:	2b30      	cmp	r3, #48	; 0x30
 80069be:	d016      	beq.n	80069ee <UART_SetConfig+0x19a>
 80069c0:	2b30      	cmp	r3, #48	; 0x30
 80069c2:	d818      	bhi.n	80069f6 <UART_SetConfig+0x1a2>
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d00a      	beq.n	80069de <UART_SetConfig+0x18a>
 80069c8:	2b20      	cmp	r3, #32
 80069ca:	d814      	bhi.n	80069f6 <UART_SetConfig+0x1a2>
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <UART_SetConfig+0x182>
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d008      	beq.n	80069e6 <UART_SetConfig+0x192>
 80069d4:	e00f      	b.n	80069f6 <UART_SetConfig+0x1a2>
 80069d6:	2300      	movs	r3, #0
 80069d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069dc:	e0ad      	b.n	8006b3a <UART_SetConfig+0x2e6>
 80069de:	2302      	movs	r3, #2
 80069e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e4:	e0a9      	b.n	8006b3a <UART_SetConfig+0x2e6>
 80069e6:	2304      	movs	r3, #4
 80069e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ec:	e0a5      	b.n	8006b3a <UART_SetConfig+0x2e6>
 80069ee:	2308      	movs	r3, #8
 80069f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f4:	e0a1      	b.n	8006b3a <UART_SetConfig+0x2e6>
 80069f6:	2310      	movs	r3, #16
 80069f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fc:	e09d      	b.n	8006b3a <UART_SetConfig+0x2e6>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a4a      	ldr	r2, [pc, #296]	; (8006b2c <UART_SetConfig+0x2d8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d125      	bne.n	8006a54 <UART_SetConfig+0x200>
 8006a08:	4b45      	ldr	r3, [pc, #276]	; (8006b20 <UART_SetConfig+0x2cc>)
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a12:	2bc0      	cmp	r3, #192	; 0xc0
 8006a14:	d016      	beq.n	8006a44 <UART_SetConfig+0x1f0>
 8006a16:	2bc0      	cmp	r3, #192	; 0xc0
 8006a18:	d818      	bhi.n	8006a4c <UART_SetConfig+0x1f8>
 8006a1a:	2b80      	cmp	r3, #128	; 0x80
 8006a1c:	d00a      	beq.n	8006a34 <UART_SetConfig+0x1e0>
 8006a1e:	2b80      	cmp	r3, #128	; 0x80
 8006a20:	d814      	bhi.n	8006a4c <UART_SetConfig+0x1f8>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d002      	beq.n	8006a2c <UART_SetConfig+0x1d8>
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d008      	beq.n	8006a3c <UART_SetConfig+0x1e8>
 8006a2a:	e00f      	b.n	8006a4c <UART_SetConfig+0x1f8>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a32:	e082      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006a34:	2302      	movs	r3, #2
 8006a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a3a:	e07e      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a42:	e07a      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006a44:	2308      	movs	r3, #8
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e076      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a52:	e072      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a35      	ldr	r2, [pc, #212]	; (8006b30 <UART_SetConfig+0x2dc>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d12a      	bne.n	8006ab4 <UART_SetConfig+0x260>
 8006a5e:	4b30      	ldr	r3, [pc, #192]	; (8006b20 <UART_SetConfig+0x2cc>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a6c:	d01a      	beq.n	8006aa4 <UART_SetConfig+0x250>
 8006a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a72:	d81b      	bhi.n	8006aac <UART_SetConfig+0x258>
 8006a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a78:	d00c      	beq.n	8006a94 <UART_SetConfig+0x240>
 8006a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7e:	d815      	bhi.n	8006aac <UART_SetConfig+0x258>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <UART_SetConfig+0x238>
 8006a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a88:	d008      	beq.n	8006a9c <UART_SetConfig+0x248>
 8006a8a:	e00f      	b.n	8006aac <UART_SetConfig+0x258>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e052      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006a94:	2302      	movs	r3, #2
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e04e      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006a9c:	2304      	movs	r3, #4
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa2:	e04a      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006aa4:	2308      	movs	r3, #8
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aaa:	e046      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006aac:	2310      	movs	r3, #16
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab2:	e042      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <UART_SetConfig+0x2c4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d13a      	bne.n	8006b34 <UART_SetConfig+0x2e0>
 8006abe:	4b18      	ldr	r3, [pc, #96]	; (8006b20 <UART_SetConfig+0x2cc>)
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ac8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006acc:	d01a      	beq.n	8006b04 <UART_SetConfig+0x2b0>
 8006ace:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ad2:	d81b      	bhi.n	8006b0c <UART_SetConfig+0x2b8>
 8006ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad8:	d00c      	beq.n	8006af4 <UART_SetConfig+0x2a0>
 8006ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ade:	d815      	bhi.n	8006b0c <UART_SetConfig+0x2b8>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <UART_SetConfig+0x298>
 8006ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae8:	d008      	beq.n	8006afc <UART_SetConfig+0x2a8>
 8006aea:	e00f      	b.n	8006b0c <UART_SetConfig+0x2b8>
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e022      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006af4:	2302      	movs	r3, #2
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e01e      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b02:	e01a      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e016      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b12:	e012      	b.n	8006b3a <UART_SetConfig+0x2e6>
 8006b14:	efff69f3 	.word	0xefff69f3
 8006b18:	40008000 	.word	0x40008000
 8006b1c:	40013800 	.word	0x40013800
 8006b20:	40021000 	.word	0x40021000
 8006b24:	40004400 	.word	0x40004400
 8006b28:	40004800 	.word	0x40004800
 8006b2c:	40004c00 	.word	0x40004c00
 8006b30:	40005000 	.word	0x40005000
 8006b34:	2310      	movs	r3, #16
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a9f      	ldr	r2, [pc, #636]	; (8006dbc <UART_SetConfig+0x568>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d17a      	bne.n	8006c3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d824      	bhi.n	8006b96 <UART_SetConfig+0x342>
 8006b4c:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <UART_SetConfig+0x300>)
 8006b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b52:	bf00      	nop
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b97 	.word	0x08006b97
 8006b5c:	08006b81 	.word	0x08006b81
 8006b60:	08006b97 	.word	0x08006b97
 8006b64:	08006b87 	.word	0x08006b87
 8006b68:	08006b97 	.word	0x08006b97
 8006b6c:	08006b97 	.word	0x08006b97
 8006b70:	08006b97 	.word	0x08006b97
 8006b74:	08006b8f 	.word	0x08006b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b78:	f7fd fcd8 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8006b7c:	61f8      	str	r0, [r7, #28]
        break;
 8006b7e:	e010      	b.n	8006ba2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b80:	4b8f      	ldr	r3, [pc, #572]	; (8006dc0 <UART_SetConfig+0x56c>)
 8006b82:	61fb      	str	r3, [r7, #28]
        break;
 8006b84:	e00d      	b.n	8006ba2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b86:	f7fd fc39 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8006b8a:	61f8      	str	r0, [r7, #28]
        break;
 8006b8c:	e009      	b.n	8006ba2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b92:	61fb      	str	r3, [r7, #28]
        break;
 8006b94:	e005      	b.n	8006ba2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ba0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80fb 	beq.w	8006da0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	4413      	add	r3, r2
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d305      	bcc.n	8006bc6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d903      	bls.n	8006bce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bcc:	e0e8      	b.n	8006da0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	461c      	mov	r4, r3
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	022b      	lsls	r3, r5, #8
 8006be0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006be4:	0222      	lsls	r2, r4, #8
 8006be6:	68f9      	ldr	r1, [r7, #12]
 8006be8:	6849      	ldr	r1, [r1, #4]
 8006bea:	0849      	lsrs	r1, r1, #1
 8006bec:	2000      	movs	r0, #0
 8006bee:	4688      	mov	r8, r1
 8006bf0:	4681      	mov	r9, r0
 8006bf2:	eb12 0a08 	adds.w	sl, r2, r8
 8006bf6:	eb43 0b09 	adc.w	fp, r3, r9
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c08:	4650      	mov	r0, sl
 8006c0a:	4659      	mov	r1, fp
 8006c0c:	f7f9 ff2e 	bl	8000a6c <__aeabi_uldivmod>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4613      	mov	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c1e:	d308      	bcc.n	8006c32 <UART_SetConfig+0x3de>
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c26:	d204      	bcs.n	8006c32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	60da      	str	r2, [r3, #12]
 8006c30:	e0b6      	b.n	8006da0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c38:	e0b2      	b.n	8006da0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c42:	d15e      	bne.n	8006d02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d828      	bhi.n	8006c9e <UART_SetConfig+0x44a>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <UART_SetConfig+0x400>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c79 	.word	0x08006c79
 8006c58:	08006c81 	.word	0x08006c81
 8006c5c:	08006c89 	.word	0x08006c89
 8006c60:	08006c9f 	.word	0x08006c9f
 8006c64:	08006c8f 	.word	0x08006c8f
 8006c68:	08006c9f 	.word	0x08006c9f
 8006c6c:	08006c9f 	.word	0x08006c9f
 8006c70:	08006c9f 	.word	0x08006c9f
 8006c74:	08006c97 	.word	0x08006c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c78:	f7fd fc58 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8006c7c:	61f8      	str	r0, [r7, #28]
        break;
 8006c7e:	e014      	b.n	8006caa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c80:	f7fd fc6a 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 8006c84:	61f8      	str	r0, [r7, #28]
        break;
 8006c86:	e010      	b.n	8006caa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c88:	4b4d      	ldr	r3, [pc, #308]	; (8006dc0 <UART_SetConfig+0x56c>)
 8006c8a:	61fb      	str	r3, [r7, #28]
        break;
 8006c8c:	e00d      	b.n	8006caa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c8e:	f7fd fbb5 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8006c92:	61f8      	str	r0, [r7, #28]
        break;
 8006c94:	e009      	b.n	8006caa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9a:	61fb      	str	r3, [r7, #28]
        break;
 8006c9c:	e005      	b.n	8006caa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d077      	beq.n	8006da0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	005a      	lsls	r2, r3, #1
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	085b      	lsrs	r3, r3, #1
 8006cba:	441a      	add	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b0f      	cmp	r3, #15
 8006cca:	d916      	bls.n	8006cfa <UART_SetConfig+0x4a6>
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd2:	d212      	bcs.n	8006cfa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f023 030f 	bic.w	r3, r3, #15
 8006cdc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	085b      	lsrs	r3, r3, #1
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	8afb      	ldrh	r3, [r7, #22]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	8afa      	ldrh	r2, [r7, #22]
 8006cf6:	60da      	str	r2, [r3, #12]
 8006cf8:	e052      	b.n	8006da0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d00:	e04e      	b.n	8006da0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d06:	2b08      	cmp	r3, #8
 8006d08:	d827      	bhi.n	8006d5a <UART_SetConfig+0x506>
 8006d0a:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x4bc>)
 8006d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d10:	08006d35 	.word	0x08006d35
 8006d14:	08006d3d 	.word	0x08006d3d
 8006d18:	08006d45 	.word	0x08006d45
 8006d1c:	08006d5b 	.word	0x08006d5b
 8006d20:	08006d4b 	.word	0x08006d4b
 8006d24:	08006d5b 	.word	0x08006d5b
 8006d28:	08006d5b 	.word	0x08006d5b
 8006d2c:	08006d5b 	.word	0x08006d5b
 8006d30:	08006d53 	.word	0x08006d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d34:	f7fd fbfa 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8006d38:	61f8      	str	r0, [r7, #28]
        break;
 8006d3a:	e014      	b.n	8006d66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d3c:	f7fd fc0c 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 8006d40:	61f8      	str	r0, [r7, #28]
        break;
 8006d42:	e010      	b.n	8006d66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d44:	4b1e      	ldr	r3, [pc, #120]	; (8006dc0 <UART_SetConfig+0x56c>)
 8006d46:	61fb      	str	r3, [r7, #28]
        break;
 8006d48:	e00d      	b.n	8006d66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d4a:	f7fd fb57 	bl	80043fc <HAL_RCC_GetSysClockFreq>
 8006d4e:	61f8      	str	r0, [r7, #28]
        break;
 8006d50:	e009      	b.n	8006d66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d56:	61fb      	str	r3, [r7, #28]
        break;
 8006d58:	e005      	b.n	8006d66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d64:	bf00      	nop
    }

    if (pclk != 0U)
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d019      	beq.n	8006da0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	085a      	lsrs	r2, r3, #1
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	441a      	add	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	2b0f      	cmp	r3, #15
 8006d84:	d909      	bls.n	8006d9a <UART_SetConfig+0x546>
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8c:	d205      	bcs.n	8006d9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	60da      	str	r2, [r3, #12]
 8006d98:	e002      	b.n	8006da0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006dac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3728      	adds	r7, #40	; 0x28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dba:	bf00      	nop
 8006dbc:	40008000 	.word	0x40008000
 8006dc0:	00f42400 	.word	0x00f42400

08006dc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00a      	beq.n	8006dee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00a      	beq.n	8006e32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	f003 0304 	and.w	r3, r3, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00a      	beq.n	8006e76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d01a      	beq.n	8006eda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ec2:	d10a      	bne.n	8006eda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b098      	sub	sp, #96	; 0x60
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f18:	f7fb f906 	bl	8002128 <HAL_GetTick>
 8006f1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d12e      	bne.n	8006f8a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f34:	2200      	movs	r2, #0
 8006f36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f88c 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d021      	beq.n	8006f8a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f64:	647b      	str	r3, [r7, #68]	; 0x44
 8006f66:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e6      	bne.n	8006f46 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e062      	b.n	8007050 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d149      	bne.n	800702c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f856 	bl	8007058 <UART_WaitOnFlagUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d03c      	beq.n	800702c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	623b      	str	r3, [r7, #32]
   return(result);
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8006fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e6      	bne.n	8006fb2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3308      	adds	r3, #8
 8006fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3308      	adds	r3, #8
 8007002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007004:	61fa      	str	r2, [r7, #28]
 8007006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	69b9      	ldr	r1, [r7, #24]
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	617b      	str	r3, [r7, #20]
   return(result);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e011      	b.n	8007050 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2220      	movs	r2, #32
 8007036:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3758      	adds	r7, #88	; 0x58
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007068:	e049      	b.n	80070fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d045      	beq.n	80070fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007072:	f7fb f859 	bl	8002128 <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	429a      	cmp	r2, r3
 8007080:	d302      	bcc.n	8007088 <UART_WaitOnFlagUntilTimeout+0x30>
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e048      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d031      	beq.n	80070fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b08      	cmp	r3, #8
 80070a6:	d110      	bne.n	80070ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2208      	movs	r2, #8
 80070ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f838 	bl	8007126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2208      	movs	r2, #8
 80070ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e029      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d8:	d111      	bne.n	80070fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f81e 	bl	8007126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e00f      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69da      	ldr	r2, [r3, #28]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4013      	ands	r3, r2
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	429a      	cmp	r2, r3
 800710c:	bf0c      	ite	eq
 800710e:	2301      	moveq	r3, #1
 8007110:	2300      	movne	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	429a      	cmp	r2, r3
 800711a:	d0a6      	beq.n	800706a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007126:	b480      	push	{r7}
 8007128:	b095      	sub	sp, #84	; 0x54
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714c:	643b      	str	r3, [r7, #64]	; 0x40
 800714e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e6      	bne.n	800712e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3308      	adds	r3, #8
 8007166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f023 0301 	bic.w	r3, r3, #1
 8007176:	64bb      	str	r3, [r7, #72]	; 0x48
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007180:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e5      	bne.n	8007160 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007198:	2b01      	cmp	r3, #1
 800719a:	d118      	bne.n	80071ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f023 0310 	bic.w	r3, r3, #16
 80071b0:	647b      	str	r3, [r7, #68]	; 0x44
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6979      	ldr	r1, [r7, #20]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	613b      	str	r3, [r7, #16]
   return(result);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e6      	bne.n	800719c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80071e2:	bf00      	nop
 80071e4:	3754      	adds	r7, #84	; 0x54
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
	...

080071f0 <siprintf>:
 80071f0:	b40e      	push	{r1, r2, r3}
 80071f2:	b500      	push	{lr}
 80071f4:	b09c      	sub	sp, #112	; 0x70
 80071f6:	ab1d      	add	r3, sp, #116	; 0x74
 80071f8:	9002      	str	r0, [sp, #8]
 80071fa:	9006      	str	r0, [sp, #24]
 80071fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007200:	4809      	ldr	r0, [pc, #36]	; (8007228 <siprintf+0x38>)
 8007202:	9107      	str	r1, [sp, #28]
 8007204:	9104      	str	r1, [sp, #16]
 8007206:	4909      	ldr	r1, [pc, #36]	; (800722c <siprintf+0x3c>)
 8007208:	f853 2b04 	ldr.w	r2, [r3], #4
 800720c:	9105      	str	r1, [sp, #20]
 800720e:	6800      	ldr	r0, [r0, #0]
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	a902      	add	r1, sp, #8
 8007214:	f000 f992 	bl	800753c <_svfiprintf_r>
 8007218:	9b02      	ldr	r3, [sp, #8]
 800721a:	2200      	movs	r2, #0
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	b01c      	add	sp, #112	; 0x70
 8007220:	f85d eb04 	ldr.w	lr, [sp], #4
 8007224:	b003      	add	sp, #12
 8007226:	4770      	bx	lr
 8007228:	20000058 	.word	0x20000058
 800722c:	ffff0208 	.word	0xffff0208

08007230 <memset>:
 8007230:	4402      	add	r2, r0
 8007232:	4603      	mov	r3, r0
 8007234:	4293      	cmp	r3, r2
 8007236:	d100      	bne.n	800723a <memset+0xa>
 8007238:	4770      	bx	lr
 800723a:	f803 1b01 	strb.w	r1, [r3], #1
 800723e:	e7f9      	b.n	8007234 <memset+0x4>

08007240 <__errno>:
 8007240:	4b01      	ldr	r3, [pc, #4]	; (8007248 <__errno+0x8>)
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000058 	.word	0x20000058

0800724c <__libc_init_array>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	4d0d      	ldr	r5, [pc, #52]	; (8007284 <__libc_init_array+0x38>)
 8007250:	4c0d      	ldr	r4, [pc, #52]	; (8007288 <__libc_init_array+0x3c>)
 8007252:	1b64      	subs	r4, r4, r5
 8007254:	10a4      	asrs	r4, r4, #2
 8007256:	2600      	movs	r6, #0
 8007258:	42a6      	cmp	r6, r4
 800725a:	d109      	bne.n	8007270 <__libc_init_array+0x24>
 800725c:	4d0b      	ldr	r5, [pc, #44]	; (800728c <__libc_init_array+0x40>)
 800725e:	4c0c      	ldr	r4, [pc, #48]	; (8007290 <__libc_init_array+0x44>)
 8007260:	f000 fc6a 	bl	8007b38 <_init>
 8007264:	1b64      	subs	r4, r4, r5
 8007266:	10a4      	asrs	r4, r4, #2
 8007268:	2600      	movs	r6, #0
 800726a:	42a6      	cmp	r6, r4
 800726c:	d105      	bne.n	800727a <__libc_init_array+0x2e>
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	f855 3b04 	ldr.w	r3, [r5], #4
 8007274:	4798      	blx	r3
 8007276:	3601      	adds	r6, #1
 8007278:	e7ee      	b.n	8007258 <__libc_init_array+0xc>
 800727a:	f855 3b04 	ldr.w	r3, [r5], #4
 800727e:	4798      	blx	r3
 8007280:	3601      	adds	r6, #1
 8007282:	e7f2      	b.n	800726a <__libc_init_array+0x1e>
 8007284:	08007bf8 	.word	0x08007bf8
 8007288:	08007bf8 	.word	0x08007bf8
 800728c:	08007bf8 	.word	0x08007bf8
 8007290:	08007bfc 	.word	0x08007bfc

08007294 <__retarget_lock_acquire_recursive>:
 8007294:	4770      	bx	lr

08007296 <__retarget_lock_release_recursive>:
 8007296:	4770      	bx	lr

08007298 <_free_r>:
 8007298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800729a:	2900      	cmp	r1, #0
 800729c:	d044      	beq.n	8007328 <_free_r+0x90>
 800729e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a2:	9001      	str	r0, [sp, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f1a1 0404 	sub.w	r4, r1, #4
 80072aa:	bfb8      	it	lt
 80072ac:	18e4      	addlt	r4, r4, r3
 80072ae:	f000 f8df 	bl	8007470 <__malloc_lock>
 80072b2:	4a1e      	ldr	r2, [pc, #120]	; (800732c <_free_r+0x94>)
 80072b4:	9801      	ldr	r0, [sp, #4]
 80072b6:	6813      	ldr	r3, [r2, #0]
 80072b8:	b933      	cbnz	r3, 80072c8 <_free_r+0x30>
 80072ba:	6063      	str	r3, [r4, #4]
 80072bc:	6014      	str	r4, [r2, #0]
 80072be:	b003      	add	sp, #12
 80072c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072c4:	f000 b8da 	b.w	800747c <__malloc_unlock>
 80072c8:	42a3      	cmp	r3, r4
 80072ca:	d908      	bls.n	80072de <_free_r+0x46>
 80072cc:	6825      	ldr	r5, [r4, #0]
 80072ce:	1961      	adds	r1, r4, r5
 80072d0:	428b      	cmp	r3, r1
 80072d2:	bf01      	itttt	eq
 80072d4:	6819      	ldreq	r1, [r3, #0]
 80072d6:	685b      	ldreq	r3, [r3, #4]
 80072d8:	1949      	addeq	r1, r1, r5
 80072da:	6021      	streq	r1, [r4, #0]
 80072dc:	e7ed      	b.n	80072ba <_free_r+0x22>
 80072de:	461a      	mov	r2, r3
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	b10b      	cbz	r3, 80072e8 <_free_r+0x50>
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d9fa      	bls.n	80072de <_free_r+0x46>
 80072e8:	6811      	ldr	r1, [r2, #0]
 80072ea:	1855      	adds	r5, r2, r1
 80072ec:	42a5      	cmp	r5, r4
 80072ee:	d10b      	bne.n	8007308 <_free_r+0x70>
 80072f0:	6824      	ldr	r4, [r4, #0]
 80072f2:	4421      	add	r1, r4
 80072f4:	1854      	adds	r4, r2, r1
 80072f6:	42a3      	cmp	r3, r4
 80072f8:	6011      	str	r1, [r2, #0]
 80072fa:	d1e0      	bne.n	80072be <_free_r+0x26>
 80072fc:	681c      	ldr	r4, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	6053      	str	r3, [r2, #4]
 8007302:	440c      	add	r4, r1
 8007304:	6014      	str	r4, [r2, #0]
 8007306:	e7da      	b.n	80072be <_free_r+0x26>
 8007308:	d902      	bls.n	8007310 <_free_r+0x78>
 800730a:	230c      	movs	r3, #12
 800730c:	6003      	str	r3, [r0, #0]
 800730e:	e7d6      	b.n	80072be <_free_r+0x26>
 8007310:	6825      	ldr	r5, [r4, #0]
 8007312:	1961      	adds	r1, r4, r5
 8007314:	428b      	cmp	r3, r1
 8007316:	bf04      	itt	eq
 8007318:	6819      	ldreq	r1, [r3, #0]
 800731a:	685b      	ldreq	r3, [r3, #4]
 800731c:	6063      	str	r3, [r4, #4]
 800731e:	bf04      	itt	eq
 8007320:	1949      	addeq	r1, r1, r5
 8007322:	6021      	streq	r1, [r4, #0]
 8007324:	6054      	str	r4, [r2, #4]
 8007326:	e7ca      	b.n	80072be <_free_r+0x26>
 8007328:	b003      	add	sp, #12
 800732a:	bd30      	pop	{r4, r5, pc}
 800732c:	200004e4 	.word	0x200004e4

08007330 <sbrk_aligned>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	4e0e      	ldr	r6, [pc, #56]	; (800736c <sbrk_aligned+0x3c>)
 8007334:	460c      	mov	r4, r1
 8007336:	6831      	ldr	r1, [r6, #0]
 8007338:	4605      	mov	r5, r0
 800733a:	b911      	cbnz	r1, 8007342 <sbrk_aligned+0x12>
 800733c:	f000 fba6 	bl	8007a8c <_sbrk_r>
 8007340:	6030      	str	r0, [r6, #0]
 8007342:	4621      	mov	r1, r4
 8007344:	4628      	mov	r0, r5
 8007346:	f000 fba1 	bl	8007a8c <_sbrk_r>
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	d00a      	beq.n	8007364 <sbrk_aligned+0x34>
 800734e:	1cc4      	adds	r4, r0, #3
 8007350:	f024 0403 	bic.w	r4, r4, #3
 8007354:	42a0      	cmp	r0, r4
 8007356:	d007      	beq.n	8007368 <sbrk_aligned+0x38>
 8007358:	1a21      	subs	r1, r4, r0
 800735a:	4628      	mov	r0, r5
 800735c:	f000 fb96 	bl	8007a8c <_sbrk_r>
 8007360:	3001      	adds	r0, #1
 8007362:	d101      	bne.n	8007368 <sbrk_aligned+0x38>
 8007364:	f04f 34ff 	mov.w	r4, #4294967295
 8007368:	4620      	mov	r0, r4
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	200004e8 	.word	0x200004e8

08007370 <_malloc_r>:
 8007370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007374:	1ccd      	adds	r5, r1, #3
 8007376:	f025 0503 	bic.w	r5, r5, #3
 800737a:	3508      	adds	r5, #8
 800737c:	2d0c      	cmp	r5, #12
 800737e:	bf38      	it	cc
 8007380:	250c      	movcc	r5, #12
 8007382:	2d00      	cmp	r5, #0
 8007384:	4607      	mov	r7, r0
 8007386:	db01      	blt.n	800738c <_malloc_r+0x1c>
 8007388:	42a9      	cmp	r1, r5
 800738a:	d905      	bls.n	8007398 <_malloc_r+0x28>
 800738c:	230c      	movs	r3, #12
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	2600      	movs	r6, #0
 8007392:	4630      	mov	r0, r6
 8007394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007398:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800746c <_malloc_r+0xfc>
 800739c:	f000 f868 	bl	8007470 <__malloc_lock>
 80073a0:	f8d8 3000 	ldr.w	r3, [r8]
 80073a4:	461c      	mov	r4, r3
 80073a6:	bb5c      	cbnz	r4, 8007400 <_malloc_r+0x90>
 80073a8:	4629      	mov	r1, r5
 80073aa:	4638      	mov	r0, r7
 80073ac:	f7ff ffc0 	bl	8007330 <sbrk_aligned>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	4604      	mov	r4, r0
 80073b4:	d155      	bne.n	8007462 <_malloc_r+0xf2>
 80073b6:	f8d8 4000 	ldr.w	r4, [r8]
 80073ba:	4626      	mov	r6, r4
 80073bc:	2e00      	cmp	r6, #0
 80073be:	d145      	bne.n	800744c <_malloc_r+0xdc>
 80073c0:	2c00      	cmp	r4, #0
 80073c2:	d048      	beq.n	8007456 <_malloc_r+0xe6>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	4631      	mov	r1, r6
 80073c8:	4638      	mov	r0, r7
 80073ca:	eb04 0903 	add.w	r9, r4, r3
 80073ce:	f000 fb5d 	bl	8007a8c <_sbrk_r>
 80073d2:	4581      	cmp	r9, r0
 80073d4:	d13f      	bne.n	8007456 <_malloc_r+0xe6>
 80073d6:	6821      	ldr	r1, [r4, #0]
 80073d8:	1a6d      	subs	r5, r5, r1
 80073da:	4629      	mov	r1, r5
 80073dc:	4638      	mov	r0, r7
 80073de:	f7ff ffa7 	bl	8007330 <sbrk_aligned>
 80073e2:	3001      	adds	r0, #1
 80073e4:	d037      	beq.n	8007456 <_malloc_r+0xe6>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	442b      	add	r3, r5
 80073ea:	6023      	str	r3, [r4, #0]
 80073ec:	f8d8 3000 	ldr.w	r3, [r8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d038      	beq.n	8007466 <_malloc_r+0xf6>
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	42a2      	cmp	r2, r4
 80073f8:	d12b      	bne.n	8007452 <_malloc_r+0xe2>
 80073fa:	2200      	movs	r2, #0
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	e00f      	b.n	8007420 <_malloc_r+0xb0>
 8007400:	6822      	ldr	r2, [r4, #0]
 8007402:	1b52      	subs	r2, r2, r5
 8007404:	d41f      	bmi.n	8007446 <_malloc_r+0xd6>
 8007406:	2a0b      	cmp	r2, #11
 8007408:	d917      	bls.n	800743a <_malloc_r+0xca>
 800740a:	1961      	adds	r1, r4, r5
 800740c:	42a3      	cmp	r3, r4
 800740e:	6025      	str	r5, [r4, #0]
 8007410:	bf18      	it	ne
 8007412:	6059      	strne	r1, [r3, #4]
 8007414:	6863      	ldr	r3, [r4, #4]
 8007416:	bf08      	it	eq
 8007418:	f8c8 1000 	streq.w	r1, [r8]
 800741c:	5162      	str	r2, [r4, r5]
 800741e:	604b      	str	r3, [r1, #4]
 8007420:	4638      	mov	r0, r7
 8007422:	f104 060b 	add.w	r6, r4, #11
 8007426:	f000 f829 	bl	800747c <__malloc_unlock>
 800742a:	f026 0607 	bic.w	r6, r6, #7
 800742e:	1d23      	adds	r3, r4, #4
 8007430:	1af2      	subs	r2, r6, r3
 8007432:	d0ae      	beq.n	8007392 <_malloc_r+0x22>
 8007434:	1b9b      	subs	r3, r3, r6
 8007436:	50a3      	str	r3, [r4, r2]
 8007438:	e7ab      	b.n	8007392 <_malloc_r+0x22>
 800743a:	42a3      	cmp	r3, r4
 800743c:	6862      	ldr	r2, [r4, #4]
 800743e:	d1dd      	bne.n	80073fc <_malloc_r+0x8c>
 8007440:	f8c8 2000 	str.w	r2, [r8]
 8007444:	e7ec      	b.n	8007420 <_malloc_r+0xb0>
 8007446:	4623      	mov	r3, r4
 8007448:	6864      	ldr	r4, [r4, #4]
 800744a:	e7ac      	b.n	80073a6 <_malloc_r+0x36>
 800744c:	4634      	mov	r4, r6
 800744e:	6876      	ldr	r6, [r6, #4]
 8007450:	e7b4      	b.n	80073bc <_malloc_r+0x4c>
 8007452:	4613      	mov	r3, r2
 8007454:	e7cc      	b.n	80073f0 <_malloc_r+0x80>
 8007456:	230c      	movs	r3, #12
 8007458:	603b      	str	r3, [r7, #0]
 800745a:	4638      	mov	r0, r7
 800745c:	f000 f80e 	bl	800747c <__malloc_unlock>
 8007460:	e797      	b.n	8007392 <_malloc_r+0x22>
 8007462:	6025      	str	r5, [r4, #0]
 8007464:	e7dc      	b.n	8007420 <_malloc_r+0xb0>
 8007466:	605b      	str	r3, [r3, #4]
 8007468:	deff      	udf	#255	; 0xff
 800746a:	bf00      	nop
 800746c:	200004e4 	.word	0x200004e4

08007470 <__malloc_lock>:
 8007470:	4801      	ldr	r0, [pc, #4]	; (8007478 <__malloc_lock+0x8>)
 8007472:	f7ff bf0f 	b.w	8007294 <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	200004e0 	.word	0x200004e0

0800747c <__malloc_unlock>:
 800747c:	4801      	ldr	r0, [pc, #4]	; (8007484 <__malloc_unlock+0x8>)
 800747e:	f7ff bf0a 	b.w	8007296 <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	200004e0 	.word	0x200004e0

08007488 <__ssputs_r>:
 8007488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	688e      	ldr	r6, [r1, #8]
 800748e:	461f      	mov	r7, r3
 8007490:	42be      	cmp	r6, r7
 8007492:	680b      	ldr	r3, [r1, #0]
 8007494:	4682      	mov	sl, r0
 8007496:	460c      	mov	r4, r1
 8007498:	4690      	mov	r8, r2
 800749a:	d82c      	bhi.n	80074f6 <__ssputs_r+0x6e>
 800749c:	898a      	ldrh	r2, [r1, #12]
 800749e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074a2:	d026      	beq.n	80074f2 <__ssputs_r+0x6a>
 80074a4:	6965      	ldr	r5, [r4, #20]
 80074a6:	6909      	ldr	r1, [r1, #16]
 80074a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074ac:	eba3 0901 	sub.w	r9, r3, r1
 80074b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074b4:	1c7b      	adds	r3, r7, #1
 80074b6:	444b      	add	r3, r9
 80074b8:	106d      	asrs	r5, r5, #1
 80074ba:	429d      	cmp	r5, r3
 80074bc:	bf38      	it	cc
 80074be:	461d      	movcc	r5, r3
 80074c0:	0553      	lsls	r3, r2, #21
 80074c2:	d527      	bpl.n	8007514 <__ssputs_r+0x8c>
 80074c4:	4629      	mov	r1, r5
 80074c6:	f7ff ff53 	bl	8007370 <_malloc_r>
 80074ca:	4606      	mov	r6, r0
 80074cc:	b360      	cbz	r0, 8007528 <__ssputs_r+0xa0>
 80074ce:	6921      	ldr	r1, [r4, #16]
 80074d0:	464a      	mov	r2, r9
 80074d2:	f000 faeb 	bl	8007aac <memcpy>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	6126      	str	r6, [r4, #16]
 80074e4:	6165      	str	r5, [r4, #20]
 80074e6:	444e      	add	r6, r9
 80074e8:	eba5 0509 	sub.w	r5, r5, r9
 80074ec:	6026      	str	r6, [r4, #0]
 80074ee:	60a5      	str	r5, [r4, #8]
 80074f0:	463e      	mov	r6, r7
 80074f2:	42be      	cmp	r6, r7
 80074f4:	d900      	bls.n	80074f8 <__ssputs_r+0x70>
 80074f6:	463e      	mov	r6, r7
 80074f8:	6820      	ldr	r0, [r4, #0]
 80074fa:	4632      	mov	r2, r6
 80074fc:	4641      	mov	r1, r8
 80074fe:	f000 faab 	bl	8007a58 <memmove>
 8007502:	68a3      	ldr	r3, [r4, #8]
 8007504:	1b9b      	subs	r3, r3, r6
 8007506:	60a3      	str	r3, [r4, #8]
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	4433      	add	r3, r6
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	2000      	movs	r0, #0
 8007510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007514:	462a      	mov	r2, r5
 8007516:	f000 fad7 	bl	8007ac8 <_realloc_r>
 800751a:	4606      	mov	r6, r0
 800751c:	2800      	cmp	r0, #0
 800751e:	d1e0      	bne.n	80074e2 <__ssputs_r+0x5a>
 8007520:	6921      	ldr	r1, [r4, #16]
 8007522:	4650      	mov	r0, sl
 8007524:	f7ff feb8 	bl	8007298 <_free_r>
 8007528:	230c      	movs	r3, #12
 800752a:	f8ca 3000 	str.w	r3, [sl]
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	f04f 30ff 	mov.w	r0, #4294967295
 800753a:	e7e9      	b.n	8007510 <__ssputs_r+0x88>

0800753c <_svfiprintf_r>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	4698      	mov	r8, r3
 8007542:	898b      	ldrh	r3, [r1, #12]
 8007544:	061b      	lsls	r3, r3, #24
 8007546:	b09d      	sub	sp, #116	; 0x74
 8007548:	4607      	mov	r7, r0
 800754a:	460d      	mov	r5, r1
 800754c:	4614      	mov	r4, r2
 800754e:	d50e      	bpl.n	800756e <_svfiprintf_r+0x32>
 8007550:	690b      	ldr	r3, [r1, #16]
 8007552:	b963      	cbnz	r3, 800756e <_svfiprintf_r+0x32>
 8007554:	2140      	movs	r1, #64	; 0x40
 8007556:	f7ff ff0b 	bl	8007370 <_malloc_r>
 800755a:	6028      	str	r0, [r5, #0]
 800755c:	6128      	str	r0, [r5, #16]
 800755e:	b920      	cbnz	r0, 800756a <_svfiprintf_r+0x2e>
 8007560:	230c      	movs	r3, #12
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	f04f 30ff 	mov.w	r0, #4294967295
 8007568:	e0d0      	b.n	800770c <_svfiprintf_r+0x1d0>
 800756a:	2340      	movs	r3, #64	; 0x40
 800756c:	616b      	str	r3, [r5, #20]
 800756e:	2300      	movs	r3, #0
 8007570:	9309      	str	r3, [sp, #36]	; 0x24
 8007572:	2320      	movs	r3, #32
 8007574:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007578:	f8cd 800c 	str.w	r8, [sp, #12]
 800757c:	2330      	movs	r3, #48	; 0x30
 800757e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007724 <_svfiprintf_r+0x1e8>
 8007582:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007586:	f04f 0901 	mov.w	r9, #1
 800758a:	4623      	mov	r3, r4
 800758c:	469a      	mov	sl, r3
 800758e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007592:	b10a      	cbz	r2, 8007598 <_svfiprintf_r+0x5c>
 8007594:	2a25      	cmp	r2, #37	; 0x25
 8007596:	d1f9      	bne.n	800758c <_svfiprintf_r+0x50>
 8007598:	ebba 0b04 	subs.w	fp, sl, r4
 800759c:	d00b      	beq.n	80075b6 <_svfiprintf_r+0x7a>
 800759e:	465b      	mov	r3, fp
 80075a0:	4622      	mov	r2, r4
 80075a2:	4629      	mov	r1, r5
 80075a4:	4638      	mov	r0, r7
 80075a6:	f7ff ff6f 	bl	8007488 <__ssputs_r>
 80075aa:	3001      	adds	r0, #1
 80075ac:	f000 80a9 	beq.w	8007702 <_svfiprintf_r+0x1c6>
 80075b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075b2:	445a      	add	r2, fp
 80075b4:	9209      	str	r2, [sp, #36]	; 0x24
 80075b6:	f89a 3000 	ldrb.w	r3, [sl]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 80a1 	beq.w	8007702 <_svfiprintf_r+0x1c6>
 80075c0:	2300      	movs	r3, #0
 80075c2:	f04f 32ff 	mov.w	r2, #4294967295
 80075c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ca:	f10a 0a01 	add.w	sl, sl, #1
 80075ce:	9304      	str	r3, [sp, #16]
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075d6:	931a      	str	r3, [sp, #104]	; 0x68
 80075d8:	4654      	mov	r4, sl
 80075da:	2205      	movs	r2, #5
 80075dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e0:	4850      	ldr	r0, [pc, #320]	; (8007724 <_svfiprintf_r+0x1e8>)
 80075e2:	f7f8 fdfd 	bl	80001e0 <memchr>
 80075e6:	9a04      	ldr	r2, [sp, #16]
 80075e8:	b9d8      	cbnz	r0, 8007622 <_svfiprintf_r+0xe6>
 80075ea:	06d0      	lsls	r0, r2, #27
 80075ec:	bf44      	itt	mi
 80075ee:	2320      	movmi	r3, #32
 80075f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f4:	0711      	lsls	r1, r2, #28
 80075f6:	bf44      	itt	mi
 80075f8:	232b      	movmi	r3, #43	; 0x2b
 80075fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007602:	2b2a      	cmp	r3, #42	; 0x2a
 8007604:	d015      	beq.n	8007632 <_svfiprintf_r+0xf6>
 8007606:	9a07      	ldr	r2, [sp, #28]
 8007608:	4654      	mov	r4, sl
 800760a:	2000      	movs	r0, #0
 800760c:	f04f 0c0a 	mov.w	ip, #10
 8007610:	4621      	mov	r1, r4
 8007612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007616:	3b30      	subs	r3, #48	; 0x30
 8007618:	2b09      	cmp	r3, #9
 800761a:	d94d      	bls.n	80076b8 <_svfiprintf_r+0x17c>
 800761c:	b1b0      	cbz	r0, 800764c <_svfiprintf_r+0x110>
 800761e:	9207      	str	r2, [sp, #28]
 8007620:	e014      	b.n	800764c <_svfiprintf_r+0x110>
 8007622:	eba0 0308 	sub.w	r3, r0, r8
 8007626:	fa09 f303 	lsl.w	r3, r9, r3
 800762a:	4313      	orrs	r3, r2
 800762c:	9304      	str	r3, [sp, #16]
 800762e:	46a2      	mov	sl, r4
 8007630:	e7d2      	b.n	80075d8 <_svfiprintf_r+0x9c>
 8007632:	9b03      	ldr	r3, [sp, #12]
 8007634:	1d19      	adds	r1, r3, #4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	9103      	str	r1, [sp, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	bfbb      	ittet	lt
 800763e:	425b      	neglt	r3, r3
 8007640:	f042 0202 	orrlt.w	r2, r2, #2
 8007644:	9307      	strge	r3, [sp, #28]
 8007646:	9307      	strlt	r3, [sp, #28]
 8007648:	bfb8      	it	lt
 800764a:	9204      	strlt	r2, [sp, #16]
 800764c:	7823      	ldrb	r3, [r4, #0]
 800764e:	2b2e      	cmp	r3, #46	; 0x2e
 8007650:	d10c      	bne.n	800766c <_svfiprintf_r+0x130>
 8007652:	7863      	ldrb	r3, [r4, #1]
 8007654:	2b2a      	cmp	r3, #42	; 0x2a
 8007656:	d134      	bne.n	80076c2 <_svfiprintf_r+0x186>
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	1d1a      	adds	r2, r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	9203      	str	r2, [sp, #12]
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfb8      	it	lt
 8007664:	f04f 33ff 	movlt.w	r3, #4294967295
 8007668:	3402      	adds	r4, #2
 800766a:	9305      	str	r3, [sp, #20]
 800766c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007734 <_svfiprintf_r+0x1f8>
 8007670:	7821      	ldrb	r1, [r4, #0]
 8007672:	2203      	movs	r2, #3
 8007674:	4650      	mov	r0, sl
 8007676:	f7f8 fdb3 	bl	80001e0 <memchr>
 800767a:	b138      	cbz	r0, 800768c <_svfiprintf_r+0x150>
 800767c:	9b04      	ldr	r3, [sp, #16]
 800767e:	eba0 000a 	sub.w	r0, r0, sl
 8007682:	2240      	movs	r2, #64	; 0x40
 8007684:	4082      	lsls	r2, r0
 8007686:	4313      	orrs	r3, r2
 8007688:	3401      	adds	r4, #1
 800768a:	9304      	str	r3, [sp, #16]
 800768c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007690:	4825      	ldr	r0, [pc, #148]	; (8007728 <_svfiprintf_r+0x1ec>)
 8007692:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007696:	2206      	movs	r2, #6
 8007698:	f7f8 fda2 	bl	80001e0 <memchr>
 800769c:	2800      	cmp	r0, #0
 800769e:	d038      	beq.n	8007712 <_svfiprintf_r+0x1d6>
 80076a0:	4b22      	ldr	r3, [pc, #136]	; (800772c <_svfiprintf_r+0x1f0>)
 80076a2:	bb1b      	cbnz	r3, 80076ec <_svfiprintf_r+0x1b0>
 80076a4:	9b03      	ldr	r3, [sp, #12]
 80076a6:	3307      	adds	r3, #7
 80076a8:	f023 0307 	bic.w	r3, r3, #7
 80076ac:	3308      	adds	r3, #8
 80076ae:	9303      	str	r3, [sp, #12]
 80076b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b2:	4433      	add	r3, r6
 80076b4:	9309      	str	r3, [sp, #36]	; 0x24
 80076b6:	e768      	b.n	800758a <_svfiprintf_r+0x4e>
 80076b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80076bc:	460c      	mov	r4, r1
 80076be:	2001      	movs	r0, #1
 80076c0:	e7a6      	b.n	8007610 <_svfiprintf_r+0xd4>
 80076c2:	2300      	movs	r3, #0
 80076c4:	3401      	adds	r4, #1
 80076c6:	9305      	str	r3, [sp, #20]
 80076c8:	4619      	mov	r1, r3
 80076ca:	f04f 0c0a 	mov.w	ip, #10
 80076ce:	4620      	mov	r0, r4
 80076d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076d4:	3a30      	subs	r2, #48	; 0x30
 80076d6:	2a09      	cmp	r2, #9
 80076d8:	d903      	bls.n	80076e2 <_svfiprintf_r+0x1a6>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0c6      	beq.n	800766c <_svfiprintf_r+0x130>
 80076de:	9105      	str	r1, [sp, #20]
 80076e0:	e7c4      	b.n	800766c <_svfiprintf_r+0x130>
 80076e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80076e6:	4604      	mov	r4, r0
 80076e8:	2301      	movs	r3, #1
 80076ea:	e7f0      	b.n	80076ce <_svfiprintf_r+0x192>
 80076ec:	ab03      	add	r3, sp, #12
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	462a      	mov	r2, r5
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <_svfiprintf_r+0x1f4>)
 80076f4:	a904      	add	r1, sp, #16
 80076f6:	4638      	mov	r0, r7
 80076f8:	f3af 8000 	nop.w
 80076fc:	1c42      	adds	r2, r0, #1
 80076fe:	4606      	mov	r6, r0
 8007700:	d1d6      	bne.n	80076b0 <_svfiprintf_r+0x174>
 8007702:	89ab      	ldrh	r3, [r5, #12]
 8007704:	065b      	lsls	r3, r3, #25
 8007706:	f53f af2d 	bmi.w	8007564 <_svfiprintf_r+0x28>
 800770a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800770c:	b01d      	add	sp, #116	; 0x74
 800770e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007712:	ab03      	add	r3, sp, #12
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	462a      	mov	r2, r5
 8007718:	4b05      	ldr	r3, [pc, #20]	; (8007730 <_svfiprintf_r+0x1f4>)
 800771a:	a904      	add	r1, sp, #16
 800771c:	4638      	mov	r0, r7
 800771e:	f000 f879 	bl	8007814 <_printf_i>
 8007722:	e7eb      	b.n	80076fc <_svfiprintf_r+0x1c0>
 8007724:	08007bbc 	.word	0x08007bbc
 8007728:	08007bc6 	.word	0x08007bc6
 800772c:	00000000 	.word	0x00000000
 8007730:	08007489 	.word	0x08007489
 8007734:	08007bc2 	.word	0x08007bc2

08007738 <_printf_common>:
 8007738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	4616      	mov	r6, r2
 800773e:	4699      	mov	r9, r3
 8007740:	688a      	ldr	r2, [r1, #8]
 8007742:	690b      	ldr	r3, [r1, #16]
 8007744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007748:	4293      	cmp	r3, r2
 800774a:	bfb8      	it	lt
 800774c:	4613      	movlt	r3, r2
 800774e:	6033      	str	r3, [r6, #0]
 8007750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007754:	4607      	mov	r7, r0
 8007756:	460c      	mov	r4, r1
 8007758:	b10a      	cbz	r2, 800775e <_printf_common+0x26>
 800775a:	3301      	adds	r3, #1
 800775c:	6033      	str	r3, [r6, #0]
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	0699      	lsls	r1, r3, #26
 8007762:	bf42      	ittt	mi
 8007764:	6833      	ldrmi	r3, [r6, #0]
 8007766:	3302      	addmi	r3, #2
 8007768:	6033      	strmi	r3, [r6, #0]
 800776a:	6825      	ldr	r5, [r4, #0]
 800776c:	f015 0506 	ands.w	r5, r5, #6
 8007770:	d106      	bne.n	8007780 <_printf_common+0x48>
 8007772:	f104 0a19 	add.w	sl, r4, #25
 8007776:	68e3      	ldr	r3, [r4, #12]
 8007778:	6832      	ldr	r2, [r6, #0]
 800777a:	1a9b      	subs	r3, r3, r2
 800777c:	42ab      	cmp	r3, r5
 800777e:	dc26      	bgt.n	80077ce <_printf_common+0x96>
 8007780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007784:	1e13      	subs	r3, r2, #0
 8007786:	6822      	ldr	r2, [r4, #0]
 8007788:	bf18      	it	ne
 800778a:	2301      	movne	r3, #1
 800778c:	0692      	lsls	r2, r2, #26
 800778e:	d42b      	bmi.n	80077e8 <_printf_common+0xb0>
 8007790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007794:	4649      	mov	r1, r9
 8007796:	4638      	mov	r0, r7
 8007798:	47c0      	blx	r8
 800779a:	3001      	adds	r0, #1
 800779c:	d01e      	beq.n	80077dc <_printf_common+0xa4>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	6922      	ldr	r2, [r4, #16]
 80077a2:	f003 0306 	and.w	r3, r3, #6
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	bf02      	ittt	eq
 80077aa:	68e5      	ldreq	r5, [r4, #12]
 80077ac:	6833      	ldreq	r3, [r6, #0]
 80077ae:	1aed      	subeq	r5, r5, r3
 80077b0:	68a3      	ldr	r3, [r4, #8]
 80077b2:	bf0c      	ite	eq
 80077b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077b8:	2500      	movne	r5, #0
 80077ba:	4293      	cmp	r3, r2
 80077bc:	bfc4      	itt	gt
 80077be:	1a9b      	subgt	r3, r3, r2
 80077c0:	18ed      	addgt	r5, r5, r3
 80077c2:	2600      	movs	r6, #0
 80077c4:	341a      	adds	r4, #26
 80077c6:	42b5      	cmp	r5, r6
 80077c8:	d11a      	bne.n	8007800 <_printf_common+0xc8>
 80077ca:	2000      	movs	r0, #0
 80077cc:	e008      	b.n	80077e0 <_printf_common+0xa8>
 80077ce:	2301      	movs	r3, #1
 80077d0:	4652      	mov	r2, sl
 80077d2:	4649      	mov	r1, r9
 80077d4:	4638      	mov	r0, r7
 80077d6:	47c0      	blx	r8
 80077d8:	3001      	adds	r0, #1
 80077da:	d103      	bne.n	80077e4 <_printf_common+0xac>
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e4:	3501      	adds	r5, #1
 80077e6:	e7c6      	b.n	8007776 <_printf_common+0x3e>
 80077e8:	18e1      	adds	r1, r4, r3
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	2030      	movs	r0, #48	; 0x30
 80077ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077f2:	4422      	add	r2, r4
 80077f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077fc:	3302      	adds	r3, #2
 80077fe:	e7c7      	b.n	8007790 <_printf_common+0x58>
 8007800:	2301      	movs	r3, #1
 8007802:	4622      	mov	r2, r4
 8007804:	4649      	mov	r1, r9
 8007806:	4638      	mov	r0, r7
 8007808:	47c0      	blx	r8
 800780a:	3001      	adds	r0, #1
 800780c:	d0e6      	beq.n	80077dc <_printf_common+0xa4>
 800780e:	3601      	adds	r6, #1
 8007810:	e7d9      	b.n	80077c6 <_printf_common+0x8e>
	...

08007814 <_printf_i>:
 8007814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007818:	7e0f      	ldrb	r7, [r1, #24]
 800781a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800781c:	2f78      	cmp	r7, #120	; 0x78
 800781e:	4691      	mov	r9, r2
 8007820:	4680      	mov	r8, r0
 8007822:	460c      	mov	r4, r1
 8007824:	469a      	mov	sl, r3
 8007826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800782a:	d807      	bhi.n	800783c <_printf_i+0x28>
 800782c:	2f62      	cmp	r7, #98	; 0x62
 800782e:	d80a      	bhi.n	8007846 <_printf_i+0x32>
 8007830:	2f00      	cmp	r7, #0
 8007832:	f000 80d4 	beq.w	80079de <_printf_i+0x1ca>
 8007836:	2f58      	cmp	r7, #88	; 0x58
 8007838:	f000 80c0 	beq.w	80079bc <_printf_i+0x1a8>
 800783c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007844:	e03a      	b.n	80078bc <_printf_i+0xa8>
 8007846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800784a:	2b15      	cmp	r3, #21
 800784c:	d8f6      	bhi.n	800783c <_printf_i+0x28>
 800784e:	a101      	add	r1, pc, #4	; (adr r1, 8007854 <_printf_i+0x40>)
 8007850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007854:	080078ad 	.word	0x080078ad
 8007858:	080078c1 	.word	0x080078c1
 800785c:	0800783d 	.word	0x0800783d
 8007860:	0800783d 	.word	0x0800783d
 8007864:	0800783d 	.word	0x0800783d
 8007868:	0800783d 	.word	0x0800783d
 800786c:	080078c1 	.word	0x080078c1
 8007870:	0800783d 	.word	0x0800783d
 8007874:	0800783d 	.word	0x0800783d
 8007878:	0800783d 	.word	0x0800783d
 800787c:	0800783d 	.word	0x0800783d
 8007880:	080079c5 	.word	0x080079c5
 8007884:	080078ed 	.word	0x080078ed
 8007888:	0800797f 	.word	0x0800797f
 800788c:	0800783d 	.word	0x0800783d
 8007890:	0800783d 	.word	0x0800783d
 8007894:	080079e7 	.word	0x080079e7
 8007898:	0800783d 	.word	0x0800783d
 800789c:	080078ed 	.word	0x080078ed
 80078a0:	0800783d 	.word	0x0800783d
 80078a4:	0800783d 	.word	0x0800783d
 80078a8:	08007987 	.word	0x08007987
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	602a      	str	r2, [r5, #0]
 80078b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078bc:	2301      	movs	r3, #1
 80078be:	e09f      	b.n	8007a00 <_printf_i+0x1ec>
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	682b      	ldr	r3, [r5, #0]
 80078c4:	0607      	lsls	r7, r0, #24
 80078c6:	f103 0104 	add.w	r1, r3, #4
 80078ca:	6029      	str	r1, [r5, #0]
 80078cc:	d501      	bpl.n	80078d2 <_printf_i+0xbe>
 80078ce:	681e      	ldr	r6, [r3, #0]
 80078d0:	e003      	b.n	80078da <_printf_i+0xc6>
 80078d2:	0646      	lsls	r6, r0, #25
 80078d4:	d5fb      	bpl.n	80078ce <_printf_i+0xba>
 80078d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80078da:	2e00      	cmp	r6, #0
 80078dc:	da03      	bge.n	80078e6 <_printf_i+0xd2>
 80078de:	232d      	movs	r3, #45	; 0x2d
 80078e0:	4276      	negs	r6, r6
 80078e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078e6:	485a      	ldr	r0, [pc, #360]	; (8007a50 <_printf_i+0x23c>)
 80078e8:	230a      	movs	r3, #10
 80078ea:	e012      	b.n	8007912 <_printf_i+0xfe>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	6820      	ldr	r0, [r4, #0]
 80078f0:	1d19      	adds	r1, r3, #4
 80078f2:	6029      	str	r1, [r5, #0]
 80078f4:	0605      	lsls	r5, r0, #24
 80078f6:	d501      	bpl.n	80078fc <_printf_i+0xe8>
 80078f8:	681e      	ldr	r6, [r3, #0]
 80078fa:	e002      	b.n	8007902 <_printf_i+0xee>
 80078fc:	0641      	lsls	r1, r0, #25
 80078fe:	d5fb      	bpl.n	80078f8 <_printf_i+0xe4>
 8007900:	881e      	ldrh	r6, [r3, #0]
 8007902:	4853      	ldr	r0, [pc, #332]	; (8007a50 <_printf_i+0x23c>)
 8007904:	2f6f      	cmp	r7, #111	; 0x6f
 8007906:	bf0c      	ite	eq
 8007908:	2308      	moveq	r3, #8
 800790a:	230a      	movne	r3, #10
 800790c:	2100      	movs	r1, #0
 800790e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007912:	6865      	ldr	r5, [r4, #4]
 8007914:	60a5      	str	r5, [r4, #8]
 8007916:	2d00      	cmp	r5, #0
 8007918:	bfa2      	ittt	ge
 800791a:	6821      	ldrge	r1, [r4, #0]
 800791c:	f021 0104 	bicge.w	r1, r1, #4
 8007920:	6021      	strge	r1, [r4, #0]
 8007922:	b90e      	cbnz	r6, 8007928 <_printf_i+0x114>
 8007924:	2d00      	cmp	r5, #0
 8007926:	d04b      	beq.n	80079c0 <_printf_i+0x1ac>
 8007928:	4615      	mov	r5, r2
 800792a:	fbb6 f1f3 	udiv	r1, r6, r3
 800792e:	fb03 6711 	mls	r7, r3, r1, r6
 8007932:	5dc7      	ldrb	r7, [r0, r7]
 8007934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007938:	4637      	mov	r7, r6
 800793a:	42bb      	cmp	r3, r7
 800793c:	460e      	mov	r6, r1
 800793e:	d9f4      	bls.n	800792a <_printf_i+0x116>
 8007940:	2b08      	cmp	r3, #8
 8007942:	d10b      	bne.n	800795c <_printf_i+0x148>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	07de      	lsls	r6, r3, #31
 8007948:	d508      	bpl.n	800795c <_printf_i+0x148>
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	6861      	ldr	r1, [r4, #4]
 800794e:	4299      	cmp	r1, r3
 8007950:	bfde      	ittt	le
 8007952:	2330      	movle	r3, #48	; 0x30
 8007954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800795c:	1b52      	subs	r2, r2, r5
 800795e:	6122      	str	r2, [r4, #16]
 8007960:	f8cd a000 	str.w	sl, [sp]
 8007964:	464b      	mov	r3, r9
 8007966:	aa03      	add	r2, sp, #12
 8007968:	4621      	mov	r1, r4
 800796a:	4640      	mov	r0, r8
 800796c:	f7ff fee4 	bl	8007738 <_printf_common>
 8007970:	3001      	adds	r0, #1
 8007972:	d14a      	bne.n	8007a0a <_printf_i+0x1f6>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	b004      	add	sp, #16
 800797a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	f043 0320 	orr.w	r3, r3, #32
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	4833      	ldr	r0, [pc, #204]	; (8007a54 <_printf_i+0x240>)
 8007988:	2778      	movs	r7, #120	; 0x78
 800798a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	6829      	ldr	r1, [r5, #0]
 8007992:	061f      	lsls	r7, r3, #24
 8007994:	f851 6b04 	ldr.w	r6, [r1], #4
 8007998:	d402      	bmi.n	80079a0 <_printf_i+0x18c>
 800799a:	065f      	lsls	r7, r3, #25
 800799c:	bf48      	it	mi
 800799e:	b2b6      	uxthmi	r6, r6
 80079a0:	07df      	lsls	r7, r3, #31
 80079a2:	bf48      	it	mi
 80079a4:	f043 0320 	orrmi.w	r3, r3, #32
 80079a8:	6029      	str	r1, [r5, #0]
 80079aa:	bf48      	it	mi
 80079ac:	6023      	strmi	r3, [r4, #0]
 80079ae:	b91e      	cbnz	r6, 80079b8 <_printf_i+0x1a4>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	f023 0320 	bic.w	r3, r3, #32
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	2310      	movs	r3, #16
 80079ba:	e7a7      	b.n	800790c <_printf_i+0xf8>
 80079bc:	4824      	ldr	r0, [pc, #144]	; (8007a50 <_printf_i+0x23c>)
 80079be:	e7e4      	b.n	800798a <_printf_i+0x176>
 80079c0:	4615      	mov	r5, r2
 80079c2:	e7bd      	b.n	8007940 <_printf_i+0x12c>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	6826      	ldr	r6, [r4, #0]
 80079c8:	6961      	ldr	r1, [r4, #20]
 80079ca:	1d18      	adds	r0, r3, #4
 80079cc:	6028      	str	r0, [r5, #0]
 80079ce:	0635      	lsls	r5, r6, #24
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	d501      	bpl.n	80079d8 <_printf_i+0x1c4>
 80079d4:	6019      	str	r1, [r3, #0]
 80079d6:	e002      	b.n	80079de <_printf_i+0x1ca>
 80079d8:	0670      	lsls	r0, r6, #25
 80079da:	d5fb      	bpl.n	80079d4 <_printf_i+0x1c0>
 80079dc:	8019      	strh	r1, [r3, #0]
 80079de:	2300      	movs	r3, #0
 80079e0:	6123      	str	r3, [r4, #16]
 80079e2:	4615      	mov	r5, r2
 80079e4:	e7bc      	b.n	8007960 <_printf_i+0x14c>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	1d1a      	adds	r2, r3, #4
 80079ea:	602a      	str	r2, [r5, #0]
 80079ec:	681d      	ldr	r5, [r3, #0]
 80079ee:	6862      	ldr	r2, [r4, #4]
 80079f0:	2100      	movs	r1, #0
 80079f2:	4628      	mov	r0, r5
 80079f4:	f7f8 fbf4 	bl	80001e0 <memchr>
 80079f8:	b108      	cbz	r0, 80079fe <_printf_i+0x1ea>
 80079fa:	1b40      	subs	r0, r0, r5
 80079fc:	6060      	str	r0, [r4, #4]
 80079fe:	6863      	ldr	r3, [r4, #4]
 8007a00:	6123      	str	r3, [r4, #16]
 8007a02:	2300      	movs	r3, #0
 8007a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a08:	e7aa      	b.n	8007960 <_printf_i+0x14c>
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	462a      	mov	r2, r5
 8007a0e:	4649      	mov	r1, r9
 8007a10:	4640      	mov	r0, r8
 8007a12:	47d0      	blx	sl
 8007a14:	3001      	adds	r0, #1
 8007a16:	d0ad      	beq.n	8007974 <_printf_i+0x160>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	079b      	lsls	r3, r3, #30
 8007a1c:	d413      	bmi.n	8007a46 <_printf_i+0x232>
 8007a1e:	68e0      	ldr	r0, [r4, #12]
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	4298      	cmp	r0, r3
 8007a24:	bfb8      	it	lt
 8007a26:	4618      	movlt	r0, r3
 8007a28:	e7a6      	b.n	8007978 <_printf_i+0x164>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	4649      	mov	r1, r9
 8007a30:	4640      	mov	r0, r8
 8007a32:	47d0      	blx	sl
 8007a34:	3001      	adds	r0, #1
 8007a36:	d09d      	beq.n	8007974 <_printf_i+0x160>
 8007a38:	3501      	adds	r5, #1
 8007a3a:	68e3      	ldr	r3, [r4, #12]
 8007a3c:	9903      	ldr	r1, [sp, #12]
 8007a3e:	1a5b      	subs	r3, r3, r1
 8007a40:	42ab      	cmp	r3, r5
 8007a42:	dcf2      	bgt.n	8007a2a <_printf_i+0x216>
 8007a44:	e7eb      	b.n	8007a1e <_printf_i+0x20a>
 8007a46:	2500      	movs	r5, #0
 8007a48:	f104 0619 	add.w	r6, r4, #25
 8007a4c:	e7f5      	b.n	8007a3a <_printf_i+0x226>
 8007a4e:	bf00      	nop
 8007a50:	08007bcd 	.word	0x08007bcd
 8007a54:	08007bde 	.word	0x08007bde

08007a58 <memmove>:
 8007a58:	4288      	cmp	r0, r1
 8007a5a:	b510      	push	{r4, lr}
 8007a5c:	eb01 0402 	add.w	r4, r1, r2
 8007a60:	d902      	bls.n	8007a68 <memmove+0x10>
 8007a62:	4284      	cmp	r4, r0
 8007a64:	4623      	mov	r3, r4
 8007a66:	d807      	bhi.n	8007a78 <memmove+0x20>
 8007a68:	1e43      	subs	r3, r0, #1
 8007a6a:	42a1      	cmp	r1, r4
 8007a6c:	d008      	beq.n	8007a80 <memmove+0x28>
 8007a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a76:	e7f8      	b.n	8007a6a <memmove+0x12>
 8007a78:	4402      	add	r2, r0
 8007a7a:	4601      	mov	r1, r0
 8007a7c:	428a      	cmp	r2, r1
 8007a7e:	d100      	bne.n	8007a82 <memmove+0x2a>
 8007a80:	bd10      	pop	{r4, pc}
 8007a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a8a:	e7f7      	b.n	8007a7c <memmove+0x24>

08007a8c <_sbrk_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4d06      	ldr	r5, [pc, #24]	; (8007aa8 <_sbrk_r+0x1c>)
 8007a90:	2300      	movs	r3, #0
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	f7fa fa64 	bl	8001f64 <_sbrk>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_sbrk_r+0x1a>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_sbrk_r+0x1a>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	200004dc 	.word	0x200004dc

08007aac <memcpy>:
 8007aac:	440a      	add	r2, r1
 8007aae:	4291      	cmp	r1, r2
 8007ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab4:	d100      	bne.n	8007ab8 <memcpy+0xc>
 8007ab6:	4770      	bx	lr
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	d1f9      	bne.n	8007aba <memcpy+0xe>
 8007ac6:	bd10      	pop	{r4, pc}

08007ac8 <_realloc_r>:
 8007ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007acc:	4680      	mov	r8, r0
 8007ace:	4614      	mov	r4, r2
 8007ad0:	460e      	mov	r6, r1
 8007ad2:	b921      	cbnz	r1, 8007ade <_realloc_r+0x16>
 8007ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad8:	4611      	mov	r1, r2
 8007ada:	f7ff bc49 	b.w	8007370 <_malloc_r>
 8007ade:	b92a      	cbnz	r2, 8007aec <_realloc_r+0x24>
 8007ae0:	f7ff fbda 	bl	8007298 <_free_r>
 8007ae4:	4625      	mov	r5, r4
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aec:	f000 f81b 	bl	8007b26 <_malloc_usable_size_r>
 8007af0:	4284      	cmp	r4, r0
 8007af2:	4607      	mov	r7, r0
 8007af4:	d802      	bhi.n	8007afc <_realloc_r+0x34>
 8007af6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007afa:	d812      	bhi.n	8007b22 <_realloc_r+0x5a>
 8007afc:	4621      	mov	r1, r4
 8007afe:	4640      	mov	r0, r8
 8007b00:	f7ff fc36 	bl	8007370 <_malloc_r>
 8007b04:	4605      	mov	r5, r0
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d0ed      	beq.n	8007ae6 <_realloc_r+0x1e>
 8007b0a:	42bc      	cmp	r4, r7
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	4631      	mov	r1, r6
 8007b10:	bf28      	it	cs
 8007b12:	463a      	movcs	r2, r7
 8007b14:	f7ff ffca 	bl	8007aac <memcpy>
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	f7ff fbbc 	bl	8007298 <_free_r>
 8007b20:	e7e1      	b.n	8007ae6 <_realloc_r+0x1e>
 8007b22:	4635      	mov	r5, r6
 8007b24:	e7df      	b.n	8007ae6 <_realloc_r+0x1e>

08007b26 <_malloc_usable_size_r>:
 8007b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b2a:	1f18      	subs	r0, r3, #4
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bfbc      	itt	lt
 8007b30:	580b      	ldrlt	r3, [r1, r0]
 8007b32:	18c0      	addlt	r0, r0, r3
 8007b34:	4770      	bx	lr
	...

08007b38 <_init>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	bf00      	nop
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr

08007b44 <_fini>:
 8007b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b46:	bf00      	nop
 8007b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4a:	bc08      	pop	{r3}
 8007b4c:	469e      	mov	lr, r3
 8007b4e:	4770      	bx	lr
