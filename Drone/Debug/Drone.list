
Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009830  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  080099c0  080099c0  000199c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f50  08009f50  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009f50  08009f50  00019f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f58  08009f58  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f58  08009f58  00019f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  200001d4  0800a134  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800a134  00020470  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001251a  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023d9  00000000  00000000  00032761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00034b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e1f  00000000  00000000  00035d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281e1  00000000  00000000  00036b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001595f  00000000  00000000  0005ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7697  00000000  00000000  00074697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006204  00000000  00000000  0016bd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00171f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099a8 	.word	0x080099a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080099a8 	.word	0x080099a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fca3 	bl	8001940 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f81c 	bl	8001036 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 f92b 	bl	8001258 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001002:	f000 f869 	bl	80010d8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001006:	f000 f8f7 	bl	80011f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800100a:	f000 f8a5 	bl	8001158 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MPU_6050_Init();
 800100e:	f000 f95f 	bl	80012d0 <MPU_6050_Init>
  TIM2->CR1 |= TIM_CR1_CEN;
 8001012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6013      	str	r3, [r2, #0]
  float sec = 0;
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
	  //uint8_t data[256];
	  //Get_Pos();
	  ///sprintf((char*)data, "Roll: %f Pitch: %f Yaw: %f\n", roll, pitch, yaw);
	  //HAL_UART_Transmit(&huart2, data, strlen((char*)data), I2C_DELAY);

	  MPU_Get_Gyro();
 8001028:	f000 f9ba 	bl	80013a0 <MPU_Get_Gyro>

	  HAL_Delay(.5 * 1000); //(sec * 1000)
 800102c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001030:	f000 fd02 	bl	8001a38 <HAL_Delay>
	  MPU_Get_Gyro();
 8001034:	e7f8      	b.n	8001028 <main+0x38>

08001036 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b096      	sub	sp, #88	; 0x58
 800103a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2244      	movs	r2, #68	; 0x44
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f005 f876 	bl	8006136 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001058:	f44f 7000 	mov.w	r0, #512	; 0x200
 800105c:	f001 fdaa 	bl	8002bb4 <HAL_PWREx_ControlVoltageScaling>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001066:	f000 fa3d 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800106a:	2302      	movs	r3, #2
 800106c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001074:	2310      	movs	r3, #16
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	2302      	movs	r3, #2
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107c:	2302      	movs	r3, #2
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001084:	230a      	movs	r3, #10
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001088:	2307      	movs	r3, #7
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001090:	2302      	movs	r3, #2
 8001092:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4618      	mov	r0, r3
 800109a:	f001 fde1 	bl	8002c60 <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010a4:	f000 fa1e 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	2303      	movs	r3, #3
 80010ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010bc:	463b      	mov	r3, r7
 80010be:	2104      	movs	r1, #4
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 f9a9 	bl	8003418 <HAL_RCC_ClockConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010cc:	f000 fa0a 	bl	80014e4 <Error_Handler>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3758      	adds	r7, #88	; 0x58
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_I2C1_Init+0x74>)
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <MX_I2C1_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_I2C1_Init+0x74>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <MX_I2C1_Init+0x7c>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_I2C1_Init+0x74>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <MX_I2C1_Init+0x74>)
 8001114:	f000 ff44 	bl	8001fa0 <HAL_I2C_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800111e:	f000 f9e1 	bl	80014e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <MX_I2C1_Init+0x74>)
 8001126:	f001 fc9f 	bl	8002a68 <HAL_I2CEx_ConfigAnalogFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001130:	f000 f9d8 	bl	80014e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_I2C1_Init+0x74>)
 8001138:	f001 fce1 	bl	8002afe <HAL_I2CEx_ConfigDigitalFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001142:	f000 f9cf 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001f0 	.word	0x200001f0
 8001150:	40005400 	.word	0x40005400
 8001154:	00702991 	.word	0x00702991

08001158 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_TIM2_Init+0x9c>)
 8001178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM2_Init+0x9c>)
 8001180:	f242 720f 	movw	r2, #9999	; 0x270f
 8001184:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_TIM2_Init+0x9c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_TIM2_Init+0x9c>)
 800118e:	f04f 32ff 	mov.w	r2, #4294967295
 8001192:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_TIM2_Init+0x9c>)
 8001196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_TIM2_Init+0x9c>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a2:	4814      	ldr	r0, [pc, #80]	; (80011f4 <MX_TIM2_Init+0x9c>)
 80011a4:	f003 f818 	bl	80041d8 <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011ae:	f000 f999 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_TIM2_Init+0x9c>)
 80011c0:	f003 f861 	bl	8004286 <HAL_TIM_ConfigClockSource>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80011ca:	f000 f98b 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_TIM2_Init+0x9c>)
 80011dc:	f003 fa50 	bl	8004680 <HAL_TIMEx_MasterConfigSynchronization>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011e6:	f000 f97d 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000244 	.word	0x20000244

080011f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_USART2_UART_Init+0x58>)
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <MX_USART2_UART_Init+0x5c>)
 8001200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART2_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART2_UART_Init+0x58>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART2_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART2_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USART2_UART_Init+0x58>)
 800123c:	f003 faa8 	bl	8004790 <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001246:	f000 f94d 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000290 	.word	0x20000290
 8001254:	40004400 	.word	0x40004400

08001258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_GPIO_Init+0x74>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a1a      	ldr	r2, [pc, #104]	; (80012cc <MX_GPIO_Init+0x74>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_GPIO_Init+0x74>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_GPIO_Init+0x74>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a14      	ldr	r2, [pc, #80]	; (80012cc <MX_GPIO_Init+0x74>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_GPIO_Init+0x74>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_GPIO_Init+0x74>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <MX_GPIO_Init+0x74>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_GPIO_Init+0x74>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_GPIO_Init+0x74>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <MX_GPIO_Init+0x74>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_GPIO_Init+0x74>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <MPU_6050_Init>:

/* USER CODE BEGIN 4 */
void MPU_6050_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	71fb      	strb	r3, [r7, #7]
	//uint8_t data = 0;
	//ret = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, POWER_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
	uint8_t data = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, POWER_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 80012de:	2332      	movs	r3, #50	; 0x32
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2301      	movs	r3, #1
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	1dbb      	adds	r3, r7, #6
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	226b      	movs	r2, #107	; 0x6b
 80012ee:	21d0      	movs	r1, #208	; 0xd0
 80012f0:	4825      	ldr	r0, [pc, #148]	; (8001388 <MPU_6050_Init+0xb8>)
 80012f2:	f000 fee5 	bl	80020c0 <HAL_I2C_Mem_Write>
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK)
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d006      	beq.n	800130e <MPU_6050_Init+0x3e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"Error Initializing MPU_6050\n", strlen("Error Initializing MPU_6050\n"), I2C_DELAY);
 8001300:	2332      	movs	r3, #50	; 0x32
 8001302:	221c      	movs	r2, #28
 8001304:	4921      	ldr	r1, [pc, #132]	; (800138c <MPU_6050_Init+0xbc>)
 8001306:	4822      	ldr	r0, [pc, #136]	; (8001390 <MPU_6050_Init+0xc0>)
 8001308:	f003 fa90 	bl	800482c <HAL_UART_Transmit>
			{
				HAL_UART_Transmit(&huart2, (uint8_t*)"Initialized MPU_6050!\n", strlen("Initialized MPU_6050!\n"), I2C_DELAY);
			}
		}
	}
	return;
 800130c:	e038      	b.n	8001380 <MPU_6050_Init+0xb0>
		data = 0x08;
 800130e:	2308      	movs	r3, #8
 8001310:	71bb      	strb	r3, [r7, #6]
		ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, GYRO_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 8001312:	2332      	movs	r3, #50	; 0x32
 8001314:	9302      	str	r3, [sp, #8]
 8001316:	2301      	movs	r3, #1
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	1dbb      	adds	r3, r7, #6
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	221b      	movs	r2, #27
 8001322:	21d0      	movs	r1, #208	; 0xd0
 8001324:	4818      	ldr	r0, [pc, #96]	; (8001388 <MPU_6050_Init+0xb8>)
 8001326:	f000 fecb 	bl	80020c0 <HAL_I2C_Mem_Write>
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
		if (ret != HAL_OK)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <MPU_6050_Init+0x72>
			HAL_UART_Transmit(&huart2, (uint8_t*)"Error Initializing Gyro\n", strlen("Error Initializing Gyro\n"), I2C_DELAY);
 8001334:	2332      	movs	r3, #50	; 0x32
 8001336:	2218      	movs	r2, #24
 8001338:	4916      	ldr	r1, [pc, #88]	; (8001394 <MPU_6050_Init+0xc4>)
 800133a:	4815      	ldr	r0, [pc, #84]	; (8001390 <MPU_6050_Init+0xc0>)
 800133c:	f003 fa76 	bl	800482c <HAL_UART_Transmit>
	return;
 8001340:	e01e      	b.n	8001380 <MPU_6050_Init+0xb0>
			ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, ACCEL_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 8001342:	2332      	movs	r3, #50	; 0x32
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2301      	movs	r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	1dbb      	adds	r3, r7, #6
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2301      	movs	r3, #1
 8001350:	221c      	movs	r2, #28
 8001352:	21d0      	movs	r1, #208	; 0xd0
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <MPU_6050_Init+0xb8>)
 8001356:	f000 feb3 	bl	80020c0 <HAL_I2C_Mem_Write>
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
			if (ret != HAL_OK)
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <MPU_6050_Init+0xa2>
				HAL_UART_Transmit(&huart2, (uint8_t*)"Error Initializing Accel\n", strlen("Error Initializing Accel\n"), I2C_DELAY);
 8001364:	2332      	movs	r3, #50	; 0x32
 8001366:	2219      	movs	r2, #25
 8001368:	490b      	ldr	r1, [pc, #44]	; (8001398 <MPU_6050_Init+0xc8>)
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <MPU_6050_Init+0xc0>)
 800136c:	f003 fa5e 	bl	800482c <HAL_UART_Transmit>
	return;
 8001370:	e006      	b.n	8001380 <MPU_6050_Init+0xb0>
				HAL_UART_Transmit(&huart2, (uint8_t*)"Initialized MPU_6050!\n", strlen("Initialized MPU_6050!\n"), I2C_DELAY);
 8001372:	2332      	movs	r3, #50	; 0x32
 8001374:	2216      	movs	r2, #22
 8001376:	4909      	ldr	r1, [pc, #36]	; (800139c <MPU_6050_Init+0xcc>)
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <MPU_6050_Init+0xc0>)
 800137a:	f003 fa57 	bl	800482c <HAL_UART_Transmit>
	return;
 800137e:	bf00      	nop
}
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001f0 	.word	0x200001f0
 800138c:	080099c0 	.word	0x080099c0
 8001390:	20000290 	.word	0x20000290
 8001394:	080099e0 	.word	0x080099e0
 8001398:	080099fc 	.word	0x080099fc
 800139c:	08009a18 	.word	0x08009a18

080013a0 <MPU_Get_Gyro>:
	}
	return;
}

void MPU_Get_Gyro(void)
{
 80013a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013a4:	b0c8      	sub	sp, #288	; 0x120
 80013a6:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	float gyroX = 0;
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	float gyroY = 0;
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	float gyroZ = 0;
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	ret = HAL_I2C_Mem_Read(&hi2c1, MPU_6050_ADDR, GYRO_ADDR, I2C_MEMADD_SIZE_8BIT, buf, 6, I2C_DELAY);
 80013c6:	2332      	movs	r3, #50	; 0x32
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	2306      	movs	r3, #6
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <MPU_Get_Gyro+0x12c>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	2243      	movs	r2, #67	; 0x43
 80013d6:	21d0      	movs	r1, #208	; 0xd0
 80013d8:	483d      	ldr	r0, [pc, #244]	; (80014d0 <MPU_Get_Gyro+0x130>)
 80013da:	f000 ff85 	bl	80022e8 <HAL_I2C_Mem_Read>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if (ret != HAL_OK)
 80013e4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <MPU_Get_Gyro+0x5a>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"Error Reading Gyro\n", strlen("Error Reading Gyro\n"), I2C_DELAY);
 80013ec:	2332      	movs	r3, #50	; 0x32
 80013ee:	2213      	movs	r2, #19
 80013f0:	4938      	ldr	r1, [pc, #224]	; (80014d4 <MPU_Get_Gyro+0x134>)
 80013f2:	4839      	ldr	r0, [pc, #228]	; (80014d8 <MPU_Get_Gyro+0x138>)
 80013f4:	f003 fa1a 	bl	800482c <HAL_UART_Transmit>

		char data[256];
		sprintf((char*)data, "Gyroscope X: %f Y: %f Z: %f\r\n", gyroX, gyroY, gyroZ);
		HAL_UART_Transmit(&huart2, data, strlen((char*)data), I2C_DELAY);
	}
	return;
 80013f8:	e063      	b.n	80014c2 <MPU_Get_Gyro+0x122>
		gyroX = ((int16_t)buf[0] << 8) | (buf[1]);
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <MPU_Get_Gyro+0x12c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	4a32      	ldr	r2, [pc, #200]	; (80014cc <MPU_Get_Gyro+0x12c>)
 8001402:	7852      	ldrb	r2, [r2, #1]
 8001404:	4313      	orrs	r3, r2
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
		gyroY = ((int16_t)buf[2] << 8) | (buf[3]);
 8001412:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <MPU_Get_Gyro+0x12c>)
 8001414:	789b      	ldrb	r3, [r3, #2]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4a2c      	ldr	r2, [pc, #176]	; (80014cc <MPU_Get_Gyro+0x12c>)
 800141a:	78d2      	ldrb	r2, [r2, #3]
 800141c:	4313      	orrs	r3, r2
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001426:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
		gyroZ = ((int16_t)buf[4] << 8) | (buf[5]);
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MPU_Get_Gyro+0x12c>)
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <MPU_Get_Gyro+0x12c>)
 8001432:	7952      	ldrb	r2, [r2, #5]
 8001434:	4313      	orrs	r3, r2
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143e:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
		gyroX = gyroX / 65.5;
 8001442:	ed97 7a42 	vldr	s14, [r7, #264]	; 0x108
 8001446:	eddf 6a25 	vldr	s13, [pc, #148]	; 80014dc <MPU_Get_Gyro+0x13c>
 800144a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144e:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
		gyroY = gyroY / 65.5;
 8001452:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8001456:	eddf 6a21 	vldr	s13, [pc, #132]	; 80014dc <MPU_Get_Gyro+0x13c>
 800145a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145e:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
		gyroZ = gyroZ / 65.5;
 8001462:	ed97 7a40 	vldr	s14, [r7, #256]	; 0x100
 8001466:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80014dc <MPU_Get_Gyro+0x13c>
 800146a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800146e:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
		sprintf((char*)data, "Gyroscope X: %f Y: %f Z: %f\r\n", gyroX, gyroY, gyroZ);
 8001472:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001476:	f7ff f867 	bl	8000548 <__aeabi_f2d>
 800147a:	4680      	mov	r8, r0
 800147c:	4689      	mov	r9, r1
 800147e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001482:	f7ff f861 	bl	8000548 <__aeabi_f2d>
 8001486:	4604      	mov	r4, r0
 8001488:	460d      	mov	r5, r1
 800148a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800148e:	f7ff f85b 	bl	8000548 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4638      	mov	r0, r7
 8001498:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800149c:	e9cd 4500 	strd	r4, r5, [sp]
 80014a0:	4642      	mov	r2, r8
 80014a2:	464b      	mov	r3, r9
 80014a4:	490e      	ldr	r1, [pc, #56]	; (80014e0 <MPU_Get_Gyro+0x140>)
 80014a6:	f004 fde3 	bl	8006070 <siprintf>
		HAL_UART_Transmit(&huart2, data, strlen((char*)data), I2C_DELAY);
 80014aa:	463b      	mov	r3, r7
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7fe fedf 	bl	8000270 <strlen>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4639      	mov	r1, r7
 80014b8:	2332      	movs	r3, #50	; 0x32
 80014ba:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MPU_Get_Gyro+0x138>)
 80014bc:	f003 f9b6 	bl	800482c <HAL_UART_Transmit>
	return;
 80014c0:	bf00      	nop
}
 80014c2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80014c6:	46bd      	mov	sp, r7
 80014c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014cc:	20000314 	.word	0x20000314
 80014d0:	200001f0 	.word	0x200001f0
 80014d4:	08009a64 	.word	0x08009a64
 80014d8:	20000290 	.word	0x20000290
 80014dc:	42830000 	.word	0x42830000
 80014e0:	08009a78 	.word	0x08009a78

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_MspInit+0x44>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_MspInit+0x44>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6613      	str	r3, [r2, #96]	; 0x60
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_MspInit+0x44>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_MspInit+0x44>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_MspInit+0x44>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6593      	str	r3, [r2, #88]	; 0x58
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_MspInit+0x44>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0ac      	sub	sp, #176	; 0xb0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2288      	movs	r2, #136	; 0x88
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f004 fdec 	bl	8006136 <memset>
  if(hi2c->Instance==I2C1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <HAL_I2C_MspInit+0xb0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d13b      	bne.n	80015e0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800156c:	2300      	movs	r3, #0
 800156e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4618      	mov	r0, r3
 8001576:	f002 f973 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001580:	f7ff ffb0 	bl	80014e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_I2C_MspInit+0xb4>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a18      	ldr	r2, [pc, #96]	; (80015ec <HAL_I2C_MspInit+0xb4>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_I2C_MspInit+0xb4>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800159c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a4:	2312      	movs	r3, #18
 80015a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b6:	2304      	movs	r3, #4
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c0:	4619      	mov	r1, r3
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <HAL_I2C_MspInit+0xb8>)
 80015c4:	f000 fb42 	bl	8001c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_I2C_MspInit+0xb4>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_I2C_MspInit+0xb4>)
 80015ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d2:	6593      	str	r3, [r2, #88]	; 0x58
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_I2C_MspInit+0xb4>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	37b0      	adds	r7, #176	; 0xb0
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40005400 	.word	0x40005400
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000400 	.word	0x48000400

080015f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001604:	d10b      	bne.n	800161e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_TIM_Base_MspInit+0x38>)
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_TIM_Base_MspInit+0x38>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6593      	str	r3, [r2, #88]	; 0x58
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_TIM_Base_MspInit+0x38>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0ac      	sub	sp, #176	; 0xb0
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2288      	movs	r2, #136	; 0x88
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f004 fd70 	bl	8006136 <memset>
  if(huart->Instance==USART2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a21      	ldr	r2, [pc, #132]	; (80016e0 <HAL_UART_MspInit+0xb0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d13b      	bne.n	80016d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001660:	2302      	movs	r3, #2
 8001662:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001664:	2300      	movs	r3, #0
 8001666:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4618      	mov	r0, r3
 800166e:	f002 f8f7 	bl	8003860 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001678:	f7ff ff34 	bl	80014e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_UART_MspInit+0xb4>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <HAL_UART_MspInit+0xb4>)
 8001682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001686:	6593      	str	r3, [r2, #88]	; 0x58
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_UART_MspInit+0xb4>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_UART_MspInit+0xb4>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <HAL_UART_MspInit+0xb4>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_UART_MspInit+0xb4>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ac:	230c      	movs	r3, #12
 80016ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c4:	2307      	movs	r3, #7
 80016c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d4:	f000 faba 	bl	8001c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	37b0      	adds	r7, #176	; 0xb0
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40004400 	.word	0x40004400
 80016e4:	40021000 	.word	0x40021000

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f000 f960 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return 1;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_kill>:

int _kill(int pid, int sig)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001756:	f004 fd41 	bl	80061dc <__errno>
 800175a:	4603      	mov	r3, r0
 800175c:	2216      	movs	r2, #22
 800175e:	601a      	str	r2, [r3, #0]
  return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_exit>:

void _exit (int status)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001774:	f04f 31ff 	mov.w	r1, #4294967295
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ffe7 	bl	800174c <_kill>
  while (1) {}    /* Make sure we hang here */
 800177e:	e7fe      	b.n	800177e <_exit+0x12>

08001780 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e00a      	b.n	80017a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001792:	f3af 8000 	nop.w
 8001796:	4601      	mov	r1, r0
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	60ba      	str	r2, [r7, #8]
 800179e:	b2ca      	uxtb	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbf0      	blt.n	8001792 <_read+0x12>
  }

  return len;
 80017b0:	687b      	ldr	r3, [r7, #4]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	e009      	b.n	80017e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf1      	blt.n	80017cc <_write+0x12>
  }
  return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_close>:

int _close(int file)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800181a:	605a      	str	r2, [r3, #4]
  return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_isatty>:

int _isatty(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001832:	2301      	movs	r3, #1
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f004 fca6 	bl	80061dc <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20018000 	.word	0x20018000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	2000031c 	.word	0x2000031c
 80018c4:	20000470 	.word	0x20000470

080018c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001924 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018f0:	f7ff ffea 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <LoopForever+0x6>)
  ldr r1, =_edata
 80018f6:	490d      	ldr	r1, [pc, #52]	; (800192c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <LoopForever+0xe>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018fc:	e002      	b.n	8001904 <LoopCopyDataInit>

080018fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001902:	3304      	adds	r3, #4

08001904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001908:	d3f9      	bcc.n	80018fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800190c:	4c0a      	ldr	r4, [pc, #40]	; (8001938 <LoopForever+0x16>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001910:	e001      	b.n	8001916 <LoopFillZerobss>

08001912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001914:	3204      	adds	r2, #4

08001916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001918:	d3fb      	bcc.n	8001912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800191a:	f004 fc65 	bl	80061e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800191e:	f7ff fb67 	bl	8000ff0 <main>

08001922 <LoopForever>:

LoopForever:
    b LoopForever
 8001922:	e7fe      	b.n	8001922 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001924:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001930:	08009f60 	.word	0x08009f60
  ldr r2, =_sbss
 8001934:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001938:	20000470 	.word	0x20000470

0800193c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC1_2_IRQHandler>
	...

08001940 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_Init+0x3c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <HAL_Init+0x3c>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	2003      	movs	r0, #3
 8001958:	f000 f944 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195c:	2000      	movs	r0, #0
 800195e:	f000 f80f 	bl	8001980 <HAL_InitTick>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	e001      	b.n	8001972 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800196e:	f7ff fdbf 	bl	80014f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001972:	79fb      	ldrb	r3, [r7, #7]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40022000 	.word	0x40022000

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800198c:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_InitTick+0x6c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d023      	beq.n	80019dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_InitTick+0x70>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_InitTick+0x6c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f941 	bl	8001c32 <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10f      	bne.n	80019d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d809      	bhi.n	80019d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f000 f919 	bl	8001bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_InitTick+0x74>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e007      	b.n	80019e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e004      	b.n	80019e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e001      	b.n	80019e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000320 	.word	0x20000320

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000320 	.word	0x20000320

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff ffee 	bl	8001a20 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffde 	bl	8001a20 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	; (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	; (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
         );
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff8e 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff47 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff5c 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff8e 	bl	8001b38 <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5d 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffb0 	bl	8001ba0 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5a:	e17f      	b.n	8001f5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2101      	movs	r1, #1
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8171 	beq.w	8001f56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d005      	beq.n	8001c8c <HAL_GPIO_Init+0x40>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d130      	bne.n	8001cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	2203      	movs	r2, #3
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 0201 	and.w	r2, r3, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d118      	bne.n	8001d2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d017      	beq.n	8001d68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	6939      	ldr	r1, [r7, #16]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80ac 	beq.w	8001f56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_GPIO_Init+0x330>)
 8001e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e02:	4a5e      	ldr	r2, [pc, #376]	; (8001f7c <HAL_GPIO_Init+0x330>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6613      	str	r3, [r2, #96]	; 0x60
 8001e0a:	4b5c      	ldr	r3, [pc, #368]	; (8001f7c <HAL_GPIO_Init+0x330>)
 8001e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e16:	4a5a      	ldr	r2, [pc, #360]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e40:	d025      	beq.n	8001e8e <HAL_GPIO_Init+0x242>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4f      	ldr	r2, [pc, #316]	; (8001f84 <HAL_GPIO_Init+0x338>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <HAL_GPIO_Init+0x23e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_GPIO_Init+0x33c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d019      	beq.n	8001e86 <HAL_GPIO_Init+0x23a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4d      	ldr	r2, [pc, #308]	; (8001f8c <HAL_GPIO_Init+0x340>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x236>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x344>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00d      	beq.n	8001e7e <HAL_GPIO_Init+0x232>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <HAL_GPIO_Init+0x348>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <HAL_GPIO_Init+0x22e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4a      	ldr	r2, [pc, #296]	; (8001f98 <HAL_GPIO_Init+0x34c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_GPIO_Init+0x22a>
 8001e72:	2306      	movs	r3, #6
 8001e74:	e00c      	b.n	8001e90 <HAL_GPIO_Init+0x244>
 8001e76:	2307      	movs	r3, #7
 8001e78:	e00a      	b.n	8001e90 <HAL_GPIO_Init+0x244>
 8001e7a:	2305      	movs	r3, #5
 8001e7c:	e008      	b.n	8001e90 <HAL_GPIO_Init+0x244>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x244>
 8001e82:	2303      	movs	r3, #3
 8001e84:	e004      	b.n	8001e90 <HAL_GPIO_Init+0x244>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e002      	b.n	8001e90 <HAL_GPIO_Init+0x244>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_GPIO_Init+0x244>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	f002 0203 	and.w	r2, r2, #3
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4093      	lsls	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea0:	4937      	ldr	r1, [pc, #220]	; (8001f80 <HAL_GPIO_Init+0x334>)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eae:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ed2:	4a32      	ldr	r2, [pc, #200]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ed8:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001efc:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f26:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <HAL_GPIO_Init+0x350>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f47f ae78 	bne.w	8001c5c <HAL_GPIO_Init+0x10>
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	48000400 	.word	0x48000400
 8001f88:	48000800 	.word	0x48000800
 8001f8c:	48000c00 	.word	0x48000c00
 8001f90:	48001000 	.word	0x48001000
 8001f94:	48001400 	.word	0x48001400
 8001f98:	48001800 	.word	0x48001800
 8001f9c:	40010400 	.word	0x40010400

08001fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e081      	b.n	80020b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fab6 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2224      	movs	r2, #36	; 0x24
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ff0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002000:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	e006      	b.n	8002028 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002026:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d104      	bne.n	800203a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800205c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69d9      	ldr	r1, [r3, #28]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1a      	ldr	r2, [r3, #32]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	817b      	strh	r3, [r7, #10]
 80020d2:	460b      	mov	r3, r1
 80020d4:	813b      	strh	r3, [r7, #8]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	f040 80f9 	bne.w	80022da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x34>
 80020ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0ed      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_I2C_Mem_Write+0x4e>
 800210a:	2302      	movs	r3, #2
 800210c:	e0e6      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002116:	f7ff fc83 	bl	8001a20 <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2319      	movs	r3, #25
 8002122:	2201      	movs	r2, #1
 8002124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fac3 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0d1      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2221      	movs	r2, #33	; 0x21
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a3a      	ldr	r2, [r7, #32]
 8002152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002158:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002160:	88f8      	ldrh	r0, [r7, #6]
 8002162:	893a      	ldrh	r2, [r7, #8]
 8002164:	8979      	ldrh	r1, [r7, #10]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4603      	mov	r3, r0
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f9d3 	bl	800251c <I2C_RequestMemoryWrite>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0a9      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	2bff      	cmp	r3, #255	; 0xff
 8002190:	d90e      	bls.n	80021b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	22ff      	movs	r2, #255	; 0xff
 8002196:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	2300      	movs	r3, #0
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fc2b 	bl	8002a04 <I2C_TransferConfig>
 80021ae:	e00f      	b.n	80021d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	8979      	ldrh	r1, [r7, #10]
 80021c2:	2300      	movs	r3, #0
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fc1a 	bl	8002a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 faad 	bl	8002734 <I2C_WaitOnTXISFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e07b      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d034      	beq.n	8002288 <HAL_I2C_Mem_Write+0x1c8>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	d130      	bne.n	8002288 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fa3f 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e04d      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2bff      	cmp	r3, #255	; 0xff
 8002248:	d90e      	bls.n	8002268 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	22ff      	movs	r2, #255	; 0xff
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	b2da      	uxtb	r2, r3
 8002256:	8979      	ldrh	r1, [r7, #10]
 8002258:	2300      	movs	r3, #0
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fbcf 	bl	8002a04 <I2C_TransferConfig>
 8002266:	e00f      	b.n	8002288 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	b2da      	uxtb	r2, r3
 8002278:	8979      	ldrh	r1, [r7, #10]
 800227a:	2300      	movs	r3, #0
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fbbe 	bl	8002a04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d19e      	bne.n	80021d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa8c 	bl	80027b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e01a      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2220      	movs	r2, #32
 80022ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_I2C_Mem_Write+0x224>)
 80022ba:	400b      	ands	r3, r1
 80022bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022da:	2302      	movs	r3, #2
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	fe00e800 	.word	0xfe00e800

080022e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	817b      	strh	r3, [r7, #10]
 80022fa:	460b      	mov	r3, r1
 80022fc:	813b      	strh	r3, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b20      	cmp	r3, #32
 800230c:	f040 80fd 	bne.w	800250a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_I2C_Mem_Read+0x34>
 8002316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0f1      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Mem_Read+0x4e>
 8002332:	2302      	movs	r3, #2
 8002334:	e0ea      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800233e:	f7ff fb6f 	bl	8001a20 <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2319      	movs	r3, #25
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f9af 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0d5      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2222      	movs	r2, #34	; 0x22
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002388:	88f8      	ldrh	r0, [r7, #6]
 800238a:	893a      	ldrh	r2, [r7, #8]
 800238c:	8979      	ldrh	r1, [r7, #10]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	4603      	mov	r3, r0
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f913 	bl	80025c4 <I2C_RequestMemoryRead>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0ad      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2bff      	cmp	r3, #255	; 0xff
 80023b8:	d90e      	bls.n	80023d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	22ff      	movs	r2, #255	; 0xff
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	8979      	ldrh	r1, [r7, #10]
 80023c8:	4b52      	ldr	r3, [pc, #328]	; (8002514 <HAL_I2C_Mem_Read+0x22c>)
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fb17 	bl	8002a04 <I2C_TransferConfig>
 80023d6:	e00f      	b.n	80023f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_I2C_Mem_Read+0x22c>)
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fb06 	bl	8002a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	2200      	movs	r2, #0
 8002400:	2104      	movs	r1, #4
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f956 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07c      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d034      	beq.n	80024b8 <HAL_I2C_Mem_Read+0x1d0>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	2b00      	cmp	r3, #0
 8002454:	d130      	bne.n	80024b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	2200      	movs	r2, #0
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f927 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e04d      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	2bff      	cmp	r3, #255	; 0xff
 8002478:	d90e      	bls.n	8002498 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	22ff      	movs	r2, #255	; 0xff
 800247e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	b2da      	uxtb	r2, r3
 8002486:	8979      	ldrh	r1, [r7, #10]
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fab7 	bl	8002a04 <I2C_TransferConfig>
 8002496:	e00f      	b.n	80024b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	8979      	ldrh	r1, [r7, #10]
 80024aa:	2300      	movs	r3, #0
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 faa6 	bl	8002a04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d19a      	bne.n	80023f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f974 	bl	80027b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e01a      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2220      	movs	r2, #32
 80024dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_I2C_Mem_Read+0x230>)
 80024ea:	400b      	ands	r3, r1
 80024ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800250a:	2302      	movs	r3, #2
  }
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	80002400 	.word	0x80002400
 8002518:	fe00e800 	.word	0xfe00e800

0800251c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	460b      	mov	r3, r1
 8002530:	813b      	strh	r3, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <I2C_RequestMemoryWrite+0xa4>)
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa5d 	bl	8002a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	69b9      	ldr	r1, [r7, #24]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f8f0 	bl	8002734 <I2C_WaitOnTXISFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e02c      	b.n	80025b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
 800256e:	e015      	b.n	800259c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002570:	893b      	ldrh	r3, [r7, #8]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	b29b      	uxth	r3, r3
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	69b9      	ldr	r1, [r7, #24]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f8d6 	bl	8002734 <I2C_WaitOnTXISFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e012      	b.n	80025b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002592:	893b      	ldrh	r3, [r7, #8]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2200      	movs	r2, #0
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f884 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	80002000 	.word	0x80002000

080025c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	460b      	mov	r3, r1
 80025d8:	813b      	strh	r3, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	8979      	ldrh	r1, [r7, #10]
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <I2C_RequestMemoryRead+0xa4>)
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2300      	movs	r3, #0
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa0a 	bl	8002a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f89d 	bl	8002734 <I2C_WaitOnTXISFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e02c      	b.n	800265e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800260a:	893b      	ldrh	r3, [r7, #8]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28
 8002614:	e015      	b.n	8002642 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002616:	893b      	ldrh	r3, [r7, #8]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	b29b      	uxth	r3, r3
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f883 	bl	8002734 <I2C_WaitOnTXISFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e012      	b.n	800265e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002638:	893b      	ldrh	r3, [r7, #8]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2200      	movs	r2, #0
 800264a:	2140      	movs	r1, #64	; 0x40
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f831 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	80002000 	.word	0x80002000

0800266c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d103      	bne.n	800268a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	619a      	str	r2, [r3, #24]
  }
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c4:	e022      	b.n	800270c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d01e      	beq.n	800270c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ce:	f7ff f9a7 	bl	8001a20 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d302      	bcc.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d113      	bne.n	800270c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e00f      	b.n	800272c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4013      	ands	r3, r2
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	429a      	cmp	r2, r3
 8002728:	d0cd      	beq.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002740:	e02c      	b.n	800279c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f870 	bl	800282c <I2C_IsErrorOccurred>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e02a      	b.n	80027ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d01e      	beq.n	800279c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7ff f95f 	bl	8001a20 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d113      	bne.n	800279c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e007      	b.n	80027ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d1cb      	bne.n	8002742 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027c0:	e028      	b.n	8002814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f830 	bl	800282c <I2C_IsErrorOccurred>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e026      	b.n	8002824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d6:	f7ff f923 	bl	8001a20 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d302      	bcc.n	80027ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d113      	bne.n	8002814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e007      	b.n	8002824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b20      	cmp	r3, #32
 8002820:	d1cf      	bne.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d075      	beq.n	8002944 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2210      	movs	r2, #16
 800285e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002860:	e056      	b.n	8002910 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d052      	beq.n	8002910 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7ff f8d9 	bl	8001a20 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <I2C_IsErrorOccurred+0x54>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d147      	bne.n	8002910 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002892:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800289e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a2:	d12e      	bne.n	8002902 <I2C_IsErrorOccurred+0xd6>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028aa:	d02a      	beq.n	8002902 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d027      	beq.n	8002902 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028c2:	f7ff f8ad 	bl	8001a20 <HAL_GetTick>
 80028c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c8:	e01b      	b.n	8002902 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028ca:	f7ff f8a9 	bl	8001a20 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b19      	cmp	r3, #25
 80028d6:	d914      	bls.n	8002902 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b20      	cmp	r3, #32
 800290e:	d1dc      	bne.n	80028ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b20      	cmp	r3, #32
 800291c:	d003      	beq.n	8002926 <I2C_IsErrorOccurred+0xfa>
 800291e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002922:	2b00      	cmp	r3, #0
 8002924:	d09d      	beq.n	8002862 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2220      	movs	r2, #32
 8002934:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f043 0308 	orr.w	r3, r3, #8
 800297e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01c      	beq.n	80029f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff fe56 	bl	800266c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <I2C_IsErrorOccurred+0x1d4>)
 80029cc:	400b      	ands	r3, r1
 80029ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	fe00e800 	.word	0xfe00e800

08002a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	817b      	strh	r3, [r7, #10]
 8002a12:	4613      	mov	r3, r2
 8002a14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a16:	897b      	ldrh	r3, [r7, #10]
 8002a18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a1c:	7a7b      	ldrb	r3, [r7, #9]
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	0d5b      	lsrs	r3, r3, #21
 8002a3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <I2C_TransferConfig+0x60>)
 8002a44:	430b      	orrs	r3, r1
 8002a46:	43db      	mvns	r3, r3
 8002a48:	ea02 0103 	and.w	r1, r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	03ff63ff 	.word	0x03ff63ff

08002a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d138      	bne.n	8002af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e032      	b.n	8002af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2224      	movs	r2, #36	; 0x24
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
 8002b06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d139      	bne.n	8002b88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e033      	b.n	8002b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2224      	movs	r2, #36	; 0x24
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e000      	b.n	8002b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b88:	2302      	movs	r3, #2
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40007000 	.word	0x40007000

08002bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc2:	d130      	bne.n	8002c26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d038      	beq.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bda:	4a1e      	ldr	r2, [pc, #120]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002be2:	4b1d      	ldr	r3, [pc, #116]	; (8002c58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2232      	movs	r2, #50	; 0x32
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0c9b      	lsrs	r3, r3, #18
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bf8:	e002      	b.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0c:	d102      	bne.n	8002c14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f2      	bne.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c20:	d110      	bne.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e00f      	b.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d007      	beq.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c3c:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40007000 	.word	0x40007000
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	431bde83 	.word	0x431bde83

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e3ca      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c72:	4b97      	ldr	r3, [pc, #604]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c7c:	4b94      	ldr	r3, [pc, #592]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80e4 	beq.w	8002e5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <HAL_RCC_OscConfig+0x4a>
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2b0c      	cmp	r3, #12
 8002c9e:	f040 808b 	bne.w	8002db8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	f040 8087 	bne.w	8002db8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002caa:	4b89      	ldr	r3, [pc, #548]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x62>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e3a2      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <HAL_RCC_OscConfig+0x7c>
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cda:	e005      	b.n	8002ce8 <HAL_RCC_OscConfig+0x88>
 8002cdc:	4b7c      	ldr	r3, [pc, #496]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d223      	bcs.n	8002d34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fd55 	bl	80037a0 <RCC_SetFlashLatencyFromMSIRange>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e383      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d00:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a72      	ldr	r2, [pc, #456]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d06:	f043 0308 	orr.w	r3, r3, #8
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b70      	ldr	r3, [pc, #448]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	496d      	ldr	r1, [pc, #436]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d1e:	4b6c      	ldr	r3, [pc, #432]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	4968      	ldr	r1, [pc, #416]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
 8002d32:	e025      	b.n	8002d80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d34:	4b66      	ldr	r3, [pc, #408]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a65      	ldr	r2, [pc, #404]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	f043 0308 	orr.w	r3, r3, #8
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b63      	ldr	r3, [pc, #396]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4960      	ldr	r1, [pc, #384]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d52:	4b5f      	ldr	r3, [pc, #380]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	495b      	ldr	r1, [pc, #364]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fd15 	bl	80037a0 <RCC_SetFlashLatencyFromMSIRange>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e343      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d80:	f000 fc4a 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b52      	ldr	r3, [pc, #328]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	4950      	ldr	r1, [pc, #320]	; (8002ed4 <HAL_RCC_OscConfig+0x274>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	4a4e      	ldr	r2, [pc, #312]	; (8002ed8 <HAL_RCC_OscConfig+0x278>)
 8002d9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002da0:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <HAL_RCC_OscConfig+0x27c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe fdeb 	bl	8001980 <HAL_InitTick>
 8002daa:	4603      	mov	r3, r0
 8002dac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d052      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	e327      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d032      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dc0:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a42      	ldr	r2, [pc, #264]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fe28 	bl	8001a20 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fe24 	bl	8001a20 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e310      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002de6:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df2:	4b37      	ldr	r3, [pc, #220]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a36      	ldr	r2, [pc, #216]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002df8:	f043 0308 	orr.w	r3, r3, #8
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	4931      	ldr	r1, [pc, #196]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e10:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	492c      	ldr	r1, [pc, #176]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
 8002e24:	e01a      	b.n	8002e5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e26:	4b2a      	ldr	r3, [pc, #168]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a29      	ldr	r2, [pc, #164]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e32:	f7fe fdf5 	bl	8001a20 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e3a:	f7fe fdf1 	bl	8001a20 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e2dd      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x1da>
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d074      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d005      	beq.n	8002e7a <HAL_RCC_OscConfig+0x21a>
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d10e      	bne.n	8002e92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d10b      	bne.n	8002e92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d064      	beq.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d160      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e2ba      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCC_OscConfig+0x24a>
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	e026      	b.n	8002ef8 <HAL_RCC_OscConfig+0x298>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb2:	d115      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x280>
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a02      	ldr	r2, [pc, #8]	; (8002ed0 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	e014      	b.n	8002ef8 <HAL_RCC_OscConfig+0x298>
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	08009adc 	.word	0x08009adc
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	4ba0      	ldr	r3, [pc, #640]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a9f      	ldr	r2, [pc, #636]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b9d      	ldr	r3, [pc, #628]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a9c      	ldr	r2, [pc, #624]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d013      	beq.n	8002f28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fd8e 	bl	8001a20 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fe fd8a 	bl	8001a20 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e276      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f1a:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x2a8>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe fd7a 	bl	8001a20 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fd76 	bl	8001a20 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e262      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f42:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x2d0>
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d060      	beq.n	8003020 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_OscConfig+0x310>
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b0c      	cmp	r3, #12
 8002f68:	d119      	bne.n	8002f9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d116      	bne.n	8002f9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f70:	4b7c      	ldr	r3, [pc, #496]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_OscConfig+0x328>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e23f      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	4b76      	ldr	r3, [pc, #472]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	4973      	ldr	r1, [pc, #460]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f9c:	e040      	b.n	8003020 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d023      	beq.n	8002fee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa6:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6e      	ldr	r2, [pc, #440]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fe fd35 	bl	8001a20 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fba:	f7fe fd31 	bl	8001a20 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e21d      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fcc:	4b65      	ldr	r3, [pc, #404]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd8:	4b62      	ldr	r3, [pc, #392]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	061b      	lsls	r3, r3, #24
 8002fe6:	495f      	ldr	r1, [pc, #380]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	604b      	str	r3, [r1, #4]
 8002fec:	e018      	b.n	8003020 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fee:	4b5d      	ldr	r3, [pc, #372]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a5c      	ldr	r2, [pc, #368]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fd11 	bl	8001a20 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe fd0d 	bl	8001a20 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1f9      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b00      	cmp	r3, #0
 800302a:	d03c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01c      	beq.n	800306e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303a:	4a4a      	ldr	r2, [pc, #296]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe fcec 	bl	8001a20 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe fce8 	bl	8001a20 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1d4      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800305e:	4b41      	ldr	r3, [pc, #260]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ef      	beq.n	800304c <HAL_RCC_OscConfig+0x3ec>
 800306c:	e01b      	b.n	80030a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306e:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003074:	4a3b      	ldr	r2, [pc, #236]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307e:	f7fe fccf 	bl	8001a20 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003086:	f7fe fccb 	bl	8001a20 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1b7      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003098:	4b32      	ldr	r3, [pc, #200]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 800309a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ef      	bne.n	8003086 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80a6 	beq.w	8003200 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b4:	2300      	movs	r3, #0
 80030b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030b8:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10d      	bne.n	80030e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	4a26      	ldr	r2, [pc, #152]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	6593      	str	r3, [r2, #88]	; 0x58
 80030d0:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030dc:	2301      	movs	r3, #1
 80030de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_RCC_OscConfig+0x508>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d118      	bne.n	800311e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCC_OscConfig+0x508>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <HAL_RCC_OscConfig+0x508>)
 80030f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f8:	f7fe fc92 	bl	8001a20 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003100:	f7fe fc8e 	bl	8001a20 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e17a      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_RCC_OscConfig+0x508>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d108      	bne.n	8003138 <HAL_RCC_OscConfig+0x4d8>
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003136:	e029      	b.n	800318c <HAL_RCC_OscConfig+0x52c>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b05      	cmp	r3, #5
 800313e:	d115      	bne.n	800316c <HAL_RCC_OscConfig+0x50c>
 8003140:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	4a03      	ldr	r2, [pc, #12]	; (8003164 <HAL_RCC_OscConfig+0x504>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003160:	e014      	b.n	800318c <HAL_RCC_OscConfig+0x52c>
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	40007000 	.word	0x40007000
 800316c:	4b9c      	ldr	r3, [pc, #624]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	4a9b      	ldr	r2, [pc, #620]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800317c:	4b98      	ldr	r3, [pc, #608]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	4a97      	ldr	r2, [pc, #604]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d016      	beq.n	80031c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003194:	f7fe fc44 	bl	8001a20 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7fe fc40 	bl	8001a20 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e12a      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b2:	4b8b      	ldr	r3, [pc, #556]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80031b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0ed      	beq.n	800319c <HAL_RCC_OscConfig+0x53c>
 80031c0:	e015      	b.n	80031ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c2:	f7fe fc2d 	bl	8001a20 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe fc29 	bl	8001a20 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e113      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031e0:	4b7f      	ldr	r3, [pc, #508]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1ed      	bne.n	80031ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ee:	7ffb      	ldrb	r3, [r7, #31]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f4:	4b7a      	ldr	r3, [pc, #488]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	4a79      	ldr	r2, [pc, #484]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80031fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80fe 	beq.w	8003406 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	2b02      	cmp	r3, #2
 8003210:	f040 80d0 	bne.w	80033b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003214:	4b72      	ldr	r3, [pc, #456]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 0203 	and.w	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	429a      	cmp	r2, r3
 8003226:	d130      	bne.n	800328a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	3b01      	subs	r3, #1
 8003234:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d127      	bne.n	800328a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d11f      	bne.n	800328a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003254:	2a07      	cmp	r2, #7
 8003256:	bf14      	ite	ne
 8003258:	2201      	movne	r2, #1
 800325a:	2200      	moveq	r2, #0
 800325c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800325e:	4293      	cmp	r3, r2
 8003260:	d113      	bne.n	800328a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	085b      	lsrs	r3, r3, #1
 800326e:	3b01      	subs	r3, #1
 8003270:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d109      	bne.n	800328a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	3b01      	subs	r3, #1
 8003284:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d06e      	beq.n	8003368 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b0c      	cmp	r3, #12
 800328e:	d069      	beq.n	8003364 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0ad      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032ac:	4b4c      	ldr	r3, [pc, #304]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a4b      	ldr	r2, [pc, #300]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80032b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032b8:	f7fe fbb2 	bl	8001a20 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe fbae 	bl	8001a20 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e09a      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d2:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032de:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <HAL_RCC_OscConfig+0x784>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ee:	3a01      	subs	r2, #1
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	4311      	orrs	r1, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032f8:	0212      	lsls	r2, r2, #8
 80032fa:	4311      	orrs	r1, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003300:	0852      	lsrs	r2, r2, #1
 8003302:	3a01      	subs	r2, #1
 8003304:	0552      	lsls	r2, r2, #21
 8003306:	4311      	orrs	r1, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800330c:	0852      	lsrs	r2, r2, #1
 800330e:	3a01      	subs	r2, #1
 8003310:	0652      	lsls	r2, r2, #25
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003318:	0912      	lsrs	r2, r2, #4
 800331a:	0452      	lsls	r2, r2, #17
 800331c:	430a      	orrs	r2, r1
 800331e:	4930      	ldr	r1, [pc, #192]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003320:	4313      	orrs	r3, r2
 8003322:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003324:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a2d      	ldr	r2, [pc, #180]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a2a      	ldr	r2, [pc, #168]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800333c:	f7fe fb70 	bl	8001a20 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7fe fb6c 	bl	8001a20 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e058      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003362:	e050      	b.n	8003406 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e04f      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d148      	bne.n	8003406 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 8003386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800338c:	f7fe fb48 	bl	8001a20 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fb44 	bl	8001a20 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e030      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a6:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x734>
 80033b2:	e028      	b.n	8003406 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	2b0c      	cmp	r3, #12
 80033b8:	d023      	beq.n	8003402 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <HAL_RCC_OscConfig+0x780>)
 80033c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fe fb2b 	bl	8001a20 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033cc:	e00c      	b.n	80033e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ce:	f7fe fb27 	bl	8001a20 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d905      	bls.n	80033e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e013      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
 80033e0:	40021000 	.word	0x40021000
 80033e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_RCC_OscConfig+0x7b0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ec      	bne.n	80033ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_OscConfig+0x7b0>)
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	4905      	ldr	r1, [pc, #20]	; (8003410 <HAL_RCC_OscConfig+0x7b0>)
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_OscConfig+0x7b4>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	60cb      	str	r3, [r1, #12]
 8003400:	e001      	b.n	8003406 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000
 8003414:	feeefffc 	.word	0xfeeefffc

08003418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0e7      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b75      	ldr	r3, [pc, #468]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d910      	bls.n	800345c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b72      	ldr	r3, [pc, #456]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 0207 	bic.w	r2, r3, #7
 8003442:	4970      	ldr	r1, [pc, #448]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	4313      	orrs	r3, r2
 8003448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b6e      	ldr	r3, [pc, #440]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0cf      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d010      	beq.n	800348a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	4b66      	ldr	r3, [pc, #408]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003474:	429a      	cmp	r2, r3
 8003476:	d908      	bls.n	800348a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	4b63      	ldr	r3, [pc, #396]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4960      	ldr	r1, [pc, #384]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d04c      	beq.n	8003530 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d107      	bne.n	80034ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d121      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0a6      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b6:	4b54      	ldr	r3, [pc, #336]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d115      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e09a      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034ce:	4b4e      	ldr	r3, [pc, #312]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e08e      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034de:	4b4a      	ldr	r3, [pc, #296]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e086      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ee:	4b46      	ldr	r3, [pc, #280]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f023 0203 	bic.w	r2, r3, #3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4943      	ldr	r1, [pc, #268]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003500:	f7fe fa8e 	bl	8001a20 <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	e00a      	b.n	800351e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003508:	f7fe fa8a 	bl	8001a20 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e06e      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 020c 	and.w	r2, r3, #12
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	429a      	cmp	r2, r3
 800352e:	d1eb      	bne.n	8003508 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003548:	429a      	cmp	r2, r3
 800354a:	d208      	bcs.n	800355e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b2e      	ldr	r3, [pc, #184]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	492b      	ldr	r1, [pc, #172]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d210      	bcs.n	800358e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 0207 	bic.w	r2, r3, #7
 8003574:	4923      	ldr	r1, [pc, #140]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <HAL_RCC_ClockConfig+0x1ec>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d001      	beq.n	800358e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e036      	b.n	80035fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d008      	beq.n	80035ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	4918      	ldr	r1, [pc, #96]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4910      	ldr	r1, [pc, #64]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035cc:	f000 f824 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	490b      	ldr	r1, [pc, #44]	; (800360c <HAL_RCC_ClockConfig+0x1f4>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	4a09      	ldr	r2, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1f8>)
 80035ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_ClockConfig+0x1fc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe f9c5 	bl	8001980 <HAL_InitTick>
 80035f6:	4603      	mov	r3, r0
 80035f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80035fa:	7afb      	ldrb	r3, [r7, #11]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40022000 	.word	0x40022000
 8003608:	40021000 	.word	0x40021000
 800360c:	08009adc 	.word	0x08009adc
 8003610:	20000000 	.word	0x20000000
 8003614:	20000004 	.word	0x20000004

08003618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	b089      	sub	sp, #36	; 0x24
 800361c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003626:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x34>
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d121      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d11e      	bne.n	800368a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d107      	bne.n	8003668 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 800365a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e005      	b.n	8003674 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003674:	4a2b      	ldr	r2, [pc, #172]	; (8003724 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10d      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003688:	e00a      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d102      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <HAL_RCC_GetSysClockFreq+0x110>)
 8003692:	61bb      	str	r3, [r7, #24]
 8003694:	e004      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800369c:	4b23      	ldr	r3, [pc, #140]	; (800372c <HAL_RCC_GetSysClockFreq+0x114>)
 800369e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d134      	bne.n	8003710 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036a6:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d003      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0xa6>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d003      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0xac>
 80036bc:	e005      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_RCC_GetSysClockFreq+0x110>)
 80036c0:	617b      	str	r3, [r7, #20]
      break;
 80036c2:	e005      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036c4:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_RCC_GetSysClockFreq+0x114>)
 80036c6:	617b      	str	r3, [r7, #20]
      break;
 80036c8:	e002      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	617b      	str	r3, [r7, #20]
      break;
 80036ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	3301      	adds	r3, #1
 80036dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	0a1b      	lsrs	r3, r3, #8
 80036e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	fb03 f202 	mul.w	r2, r3, r2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	0e5b      	lsrs	r3, r3, #25
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	3301      	adds	r3, #1
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003710:	69bb      	ldr	r3, [r7, #24]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	; 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	08009af4 	.word	0x08009af4
 8003728:	00f42400 	.word	0x00f42400
 800372c:	007a1200 	.word	0x007a1200

08003730 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <HAL_RCC_GetHCLKFreq+0x14>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000000 	.word	0x20000000

08003748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800374c:	f7ff fff0 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003750:	4602      	mov	r2, r0
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	4904      	ldr	r1, [pc, #16]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800375e:	5ccb      	ldrb	r3, [r1, r3]
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000
 8003770:	08009aec 	.word	0x08009aec

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003778:	f7ff ffda 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0adb      	lsrs	r3, r3, #11
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4904      	ldr	r1, [pc, #16]	; (800379c <HAL_RCC_GetPCLK2Freq+0x28>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	08009aec 	.word	0x08009aec

080037a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037a8:	2300      	movs	r3, #0
 80037aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037ac:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037b8:	f7ff f9ee 	bl	8002b98 <HAL_PWREx_GetVoltageRange>
 80037bc:	6178      	str	r0, [r7, #20]
 80037be:	e014      	b.n	80037ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	4a24      	ldr	r2, [pc, #144]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ca:	6593      	str	r3, [r2, #88]	; 0x58
 80037cc:	4b22      	ldr	r3, [pc, #136]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037d8:	f7ff f9de 	bl	8002b98 <HAL_PWREx_GetVoltageRange>
 80037dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037de:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	4a1d      	ldr	r2, [pc, #116]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f0:	d10b      	bne.n	800380a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d919      	bls.n	800382c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2ba0      	cmp	r3, #160	; 0xa0
 80037fc:	d902      	bls.n	8003804 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037fe:	2302      	movs	r3, #2
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	e013      	b.n	800382c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003804:	2301      	movs	r3, #1
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	e010      	b.n	800382c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b80      	cmp	r3, #128	; 0x80
 800380e:	d902      	bls.n	8003816 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003810:	2303      	movs	r3, #3
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	e00a      	b.n	800382c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b80      	cmp	r3, #128	; 0x80
 800381a:	d102      	bne.n	8003822 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800381c:	2302      	movs	r3, #2
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	e004      	b.n	800382c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b70      	cmp	r3, #112	; 0x70
 8003826:	d101      	bne.n	800382c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003828:	2301      	movs	r3, #1
 800382a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f023 0207 	bic.w	r2, r3, #7
 8003834:	4909      	ldr	r1, [pc, #36]	; (800385c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	429a      	cmp	r2, r3
 8003848:	d001      	beq.n	800384e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	40022000 	.word	0x40022000

08003860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003868:	2300      	movs	r3, #0
 800386a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800386c:	2300      	movs	r3, #0
 800386e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003878:	2b00      	cmp	r3, #0
 800387a:	d041      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003880:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003884:	d02a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003886:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800388a:	d824      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800388c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003890:	d008      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003896:	d81e      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800389c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a0:	d010      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038a2:	e018      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038a4:	4b86      	ldr	r3, [pc, #536]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a85      	ldr	r2, [pc, #532]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038b0:	e015      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fabb 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038c2:	e00c      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3320      	adds	r3, #32
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fba6 	bl	800401c <RCCEx_PLLSAI2_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038d4:	e003      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	74fb      	strb	r3, [r7, #19]
      break;
 80038da:	e000      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038de:	7cfb      	ldrb	r3, [r7, #19]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038e4:	4b76      	ldr	r3, [pc, #472]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f2:	4973      	ldr	r1, [pc, #460]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038fa:	e001      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d041      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003910:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003914:	d02a      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003916:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800391a:	d824      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800391c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003920:	d008      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003926:	d81e      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800392c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003930:	d010      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003932:	e018      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003934:	4b62      	ldr	r3, [pc, #392]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4a61      	ldr	r2, [pc, #388]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800393a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003940:	e015      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fa73 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003952:	e00c      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3320      	adds	r3, #32
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fb5e 	bl	800401c <RCCEx_PLLSAI2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003964:	e003      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	74fb      	strb	r3, [r7, #19]
      break;
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800396c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003974:	4b52      	ldr	r3, [pc, #328]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003982:	494f      	ldr	r1, [pc, #316]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800398a:	e001      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80a0 	beq.w	8003ade <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039a2:	4b47      	ldr	r3, [pc, #284]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b8:	4b41      	ldr	r3, [pc, #260]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039bc:	4a40      	ldr	r2, [pc, #256]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6593      	str	r3, [r2, #88]	; 0x58
 80039c4:	4b3e      	ldr	r3, [pc, #248]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d0:	2301      	movs	r3, #1
 80039d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d4:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e0:	f7fe f81e 	bl	8001a20 <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039e6:	e009      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e8:	f7fe f81a 	bl	8001a20 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d902      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	74fb      	strb	r3, [r7, #19]
        break;
 80039fa:	e005      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039fc:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ef      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d15c      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01f      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d019      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a2c:	4b24      	ldr	r3, [pc, #144]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a38:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	4a20      	ldr	r2, [pc, #128]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a58:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd ffd9 	bl	8001a20 <HAL_GetTick>
 8003a6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a70:	e00b      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fd ffd5 	bl	8001a20 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d902      	bls.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	74fb      	strb	r3, [r7, #19]
            break;
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ec      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10c      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aae:	4904      	ldr	r1, [pc, #16]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	74bb      	strb	r3, [r7, #18]
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003acc:	7c7b      	ldrb	r3, [r7, #17]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4b9e      	ldr	r3, [pc, #632]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	4a9d      	ldr	r2, [pc, #628]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003adc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aea:	4b98      	ldr	r3, [pc, #608]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af0:	f023 0203 	bic.w	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	4994      	ldr	r1, [pc, #592]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b0c:	4b8f      	ldr	r3, [pc, #572]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b12:	f023 020c 	bic.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	498c      	ldr	r1, [pc, #560]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b2e:	4b87      	ldr	r3, [pc, #540]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	4983      	ldr	r1, [pc, #524]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b50:	4b7e      	ldr	r3, [pc, #504]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	497b      	ldr	r1, [pc, #492]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b72:	4b76      	ldr	r3, [pc, #472]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	4972      	ldr	r1, [pc, #456]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b94:	4b6d      	ldr	r3, [pc, #436]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	496a      	ldr	r1, [pc, #424]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bb6:	4b65      	ldr	r3, [pc, #404]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc4:	4961      	ldr	r1, [pc, #388]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bd8:	4b5c      	ldr	r3, [pc, #368]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be6:	4959      	ldr	r1, [pc, #356]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bfa:	4b54      	ldr	r3, [pc, #336]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c08:	4950      	ldr	r1, [pc, #320]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c1c:	4b4b      	ldr	r3, [pc, #300]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	4948      	ldr	r1, [pc, #288]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c3e:	4b43      	ldr	r3, [pc, #268]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	493f      	ldr	r1, [pc, #252]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d028      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c60:	4b3a      	ldr	r3, [pc, #232]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6e:	4937      	ldr	r1, [pc, #220]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8a:	60d3      	str	r3, [r2, #12]
 8003c8c:	e011      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c96:	d10c      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f8c8 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d028      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ccc:	491f      	ldr	r1, [pc, #124]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cdc:	d106      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cde:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce8:	60d3      	str	r3, [r2, #12]
 8003cea:	e011      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f899 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d06:	7cfb      	ldrb	r3, [r7, #19]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d0c:	7cfb      	ldrb	r3, [r7, #19]
 8003d0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d02b      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2a:	4908      	ldr	r1, [pc, #32]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3a:	d109      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4a02      	ldr	r2, [pc, #8]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d46:	60d3      	str	r3, [r2, #12]
 8003d48:	e014      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f867 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d70:	7cfb      	ldrb	r3, [r7, #19]
 8003d72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d02f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8e:	4928      	ldr	r1, [pc, #160]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3304      	adds	r3, #4
 8003da4:	2102      	movs	r1, #2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f844 	bl	8003e34 <RCCEx_PLLSAI1_Config>
 8003dac:	4603      	mov	r3, r0
 8003dae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db0:	7cfb      	ldrb	r3, [r7, #19]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d014      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003db6:	7cfb      	ldrb	r3, [r7, #19]
 8003db8:	74bb      	strb	r3, [r7, #18]
 8003dba:	e011      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3320      	adds	r3, #32
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 f925 	bl	800401c <RCCEx_PLLSAI2_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00a      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfa:	490d      	ldr	r1, [pc, #52]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e0e:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e1e:	4904      	ldr	r1, [pc, #16]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e26:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000

08003e34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e42:	4b75      	ldr	r3, [pc, #468]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d018      	beq.n	8003e80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e4e:	4b72      	ldr	r3, [pc, #456]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0203 	and.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d10d      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
       ||
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e66:	4b6c      	ldr	r3, [pc, #432]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
       ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d047      	beq.n	8003f0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
 8003e7e:	e044      	b.n	8003f0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d018      	beq.n	8003eba <RCCEx_PLLSAI1_Config+0x86>
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d825      	bhi.n	8003ed8 <RCCEx_PLLSAI1_Config+0xa4>
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d002      	beq.n	8003e96 <RCCEx_PLLSAI1_Config+0x62>
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d009      	beq.n	8003ea8 <RCCEx_PLLSAI1_Config+0x74>
 8003e94:	e020      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e96:	4b60      	ldr	r3, [pc, #384]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11d      	bne.n	8003ede <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea6:	e01a      	b.n	8003ede <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ea8:	4b5b      	ldr	r3, [pc, #364]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d116      	bne.n	8003ee2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb8:	e013      	b.n	8003ee2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003eba:	4b57      	ldr	r3, [pc, #348]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ec6:	4b54      	ldr	r3, [pc, #336]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ed6:	e006      	b.n	8003ee6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      break;
 8003edc:	e004      	b.n	8003ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ede:	bf00      	nop
 8003ee0:	e002      	b.n	8003ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ee6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10d      	bne.n	8003f0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003eee:	4b4a      	ldr	r3, [pc, #296]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6819      	ldr	r1, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	430b      	orrs	r3, r1
 8003f04:	4944      	ldr	r1, [pc, #272]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d17d      	bne.n	800400c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f10:	4b41      	ldr	r3, [pc, #260]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a40      	ldr	r2, [pc, #256]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1c:	f7fd fd80 	bl	8001a20 <HAL_GetTick>
 8003f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f22:	e009      	b.n	8003f38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f24:	f7fd fd7c 	bl	8001a20 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d902      	bls.n	8003f38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	73fb      	strb	r3, [r7, #15]
        break;
 8003f36:	e005      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f38:	4b37      	ldr	r3, [pc, #220]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ef      	bne.n	8003f24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d160      	bne.n	800400c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d111      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f50:	4b31      	ldr	r3, [pc, #196]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6892      	ldr	r2, [r2, #8]
 8003f60:	0211      	lsls	r1, r2, #8
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68d2      	ldr	r2, [r2, #12]
 8003f66:	0912      	lsrs	r2, r2, #4
 8003f68:	0452      	lsls	r2, r2, #17
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	492a      	ldr	r1, [pc, #168]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	610b      	str	r3, [r1, #16]
 8003f72:	e027      	b.n	8003fc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d112      	bne.n	8003fa0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f7a:	4b27      	ldr	r3, [pc, #156]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6892      	ldr	r2, [r2, #8]
 8003f8a:	0211      	lsls	r1, r2, #8
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6912      	ldr	r2, [r2, #16]
 8003f90:	0852      	lsrs	r2, r2, #1
 8003f92:	3a01      	subs	r2, #1
 8003f94:	0552      	lsls	r2, r2, #21
 8003f96:	430a      	orrs	r2, r1
 8003f98:	491f      	ldr	r1, [pc, #124]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	610b      	str	r3, [r1, #16]
 8003f9e:	e011      	b.n	8003fc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6892      	ldr	r2, [r2, #8]
 8003fb0:	0211      	lsls	r1, r2, #8
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6952      	ldr	r2, [r2, #20]
 8003fb6:	0852      	lsrs	r2, r2, #1
 8003fb8:	3a01      	subs	r2, #1
 8003fba:	0652      	lsls	r2, r2, #25
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	4916      	ldr	r1, [pc, #88]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fc4:	4b14      	ldr	r3, [pc, #80]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a13      	ldr	r2, [pc, #76]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7fd fd26 	bl	8001a20 <HAL_GetTick>
 8003fd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fd6:	e009      	b.n	8003fec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fd8:	f7fd fd22 	bl	8001a20 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d902      	bls.n	8003fec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	73fb      	strb	r3, [r7, #15]
          break;
 8003fea:	e005      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ef      	beq.n	8003fd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004000:	691a      	ldr	r2, [r3, #16]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	4904      	ldr	r1, [pc, #16]	; (8004018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004008:	4313      	orrs	r3, r2
 800400a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40021000 	.word	0x40021000

0800401c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800402a:	4b6a      	ldr	r3, [pc, #424]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d018      	beq.n	8004068 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004036:	4b67      	ldr	r3, [pc, #412]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0203 	and.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d10d      	bne.n	8004062 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
       ||
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800404e:	4b61      	ldr	r3, [pc, #388]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
       ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d047      	beq.n	80040f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
 8004066:	e044      	b.n	80040f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d018      	beq.n	80040a2 <RCCEx_PLLSAI2_Config+0x86>
 8004070:	2b03      	cmp	r3, #3
 8004072:	d825      	bhi.n	80040c0 <RCCEx_PLLSAI2_Config+0xa4>
 8004074:	2b01      	cmp	r3, #1
 8004076:	d002      	beq.n	800407e <RCCEx_PLLSAI2_Config+0x62>
 8004078:	2b02      	cmp	r3, #2
 800407a:	d009      	beq.n	8004090 <RCCEx_PLLSAI2_Config+0x74>
 800407c:	e020      	b.n	80040c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800407e:	4b55      	ldr	r3, [pc, #340]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d11d      	bne.n	80040c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800408e:	e01a      	b.n	80040c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004090:	4b50      	ldr	r3, [pc, #320]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	2b00      	cmp	r3, #0
 800409a:	d116      	bne.n	80040ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a0:	e013      	b.n	80040ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040a2:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040ae:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040be:	e006      	b.n	80040ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      break;
 80040c4:	e004      	b.n	80040d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10d      	bne.n	80040f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040d6:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	430b      	orrs	r3, r1
 80040ec:	4939      	ldr	r1, [pc, #228]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d167      	bne.n	80041c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040f8:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a35      	ldr	r2, [pc, #212]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004104:	f7fd fc8c 	bl	8001a20 <HAL_GetTick>
 8004108:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800410a:	e009      	b.n	8004120 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800410c:	f7fd fc88 	bl	8001a20 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d902      	bls.n	8004120 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	73fb      	strb	r3, [r7, #15]
        break;
 800411e:	e005      	b.n	800412c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004120:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ef      	bne.n	800410c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d14a      	bne.n	80041c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d111      	bne.n	800415c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004138:	4b26      	ldr	r3, [pc, #152]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6892      	ldr	r2, [r2, #8]
 8004148:	0211      	lsls	r1, r2, #8
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68d2      	ldr	r2, [r2, #12]
 800414e:	0912      	lsrs	r2, r2, #4
 8004150:	0452      	lsls	r2, r2, #17
 8004152:	430a      	orrs	r2, r1
 8004154:	491f      	ldr	r1, [pc, #124]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004156:	4313      	orrs	r3, r2
 8004158:	614b      	str	r3, [r1, #20]
 800415a:	e011      	b.n	8004180 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004164:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6892      	ldr	r2, [r2, #8]
 800416c:	0211      	lsls	r1, r2, #8
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6912      	ldr	r2, [r2, #16]
 8004172:	0852      	lsrs	r2, r2, #1
 8004174:	3a01      	subs	r2, #1
 8004176:	0652      	lsls	r2, r2, #25
 8004178:	430a      	orrs	r2, r1
 800417a:	4916      	ldr	r1, [pc, #88]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417c:	4313      	orrs	r3, r2
 800417e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd fc48 	bl	8001a20 <HAL_GetTick>
 8004190:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004192:	e009      	b.n	80041a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004194:	f7fd fc44 	bl	8001a20 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d902      	bls.n	80041a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	73fb      	strb	r3, [r7, #15]
          break;
 80041a6:	e005      	b.n	80041b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041a8:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0ef      	beq.n	8004194 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4904      	ldr	r1, [pc, #16]	; (80041d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000

080041d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e049      	b.n	800427e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd f9f8 	bl	80015f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3304      	adds	r3, #4
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f000 f8fe 	bl	8004418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_TIM_ConfigClockSource+0x1c>
 800429e:	2302      	movs	r3, #2
 80042a0:	e0b6      	b.n	8004410 <HAL_TIM_ConfigClockSource+0x18a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042cc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042de:	d03e      	beq.n	800435e <HAL_TIM_ConfigClockSource+0xd8>
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e4:	f200 8087 	bhi.w	80043f6 <HAL_TIM_ConfigClockSource+0x170>
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ec:	f000 8086 	beq.w	80043fc <HAL_TIM_ConfigClockSource+0x176>
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f4:	d87f      	bhi.n	80043f6 <HAL_TIM_ConfigClockSource+0x170>
 80042f6:	2b70      	cmp	r3, #112	; 0x70
 80042f8:	d01a      	beq.n	8004330 <HAL_TIM_ConfigClockSource+0xaa>
 80042fa:	2b70      	cmp	r3, #112	; 0x70
 80042fc:	d87b      	bhi.n	80043f6 <HAL_TIM_ConfigClockSource+0x170>
 80042fe:	2b60      	cmp	r3, #96	; 0x60
 8004300:	d050      	beq.n	80043a4 <HAL_TIM_ConfigClockSource+0x11e>
 8004302:	2b60      	cmp	r3, #96	; 0x60
 8004304:	d877      	bhi.n	80043f6 <HAL_TIM_ConfigClockSource+0x170>
 8004306:	2b50      	cmp	r3, #80	; 0x50
 8004308:	d03c      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0xfe>
 800430a:	2b50      	cmp	r3, #80	; 0x50
 800430c:	d873      	bhi.n	80043f6 <HAL_TIM_ConfigClockSource+0x170>
 800430e:	2b40      	cmp	r3, #64	; 0x40
 8004310:	d058      	beq.n	80043c4 <HAL_TIM_ConfigClockSource+0x13e>
 8004312:	2b40      	cmp	r3, #64	; 0x40
 8004314:	d86f      	bhi.n	80043f6 <HAL_TIM_ConfigClockSource+0x170>
 8004316:	2b30      	cmp	r3, #48	; 0x30
 8004318:	d064      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x15e>
 800431a:	2b30      	cmp	r3, #48	; 0x30
 800431c:	d86b      	bhi.n	80043f6 <HAL_TIM_ConfigClockSource+0x170>
 800431e:	2b20      	cmp	r3, #32
 8004320:	d060      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x15e>
 8004322:	2b20      	cmp	r3, #32
 8004324:	d867      	bhi.n	80043f6 <HAL_TIM_ConfigClockSource+0x170>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d05c      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x15e>
 800432a:	2b10      	cmp	r3, #16
 800432c:	d05a      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x15e>
 800432e:	e062      	b.n	80043f6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004340:	f000 f97e 	bl	8004640 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004352:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	609a      	str	r2, [r3, #8]
      break;
 800435c:	e04f      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800436e:	f000 f967 	bl	8004640 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004380:	609a      	str	r2, [r3, #8]
      break;
 8004382:	e03c      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004390:	461a      	mov	r2, r3
 8004392:	f000 f8db 	bl	800454c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2150      	movs	r1, #80	; 0x50
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f934 	bl	800460a <TIM_ITRx_SetConfig>
      break;
 80043a2:	e02c      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b0:	461a      	mov	r2, r3
 80043b2:	f000 f8fa 	bl	80045aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2160      	movs	r1, #96	; 0x60
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f924 	bl	800460a <TIM_ITRx_SetConfig>
      break;
 80043c2:	e01c      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d0:	461a      	mov	r2, r3
 80043d2:	f000 f8bb 	bl	800454c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2140      	movs	r1, #64	; 0x40
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 f914 	bl	800460a <TIM_ITRx_SetConfig>
      break;
 80043e2:	e00c      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f000 f90b 	bl	800460a <TIM_ITRx_SetConfig>
      break;
 80043f4:	e003      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
      break;
 80043fa:	e000      	b.n	80043fe <HAL_TIM_ConfigClockSource+0x178>
      break;
 80043fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a40      	ldr	r2, [pc, #256]	; (800452c <TIM_Base_SetConfig+0x114>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d013      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004436:	d00f      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a3d      	ldr	r2, [pc, #244]	; (8004530 <TIM_Base_SetConfig+0x118>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00b      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a3c      	ldr	r2, [pc, #240]	; (8004534 <TIM_Base_SetConfig+0x11c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d007      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <TIM_Base_SetConfig+0x120>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a3a      	ldr	r2, [pc, #232]	; (800453c <TIM_Base_SetConfig+0x124>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d108      	bne.n	800446a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2f      	ldr	r2, [pc, #188]	; (800452c <TIM_Base_SetConfig+0x114>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01f      	beq.n	80044b2 <TIM_Base_SetConfig+0x9a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d01b      	beq.n	80044b2 <TIM_Base_SetConfig+0x9a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <TIM_Base_SetConfig+0x118>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d017      	beq.n	80044b2 <TIM_Base_SetConfig+0x9a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <TIM_Base_SetConfig+0x11c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <TIM_Base_SetConfig+0x9a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <TIM_Base_SetConfig+0x120>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00f      	beq.n	80044b2 <TIM_Base_SetConfig+0x9a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a29      	ldr	r2, [pc, #164]	; (800453c <TIM_Base_SetConfig+0x124>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00b      	beq.n	80044b2 <TIM_Base_SetConfig+0x9a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a28      	ldr	r2, [pc, #160]	; (8004540 <TIM_Base_SetConfig+0x128>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d007      	beq.n	80044b2 <TIM_Base_SetConfig+0x9a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a27      	ldr	r2, [pc, #156]	; (8004544 <TIM_Base_SetConfig+0x12c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d003      	beq.n	80044b2 <TIM_Base_SetConfig+0x9a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <TIM_Base_SetConfig+0x130>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d108      	bne.n	80044c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a10      	ldr	r2, [pc, #64]	; (800452c <TIM_Base_SetConfig+0x114>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00f      	beq.n	8004510 <TIM_Base_SetConfig+0xf8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a12      	ldr	r2, [pc, #72]	; (800453c <TIM_Base_SetConfig+0x124>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00b      	beq.n	8004510 <TIM_Base_SetConfig+0xf8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a11      	ldr	r2, [pc, #68]	; (8004540 <TIM_Base_SetConfig+0x128>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d007      	beq.n	8004510 <TIM_Base_SetConfig+0xf8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <TIM_Base_SetConfig+0x12c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0xf8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <TIM_Base_SetConfig+0x130>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d103      	bne.n	8004518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	615a      	str	r2, [r3, #20]
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40012c00 	.word	0x40012c00
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40013400 	.word	0x40013400
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800

0800454c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f023 030a 	bic.w	r3, r3, #10
 8004588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	621a      	str	r2, [r3, #32]
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b087      	sub	sp, #28
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0210 	bic.w	r2, r3, #16
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	031b      	lsls	r3, r3, #12
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	f043 0307 	orr.w	r3, r3, #7
 800462c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	609a      	str	r2, [r3, #8]
}
 8004634:	bf00      	nop
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	021a      	lsls	r2, r3, #8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	431a      	orrs	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4313      	orrs	r3, r2
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	bf00      	nop
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004694:	2302      	movs	r3, #2
 8004696:	e068      	b.n	800476a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a2e      	ldr	r2, [pc, #184]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a2d      	ldr	r2, [pc, #180]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d108      	bne.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01d      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d018      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a18      	ldr	r2, [pc, #96]	; (8004788 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d009      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a14      	ldr	r2, [pc, #80]	; (800478c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d10c      	bne.n	8004758 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	4313      	orrs	r3, r2
 800474e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40013400 	.word	0x40013400
 8004780:	40000400 	.word	0x40000400
 8004784:	40000800 	.word	0x40000800
 8004788:	40000c00 	.word	0x40000c00
 800478c:	40014000 	.word	0x40014000

08004790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e040      	b.n	8004824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc ff3c 	bl	8001630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2224      	movs	r2, #36	; 0x24
 80047bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8c0 	bl	8004954 <UART_SetConfig>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e022      	b.n	8004824 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 fb6c 	bl	8004ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800480a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fbf3 	bl	8005008 <UART_CheckIdleState>
 8004822:	4603      	mov	r3, r0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004840:	2b20      	cmp	r3, #32
 8004842:	f040 8082 	bne.w	800494a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_UART_Transmit+0x26>
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e07a      	b.n	800494c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_UART_Transmit+0x38>
 8004860:	2302      	movs	r3, #2
 8004862:	e073      	b.n	800494c <HAL_UART_Transmit+0x120>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2221      	movs	r2, #33	; 0x21
 8004878:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800487a:	f7fd f8d1 	bl	8001a20 <HAL_GetTick>
 800487e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004898:	d108      	bne.n	80048ac <HAL_UART_Transmit+0x80>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e003      	b.n	80048b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80048bc:	e02d      	b.n	800491a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2200      	movs	r2, #0
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 fbe6 	bl	800509a <UART_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e039      	b.n	800494c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	881a      	ldrh	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ea:	b292      	uxth	r2, r2
 80048ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	3302      	adds	r3, #2
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e008      	b.n	8004908 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	b292      	uxth	r2, r2
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3301      	adds	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1cb      	bne.n	80048be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	9300      	str	r3, [sp, #0]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2200      	movs	r2, #0
 800492e:	2140      	movs	r1, #64	; 0x40
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 fbb2 	bl	800509a <UART_WaitOnFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e005      	b.n	800494c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e000      	b.n	800494c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800494a:	2302      	movs	r3, #2
  }
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004958:	b08a      	sub	sp, #40	; 0x28
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	431a      	orrs	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	431a      	orrs	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	4313      	orrs	r3, r2
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4ba4      	ldr	r3, [pc, #656]	; (8004c14 <UART_SetConfig+0x2c0>)
 8004984:	4013      	ands	r3, r2
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800498c:	430b      	orrs	r3, r1
 800498e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a99      	ldr	r2, [pc, #612]	; (8004c18 <UART_SetConfig+0x2c4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	4313      	orrs	r3, r2
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d0:	430a      	orrs	r2, r1
 80049d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a90      	ldr	r2, [pc, #576]	; (8004c1c <UART_SetConfig+0x2c8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d126      	bne.n	8004a2c <UART_SetConfig+0xd8>
 80049de:	4b90      	ldr	r3, [pc, #576]	; (8004c20 <UART_SetConfig+0x2cc>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d81b      	bhi.n	8004a24 <UART_SetConfig+0xd0>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <UART_SetConfig+0xa0>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a15 	.word	0x08004a15
 80049fc:	08004a0d 	.word	0x08004a0d
 8004a00:	08004a1d 	.word	0x08004a1d
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e116      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e112      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004a14:	2304      	movs	r3, #4
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e10e      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a22:	e10a      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004a24:	2310      	movs	r3, #16
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2a:	e106      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a7c      	ldr	r2, [pc, #496]	; (8004c24 <UART_SetConfig+0x2d0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d138      	bne.n	8004aa8 <UART_SetConfig+0x154>
 8004a36:	4b7a      	ldr	r3, [pc, #488]	; (8004c20 <UART_SetConfig+0x2cc>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b0c      	cmp	r3, #12
 8004a42:	d82d      	bhi.n	8004aa0 <UART_SetConfig+0x14c>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <UART_SetConfig+0xf8>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004aa1 	.word	0x08004aa1
 8004a54:	08004aa1 	.word	0x08004aa1
 8004a58:	08004aa1 	.word	0x08004aa1
 8004a5c:	08004a91 	.word	0x08004a91
 8004a60:	08004aa1 	.word	0x08004aa1
 8004a64:	08004aa1 	.word	0x08004aa1
 8004a68:	08004aa1 	.word	0x08004aa1
 8004a6c:	08004a89 	.word	0x08004a89
 8004a70:	08004aa1 	.word	0x08004aa1
 8004a74:	08004aa1 	.word	0x08004aa1
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004a99 	.word	0x08004a99
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a86:	e0d8      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8e:	e0d4      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a96:	e0d0      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9e:	e0cc      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa6:	e0c8      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a5e      	ldr	r2, [pc, #376]	; (8004c28 <UART_SetConfig+0x2d4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d125      	bne.n	8004afe <UART_SetConfig+0x1aa>
 8004ab2:	4b5b      	ldr	r3, [pc, #364]	; (8004c20 <UART_SetConfig+0x2cc>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004abc:	2b30      	cmp	r3, #48	; 0x30
 8004abe:	d016      	beq.n	8004aee <UART_SetConfig+0x19a>
 8004ac0:	2b30      	cmp	r3, #48	; 0x30
 8004ac2:	d818      	bhi.n	8004af6 <UART_SetConfig+0x1a2>
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d00a      	beq.n	8004ade <UART_SetConfig+0x18a>
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d814      	bhi.n	8004af6 <UART_SetConfig+0x1a2>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <UART_SetConfig+0x182>
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d008      	beq.n	8004ae6 <UART_SetConfig+0x192>
 8004ad4:	e00f      	b.n	8004af6 <UART_SetConfig+0x1a2>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004adc:	e0ad      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae4:	e0a9      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aec:	e0a5      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004aee:	2308      	movs	r3, #8
 8004af0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af4:	e0a1      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004af6:	2310      	movs	r3, #16
 8004af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afc:	e09d      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a4a      	ldr	r2, [pc, #296]	; (8004c2c <UART_SetConfig+0x2d8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d125      	bne.n	8004b54 <UART_SetConfig+0x200>
 8004b08:	4b45      	ldr	r3, [pc, #276]	; (8004c20 <UART_SetConfig+0x2cc>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b12:	2bc0      	cmp	r3, #192	; 0xc0
 8004b14:	d016      	beq.n	8004b44 <UART_SetConfig+0x1f0>
 8004b16:	2bc0      	cmp	r3, #192	; 0xc0
 8004b18:	d818      	bhi.n	8004b4c <UART_SetConfig+0x1f8>
 8004b1a:	2b80      	cmp	r3, #128	; 0x80
 8004b1c:	d00a      	beq.n	8004b34 <UART_SetConfig+0x1e0>
 8004b1e:	2b80      	cmp	r3, #128	; 0x80
 8004b20:	d814      	bhi.n	8004b4c <UART_SetConfig+0x1f8>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <UART_SetConfig+0x1d8>
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d008      	beq.n	8004b3c <UART_SetConfig+0x1e8>
 8004b2a:	e00f      	b.n	8004b4c <UART_SetConfig+0x1f8>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b32:	e082      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004b34:	2302      	movs	r3, #2
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e07e      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e07a      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004b44:	2308      	movs	r3, #8
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4a:	e076      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b52:	e072      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a35      	ldr	r2, [pc, #212]	; (8004c30 <UART_SetConfig+0x2dc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d12a      	bne.n	8004bb4 <UART_SetConfig+0x260>
 8004b5e:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <UART_SetConfig+0x2cc>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b6c:	d01a      	beq.n	8004ba4 <UART_SetConfig+0x250>
 8004b6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b72:	d81b      	bhi.n	8004bac <UART_SetConfig+0x258>
 8004b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b78:	d00c      	beq.n	8004b94 <UART_SetConfig+0x240>
 8004b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7e:	d815      	bhi.n	8004bac <UART_SetConfig+0x258>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <UART_SetConfig+0x238>
 8004b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b88:	d008      	beq.n	8004b9c <UART_SetConfig+0x248>
 8004b8a:	e00f      	b.n	8004bac <UART_SetConfig+0x258>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e052      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004b94:	2302      	movs	r3, #2
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e04e      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e04a      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004ba4:	2308      	movs	r3, #8
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e046      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004bac:	2310      	movs	r3, #16
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bb2:	e042      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <UART_SetConfig+0x2c4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d13a      	bne.n	8004c34 <UART_SetConfig+0x2e0>
 8004bbe:	4b18      	ldr	r3, [pc, #96]	; (8004c20 <UART_SetConfig+0x2cc>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bcc:	d01a      	beq.n	8004c04 <UART_SetConfig+0x2b0>
 8004bce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bd2:	d81b      	bhi.n	8004c0c <UART_SetConfig+0x2b8>
 8004bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd8:	d00c      	beq.n	8004bf4 <UART_SetConfig+0x2a0>
 8004bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bde:	d815      	bhi.n	8004c0c <UART_SetConfig+0x2b8>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <UART_SetConfig+0x298>
 8004be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be8:	d008      	beq.n	8004bfc <UART_SetConfig+0x2a8>
 8004bea:	e00f      	b.n	8004c0c <UART_SetConfig+0x2b8>
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e022      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e01e      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e01a      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004c04:	2308      	movs	r3, #8
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c0a:	e016      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c12:	e012      	b.n	8004c3a <UART_SetConfig+0x2e6>
 8004c14:	efff69f3 	.word	0xefff69f3
 8004c18:	40008000 	.word	0x40008000
 8004c1c:	40013800 	.word	0x40013800
 8004c20:	40021000 	.word	0x40021000
 8004c24:	40004400 	.word	0x40004400
 8004c28:	40004800 	.word	0x40004800
 8004c2c:	40004c00 	.word	0x40004c00
 8004c30:	40005000 	.word	0x40005000
 8004c34:	2310      	movs	r3, #16
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a9f      	ldr	r2, [pc, #636]	; (8004ebc <UART_SetConfig+0x568>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d17a      	bne.n	8004d3a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d824      	bhi.n	8004c96 <UART_SetConfig+0x342>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <UART_SetConfig+0x300>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c97 	.word	0x08004c97
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c97 	.word	0x08004c97
 8004c64:	08004c87 	.word	0x08004c87
 8004c68:	08004c97 	.word	0x08004c97
 8004c6c:	08004c97 	.word	0x08004c97
 8004c70:	08004c97 	.word	0x08004c97
 8004c74:	08004c8f 	.word	0x08004c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c78:	f7fe fd66 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8004c7c:	61f8      	str	r0, [r7, #28]
        break;
 8004c7e:	e010      	b.n	8004ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c80:	4b8f      	ldr	r3, [pc, #572]	; (8004ec0 <UART_SetConfig+0x56c>)
 8004c82:	61fb      	str	r3, [r7, #28]
        break;
 8004c84:	e00d      	b.n	8004ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c86:	f7fe fcc7 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8004c8a:	61f8      	str	r0, [r7, #28]
        break;
 8004c8c:	e009      	b.n	8004ca2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c92:	61fb      	str	r3, [r7, #28]
        break;
 8004c94:	e005      	b.n	8004ca2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ca0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80fb 	beq.w	8004ea0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	4413      	add	r3, r2
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d305      	bcc.n	8004cc6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d903      	bls.n	8004cce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ccc:	e0e8      	b.n	8004ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	461c      	mov	r4, r3
 8004cd4:	4615      	mov	r5, r2
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	022b      	lsls	r3, r5, #8
 8004ce0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ce4:	0222      	lsls	r2, r4, #8
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	6849      	ldr	r1, [r1, #4]
 8004cea:	0849      	lsrs	r1, r1, #1
 8004cec:	2000      	movs	r0, #0
 8004cee:	4688      	mov	r8, r1
 8004cf0:	4681      	mov	r9, r0
 8004cf2:	eb12 0a08 	adds.w	sl, r2, r8
 8004cf6:	eb43 0b09 	adc.w	fp, r3, r9
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	603b      	str	r3, [r7, #0]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d08:	4650      	mov	r0, sl
 8004d0a:	4659      	mov	r1, fp
 8004d0c:	f7fb ffbc 	bl	8000c88 <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4613      	mov	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d1e:	d308      	bcc.n	8004d32 <UART_SetConfig+0x3de>
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d26:	d204      	bcs.n	8004d32 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	60da      	str	r2, [r3, #12]
 8004d30:	e0b6      	b.n	8004ea0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d38:	e0b2      	b.n	8004ea0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d42:	d15e      	bne.n	8004e02 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d828      	bhi.n	8004d9e <UART_SetConfig+0x44a>
 8004d4c:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <UART_SetConfig+0x400>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004d81 	.word	0x08004d81
 8004d5c:	08004d89 	.word	0x08004d89
 8004d60:	08004d9f 	.word	0x08004d9f
 8004d64:	08004d8f 	.word	0x08004d8f
 8004d68:	08004d9f 	.word	0x08004d9f
 8004d6c:	08004d9f 	.word	0x08004d9f
 8004d70:	08004d9f 	.word	0x08004d9f
 8004d74:	08004d97 	.word	0x08004d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d78:	f7fe fce6 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8004d7c:	61f8      	str	r0, [r7, #28]
        break;
 8004d7e:	e014      	b.n	8004daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d80:	f7fe fcf8 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8004d84:	61f8      	str	r0, [r7, #28]
        break;
 8004d86:	e010      	b.n	8004daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d88:	4b4d      	ldr	r3, [pc, #308]	; (8004ec0 <UART_SetConfig+0x56c>)
 8004d8a:	61fb      	str	r3, [r7, #28]
        break;
 8004d8c:	e00d      	b.n	8004daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8e:	f7fe fc43 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8004d92:	61f8      	str	r0, [r7, #28]
        break;
 8004d94:	e009      	b.n	8004daa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9a:	61fb      	str	r3, [r7, #28]
        break;
 8004d9c:	e005      	b.n	8004daa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004da8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d077      	beq.n	8004ea0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	005a      	lsls	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	441a      	add	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b0f      	cmp	r3, #15
 8004dca:	d916      	bls.n	8004dfa <UART_SetConfig+0x4a6>
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd2:	d212      	bcs.n	8004dfa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f023 030f 	bic.w	r3, r3, #15
 8004ddc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	8afb      	ldrh	r3, [r7, #22]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	8afa      	ldrh	r2, [r7, #22]
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	e052      	b.n	8004ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e00:	e04e      	b.n	8004ea0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d827      	bhi.n	8004e5a <UART_SetConfig+0x506>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <UART_SetConfig+0x4bc>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e3d 	.word	0x08004e3d
 8004e18:	08004e45 	.word	0x08004e45
 8004e1c:	08004e5b 	.word	0x08004e5b
 8004e20:	08004e4b 	.word	0x08004e4b
 8004e24:	08004e5b 	.word	0x08004e5b
 8004e28:	08004e5b 	.word	0x08004e5b
 8004e2c:	08004e5b 	.word	0x08004e5b
 8004e30:	08004e53 	.word	0x08004e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e34:	f7fe fc88 	bl	8003748 <HAL_RCC_GetPCLK1Freq>
 8004e38:	61f8      	str	r0, [r7, #28]
        break;
 8004e3a:	e014      	b.n	8004e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e3c:	f7fe fc9a 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8004e40:	61f8      	str	r0, [r7, #28]
        break;
 8004e42:	e010      	b.n	8004e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e44:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <UART_SetConfig+0x56c>)
 8004e46:	61fb      	str	r3, [r7, #28]
        break;
 8004e48:	e00d      	b.n	8004e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4a:	f7fe fbe5 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 8004e4e:	61f8      	str	r0, [r7, #28]
        break;
 8004e50:	e009      	b.n	8004e66 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e56:	61fb      	str	r3, [r7, #28]
        break;
 8004e58:	e005      	b.n	8004e66 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e64:	bf00      	nop
    }

    if (pclk != 0U)
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d019      	beq.n	8004ea0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	085a      	lsrs	r2, r3, #1
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	441a      	add	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b0f      	cmp	r3, #15
 8004e84:	d909      	bls.n	8004e9a <UART_SetConfig+0x546>
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d205      	bcs.n	8004e9a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60da      	str	r2, [r3, #12]
 8004e98:	e002      	b.n	8004ea0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004eac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3728      	adds	r7, #40	; 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eba:	bf00      	nop
 8004ebc:	40008000 	.word	0x40008000
 8004ec0:	00f42400 	.word	0x00f42400

08004ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc2:	d10a      	bne.n	8004fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005018:	f7fc fd02 	bl	8001a20 <HAL_GetTick>
 800501c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d10e      	bne.n	800504a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f82d 	bl	800509a <UART_WaitOnFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e023      	b.n	8005092 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b04      	cmp	r3, #4
 8005056:	d10e      	bne.n	8005076 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f817 	bl	800509a <UART_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e00d      	b.n	8005092 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b09c      	sub	sp, #112	; 0x70
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	603b      	str	r3, [r7, #0]
 80050a6:	4613      	mov	r3, r2
 80050a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050aa:	e0a5      	b.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	f000 80a1 	beq.w	80051f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fc fcb3 	bl	8001a20 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <UART_WaitOnFlagUntilTimeout+0x32>
 80050c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d13e      	bne.n	800514a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050e0:	667b      	str	r3, [r7, #100]	; 0x64
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050f2:	e841 2300 	strex	r3, r2, [r1]
 80050f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1e6      	bne.n	80050cc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	663b      	str	r3, [r7, #96]	; 0x60
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3308      	adds	r3, #8
 800511c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800511e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800512c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e5      	bne.n	80050fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e067      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d04f      	beq.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005166:	d147      	bne.n	80051f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005170:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005186:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005190:	637b      	str	r3, [r7, #52]	; 0x34
 8005192:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e6      	bne.n	8005172 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	613b      	str	r3, [r7, #16]
   return(result);
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3308      	adds	r3, #8
 80051c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051c4:	623a      	str	r2, [r7, #32]
 80051c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	69f9      	ldr	r1, [r7, #28]
 80051ca:	6a3a      	ldr	r2, [r7, #32]
 80051cc:	e841 2300 	strex	r3, r2, [r1]
 80051d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e5      	bne.n	80051a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e010      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69da      	ldr	r2, [r3, #28]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4013      	ands	r3, r2
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	429a      	cmp	r2, r3
 8005206:	bf0c      	ite	eq
 8005208:	2301      	moveq	r3, #1
 800520a:	2300      	movne	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	79fb      	ldrb	r3, [r7, #7]
 8005212:	429a      	cmp	r2, r3
 8005214:	f43f af4a 	beq.w	80050ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3770      	adds	r7, #112	; 0x70
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <__cvt>:
 8005222:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005226:	ec55 4b10 	vmov	r4, r5, d0
 800522a:	2d00      	cmp	r5, #0
 800522c:	460e      	mov	r6, r1
 800522e:	4619      	mov	r1, r3
 8005230:	462b      	mov	r3, r5
 8005232:	bfbb      	ittet	lt
 8005234:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005238:	461d      	movlt	r5, r3
 800523a:	2300      	movge	r3, #0
 800523c:	232d      	movlt	r3, #45	; 0x2d
 800523e:	700b      	strb	r3, [r1, #0]
 8005240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005242:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005246:	4691      	mov	r9, r2
 8005248:	f023 0820 	bic.w	r8, r3, #32
 800524c:	bfbc      	itt	lt
 800524e:	4622      	movlt	r2, r4
 8005250:	4614      	movlt	r4, r2
 8005252:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005256:	d005      	beq.n	8005264 <__cvt+0x42>
 8005258:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800525c:	d100      	bne.n	8005260 <__cvt+0x3e>
 800525e:	3601      	adds	r6, #1
 8005260:	2102      	movs	r1, #2
 8005262:	e000      	b.n	8005266 <__cvt+0x44>
 8005264:	2103      	movs	r1, #3
 8005266:	ab03      	add	r3, sp, #12
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	ab02      	add	r3, sp, #8
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	ec45 4b10 	vmov	d0, r4, r5
 8005272:	4653      	mov	r3, sl
 8005274:	4632      	mov	r2, r6
 8005276:	f001 f86b 	bl	8006350 <_dtoa_r>
 800527a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800527e:	4607      	mov	r7, r0
 8005280:	d102      	bne.n	8005288 <__cvt+0x66>
 8005282:	f019 0f01 	tst.w	r9, #1
 8005286:	d022      	beq.n	80052ce <__cvt+0xac>
 8005288:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800528c:	eb07 0906 	add.w	r9, r7, r6
 8005290:	d110      	bne.n	80052b4 <__cvt+0x92>
 8005292:	783b      	ldrb	r3, [r7, #0]
 8005294:	2b30      	cmp	r3, #48	; 0x30
 8005296:	d10a      	bne.n	80052ae <__cvt+0x8c>
 8005298:	2200      	movs	r2, #0
 800529a:	2300      	movs	r3, #0
 800529c:	4620      	mov	r0, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	f7fb fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 80052a4:	b918      	cbnz	r0, 80052ae <__cvt+0x8c>
 80052a6:	f1c6 0601 	rsb	r6, r6, #1
 80052aa:	f8ca 6000 	str.w	r6, [sl]
 80052ae:	f8da 3000 	ldr.w	r3, [sl]
 80052b2:	4499      	add	r9, r3
 80052b4:	2200      	movs	r2, #0
 80052b6:	2300      	movs	r3, #0
 80052b8:	4620      	mov	r0, r4
 80052ba:	4629      	mov	r1, r5
 80052bc:	f7fb fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80052c0:	b108      	cbz	r0, 80052c6 <__cvt+0xa4>
 80052c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80052c6:	2230      	movs	r2, #48	; 0x30
 80052c8:	9b03      	ldr	r3, [sp, #12]
 80052ca:	454b      	cmp	r3, r9
 80052cc:	d307      	bcc.n	80052de <__cvt+0xbc>
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052d2:	1bdb      	subs	r3, r3, r7
 80052d4:	4638      	mov	r0, r7
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	b004      	add	sp, #16
 80052da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052de:	1c59      	adds	r1, r3, #1
 80052e0:	9103      	str	r1, [sp, #12]
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e7f0      	b.n	80052c8 <__cvt+0xa6>

080052e6 <__exponent>:
 80052e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052e8:	4603      	mov	r3, r0
 80052ea:	2900      	cmp	r1, #0
 80052ec:	bfb8      	it	lt
 80052ee:	4249      	neglt	r1, r1
 80052f0:	f803 2b02 	strb.w	r2, [r3], #2
 80052f4:	bfb4      	ite	lt
 80052f6:	222d      	movlt	r2, #45	; 0x2d
 80052f8:	222b      	movge	r2, #43	; 0x2b
 80052fa:	2909      	cmp	r1, #9
 80052fc:	7042      	strb	r2, [r0, #1]
 80052fe:	dd2a      	ble.n	8005356 <__exponent+0x70>
 8005300:	f10d 0207 	add.w	r2, sp, #7
 8005304:	4617      	mov	r7, r2
 8005306:	260a      	movs	r6, #10
 8005308:	4694      	mov	ip, r2
 800530a:	fb91 f5f6 	sdiv	r5, r1, r6
 800530e:	fb06 1415 	mls	r4, r6, r5, r1
 8005312:	3430      	adds	r4, #48	; 0x30
 8005314:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005318:	460c      	mov	r4, r1
 800531a:	2c63      	cmp	r4, #99	; 0x63
 800531c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005320:	4629      	mov	r1, r5
 8005322:	dcf1      	bgt.n	8005308 <__exponent+0x22>
 8005324:	3130      	adds	r1, #48	; 0x30
 8005326:	f1ac 0402 	sub.w	r4, ip, #2
 800532a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800532e:	1c41      	adds	r1, r0, #1
 8005330:	4622      	mov	r2, r4
 8005332:	42ba      	cmp	r2, r7
 8005334:	d30a      	bcc.n	800534c <__exponent+0x66>
 8005336:	f10d 0209 	add.w	r2, sp, #9
 800533a:	eba2 020c 	sub.w	r2, r2, ip
 800533e:	42bc      	cmp	r4, r7
 8005340:	bf88      	it	hi
 8005342:	2200      	movhi	r2, #0
 8005344:	4413      	add	r3, r2
 8005346:	1a18      	subs	r0, r3, r0
 8005348:	b003      	add	sp, #12
 800534a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800534c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005350:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005354:	e7ed      	b.n	8005332 <__exponent+0x4c>
 8005356:	2330      	movs	r3, #48	; 0x30
 8005358:	3130      	adds	r1, #48	; 0x30
 800535a:	7083      	strb	r3, [r0, #2]
 800535c:	70c1      	strb	r1, [r0, #3]
 800535e:	1d03      	adds	r3, r0, #4
 8005360:	e7f1      	b.n	8005346 <__exponent+0x60>
	...

08005364 <_printf_float>:
 8005364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005368:	ed2d 8b02 	vpush	{d8}
 800536c:	b08d      	sub	sp, #52	; 0x34
 800536e:	460c      	mov	r4, r1
 8005370:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005374:	4616      	mov	r6, r2
 8005376:	461f      	mov	r7, r3
 8005378:	4605      	mov	r5, r0
 800537a:	f000 fee5 	bl	8006148 <_localeconv_r>
 800537e:	f8d0 a000 	ldr.w	sl, [r0]
 8005382:	4650      	mov	r0, sl
 8005384:	f7fa ff74 	bl	8000270 <strlen>
 8005388:	2300      	movs	r3, #0
 800538a:	930a      	str	r3, [sp, #40]	; 0x28
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	9305      	str	r3, [sp, #20]
 8005390:	f8d8 3000 	ldr.w	r3, [r8]
 8005394:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005398:	3307      	adds	r3, #7
 800539a:	f023 0307 	bic.w	r3, r3, #7
 800539e:	f103 0208 	add.w	r2, r3, #8
 80053a2:	f8c8 2000 	str.w	r2, [r8]
 80053a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053ae:	9307      	str	r3, [sp, #28]
 80053b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80053b4:	ee08 0a10 	vmov	s16, r0
 80053b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80053bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053c0:	4b9e      	ldr	r3, [pc, #632]	; (800563c <_printf_float+0x2d8>)
 80053c2:	f04f 32ff 	mov.w	r2, #4294967295
 80053c6:	f7fb fbb1 	bl	8000b2c <__aeabi_dcmpun>
 80053ca:	bb88      	cbnz	r0, 8005430 <_printf_float+0xcc>
 80053cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053d0:	4b9a      	ldr	r3, [pc, #616]	; (800563c <_printf_float+0x2d8>)
 80053d2:	f04f 32ff 	mov.w	r2, #4294967295
 80053d6:	f7fb fb8b 	bl	8000af0 <__aeabi_dcmple>
 80053da:	bb48      	cbnz	r0, 8005430 <_printf_float+0xcc>
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	4640      	mov	r0, r8
 80053e2:	4649      	mov	r1, r9
 80053e4:	f7fb fb7a 	bl	8000adc <__aeabi_dcmplt>
 80053e8:	b110      	cbz	r0, 80053f0 <_printf_float+0x8c>
 80053ea:	232d      	movs	r3, #45	; 0x2d
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f0:	4a93      	ldr	r2, [pc, #588]	; (8005640 <_printf_float+0x2dc>)
 80053f2:	4b94      	ldr	r3, [pc, #592]	; (8005644 <_printf_float+0x2e0>)
 80053f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053f8:	bf94      	ite	ls
 80053fa:	4690      	movls	r8, r2
 80053fc:	4698      	movhi	r8, r3
 80053fe:	2303      	movs	r3, #3
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	9b05      	ldr	r3, [sp, #20]
 8005404:	f023 0304 	bic.w	r3, r3, #4
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	f04f 0900 	mov.w	r9, #0
 800540e:	9700      	str	r7, [sp, #0]
 8005410:	4633      	mov	r3, r6
 8005412:	aa0b      	add	r2, sp, #44	; 0x2c
 8005414:	4621      	mov	r1, r4
 8005416:	4628      	mov	r0, r5
 8005418:	f000 f9da 	bl	80057d0 <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	f040 8090 	bne.w	8005542 <_printf_float+0x1de>
 8005422:	f04f 30ff 	mov.w	r0, #4294967295
 8005426:	b00d      	add	sp, #52	; 0x34
 8005428:	ecbd 8b02 	vpop	{d8}
 800542c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	4640      	mov	r0, r8
 8005436:	4649      	mov	r1, r9
 8005438:	f7fb fb78 	bl	8000b2c <__aeabi_dcmpun>
 800543c:	b140      	cbz	r0, 8005450 <_printf_float+0xec>
 800543e:	464b      	mov	r3, r9
 8005440:	2b00      	cmp	r3, #0
 8005442:	bfbc      	itt	lt
 8005444:	232d      	movlt	r3, #45	; 0x2d
 8005446:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800544a:	4a7f      	ldr	r2, [pc, #508]	; (8005648 <_printf_float+0x2e4>)
 800544c:	4b7f      	ldr	r3, [pc, #508]	; (800564c <_printf_float+0x2e8>)
 800544e:	e7d1      	b.n	80053f4 <_printf_float+0x90>
 8005450:	6863      	ldr	r3, [r4, #4]
 8005452:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005456:	9206      	str	r2, [sp, #24]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	d13f      	bne.n	80054dc <_printf_float+0x178>
 800545c:	2306      	movs	r3, #6
 800545e:	6063      	str	r3, [r4, #4]
 8005460:	9b05      	ldr	r3, [sp, #20]
 8005462:	6861      	ldr	r1, [r4, #4]
 8005464:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005468:	2300      	movs	r3, #0
 800546a:	9303      	str	r3, [sp, #12]
 800546c:	ab0a      	add	r3, sp, #40	; 0x28
 800546e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005472:	ab09      	add	r3, sp, #36	; 0x24
 8005474:	ec49 8b10 	vmov	d0, r8, r9
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	6022      	str	r2, [r4, #0]
 800547c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005480:	4628      	mov	r0, r5
 8005482:	f7ff fece 	bl	8005222 <__cvt>
 8005486:	9b06      	ldr	r3, [sp, #24]
 8005488:	9909      	ldr	r1, [sp, #36]	; 0x24
 800548a:	2b47      	cmp	r3, #71	; 0x47
 800548c:	4680      	mov	r8, r0
 800548e:	d108      	bne.n	80054a2 <_printf_float+0x13e>
 8005490:	1cc8      	adds	r0, r1, #3
 8005492:	db02      	blt.n	800549a <_printf_float+0x136>
 8005494:	6863      	ldr	r3, [r4, #4]
 8005496:	4299      	cmp	r1, r3
 8005498:	dd41      	ble.n	800551e <_printf_float+0x1ba>
 800549a:	f1ab 0302 	sub.w	r3, fp, #2
 800549e:	fa5f fb83 	uxtb.w	fp, r3
 80054a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054a6:	d820      	bhi.n	80054ea <_printf_float+0x186>
 80054a8:	3901      	subs	r1, #1
 80054aa:	465a      	mov	r2, fp
 80054ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054b0:	9109      	str	r1, [sp, #36]	; 0x24
 80054b2:	f7ff ff18 	bl	80052e6 <__exponent>
 80054b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054b8:	1813      	adds	r3, r2, r0
 80054ba:	2a01      	cmp	r2, #1
 80054bc:	4681      	mov	r9, r0
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	dc02      	bgt.n	80054c8 <_printf_float+0x164>
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	07d2      	lsls	r2, r2, #31
 80054c6:	d501      	bpl.n	80054cc <_printf_float+0x168>
 80054c8:	3301      	adds	r3, #1
 80054ca:	6123      	str	r3, [r4, #16]
 80054cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d09c      	beq.n	800540e <_printf_float+0xaa>
 80054d4:	232d      	movs	r3, #45	; 0x2d
 80054d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054da:	e798      	b.n	800540e <_printf_float+0xaa>
 80054dc:	9a06      	ldr	r2, [sp, #24]
 80054de:	2a47      	cmp	r2, #71	; 0x47
 80054e0:	d1be      	bne.n	8005460 <_printf_float+0xfc>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1bc      	bne.n	8005460 <_printf_float+0xfc>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e7b9      	b.n	800545e <_printf_float+0xfa>
 80054ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054ee:	d118      	bne.n	8005522 <_printf_float+0x1be>
 80054f0:	2900      	cmp	r1, #0
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	dd0b      	ble.n	800550e <_printf_float+0x1aa>
 80054f6:	6121      	str	r1, [r4, #16]
 80054f8:	b913      	cbnz	r3, 8005500 <_printf_float+0x19c>
 80054fa:	6822      	ldr	r2, [r4, #0]
 80054fc:	07d0      	lsls	r0, r2, #31
 80054fe:	d502      	bpl.n	8005506 <_printf_float+0x1a2>
 8005500:	3301      	adds	r3, #1
 8005502:	440b      	add	r3, r1
 8005504:	6123      	str	r3, [r4, #16]
 8005506:	65a1      	str	r1, [r4, #88]	; 0x58
 8005508:	f04f 0900 	mov.w	r9, #0
 800550c:	e7de      	b.n	80054cc <_printf_float+0x168>
 800550e:	b913      	cbnz	r3, 8005516 <_printf_float+0x1b2>
 8005510:	6822      	ldr	r2, [r4, #0]
 8005512:	07d2      	lsls	r2, r2, #31
 8005514:	d501      	bpl.n	800551a <_printf_float+0x1b6>
 8005516:	3302      	adds	r3, #2
 8005518:	e7f4      	b.n	8005504 <_printf_float+0x1a0>
 800551a:	2301      	movs	r3, #1
 800551c:	e7f2      	b.n	8005504 <_printf_float+0x1a0>
 800551e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005524:	4299      	cmp	r1, r3
 8005526:	db05      	blt.n	8005534 <_printf_float+0x1d0>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	6121      	str	r1, [r4, #16]
 800552c:	07d8      	lsls	r0, r3, #31
 800552e:	d5ea      	bpl.n	8005506 <_printf_float+0x1a2>
 8005530:	1c4b      	adds	r3, r1, #1
 8005532:	e7e7      	b.n	8005504 <_printf_float+0x1a0>
 8005534:	2900      	cmp	r1, #0
 8005536:	bfd4      	ite	le
 8005538:	f1c1 0202 	rsble	r2, r1, #2
 800553c:	2201      	movgt	r2, #1
 800553e:	4413      	add	r3, r2
 8005540:	e7e0      	b.n	8005504 <_printf_float+0x1a0>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	055a      	lsls	r2, r3, #21
 8005546:	d407      	bmi.n	8005558 <_printf_float+0x1f4>
 8005548:	6923      	ldr	r3, [r4, #16]
 800554a:	4642      	mov	r2, r8
 800554c:	4631      	mov	r1, r6
 800554e:	4628      	mov	r0, r5
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	d12c      	bne.n	80055b0 <_printf_float+0x24c>
 8005556:	e764      	b.n	8005422 <_printf_float+0xbe>
 8005558:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800555c:	f240 80e0 	bls.w	8005720 <_printf_float+0x3bc>
 8005560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005564:	2200      	movs	r2, #0
 8005566:	2300      	movs	r3, #0
 8005568:	f7fb faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800556c:	2800      	cmp	r0, #0
 800556e:	d034      	beq.n	80055da <_printf_float+0x276>
 8005570:	4a37      	ldr	r2, [pc, #220]	; (8005650 <_printf_float+0x2ec>)
 8005572:	2301      	movs	r3, #1
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	f43f af51 	beq.w	8005422 <_printf_float+0xbe>
 8005580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005584:	429a      	cmp	r2, r3
 8005586:	db02      	blt.n	800558e <_printf_float+0x22a>
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	07d8      	lsls	r0, r3, #31
 800558c:	d510      	bpl.n	80055b0 <_printf_float+0x24c>
 800558e:	ee18 3a10 	vmov	r3, s16
 8005592:	4652      	mov	r2, sl
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	f43f af41 	beq.w	8005422 <_printf_float+0xbe>
 80055a0:	f04f 0800 	mov.w	r8, #0
 80055a4:	f104 091a 	add.w	r9, r4, #26
 80055a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055aa:	3b01      	subs	r3, #1
 80055ac:	4543      	cmp	r3, r8
 80055ae:	dc09      	bgt.n	80055c4 <_printf_float+0x260>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	079b      	lsls	r3, r3, #30
 80055b4:	f100 8107 	bmi.w	80057c6 <_printf_float+0x462>
 80055b8:	68e0      	ldr	r0, [r4, #12]
 80055ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055bc:	4298      	cmp	r0, r3
 80055be:	bfb8      	it	lt
 80055c0:	4618      	movlt	r0, r3
 80055c2:	e730      	b.n	8005426 <_printf_float+0xc2>
 80055c4:	2301      	movs	r3, #1
 80055c6:	464a      	mov	r2, r9
 80055c8:	4631      	mov	r1, r6
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b8      	blx	r7
 80055ce:	3001      	adds	r0, #1
 80055d0:	f43f af27 	beq.w	8005422 <_printf_float+0xbe>
 80055d4:	f108 0801 	add.w	r8, r8, #1
 80055d8:	e7e6      	b.n	80055a8 <_printf_float+0x244>
 80055da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dc39      	bgt.n	8005654 <_printf_float+0x2f0>
 80055e0:	4a1b      	ldr	r2, [pc, #108]	; (8005650 <_printf_float+0x2ec>)
 80055e2:	2301      	movs	r3, #1
 80055e4:	4631      	mov	r1, r6
 80055e6:	4628      	mov	r0, r5
 80055e8:	47b8      	blx	r7
 80055ea:	3001      	adds	r0, #1
 80055ec:	f43f af19 	beq.w	8005422 <_printf_float+0xbe>
 80055f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80055f4:	4313      	orrs	r3, r2
 80055f6:	d102      	bne.n	80055fe <_printf_float+0x29a>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	07d9      	lsls	r1, r3, #31
 80055fc:	d5d8      	bpl.n	80055b0 <_printf_float+0x24c>
 80055fe:	ee18 3a10 	vmov	r3, s16
 8005602:	4652      	mov	r2, sl
 8005604:	4631      	mov	r1, r6
 8005606:	4628      	mov	r0, r5
 8005608:	47b8      	blx	r7
 800560a:	3001      	adds	r0, #1
 800560c:	f43f af09 	beq.w	8005422 <_printf_float+0xbe>
 8005610:	f04f 0900 	mov.w	r9, #0
 8005614:	f104 0a1a 	add.w	sl, r4, #26
 8005618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561a:	425b      	negs	r3, r3
 800561c:	454b      	cmp	r3, r9
 800561e:	dc01      	bgt.n	8005624 <_printf_float+0x2c0>
 8005620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005622:	e792      	b.n	800554a <_printf_float+0x1e6>
 8005624:	2301      	movs	r3, #1
 8005626:	4652      	mov	r2, sl
 8005628:	4631      	mov	r1, r6
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	f43f aef7 	beq.w	8005422 <_printf_float+0xbe>
 8005634:	f109 0901 	add.w	r9, r9, #1
 8005638:	e7ee      	b.n	8005618 <_printf_float+0x2b4>
 800563a:	bf00      	nop
 800563c:	7fefffff 	.word	0x7fefffff
 8005640:	08009b24 	.word	0x08009b24
 8005644:	08009b28 	.word	0x08009b28
 8005648:	08009b2c 	.word	0x08009b2c
 800564c:	08009b30 	.word	0x08009b30
 8005650:	08009b34 	.word	0x08009b34
 8005654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005658:	429a      	cmp	r2, r3
 800565a:	bfa8      	it	ge
 800565c:	461a      	movge	r2, r3
 800565e:	2a00      	cmp	r2, #0
 8005660:	4691      	mov	r9, r2
 8005662:	dc37      	bgt.n	80056d4 <_printf_float+0x370>
 8005664:	f04f 0b00 	mov.w	fp, #0
 8005668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800566c:	f104 021a 	add.w	r2, r4, #26
 8005670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005672:	9305      	str	r3, [sp, #20]
 8005674:	eba3 0309 	sub.w	r3, r3, r9
 8005678:	455b      	cmp	r3, fp
 800567a:	dc33      	bgt.n	80056e4 <_printf_float+0x380>
 800567c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005680:	429a      	cmp	r2, r3
 8005682:	db3b      	blt.n	80056fc <_printf_float+0x398>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	07da      	lsls	r2, r3, #31
 8005688:	d438      	bmi.n	80056fc <_printf_float+0x398>
 800568a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800568e:	eba2 0903 	sub.w	r9, r2, r3
 8005692:	9b05      	ldr	r3, [sp, #20]
 8005694:	1ad2      	subs	r2, r2, r3
 8005696:	4591      	cmp	r9, r2
 8005698:	bfa8      	it	ge
 800569a:	4691      	movge	r9, r2
 800569c:	f1b9 0f00 	cmp.w	r9, #0
 80056a0:	dc35      	bgt.n	800570e <_printf_float+0x3aa>
 80056a2:	f04f 0800 	mov.w	r8, #0
 80056a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056aa:	f104 0a1a 	add.w	sl, r4, #26
 80056ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	eba3 0309 	sub.w	r3, r3, r9
 80056b8:	4543      	cmp	r3, r8
 80056ba:	f77f af79 	ble.w	80055b0 <_printf_float+0x24c>
 80056be:	2301      	movs	r3, #1
 80056c0:	4652      	mov	r2, sl
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	f43f aeaa 	beq.w	8005422 <_printf_float+0xbe>
 80056ce:	f108 0801 	add.w	r8, r8, #1
 80056d2:	e7ec      	b.n	80056ae <_printf_float+0x34a>
 80056d4:	4613      	mov	r3, r2
 80056d6:	4631      	mov	r1, r6
 80056d8:	4642      	mov	r2, r8
 80056da:	4628      	mov	r0, r5
 80056dc:	47b8      	blx	r7
 80056de:	3001      	adds	r0, #1
 80056e0:	d1c0      	bne.n	8005664 <_printf_float+0x300>
 80056e2:	e69e      	b.n	8005422 <_printf_float+0xbe>
 80056e4:	2301      	movs	r3, #1
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	9205      	str	r2, [sp, #20]
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	f43f ae97 	beq.w	8005422 <_printf_float+0xbe>
 80056f4:	9a05      	ldr	r2, [sp, #20]
 80056f6:	f10b 0b01 	add.w	fp, fp, #1
 80056fa:	e7b9      	b.n	8005670 <_printf_float+0x30c>
 80056fc:	ee18 3a10 	vmov	r3, s16
 8005700:	4652      	mov	r2, sl
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	d1be      	bne.n	800568a <_printf_float+0x326>
 800570c:	e689      	b.n	8005422 <_printf_float+0xbe>
 800570e:	9a05      	ldr	r2, [sp, #20]
 8005710:	464b      	mov	r3, r9
 8005712:	4442      	add	r2, r8
 8005714:	4631      	mov	r1, r6
 8005716:	4628      	mov	r0, r5
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	d1c1      	bne.n	80056a2 <_printf_float+0x33e>
 800571e:	e680      	b.n	8005422 <_printf_float+0xbe>
 8005720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005722:	2a01      	cmp	r2, #1
 8005724:	dc01      	bgt.n	800572a <_printf_float+0x3c6>
 8005726:	07db      	lsls	r3, r3, #31
 8005728:	d53a      	bpl.n	80057a0 <_printf_float+0x43c>
 800572a:	2301      	movs	r3, #1
 800572c:	4642      	mov	r2, r8
 800572e:	4631      	mov	r1, r6
 8005730:	4628      	mov	r0, r5
 8005732:	47b8      	blx	r7
 8005734:	3001      	adds	r0, #1
 8005736:	f43f ae74 	beq.w	8005422 <_printf_float+0xbe>
 800573a:	ee18 3a10 	vmov	r3, s16
 800573e:	4652      	mov	r2, sl
 8005740:	4631      	mov	r1, r6
 8005742:	4628      	mov	r0, r5
 8005744:	47b8      	blx	r7
 8005746:	3001      	adds	r0, #1
 8005748:	f43f ae6b 	beq.w	8005422 <_printf_float+0xbe>
 800574c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005750:	2200      	movs	r2, #0
 8005752:	2300      	movs	r3, #0
 8005754:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005758:	f7fb f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800575c:	b9d8      	cbnz	r0, 8005796 <_printf_float+0x432>
 800575e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005762:	f108 0201 	add.w	r2, r8, #1
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	d10e      	bne.n	800578e <_printf_float+0x42a>
 8005770:	e657      	b.n	8005422 <_printf_float+0xbe>
 8005772:	2301      	movs	r3, #1
 8005774:	4652      	mov	r2, sl
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	47b8      	blx	r7
 800577c:	3001      	adds	r0, #1
 800577e:	f43f ae50 	beq.w	8005422 <_printf_float+0xbe>
 8005782:	f108 0801 	add.w	r8, r8, #1
 8005786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005788:	3b01      	subs	r3, #1
 800578a:	4543      	cmp	r3, r8
 800578c:	dcf1      	bgt.n	8005772 <_printf_float+0x40e>
 800578e:	464b      	mov	r3, r9
 8005790:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005794:	e6da      	b.n	800554c <_printf_float+0x1e8>
 8005796:	f04f 0800 	mov.w	r8, #0
 800579a:	f104 0a1a 	add.w	sl, r4, #26
 800579e:	e7f2      	b.n	8005786 <_printf_float+0x422>
 80057a0:	2301      	movs	r3, #1
 80057a2:	4642      	mov	r2, r8
 80057a4:	e7df      	b.n	8005766 <_printf_float+0x402>
 80057a6:	2301      	movs	r3, #1
 80057a8:	464a      	mov	r2, r9
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b8      	blx	r7
 80057b0:	3001      	adds	r0, #1
 80057b2:	f43f ae36 	beq.w	8005422 <_printf_float+0xbe>
 80057b6:	f108 0801 	add.w	r8, r8, #1
 80057ba:	68e3      	ldr	r3, [r4, #12]
 80057bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057be:	1a5b      	subs	r3, r3, r1
 80057c0:	4543      	cmp	r3, r8
 80057c2:	dcf0      	bgt.n	80057a6 <_printf_float+0x442>
 80057c4:	e6f8      	b.n	80055b8 <_printf_float+0x254>
 80057c6:	f04f 0800 	mov.w	r8, #0
 80057ca:	f104 0919 	add.w	r9, r4, #25
 80057ce:	e7f4      	b.n	80057ba <_printf_float+0x456>

080057d0 <_printf_common>:
 80057d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d4:	4616      	mov	r6, r2
 80057d6:	4699      	mov	r9, r3
 80057d8:	688a      	ldr	r2, [r1, #8]
 80057da:	690b      	ldr	r3, [r1, #16]
 80057dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057e0:	4293      	cmp	r3, r2
 80057e2:	bfb8      	it	lt
 80057e4:	4613      	movlt	r3, r2
 80057e6:	6033      	str	r3, [r6, #0]
 80057e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057ec:	4607      	mov	r7, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	b10a      	cbz	r2, 80057f6 <_printf_common+0x26>
 80057f2:	3301      	adds	r3, #1
 80057f4:	6033      	str	r3, [r6, #0]
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	0699      	lsls	r1, r3, #26
 80057fa:	bf42      	ittt	mi
 80057fc:	6833      	ldrmi	r3, [r6, #0]
 80057fe:	3302      	addmi	r3, #2
 8005800:	6033      	strmi	r3, [r6, #0]
 8005802:	6825      	ldr	r5, [r4, #0]
 8005804:	f015 0506 	ands.w	r5, r5, #6
 8005808:	d106      	bne.n	8005818 <_printf_common+0x48>
 800580a:	f104 0a19 	add.w	sl, r4, #25
 800580e:	68e3      	ldr	r3, [r4, #12]
 8005810:	6832      	ldr	r2, [r6, #0]
 8005812:	1a9b      	subs	r3, r3, r2
 8005814:	42ab      	cmp	r3, r5
 8005816:	dc26      	bgt.n	8005866 <_printf_common+0x96>
 8005818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800581c:	1e13      	subs	r3, r2, #0
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	bf18      	it	ne
 8005822:	2301      	movne	r3, #1
 8005824:	0692      	lsls	r2, r2, #26
 8005826:	d42b      	bmi.n	8005880 <_printf_common+0xb0>
 8005828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800582c:	4649      	mov	r1, r9
 800582e:	4638      	mov	r0, r7
 8005830:	47c0      	blx	r8
 8005832:	3001      	adds	r0, #1
 8005834:	d01e      	beq.n	8005874 <_printf_common+0xa4>
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	6922      	ldr	r2, [r4, #16]
 800583a:	f003 0306 	and.w	r3, r3, #6
 800583e:	2b04      	cmp	r3, #4
 8005840:	bf02      	ittt	eq
 8005842:	68e5      	ldreq	r5, [r4, #12]
 8005844:	6833      	ldreq	r3, [r6, #0]
 8005846:	1aed      	subeq	r5, r5, r3
 8005848:	68a3      	ldr	r3, [r4, #8]
 800584a:	bf0c      	ite	eq
 800584c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005850:	2500      	movne	r5, #0
 8005852:	4293      	cmp	r3, r2
 8005854:	bfc4      	itt	gt
 8005856:	1a9b      	subgt	r3, r3, r2
 8005858:	18ed      	addgt	r5, r5, r3
 800585a:	2600      	movs	r6, #0
 800585c:	341a      	adds	r4, #26
 800585e:	42b5      	cmp	r5, r6
 8005860:	d11a      	bne.n	8005898 <_printf_common+0xc8>
 8005862:	2000      	movs	r0, #0
 8005864:	e008      	b.n	8005878 <_printf_common+0xa8>
 8005866:	2301      	movs	r3, #1
 8005868:	4652      	mov	r2, sl
 800586a:	4649      	mov	r1, r9
 800586c:	4638      	mov	r0, r7
 800586e:	47c0      	blx	r8
 8005870:	3001      	adds	r0, #1
 8005872:	d103      	bne.n	800587c <_printf_common+0xac>
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587c:	3501      	adds	r5, #1
 800587e:	e7c6      	b.n	800580e <_printf_common+0x3e>
 8005880:	18e1      	adds	r1, r4, r3
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	2030      	movs	r0, #48	; 0x30
 8005886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800588a:	4422      	add	r2, r4
 800588c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005894:	3302      	adds	r3, #2
 8005896:	e7c7      	b.n	8005828 <_printf_common+0x58>
 8005898:	2301      	movs	r3, #1
 800589a:	4622      	mov	r2, r4
 800589c:	4649      	mov	r1, r9
 800589e:	4638      	mov	r0, r7
 80058a0:	47c0      	blx	r8
 80058a2:	3001      	adds	r0, #1
 80058a4:	d0e6      	beq.n	8005874 <_printf_common+0xa4>
 80058a6:	3601      	adds	r6, #1
 80058a8:	e7d9      	b.n	800585e <_printf_common+0x8e>
	...

080058ac <_printf_i>:
 80058ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	7e0f      	ldrb	r7, [r1, #24]
 80058b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058b4:	2f78      	cmp	r7, #120	; 0x78
 80058b6:	4691      	mov	r9, r2
 80058b8:	4680      	mov	r8, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	469a      	mov	sl, r3
 80058be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058c2:	d807      	bhi.n	80058d4 <_printf_i+0x28>
 80058c4:	2f62      	cmp	r7, #98	; 0x62
 80058c6:	d80a      	bhi.n	80058de <_printf_i+0x32>
 80058c8:	2f00      	cmp	r7, #0
 80058ca:	f000 80d4 	beq.w	8005a76 <_printf_i+0x1ca>
 80058ce:	2f58      	cmp	r7, #88	; 0x58
 80058d0:	f000 80c0 	beq.w	8005a54 <_printf_i+0x1a8>
 80058d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058dc:	e03a      	b.n	8005954 <_printf_i+0xa8>
 80058de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058e2:	2b15      	cmp	r3, #21
 80058e4:	d8f6      	bhi.n	80058d4 <_printf_i+0x28>
 80058e6:	a101      	add	r1, pc, #4	; (adr r1, 80058ec <_printf_i+0x40>)
 80058e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058ec:	08005945 	.word	0x08005945
 80058f0:	08005959 	.word	0x08005959
 80058f4:	080058d5 	.word	0x080058d5
 80058f8:	080058d5 	.word	0x080058d5
 80058fc:	080058d5 	.word	0x080058d5
 8005900:	080058d5 	.word	0x080058d5
 8005904:	08005959 	.word	0x08005959
 8005908:	080058d5 	.word	0x080058d5
 800590c:	080058d5 	.word	0x080058d5
 8005910:	080058d5 	.word	0x080058d5
 8005914:	080058d5 	.word	0x080058d5
 8005918:	08005a5d 	.word	0x08005a5d
 800591c:	08005985 	.word	0x08005985
 8005920:	08005a17 	.word	0x08005a17
 8005924:	080058d5 	.word	0x080058d5
 8005928:	080058d5 	.word	0x080058d5
 800592c:	08005a7f 	.word	0x08005a7f
 8005930:	080058d5 	.word	0x080058d5
 8005934:	08005985 	.word	0x08005985
 8005938:	080058d5 	.word	0x080058d5
 800593c:	080058d5 	.word	0x080058d5
 8005940:	08005a1f 	.word	0x08005a1f
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	1d1a      	adds	r2, r3, #4
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	602a      	str	r2, [r5, #0]
 800594c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005954:	2301      	movs	r3, #1
 8005956:	e09f      	b.n	8005a98 <_printf_i+0x1ec>
 8005958:	6820      	ldr	r0, [r4, #0]
 800595a:	682b      	ldr	r3, [r5, #0]
 800595c:	0607      	lsls	r7, r0, #24
 800595e:	f103 0104 	add.w	r1, r3, #4
 8005962:	6029      	str	r1, [r5, #0]
 8005964:	d501      	bpl.n	800596a <_printf_i+0xbe>
 8005966:	681e      	ldr	r6, [r3, #0]
 8005968:	e003      	b.n	8005972 <_printf_i+0xc6>
 800596a:	0646      	lsls	r6, r0, #25
 800596c:	d5fb      	bpl.n	8005966 <_printf_i+0xba>
 800596e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005972:	2e00      	cmp	r6, #0
 8005974:	da03      	bge.n	800597e <_printf_i+0xd2>
 8005976:	232d      	movs	r3, #45	; 0x2d
 8005978:	4276      	negs	r6, r6
 800597a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800597e:	485a      	ldr	r0, [pc, #360]	; (8005ae8 <_printf_i+0x23c>)
 8005980:	230a      	movs	r3, #10
 8005982:	e012      	b.n	80059aa <_printf_i+0xfe>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	6820      	ldr	r0, [r4, #0]
 8005988:	1d19      	adds	r1, r3, #4
 800598a:	6029      	str	r1, [r5, #0]
 800598c:	0605      	lsls	r5, r0, #24
 800598e:	d501      	bpl.n	8005994 <_printf_i+0xe8>
 8005990:	681e      	ldr	r6, [r3, #0]
 8005992:	e002      	b.n	800599a <_printf_i+0xee>
 8005994:	0641      	lsls	r1, r0, #25
 8005996:	d5fb      	bpl.n	8005990 <_printf_i+0xe4>
 8005998:	881e      	ldrh	r6, [r3, #0]
 800599a:	4853      	ldr	r0, [pc, #332]	; (8005ae8 <_printf_i+0x23c>)
 800599c:	2f6f      	cmp	r7, #111	; 0x6f
 800599e:	bf0c      	ite	eq
 80059a0:	2308      	moveq	r3, #8
 80059a2:	230a      	movne	r3, #10
 80059a4:	2100      	movs	r1, #0
 80059a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059aa:	6865      	ldr	r5, [r4, #4]
 80059ac:	60a5      	str	r5, [r4, #8]
 80059ae:	2d00      	cmp	r5, #0
 80059b0:	bfa2      	ittt	ge
 80059b2:	6821      	ldrge	r1, [r4, #0]
 80059b4:	f021 0104 	bicge.w	r1, r1, #4
 80059b8:	6021      	strge	r1, [r4, #0]
 80059ba:	b90e      	cbnz	r6, 80059c0 <_printf_i+0x114>
 80059bc:	2d00      	cmp	r5, #0
 80059be:	d04b      	beq.n	8005a58 <_printf_i+0x1ac>
 80059c0:	4615      	mov	r5, r2
 80059c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059c6:	fb03 6711 	mls	r7, r3, r1, r6
 80059ca:	5dc7      	ldrb	r7, [r0, r7]
 80059cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059d0:	4637      	mov	r7, r6
 80059d2:	42bb      	cmp	r3, r7
 80059d4:	460e      	mov	r6, r1
 80059d6:	d9f4      	bls.n	80059c2 <_printf_i+0x116>
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d10b      	bne.n	80059f4 <_printf_i+0x148>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	07de      	lsls	r6, r3, #31
 80059e0:	d508      	bpl.n	80059f4 <_printf_i+0x148>
 80059e2:	6923      	ldr	r3, [r4, #16]
 80059e4:	6861      	ldr	r1, [r4, #4]
 80059e6:	4299      	cmp	r1, r3
 80059e8:	bfde      	ittt	le
 80059ea:	2330      	movle	r3, #48	; 0x30
 80059ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059f4:	1b52      	subs	r2, r2, r5
 80059f6:	6122      	str	r2, [r4, #16]
 80059f8:	f8cd a000 	str.w	sl, [sp]
 80059fc:	464b      	mov	r3, r9
 80059fe:	aa03      	add	r2, sp, #12
 8005a00:	4621      	mov	r1, r4
 8005a02:	4640      	mov	r0, r8
 8005a04:	f7ff fee4 	bl	80057d0 <_printf_common>
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d14a      	bne.n	8005aa2 <_printf_i+0x1f6>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	b004      	add	sp, #16
 8005a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f043 0320 	orr.w	r3, r3, #32
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	4833      	ldr	r0, [pc, #204]	; (8005aec <_printf_i+0x240>)
 8005a20:	2778      	movs	r7, #120	; 0x78
 8005a22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	6829      	ldr	r1, [r5, #0]
 8005a2a:	061f      	lsls	r7, r3, #24
 8005a2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a30:	d402      	bmi.n	8005a38 <_printf_i+0x18c>
 8005a32:	065f      	lsls	r7, r3, #25
 8005a34:	bf48      	it	mi
 8005a36:	b2b6      	uxthmi	r6, r6
 8005a38:	07df      	lsls	r7, r3, #31
 8005a3a:	bf48      	it	mi
 8005a3c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a40:	6029      	str	r1, [r5, #0]
 8005a42:	bf48      	it	mi
 8005a44:	6023      	strmi	r3, [r4, #0]
 8005a46:	b91e      	cbnz	r6, 8005a50 <_printf_i+0x1a4>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	f023 0320 	bic.w	r3, r3, #32
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	2310      	movs	r3, #16
 8005a52:	e7a7      	b.n	80059a4 <_printf_i+0xf8>
 8005a54:	4824      	ldr	r0, [pc, #144]	; (8005ae8 <_printf_i+0x23c>)
 8005a56:	e7e4      	b.n	8005a22 <_printf_i+0x176>
 8005a58:	4615      	mov	r5, r2
 8005a5a:	e7bd      	b.n	80059d8 <_printf_i+0x12c>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	6826      	ldr	r6, [r4, #0]
 8005a60:	6961      	ldr	r1, [r4, #20]
 8005a62:	1d18      	adds	r0, r3, #4
 8005a64:	6028      	str	r0, [r5, #0]
 8005a66:	0635      	lsls	r5, r6, #24
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	d501      	bpl.n	8005a70 <_printf_i+0x1c4>
 8005a6c:	6019      	str	r1, [r3, #0]
 8005a6e:	e002      	b.n	8005a76 <_printf_i+0x1ca>
 8005a70:	0670      	lsls	r0, r6, #25
 8005a72:	d5fb      	bpl.n	8005a6c <_printf_i+0x1c0>
 8005a74:	8019      	strh	r1, [r3, #0]
 8005a76:	2300      	movs	r3, #0
 8005a78:	6123      	str	r3, [r4, #16]
 8005a7a:	4615      	mov	r5, r2
 8005a7c:	e7bc      	b.n	80059f8 <_printf_i+0x14c>
 8005a7e:	682b      	ldr	r3, [r5, #0]
 8005a80:	1d1a      	adds	r2, r3, #4
 8005a82:	602a      	str	r2, [r5, #0]
 8005a84:	681d      	ldr	r5, [r3, #0]
 8005a86:	6862      	ldr	r2, [r4, #4]
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f7fa fba0 	bl	80001d0 <memchr>
 8005a90:	b108      	cbz	r0, 8005a96 <_printf_i+0x1ea>
 8005a92:	1b40      	subs	r0, r0, r5
 8005a94:	6060      	str	r0, [r4, #4]
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa0:	e7aa      	b.n	80059f8 <_printf_i+0x14c>
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	462a      	mov	r2, r5
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	47d0      	blx	sl
 8005aac:	3001      	adds	r0, #1
 8005aae:	d0ad      	beq.n	8005a0c <_printf_i+0x160>
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	079b      	lsls	r3, r3, #30
 8005ab4:	d413      	bmi.n	8005ade <_printf_i+0x232>
 8005ab6:	68e0      	ldr	r0, [r4, #12]
 8005ab8:	9b03      	ldr	r3, [sp, #12]
 8005aba:	4298      	cmp	r0, r3
 8005abc:	bfb8      	it	lt
 8005abe:	4618      	movlt	r0, r3
 8005ac0:	e7a6      	b.n	8005a10 <_printf_i+0x164>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	47d0      	blx	sl
 8005acc:	3001      	adds	r0, #1
 8005ace:	d09d      	beq.n	8005a0c <_printf_i+0x160>
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	68e3      	ldr	r3, [r4, #12]
 8005ad4:	9903      	ldr	r1, [sp, #12]
 8005ad6:	1a5b      	subs	r3, r3, r1
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	dcf2      	bgt.n	8005ac2 <_printf_i+0x216>
 8005adc:	e7eb      	b.n	8005ab6 <_printf_i+0x20a>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	f104 0619 	add.w	r6, r4, #25
 8005ae4:	e7f5      	b.n	8005ad2 <_printf_i+0x226>
 8005ae6:	bf00      	nop
 8005ae8:	08009b36 	.word	0x08009b36
 8005aec:	08009b47 	.word	0x08009b47

08005af0 <_scanf_float>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	b087      	sub	sp, #28
 8005af6:	4617      	mov	r7, r2
 8005af8:	9303      	str	r3, [sp, #12]
 8005afa:	688b      	ldr	r3, [r1, #8]
 8005afc:	1e5a      	subs	r2, r3, #1
 8005afe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005b02:	bf83      	ittte	hi
 8005b04:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005b08:	195b      	addhi	r3, r3, r5
 8005b0a:	9302      	strhi	r3, [sp, #8]
 8005b0c:	2300      	movls	r3, #0
 8005b0e:	bf86      	itte	hi
 8005b10:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005b14:	608b      	strhi	r3, [r1, #8]
 8005b16:	9302      	strls	r3, [sp, #8]
 8005b18:	680b      	ldr	r3, [r1, #0]
 8005b1a:	468b      	mov	fp, r1
 8005b1c:	2500      	movs	r5, #0
 8005b1e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005b22:	f84b 3b1c 	str.w	r3, [fp], #28
 8005b26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	465e      	mov	r6, fp
 8005b30:	46aa      	mov	sl, r5
 8005b32:	46a9      	mov	r9, r5
 8005b34:	9501      	str	r5, [sp, #4]
 8005b36:	68a2      	ldr	r2, [r4, #8]
 8005b38:	b152      	cbz	r2, 8005b50 <_scanf_float+0x60>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b4e      	cmp	r3, #78	; 0x4e
 8005b40:	d864      	bhi.n	8005c0c <_scanf_float+0x11c>
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	d83c      	bhi.n	8005bc0 <_scanf_float+0xd0>
 8005b46:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005b4a:	b2c8      	uxtb	r0, r1
 8005b4c:	280e      	cmp	r0, #14
 8005b4e:	d93a      	bls.n	8005bc6 <_scanf_float+0xd6>
 8005b50:	f1b9 0f00 	cmp.w	r9, #0
 8005b54:	d003      	beq.n	8005b5e <_scanf_float+0x6e>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b62:	f1ba 0f01 	cmp.w	sl, #1
 8005b66:	f200 8113 	bhi.w	8005d90 <_scanf_float+0x2a0>
 8005b6a:	455e      	cmp	r6, fp
 8005b6c:	f200 8105 	bhi.w	8005d7a <_scanf_float+0x28a>
 8005b70:	2501      	movs	r5, #1
 8005b72:	4628      	mov	r0, r5
 8005b74:	b007      	add	sp, #28
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005b7e:	2a0d      	cmp	r2, #13
 8005b80:	d8e6      	bhi.n	8005b50 <_scanf_float+0x60>
 8005b82:	a101      	add	r1, pc, #4	; (adr r1, 8005b88 <_scanf_float+0x98>)
 8005b84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b88:	08005cc7 	.word	0x08005cc7
 8005b8c:	08005b51 	.word	0x08005b51
 8005b90:	08005b51 	.word	0x08005b51
 8005b94:	08005b51 	.word	0x08005b51
 8005b98:	08005d27 	.word	0x08005d27
 8005b9c:	08005cff 	.word	0x08005cff
 8005ba0:	08005b51 	.word	0x08005b51
 8005ba4:	08005b51 	.word	0x08005b51
 8005ba8:	08005cd5 	.word	0x08005cd5
 8005bac:	08005b51 	.word	0x08005b51
 8005bb0:	08005b51 	.word	0x08005b51
 8005bb4:	08005b51 	.word	0x08005b51
 8005bb8:	08005b51 	.word	0x08005b51
 8005bbc:	08005c8d 	.word	0x08005c8d
 8005bc0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005bc4:	e7db      	b.n	8005b7e <_scanf_float+0x8e>
 8005bc6:	290e      	cmp	r1, #14
 8005bc8:	d8c2      	bhi.n	8005b50 <_scanf_float+0x60>
 8005bca:	a001      	add	r0, pc, #4	; (adr r0, 8005bd0 <_scanf_float+0xe0>)
 8005bcc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005bd0:	08005c7f 	.word	0x08005c7f
 8005bd4:	08005b51 	.word	0x08005b51
 8005bd8:	08005c7f 	.word	0x08005c7f
 8005bdc:	08005d13 	.word	0x08005d13
 8005be0:	08005b51 	.word	0x08005b51
 8005be4:	08005c2d 	.word	0x08005c2d
 8005be8:	08005c69 	.word	0x08005c69
 8005bec:	08005c69 	.word	0x08005c69
 8005bf0:	08005c69 	.word	0x08005c69
 8005bf4:	08005c69 	.word	0x08005c69
 8005bf8:	08005c69 	.word	0x08005c69
 8005bfc:	08005c69 	.word	0x08005c69
 8005c00:	08005c69 	.word	0x08005c69
 8005c04:	08005c69 	.word	0x08005c69
 8005c08:	08005c69 	.word	0x08005c69
 8005c0c:	2b6e      	cmp	r3, #110	; 0x6e
 8005c0e:	d809      	bhi.n	8005c24 <_scanf_float+0x134>
 8005c10:	2b60      	cmp	r3, #96	; 0x60
 8005c12:	d8b2      	bhi.n	8005b7a <_scanf_float+0x8a>
 8005c14:	2b54      	cmp	r3, #84	; 0x54
 8005c16:	d077      	beq.n	8005d08 <_scanf_float+0x218>
 8005c18:	2b59      	cmp	r3, #89	; 0x59
 8005c1a:	d199      	bne.n	8005b50 <_scanf_float+0x60>
 8005c1c:	2d07      	cmp	r5, #7
 8005c1e:	d197      	bne.n	8005b50 <_scanf_float+0x60>
 8005c20:	2508      	movs	r5, #8
 8005c22:	e029      	b.n	8005c78 <_scanf_float+0x188>
 8005c24:	2b74      	cmp	r3, #116	; 0x74
 8005c26:	d06f      	beq.n	8005d08 <_scanf_float+0x218>
 8005c28:	2b79      	cmp	r3, #121	; 0x79
 8005c2a:	e7f6      	b.n	8005c1a <_scanf_float+0x12a>
 8005c2c:	6821      	ldr	r1, [r4, #0]
 8005c2e:	05c8      	lsls	r0, r1, #23
 8005c30:	d51a      	bpl.n	8005c68 <_scanf_float+0x178>
 8005c32:	9b02      	ldr	r3, [sp, #8]
 8005c34:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c38:	6021      	str	r1, [r4, #0]
 8005c3a:	f109 0901 	add.w	r9, r9, #1
 8005c3e:	b11b      	cbz	r3, 8005c48 <_scanf_float+0x158>
 8005c40:	3b01      	subs	r3, #1
 8005c42:	3201      	adds	r2, #1
 8005c44:	9302      	str	r3, [sp, #8]
 8005c46:	60a2      	str	r2, [r4, #8]
 8005c48:	68a3      	ldr	r3, [r4, #8]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	60a3      	str	r3, [r4, #8]
 8005c4e:	6923      	ldr	r3, [r4, #16]
 8005c50:	3301      	adds	r3, #1
 8005c52:	6123      	str	r3, [r4, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	607b      	str	r3, [r7, #4]
 8005c5c:	f340 8084 	ble.w	8005d68 <_scanf_float+0x278>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	603b      	str	r3, [r7, #0]
 8005c66:	e766      	b.n	8005b36 <_scanf_float+0x46>
 8005c68:	eb1a 0f05 	cmn.w	sl, r5
 8005c6c:	f47f af70 	bne.w	8005b50 <_scanf_float+0x60>
 8005c70:	6822      	ldr	r2, [r4, #0]
 8005c72:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005c76:	6022      	str	r2, [r4, #0]
 8005c78:	f806 3b01 	strb.w	r3, [r6], #1
 8005c7c:	e7e4      	b.n	8005c48 <_scanf_float+0x158>
 8005c7e:	6822      	ldr	r2, [r4, #0]
 8005c80:	0610      	lsls	r0, r2, #24
 8005c82:	f57f af65 	bpl.w	8005b50 <_scanf_float+0x60>
 8005c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c8a:	e7f4      	b.n	8005c76 <_scanf_float+0x186>
 8005c8c:	f1ba 0f00 	cmp.w	sl, #0
 8005c90:	d10e      	bne.n	8005cb0 <_scanf_float+0x1c0>
 8005c92:	f1b9 0f00 	cmp.w	r9, #0
 8005c96:	d10e      	bne.n	8005cb6 <_scanf_float+0x1c6>
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ca2:	d108      	bne.n	8005cb6 <_scanf_float+0x1c6>
 8005ca4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ca8:	6022      	str	r2, [r4, #0]
 8005caa:	f04f 0a01 	mov.w	sl, #1
 8005cae:	e7e3      	b.n	8005c78 <_scanf_float+0x188>
 8005cb0:	f1ba 0f02 	cmp.w	sl, #2
 8005cb4:	d055      	beq.n	8005d62 <_scanf_float+0x272>
 8005cb6:	2d01      	cmp	r5, #1
 8005cb8:	d002      	beq.n	8005cc0 <_scanf_float+0x1d0>
 8005cba:	2d04      	cmp	r5, #4
 8005cbc:	f47f af48 	bne.w	8005b50 <_scanf_float+0x60>
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	b2ed      	uxtb	r5, r5
 8005cc4:	e7d8      	b.n	8005c78 <_scanf_float+0x188>
 8005cc6:	f1ba 0f01 	cmp.w	sl, #1
 8005cca:	f47f af41 	bne.w	8005b50 <_scanf_float+0x60>
 8005cce:	f04f 0a02 	mov.w	sl, #2
 8005cd2:	e7d1      	b.n	8005c78 <_scanf_float+0x188>
 8005cd4:	b97d      	cbnz	r5, 8005cf6 <_scanf_float+0x206>
 8005cd6:	f1b9 0f00 	cmp.w	r9, #0
 8005cda:	f47f af3c 	bne.w	8005b56 <_scanf_float+0x66>
 8005cde:	6822      	ldr	r2, [r4, #0]
 8005ce0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ce4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ce8:	f47f af39 	bne.w	8005b5e <_scanf_float+0x6e>
 8005cec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005cf0:	6022      	str	r2, [r4, #0]
 8005cf2:	2501      	movs	r5, #1
 8005cf4:	e7c0      	b.n	8005c78 <_scanf_float+0x188>
 8005cf6:	2d03      	cmp	r5, #3
 8005cf8:	d0e2      	beq.n	8005cc0 <_scanf_float+0x1d0>
 8005cfa:	2d05      	cmp	r5, #5
 8005cfc:	e7de      	b.n	8005cbc <_scanf_float+0x1cc>
 8005cfe:	2d02      	cmp	r5, #2
 8005d00:	f47f af26 	bne.w	8005b50 <_scanf_float+0x60>
 8005d04:	2503      	movs	r5, #3
 8005d06:	e7b7      	b.n	8005c78 <_scanf_float+0x188>
 8005d08:	2d06      	cmp	r5, #6
 8005d0a:	f47f af21 	bne.w	8005b50 <_scanf_float+0x60>
 8005d0e:	2507      	movs	r5, #7
 8005d10:	e7b2      	b.n	8005c78 <_scanf_float+0x188>
 8005d12:	6822      	ldr	r2, [r4, #0]
 8005d14:	0591      	lsls	r1, r2, #22
 8005d16:	f57f af1b 	bpl.w	8005b50 <_scanf_float+0x60>
 8005d1a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005d1e:	6022      	str	r2, [r4, #0]
 8005d20:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d24:	e7a8      	b.n	8005c78 <_scanf_float+0x188>
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005d2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005d30:	d006      	beq.n	8005d40 <_scanf_float+0x250>
 8005d32:	0550      	lsls	r0, r2, #21
 8005d34:	f57f af0c 	bpl.w	8005b50 <_scanf_float+0x60>
 8005d38:	f1b9 0f00 	cmp.w	r9, #0
 8005d3c:	f43f af0f 	beq.w	8005b5e <_scanf_float+0x6e>
 8005d40:	0591      	lsls	r1, r2, #22
 8005d42:	bf58      	it	pl
 8005d44:	9901      	ldrpl	r1, [sp, #4]
 8005d46:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d4a:	bf58      	it	pl
 8005d4c:	eba9 0101 	subpl.w	r1, r9, r1
 8005d50:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005d54:	bf58      	it	pl
 8005d56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005d5a:	6022      	str	r2, [r4, #0]
 8005d5c:	f04f 0900 	mov.w	r9, #0
 8005d60:	e78a      	b.n	8005c78 <_scanf_float+0x188>
 8005d62:	f04f 0a03 	mov.w	sl, #3
 8005d66:	e787      	b.n	8005c78 <_scanf_float+0x188>
 8005d68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	4640      	mov	r0, r8
 8005d70:	4798      	blx	r3
 8005d72:	2800      	cmp	r0, #0
 8005d74:	f43f aedf 	beq.w	8005b36 <_scanf_float+0x46>
 8005d78:	e6ea      	b.n	8005b50 <_scanf_float+0x60>
 8005d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d82:	463a      	mov	r2, r7
 8005d84:	4640      	mov	r0, r8
 8005d86:	4798      	blx	r3
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	6123      	str	r3, [r4, #16]
 8005d8e:	e6ec      	b.n	8005b6a <_scanf_float+0x7a>
 8005d90:	1e6b      	subs	r3, r5, #1
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d825      	bhi.n	8005de2 <_scanf_float+0x2f2>
 8005d96:	2d02      	cmp	r5, #2
 8005d98:	d836      	bhi.n	8005e08 <_scanf_float+0x318>
 8005d9a:	455e      	cmp	r6, fp
 8005d9c:	f67f aee8 	bls.w	8005b70 <_scanf_float+0x80>
 8005da0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005da4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005da8:	463a      	mov	r2, r7
 8005daa:	4640      	mov	r0, r8
 8005dac:	4798      	blx	r3
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	6123      	str	r3, [r4, #16]
 8005db4:	e7f1      	b.n	8005d9a <_scanf_float+0x2aa>
 8005db6:	9802      	ldr	r0, [sp, #8]
 8005db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dbc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005dc0:	9002      	str	r0, [sp, #8]
 8005dc2:	463a      	mov	r2, r7
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	4798      	blx	r3
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	6123      	str	r3, [r4, #16]
 8005dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dd2:	fa5f fa8a 	uxtb.w	sl, sl
 8005dd6:	f1ba 0f02 	cmp.w	sl, #2
 8005dda:	d1ec      	bne.n	8005db6 <_scanf_float+0x2c6>
 8005ddc:	3d03      	subs	r5, #3
 8005dde:	b2ed      	uxtb	r5, r5
 8005de0:	1b76      	subs	r6, r6, r5
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	05da      	lsls	r2, r3, #23
 8005de6:	d52f      	bpl.n	8005e48 <_scanf_float+0x358>
 8005de8:	055b      	lsls	r3, r3, #21
 8005dea:	d510      	bpl.n	8005e0e <_scanf_float+0x31e>
 8005dec:	455e      	cmp	r6, fp
 8005dee:	f67f aebf 	bls.w	8005b70 <_scanf_float+0x80>
 8005df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005df6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dfa:	463a      	mov	r2, r7
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4798      	blx	r3
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	6123      	str	r3, [r4, #16]
 8005e06:	e7f1      	b.n	8005dec <_scanf_float+0x2fc>
 8005e08:	46aa      	mov	sl, r5
 8005e0a:	9602      	str	r6, [sp, #8]
 8005e0c:	e7df      	b.n	8005dce <_scanf_float+0x2de>
 8005e0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e12:	6923      	ldr	r3, [r4, #16]
 8005e14:	2965      	cmp	r1, #101	; 0x65
 8005e16:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005e1e:	6123      	str	r3, [r4, #16]
 8005e20:	d00c      	beq.n	8005e3c <_scanf_float+0x34c>
 8005e22:	2945      	cmp	r1, #69	; 0x45
 8005e24:	d00a      	beq.n	8005e3c <_scanf_float+0x34c>
 8005e26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e2a:	463a      	mov	r2, r7
 8005e2c:	4640      	mov	r0, r8
 8005e2e:	4798      	blx	r3
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	1eb5      	subs	r5, r6, #2
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e40:	463a      	mov	r2, r7
 8005e42:	4640      	mov	r0, r8
 8005e44:	4798      	blx	r3
 8005e46:	462e      	mov	r6, r5
 8005e48:	6825      	ldr	r5, [r4, #0]
 8005e4a:	f015 0510 	ands.w	r5, r5, #16
 8005e4e:	d158      	bne.n	8005f02 <_scanf_float+0x412>
 8005e50:	7035      	strb	r5, [r6, #0]
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5c:	d11c      	bne.n	8005e98 <_scanf_float+0x3a8>
 8005e5e:	9b01      	ldr	r3, [sp, #4]
 8005e60:	454b      	cmp	r3, r9
 8005e62:	eba3 0209 	sub.w	r2, r3, r9
 8005e66:	d124      	bne.n	8005eb2 <_scanf_float+0x3c2>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4659      	mov	r1, fp
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	f002 fc1b 	bl	80086a8 <_strtod_r>
 8005e72:	9b03      	ldr	r3, [sp, #12]
 8005e74:	6821      	ldr	r1, [r4, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f011 0f02 	tst.w	r1, #2
 8005e7c:	ec57 6b10 	vmov	r6, r7, d0
 8005e80:	f103 0204 	add.w	r2, r3, #4
 8005e84:	d020      	beq.n	8005ec8 <_scanf_float+0x3d8>
 8005e86:	9903      	ldr	r1, [sp, #12]
 8005e88:	600a      	str	r2, [r1, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	e9c3 6700 	strd	r6, r7, [r3]
 8005e90:	68e3      	ldr	r3, [r4, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60e3      	str	r3, [r4, #12]
 8005e96:	e66c      	b.n	8005b72 <_scanf_float+0x82>
 8005e98:	9b04      	ldr	r3, [sp, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0e4      	beq.n	8005e68 <_scanf_float+0x378>
 8005e9e:	9905      	ldr	r1, [sp, #20]
 8005ea0:	230a      	movs	r3, #10
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	3101      	adds	r1, #1
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f002 fc86 	bl	80087b8 <_strtol_r>
 8005eac:	9b04      	ldr	r3, [sp, #16]
 8005eae:	9e05      	ldr	r6, [sp, #20]
 8005eb0:	1ac2      	subs	r2, r0, r3
 8005eb2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005eb6:	429e      	cmp	r6, r3
 8005eb8:	bf28      	it	cs
 8005eba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005ebe:	4912      	ldr	r1, [pc, #72]	; (8005f08 <_scanf_float+0x418>)
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	f000 f8d5 	bl	8006070 <siprintf>
 8005ec6:	e7cf      	b.n	8005e68 <_scanf_float+0x378>
 8005ec8:	f011 0f04 	tst.w	r1, #4
 8005ecc:	9903      	ldr	r1, [sp, #12]
 8005ece:	600a      	str	r2, [r1, #0]
 8005ed0:	d1db      	bne.n	8005e8a <_scanf_float+0x39a>
 8005ed2:	f8d3 8000 	ldr.w	r8, [r3]
 8005ed6:	ee10 2a10 	vmov	r2, s0
 8005eda:	ee10 0a10 	vmov	r0, s0
 8005ede:	463b      	mov	r3, r7
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	f7fa fe23 	bl	8000b2c <__aeabi_dcmpun>
 8005ee6:	b128      	cbz	r0, 8005ef4 <_scanf_float+0x404>
 8005ee8:	4808      	ldr	r0, [pc, #32]	; (8005f0c <_scanf_float+0x41c>)
 8005eea:	f000 f9a3 	bl	8006234 <nanf>
 8005eee:	ed88 0a00 	vstr	s0, [r8]
 8005ef2:	e7cd      	b.n	8005e90 <_scanf_float+0x3a0>
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	4639      	mov	r1, r7
 8005ef8:	f7fa fe76 	bl	8000be8 <__aeabi_d2f>
 8005efc:	f8c8 0000 	str.w	r0, [r8]
 8005f00:	e7c6      	b.n	8005e90 <_scanf_float+0x3a0>
 8005f02:	2500      	movs	r5, #0
 8005f04:	e635      	b.n	8005b72 <_scanf_float+0x82>
 8005f06:	bf00      	nop
 8005f08:	08009b58 	.word	0x08009b58
 8005f0c:	08009eed 	.word	0x08009eed

08005f10 <std>:
 8005f10:	2300      	movs	r3, #0
 8005f12:	b510      	push	{r4, lr}
 8005f14:	4604      	mov	r4, r0
 8005f16:	e9c0 3300 	strd	r3, r3, [r0]
 8005f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f1e:	6083      	str	r3, [r0, #8]
 8005f20:	8181      	strh	r1, [r0, #12]
 8005f22:	6643      	str	r3, [r0, #100]	; 0x64
 8005f24:	81c2      	strh	r2, [r0, #14]
 8005f26:	6183      	str	r3, [r0, #24]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	305c      	adds	r0, #92	; 0x5c
 8005f2e:	f000 f902 	bl	8006136 <memset>
 8005f32:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <std+0x38>)
 8005f34:	6263      	str	r3, [r4, #36]	; 0x24
 8005f36:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <std+0x3c>)
 8005f38:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <std+0x40>)
 8005f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f3e:	4b05      	ldr	r3, [pc, #20]	; (8005f54 <std+0x44>)
 8005f40:	6224      	str	r4, [r4, #32]
 8005f42:	6323      	str	r3, [r4, #48]	; 0x30
 8005f44:	bd10      	pop	{r4, pc}
 8005f46:	bf00      	nop
 8005f48:	080060b1 	.word	0x080060b1
 8005f4c:	080060d3 	.word	0x080060d3
 8005f50:	0800610b 	.word	0x0800610b
 8005f54:	0800612f 	.word	0x0800612f

08005f58 <stdio_exit_handler>:
 8005f58:	4a02      	ldr	r2, [pc, #8]	; (8005f64 <stdio_exit_handler+0xc>)
 8005f5a:	4903      	ldr	r1, [pc, #12]	; (8005f68 <stdio_exit_handler+0x10>)
 8005f5c:	4803      	ldr	r0, [pc, #12]	; (8005f6c <stdio_exit_handler+0x14>)
 8005f5e:	f000 b869 	b.w	8006034 <_fwalk_sglue>
 8005f62:	bf00      	nop
 8005f64:	2000000c 	.word	0x2000000c
 8005f68:	08008b79 	.word	0x08008b79
 8005f6c:	20000018 	.word	0x20000018

08005f70 <cleanup_stdio>:
 8005f70:	6841      	ldr	r1, [r0, #4]
 8005f72:	4b0c      	ldr	r3, [pc, #48]	; (8005fa4 <cleanup_stdio+0x34>)
 8005f74:	4299      	cmp	r1, r3
 8005f76:	b510      	push	{r4, lr}
 8005f78:	4604      	mov	r4, r0
 8005f7a:	d001      	beq.n	8005f80 <cleanup_stdio+0x10>
 8005f7c:	f002 fdfc 	bl	8008b78 <_fflush_r>
 8005f80:	68a1      	ldr	r1, [r4, #8]
 8005f82:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <cleanup_stdio+0x38>)
 8005f84:	4299      	cmp	r1, r3
 8005f86:	d002      	beq.n	8005f8e <cleanup_stdio+0x1e>
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f002 fdf5 	bl	8008b78 <_fflush_r>
 8005f8e:	68e1      	ldr	r1, [r4, #12]
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <cleanup_stdio+0x3c>)
 8005f92:	4299      	cmp	r1, r3
 8005f94:	d004      	beq.n	8005fa0 <cleanup_stdio+0x30>
 8005f96:	4620      	mov	r0, r4
 8005f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f9c:	f002 bdec 	b.w	8008b78 <_fflush_r>
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000324 	.word	0x20000324
 8005fa8:	2000038c 	.word	0x2000038c
 8005fac:	200003f4 	.word	0x200003f4

08005fb0 <global_stdio_init.part.0>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	; (8005fe0 <global_stdio_init.part.0+0x30>)
 8005fb4:	4c0b      	ldr	r4, [pc, #44]	; (8005fe4 <global_stdio_init.part.0+0x34>)
 8005fb6:	4a0c      	ldr	r2, [pc, #48]	; (8005fe8 <global_stdio_init.part.0+0x38>)
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	4620      	mov	r0, r4
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2104      	movs	r1, #4
 8005fc0:	f7ff ffa6 	bl	8005f10 <std>
 8005fc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005fc8:	2201      	movs	r2, #1
 8005fca:	2109      	movs	r1, #9
 8005fcc:	f7ff ffa0 	bl	8005f10 <std>
 8005fd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fda:	2112      	movs	r1, #18
 8005fdc:	f7ff bf98 	b.w	8005f10 <std>
 8005fe0:	2000045c 	.word	0x2000045c
 8005fe4:	20000324 	.word	0x20000324
 8005fe8:	08005f59 	.word	0x08005f59

08005fec <__sfp_lock_acquire>:
 8005fec:	4801      	ldr	r0, [pc, #4]	; (8005ff4 <__sfp_lock_acquire+0x8>)
 8005fee:	f000 b91f 	b.w	8006230 <__retarget_lock_acquire_recursive>
 8005ff2:	bf00      	nop
 8005ff4:	20000465 	.word	0x20000465

08005ff8 <__sfp_lock_release>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__sfp_lock_release+0x8>)
 8005ffa:	f000 b91a 	b.w	8006232 <__retarget_lock_release_recursive>
 8005ffe:	bf00      	nop
 8006000:	20000465 	.word	0x20000465

08006004 <__sinit>:
 8006004:	b510      	push	{r4, lr}
 8006006:	4604      	mov	r4, r0
 8006008:	f7ff fff0 	bl	8005fec <__sfp_lock_acquire>
 800600c:	6a23      	ldr	r3, [r4, #32]
 800600e:	b11b      	cbz	r3, 8006018 <__sinit+0x14>
 8006010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006014:	f7ff bff0 	b.w	8005ff8 <__sfp_lock_release>
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <__sinit+0x28>)
 800601a:	6223      	str	r3, [r4, #32]
 800601c:	4b04      	ldr	r3, [pc, #16]	; (8006030 <__sinit+0x2c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1f5      	bne.n	8006010 <__sinit+0xc>
 8006024:	f7ff ffc4 	bl	8005fb0 <global_stdio_init.part.0>
 8006028:	e7f2      	b.n	8006010 <__sinit+0xc>
 800602a:	bf00      	nop
 800602c:	08005f71 	.word	0x08005f71
 8006030:	2000045c 	.word	0x2000045c

08006034 <_fwalk_sglue>:
 8006034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006038:	4607      	mov	r7, r0
 800603a:	4688      	mov	r8, r1
 800603c:	4614      	mov	r4, r2
 800603e:	2600      	movs	r6, #0
 8006040:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006044:	f1b9 0901 	subs.w	r9, r9, #1
 8006048:	d505      	bpl.n	8006056 <_fwalk_sglue+0x22>
 800604a:	6824      	ldr	r4, [r4, #0]
 800604c:	2c00      	cmp	r4, #0
 800604e:	d1f7      	bne.n	8006040 <_fwalk_sglue+0xc>
 8006050:	4630      	mov	r0, r6
 8006052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006056:	89ab      	ldrh	r3, [r5, #12]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d907      	bls.n	800606c <_fwalk_sglue+0x38>
 800605c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006060:	3301      	adds	r3, #1
 8006062:	d003      	beq.n	800606c <_fwalk_sglue+0x38>
 8006064:	4629      	mov	r1, r5
 8006066:	4638      	mov	r0, r7
 8006068:	47c0      	blx	r8
 800606a:	4306      	orrs	r6, r0
 800606c:	3568      	adds	r5, #104	; 0x68
 800606e:	e7e9      	b.n	8006044 <_fwalk_sglue+0x10>

08006070 <siprintf>:
 8006070:	b40e      	push	{r1, r2, r3}
 8006072:	b500      	push	{lr}
 8006074:	b09c      	sub	sp, #112	; 0x70
 8006076:	ab1d      	add	r3, sp, #116	; 0x74
 8006078:	9002      	str	r0, [sp, #8]
 800607a:	9006      	str	r0, [sp, #24]
 800607c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006080:	4809      	ldr	r0, [pc, #36]	; (80060a8 <siprintf+0x38>)
 8006082:	9107      	str	r1, [sp, #28]
 8006084:	9104      	str	r1, [sp, #16]
 8006086:	4909      	ldr	r1, [pc, #36]	; (80060ac <siprintf+0x3c>)
 8006088:	f853 2b04 	ldr.w	r2, [r3], #4
 800608c:	9105      	str	r1, [sp, #20]
 800608e:	6800      	ldr	r0, [r0, #0]
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	a902      	add	r1, sp, #8
 8006094:	f002 fbec 	bl	8008870 <_svfiprintf_r>
 8006098:	9b02      	ldr	r3, [sp, #8]
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	b01c      	add	sp, #112	; 0x70
 80060a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a4:	b003      	add	sp, #12
 80060a6:	4770      	bx	lr
 80060a8:	20000064 	.word	0x20000064
 80060ac:	ffff0208 	.word	0xffff0208

080060b0 <__sread>:
 80060b0:	b510      	push	{r4, lr}
 80060b2:	460c      	mov	r4, r1
 80060b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b8:	f000 f86c 	bl	8006194 <_read_r>
 80060bc:	2800      	cmp	r0, #0
 80060be:	bfab      	itete	ge
 80060c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060c2:	89a3      	ldrhlt	r3, [r4, #12]
 80060c4:	181b      	addge	r3, r3, r0
 80060c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060ca:	bfac      	ite	ge
 80060cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80060ce:	81a3      	strhlt	r3, [r4, #12]
 80060d0:	bd10      	pop	{r4, pc}

080060d2 <__swrite>:
 80060d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d6:	461f      	mov	r7, r3
 80060d8:	898b      	ldrh	r3, [r1, #12]
 80060da:	05db      	lsls	r3, r3, #23
 80060dc:	4605      	mov	r5, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	4616      	mov	r6, r2
 80060e2:	d505      	bpl.n	80060f0 <__swrite+0x1e>
 80060e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e8:	2302      	movs	r3, #2
 80060ea:	2200      	movs	r2, #0
 80060ec:	f000 f840 	bl	8006170 <_lseek_r>
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060fa:	81a3      	strh	r3, [r4, #12]
 80060fc:	4632      	mov	r2, r6
 80060fe:	463b      	mov	r3, r7
 8006100:	4628      	mov	r0, r5
 8006102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006106:	f000 b857 	b.w	80061b8 <_write_r>

0800610a <__sseek>:
 800610a:	b510      	push	{r4, lr}
 800610c:	460c      	mov	r4, r1
 800610e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006112:	f000 f82d 	bl	8006170 <_lseek_r>
 8006116:	1c43      	adds	r3, r0, #1
 8006118:	89a3      	ldrh	r3, [r4, #12]
 800611a:	bf15      	itete	ne
 800611c:	6560      	strne	r0, [r4, #84]	; 0x54
 800611e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006126:	81a3      	strheq	r3, [r4, #12]
 8006128:	bf18      	it	ne
 800612a:	81a3      	strhne	r3, [r4, #12]
 800612c:	bd10      	pop	{r4, pc}

0800612e <__sclose>:
 800612e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006132:	f000 b80d 	b.w	8006150 <_close_r>

08006136 <memset>:
 8006136:	4402      	add	r2, r0
 8006138:	4603      	mov	r3, r0
 800613a:	4293      	cmp	r3, r2
 800613c:	d100      	bne.n	8006140 <memset+0xa>
 800613e:	4770      	bx	lr
 8006140:	f803 1b01 	strb.w	r1, [r3], #1
 8006144:	e7f9      	b.n	800613a <memset+0x4>
	...

08006148 <_localeconv_r>:
 8006148:	4800      	ldr	r0, [pc, #0]	; (800614c <_localeconv_r+0x4>)
 800614a:	4770      	bx	lr
 800614c:	20000158 	.word	0x20000158

08006150 <_close_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d06      	ldr	r5, [pc, #24]	; (800616c <_close_r+0x1c>)
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	602b      	str	r3, [r5, #0]
 800615c:	f7fb fb49 	bl	80017f2 <_close>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_close_r+0x1a>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_close_r+0x1a>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	20000460 	.word	0x20000460

08006170 <_lseek_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4d07      	ldr	r5, [pc, #28]	; (8006190 <_lseek_r+0x20>)
 8006174:	4604      	mov	r4, r0
 8006176:	4608      	mov	r0, r1
 8006178:	4611      	mov	r1, r2
 800617a:	2200      	movs	r2, #0
 800617c:	602a      	str	r2, [r5, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	f7fb fb5e 	bl	8001840 <_lseek>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_lseek_r+0x1e>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_lseek_r+0x1e>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	20000460 	.word	0x20000460

08006194 <_read_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	; (80061b4 <_read_r+0x20>)
 8006198:	4604      	mov	r4, r0
 800619a:	4608      	mov	r0, r1
 800619c:	4611      	mov	r1, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	602a      	str	r2, [r5, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f7fb faec 	bl	8001780 <_read>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_read_r+0x1e>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_read_r+0x1e>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	20000460 	.word	0x20000460

080061b8 <_write_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d07      	ldr	r5, [pc, #28]	; (80061d8 <_write_r+0x20>)
 80061bc:	4604      	mov	r4, r0
 80061be:	4608      	mov	r0, r1
 80061c0:	4611      	mov	r1, r2
 80061c2:	2200      	movs	r2, #0
 80061c4:	602a      	str	r2, [r5, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f7fb faf7 	bl	80017ba <_write>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_write_r+0x1e>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_write_r+0x1e>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	20000460 	.word	0x20000460

080061dc <__errno>:
 80061dc:	4b01      	ldr	r3, [pc, #4]	; (80061e4 <__errno+0x8>)
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000064 	.word	0x20000064

080061e8 <__libc_init_array>:
 80061e8:	b570      	push	{r4, r5, r6, lr}
 80061ea:	4d0d      	ldr	r5, [pc, #52]	; (8006220 <__libc_init_array+0x38>)
 80061ec:	4c0d      	ldr	r4, [pc, #52]	; (8006224 <__libc_init_array+0x3c>)
 80061ee:	1b64      	subs	r4, r4, r5
 80061f0:	10a4      	asrs	r4, r4, #2
 80061f2:	2600      	movs	r6, #0
 80061f4:	42a6      	cmp	r6, r4
 80061f6:	d109      	bne.n	800620c <__libc_init_array+0x24>
 80061f8:	4d0b      	ldr	r5, [pc, #44]	; (8006228 <__libc_init_array+0x40>)
 80061fa:	4c0c      	ldr	r4, [pc, #48]	; (800622c <__libc_init_array+0x44>)
 80061fc:	f003 fbd4 	bl	80099a8 <_init>
 8006200:	1b64      	subs	r4, r4, r5
 8006202:	10a4      	asrs	r4, r4, #2
 8006204:	2600      	movs	r6, #0
 8006206:	42a6      	cmp	r6, r4
 8006208:	d105      	bne.n	8006216 <__libc_init_array+0x2e>
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006210:	4798      	blx	r3
 8006212:	3601      	adds	r6, #1
 8006214:	e7ee      	b.n	80061f4 <__libc_init_array+0xc>
 8006216:	f855 3b04 	ldr.w	r3, [r5], #4
 800621a:	4798      	blx	r3
 800621c:	3601      	adds	r6, #1
 800621e:	e7f2      	b.n	8006206 <__libc_init_array+0x1e>
 8006220:	08009f58 	.word	0x08009f58
 8006224:	08009f58 	.word	0x08009f58
 8006228:	08009f58 	.word	0x08009f58
 800622c:	08009f5c 	.word	0x08009f5c

08006230 <__retarget_lock_acquire_recursive>:
 8006230:	4770      	bx	lr

08006232 <__retarget_lock_release_recursive>:
 8006232:	4770      	bx	lr

08006234 <nanf>:
 8006234:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800623c <nanf+0x8>
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	7fc00000 	.word	0x7fc00000

08006240 <quorem>:
 8006240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	6903      	ldr	r3, [r0, #16]
 8006246:	690c      	ldr	r4, [r1, #16]
 8006248:	42a3      	cmp	r3, r4
 800624a:	4607      	mov	r7, r0
 800624c:	db7e      	blt.n	800634c <quorem+0x10c>
 800624e:	3c01      	subs	r4, #1
 8006250:	f101 0814 	add.w	r8, r1, #20
 8006254:	f100 0514 	add.w	r5, r0, #20
 8006258:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800625c:	9301      	str	r3, [sp, #4]
 800625e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006262:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006266:	3301      	adds	r3, #1
 8006268:	429a      	cmp	r2, r3
 800626a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800626e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006272:	fbb2 f6f3 	udiv	r6, r2, r3
 8006276:	d331      	bcc.n	80062dc <quorem+0x9c>
 8006278:	f04f 0e00 	mov.w	lr, #0
 800627c:	4640      	mov	r0, r8
 800627e:	46ac      	mov	ip, r5
 8006280:	46f2      	mov	sl, lr
 8006282:	f850 2b04 	ldr.w	r2, [r0], #4
 8006286:	b293      	uxth	r3, r2
 8006288:	fb06 e303 	mla	r3, r6, r3, lr
 800628c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006290:	0c1a      	lsrs	r2, r3, #16
 8006292:	b29b      	uxth	r3, r3
 8006294:	ebaa 0303 	sub.w	r3, sl, r3
 8006298:	f8dc a000 	ldr.w	sl, [ip]
 800629c:	fa13 f38a 	uxtah	r3, r3, sl
 80062a0:	fb06 220e 	mla	r2, r6, lr, r2
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	9b00      	ldr	r3, [sp, #0]
 80062a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062ac:	b292      	uxth	r2, r2
 80062ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80062ba:	4581      	cmp	r9, r0
 80062bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062c0:	f84c 3b04 	str.w	r3, [ip], #4
 80062c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062c8:	d2db      	bcs.n	8006282 <quorem+0x42>
 80062ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80062ce:	b92b      	cbnz	r3, 80062dc <quorem+0x9c>
 80062d0:	9b01      	ldr	r3, [sp, #4]
 80062d2:	3b04      	subs	r3, #4
 80062d4:	429d      	cmp	r5, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	d32c      	bcc.n	8006334 <quorem+0xf4>
 80062da:	613c      	str	r4, [r7, #16]
 80062dc:	4638      	mov	r0, r7
 80062de:	f001 f9ef 	bl	80076c0 <__mcmp>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	db22      	blt.n	800632c <quorem+0xec>
 80062e6:	3601      	adds	r6, #1
 80062e8:	4629      	mov	r1, r5
 80062ea:	2000      	movs	r0, #0
 80062ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80062f0:	f8d1 c000 	ldr.w	ip, [r1]
 80062f4:	b293      	uxth	r3, r2
 80062f6:	1ac3      	subs	r3, r0, r3
 80062f8:	0c12      	lsrs	r2, r2, #16
 80062fa:	fa13 f38c 	uxtah	r3, r3, ip
 80062fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006302:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006306:	b29b      	uxth	r3, r3
 8006308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800630c:	45c1      	cmp	r9, r8
 800630e:	f841 3b04 	str.w	r3, [r1], #4
 8006312:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006316:	d2e9      	bcs.n	80062ec <quorem+0xac>
 8006318:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800631c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006320:	b922      	cbnz	r2, 800632c <quorem+0xec>
 8006322:	3b04      	subs	r3, #4
 8006324:	429d      	cmp	r5, r3
 8006326:	461a      	mov	r2, r3
 8006328:	d30a      	bcc.n	8006340 <quorem+0x100>
 800632a:	613c      	str	r4, [r7, #16]
 800632c:	4630      	mov	r0, r6
 800632e:	b003      	add	sp, #12
 8006330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	3b04      	subs	r3, #4
 8006338:	2a00      	cmp	r2, #0
 800633a:	d1ce      	bne.n	80062da <quorem+0x9a>
 800633c:	3c01      	subs	r4, #1
 800633e:	e7c9      	b.n	80062d4 <quorem+0x94>
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	3b04      	subs	r3, #4
 8006344:	2a00      	cmp	r2, #0
 8006346:	d1f0      	bne.n	800632a <quorem+0xea>
 8006348:	3c01      	subs	r4, #1
 800634a:	e7eb      	b.n	8006324 <quorem+0xe4>
 800634c:	2000      	movs	r0, #0
 800634e:	e7ee      	b.n	800632e <quorem+0xee>

08006350 <_dtoa_r>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	ed2d 8b04 	vpush	{d8-d9}
 8006358:	69c5      	ldr	r5, [r0, #28]
 800635a:	b093      	sub	sp, #76	; 0x4c
 800635c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006360:	ec57 6b10 	vmov	r6, r7, d0
 8006364:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006368:	9107      	str	r1, [sp, #28]
 800636a:	4604      	mov	r4, r0
 800636c:	920a      	str	r2, [sp, #40]	; 0x28
 800636e:	930d      	str	r3, [sp, #52]	; 0x34
 8006370:	b975      	cbnz	r5, 8006390 <_dtoa_r+0x40>
 8006372:	2010      	movs	r0, #16
 8006374:	f000 fe2a 	bl	8006fcc <malloc>
 8006378:	4602      	mov	r2, r0
 800637a:	61e0      	str	r0, [r4, #28]
 800637c:	b920      	cbnz	r0, 8006388 <_dtoa_r+0x38>
 800637e:	4bae      	ldr	r3, [pc, #696]	; (8006638 <_dtoa_r+0x2e8>)
 8006380:	21ef      	movs	r1, #239	; 0xef
 8006382:	48ae      	ldr	r0, [pc, #696]	; (800663c <_dtoa_r+0x2ec>)
 8006384:	f002 fc74 	bl	8008c70 <__assert_func>
 8006388:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800638c:	6005      	str	r5, [r0, #0]
 800638e:	60c5      	str	r5, [r0, #12]
 8006390:	69e3      	ldr	r3, [r4, #28]
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	b151      	cbz	r1, 80063ac <_dtoa_r+0x5c>
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	604a      	str	r2, [r1, #4]
 800639a:	2301      	movs	r3, #1
 800639c:	4093      	lsls	r3, r2
 800639e:	608b      	str	r3, [r1, #8]
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 ff07 	bl	80071b4 <_Bfree>
 80063a6:	69e3      	ldr	r3, [r4, #28]
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	1e3b      	subs	r3, r7, #0
 80063ae:	bfbb      	ittet	lt
 80063b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063b4:	9303      	strlt	r3, [sp, #12]
 80063b6:	2300      	movge	r3, #0
 80063b8:	2201      	movlt	r2, #1
 80063ba:	bfac      	ite	ge
 80063bc:	f8c8 3000 	strge.w	r3, [r8]
 80063c0:	f8c8 2000 	strlt.w	r2, [r8]
 80063c4:	4b9e      	ldr	r3, [pc, #632]	; (8006640 <_dtoa_r+0x2f0>)
 80063c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80063ca:	ea33 0308 	bics.w	r3, r3, r8
 80063ce:	d11b      	bne.n	8006408 <_dtoa_r+0xb8>
 80063d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80063dc:	4333      	orrs	r3, r6
 80063de:	f000 8593 	beq.w	8006f08 <_dtoa_r+0xbb8>
 80063e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063e4:	b963      	cbnz	r3, 8006400 <_dtoa_r+0xb0>
 80063e6:	4b97      	ldr	r3, [pc, #604]	; (8006644 <_dtoa_r+0x2f4>)
 80063e8:	e027      	b.n	800643a <_dtoa_r+0xea>
 80063ea:	4b97      	ldr	r3, [pc, #604]	; (8006648 <_dtoa_r+0x2f8>)
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	3308      	adds	r3, #8
 80063f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	9800      	ldr	r0, [sp, #0]
 80063f6:	b013      	add	sp, #76	; 0x4c
 80063f8:	ecbd 8b04 	vpop	{d8-d9}
 80063fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006400:	4b90      	ldr	r3, [pc, #576]	; (8006644 <_dtoa_r+0x2f4>)
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	3303      	adds	r3, #3
 8006406:	e7f3      	b.n	80063f0 <_dtoa_r+0xa0>
 8006408:	ed9d 7b02 	vldr	d7, [sp, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	ec51 0b17 	vmov	r0, r1, d7
 8006412:	eeb0 8a47 	vmov.f32	s16, s14
 8006416:	eef0 8a67 	vmov.f32	s17, s15
 800641a:	2300      	movs	r3, #0
 800641c:	f7fa fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 8006420:	4681      	mov	r9, r0
 8006422:	b160      	cbz	r0, 800643e <_dtoa_r+0xee>
 8006424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006426:	2301      	movs	r3, #1
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 8568 	beq.w	8006f02 <_dtoa_r+0xbb2>
 8006432:	4b86      	ldr	r3, [pc, #536]	; (800664c <_dtoa_r+0x2fc>)
 8006434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	3b01      	subs	r3, #1
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	e7da      	b.n	80063f4 <_dtoa_r+0xa4>
 800643e:	aa10      	add	r2, sp, #64	; 0x40
 8006440:	a911      	add	r1, sp, #68	; 0x44
 8006442:	4620      	mov	r0, r4
 8006444:	eeb0 0a48 	vmov.f32	s0, s16
 8006448:	eef0 0a68 	vmov.f32	s1, s17
 800644c:	f001 fa4e 	bl	80078ec <__d2b>
 8006450:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006454:	4682      	mov	sl, r0
 8006456:	2d00      	cmp	r5, #0
 8006458:	d07f      	beq.n	800655a <_dtoa_r+0x20a>
 800645a:	ee18 3a90 	vmov	r3, s17
 800645e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006462:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006466:	ec51 0b18 	vmov	r0, r1, d8
 800646a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800646e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006472:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006476:	4619      	mov	r1, r3
 8006478:	2200      	movs	r2, #0
 800647a:	4b75      	ldr	r3, [pc, #468]	; (8006650 <_dtoa_r+0x300>)
 800647c:	f7f9 ff04 	bl	8000288 <__aeabi_dsub>
 8006480:	a367      	add	r3, pc, #412	; (adr r3, 8006620 <_dtoa_r+0x2d0>)
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	f7fa f8b7 	bl	80005f8 <__aeabi_dmul>
 800648a:	a367      	add	r3, pc, #412	; (adr r3, 8006628 <_dtoa_r+0x2d8>)
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f7f9 fefc 	bl	800028c <__adddf3>
 8006494:	4606      	mov	r6, r0
 8006496:	4628      	mov	r0, r5
 8006498:	460f      	mov	r7, r1
 800649a:	f7fa f843 	bl	8000524 <__aeabi_i2d>
 800649e:	a364      	add	r3, pc, #400	; (adr r3, 8006630 <_dtoa_r+0x2e0>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa f8a8 	bl	80005f8 <__aeabi_dmul>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4630      	mov	r0, r6
 80064ae:	4639      	mov	r1, r7
 80064b0:	f7f9 feec 	bl	800028c <__adddf3>
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	f7fa fb4e 	bl	8000b58 <__aeabi_d2iz>
 80064bc:	2200      	movs	r2, #0
 80064be:	4683      	mov	fp, r0
 80064c0:	2300      	movs	r3, #0
 80064c2:	4630      	mov	r0, r6
 80064c4:	4639      	mov	r1, r7
 80064c6:	f7fa fb09 	bl	8000adc <__aeabi_dcmplt>
 80064ca:	b148      	cbz	r0, 80064e0 <_dtoa_r+0x190>
 80064cc:	4658      	mov	r0, fp
 80064ce:	f7fa f829 	bl	8000524 <__aeabi_i2d>
 80064d2:	4632      	mov	r2, r6
 80064d4:	463b      	mov	r3, r7
 80064d6:	f7fa faf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80064da:	b908      	cbnz	r0, 80064e0 <_dtoa_r+0x190>
 80064dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064e0:	f1bb 0f16 	cmp.w	fp, #22
 80064e4:	d857      	bhi.n	8006596 <_dtoa_r+0x246>
 80064e6:	4b5b      	ldr	r3, [pc, #364]	; (8006654 <_dtoa_r+0x304>)
 80064e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	ec51 0b18 	vmov	r0, r1, d8
 80064f4:	f7fa faf2 	bl	8000adc <__aeabi_dcmplt>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d04e      	beq.n	800659a <_dtoa_r+0x24a>
 80064fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006500:	2300      	movs	r3, #0
 8006502:	930c      	str	r3, [sp, #48]	; 0x30
 8006504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006506:	1b5b      	subs	r3, r3, r5
 8006508:	1e5a      	subs	r2, r3, #1
 800650a:	bf45      	ittet	mi
 800650c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006510:	9305      	strmi	r3, [sp, #20]
 8006512:	2300      	movpl	r3, #0
 8006514:	2300      	movmi	r3, #0
 8006516:	9206      	str	r2, [sp, #24]
 8006518:	bf54      	ite	pl
 800651a:	9305      	strpl	r3, [sp, #20]
 800651c:	9306      	strmi	r3, [sp, #24]
 800651e:	f1bb 0f00 	cmp.w	fp, #0
 8006522:	db3c      	blt.n	800659e <_dtoa_r+0x24e>
 8006524:	9b06      	ldr	r3, [sp, #24]
 8006526:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800652a:	445b      	add	r3, fp
 800652c:	9306      	str	r3, [sp, #24]
 800652e:	2300      	movs	r3, #0
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	9b07      	ldr	r3, [sp, #28]
 8006534:	2b09      	cmp	r3, #9
 8006536:	d868      	bhi.n	800660a <_dtoa_r+0x2ba>
 8006538:	2b05      	cmp	r3, #5
 800653a:	bfc4      	itt	gt
 800653c:	3b04      	subgt	r3, #4
 800653e:	9307      	strgt	r3, [sp, #28]
 8006540:	9b07      	ldr	r3, [sp, #28]
 8006542:	f1a3 0302 	sub.w	r3, r3, #2
 8006546:	bfcc      	ite	gt
 8006548:	2500      	movgt	r5, #0
 800654a:	2501      	movle	r5, #1
 800654c:	2b03      	cmp	r3, #3
 800654e:	f200 8085 	bhi.w	800665c <_dtoa_r+0x30c>
 8006552:	e8df f003 	tbb	[pc, r3]
 8006556:	3b2e      	.short	0x3b2e
 8006558:	5839      	.short	0x5839
 800655a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800655e:	441d      	add	r5, r3
 8006560:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006564:	2b20      	cmp	r3, #32
 8006566:	bfc1      	itttt	gt
 8006568:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800656c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006570:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006574:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006578:	bfd6      	itet	le
 800657a:	f1c3 0320 	rsble	r3, r3, #32
 800657e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006582:	fa06 f003 	lslle.w	r0, r6, r3
 8006586:	f7f9 ffbd 	bl	8000504 <__aeabi_ui2d>
 800658a:	2201      	movs	r2, #1
 800658c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006590:	3d01      	subs	r5, #1
 8006592:	920e      	str	r2, [sp, #56]	; 0x38
 8006594:	e76f      	b.n	8006476 <_dtoa_r+0x126>
 8006596:	2301      	movs	r3, #1
 8006598:	e7b3      	b.n	8006502 <_dtoa_r+0x1b2>
 800659a:	900c      	str	r0, [sp, #48]	; 0x30
 800659c:	e7b2      	b.n	8006504 <_dtoa_r+0x1b4>
 800659e:	9b05      	ldr	r3, [sp, #20]
 80065a0:	eba3 030b 	sub.w	r3, r3, fp
 80065a4:	9305      	str	r3, [sp, #20]
 80065a6:	f1cb 0300 	rsb	r3, fp, #0
 80065aa:	9308      	str	r3, [sp, #32]
 80065ac:	2300      	movs	r3, #0
 80065ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80065b0:	e7bf      	b.n	8006532 <_dtoa_r+0x1e2>
 80065b2:	2300      	movs	r3, #0
 80065b4:	9309      	str	r3, [sp, #36]	; 0x24
 80065b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	dc52      	bgt.n	8006662 <_dtoa_r+0x312>
 80065bc:	2301      	movs	r3, #1
 80065be:	9301      	str	r3, [sp, #4]
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	461a      	mov	r2, r3
 80065c4:	920a      	str	r2, [sp, #40]	; 0x28
 80065c6:	e00b      	b.n	80065e0 <_dtoa_r+0x290>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e7f3      	b.n	80065b4 <_dtoa_r+0x264>
 80065cc:	2300      	movs	r3, #0
 80065ce:	9309      	str	r3, [sp, #36]	; 0x24
 80065d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d2:	445b      	add	r3, fp
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	3301      	adds	r3, #1
 80065d8:	2b01      	cmp	r3, #1
 80065da:	9304      	str	r3, [sp, #16]
 80065dc:	bfb8      	it	lt
 80065de:	2301      	movlt	r3, #1
 80065e0:	69e0      	ldr	r0, [r4, #28]
 80065e2:	2100      	movs	r1, #0
 80065e4:	2204      	movs	r2, #4
 80065e6:	f102 0614 	add.w	r6, r2, #20
 80065ea:	429e      	cmp	r6, r3
 80065ec:	d93d      	bls.n	800666a <_dtoa_r+0x31a>
 80065ee:	6041      	str	r1, [r0, #4]
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 fd9f 	bl	8007134 <_Balloc>
 80065f6:	9000      	str	r0, [sp, #0]
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d139      	bne.n	8006670 <_dtoa_r+0x320>
 80065fc:	4b16      	ldr	r3, [pc, #88]	; (8006658 <_dtoa_r+0x308>)
 80065fe:	4602      	mov	r2, r0
 8006600:	f240 11af 	movw	r1, #431	; 0x1af
 8006604:	e6bd      	b.n	8006382 <_dtoa_r+0x32>
 8006606:	2301      	movs	r3, #1
 8006608:	e7e1      	b.n	80065ce <_dtoa_r+0x27e>
 800660a:	2501      	movs	r5, #1
 800660c:	2300      	movs	r3, #0
 800660e:	9307      	str	r3, [sp, #28]
 8006610:	9509      	str	r5, [sp, #36]	; 0x24
 8006612:	f04f 33ff 	mov.w	r3, #4294967295
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	9304      	str	r3, [sp, #16]
 800661a:	2200      	movs	r2, #0
 800661c:	2312      	movs	r3, #18
 800661e:	e7d1      	b.n	80065c4 <_dtoa_r+0x274>
 8006620:	636f4361 	.word	0x636f4361
 8006624:	3fd287a7 	.word	0x3fd287a7
 8006628:	8b60c8b3 	.word	0x8b60c8b3
 800662c:	3fc68a28 	.word	0x3fc68a28
 8006630:	509f79fb 	.word	0x509f79fb
 8006634:	3fd34413 	.word	0x3fd34413
 8006638:	08009b6a 	.word	0x08009b6a
 800663c:	08009b81 	.word	0x08009b81
 8006640:	7ff00000 	.word	0x7ff00000
 8006644:	08009b66 	.word	0x08009b66
 8006648:	08009b5d 	.word	0x08009b5d
 800664c:	08009b35 	.word	0x08009b35
 8006650:	3ff80000 	.word	0x3ff80000
 8006654:	08009c70 	.word	0x08009c70
 8006658:	08009bd9 	.word	0x08009bd9
 800665c:	2301      	movs	r3, #1
 800665e:	9309      	str	r3, [sp, #36]	; 0x24
 8006660:	e7d7      	b.n	8006612 <_dtoa_r+0x2c2>
 8006662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	9304      	str	r3, [sp, #16]
 8006668:	e7ba      	b.n	80065e0 <_dtoa_r+0x290>
 800666a:	3101      	adds	r1, #1
 800666c:	0052      	lsls	r2, r2, #1
 800666e:	e7ba      	b.n	80065e6 <_dtoa_r+0x296>
 8006670:	69e3      	ldr	r3, [r4, #28]
 8006672:	9a00      	ldr	r2, [sp, #0]
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	9b04      	ldr	r3, [sp, #16]
 8006678:	2b0e      	cmp	r3, #14
 800667a:	f200 80a8 	bhi.w	80067ce <_dtoa_r+0x47e>
 800667e:	2d00      	cmp	r5, #0
 8006680:	f000 80a5 	beq.w	80067ce <_dtoa_r+0x47e>
 8006684:	f1bb 0f00 	cmp.w	fp, #0
 8006688:	dd38      	ble.n	80066fc <_dtoa_r+0x3ac>
 800668a:	4bc0      	ldr	r3, [pc, #768]	; (800698c <_dtoa_r+0x63c>)
 800668c:	f00b 020f 	and.w	r2, fp, #15
 8006690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006694:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006698:	e9d3 6700 	ldrd	r6, r7, [r3]
 800669c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80066a0:	d019      	beq.n	80066d6 <_dtoa_r+0x386>
 80066a2:	4bbb      	ldr	r3, [pc, #748]	; (8006990 <_dtoa_r+0x640>)
 80066a4:	ec51 0b18 	vmov	r0, r1, d8
 80066a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066ac:	f7fa f8ce 	bl	800084c <__aeabi_ddiv>
 80066b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b4:	f008 080f 	and.w	r8, r8, #15
 80066b8:	2503      	movs	r5, #3
 80066ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006990 <_dtoa_r+0x640>
 80066be:	f1b8 0f00 	cmp.w	r8, #0
 80066c2:	d10a      	bne.n	80066da <_dtoa_r+0x38a>
 80066c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c8:	4632      	mov	r2, r6
 80066ca:	463b      	mov	r3, r7
 80066cc:	f7fa f8be 	bl	800084c <__aeabi_ddiv>
 80066d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d4:	e02b      	b.n	800672e <_dtoa_r+0x3de>
 80066d6:	2502      	movs	r5, #2
 80066d8:	e7ef      	b.n	80066ba <_dtoa_r+0x36a>
 80066da:	f018 0f01 	tst.w	r8, #1
 80066de:	d008      	beq.n	80066f2 <_dtoa_r+0x3a2>
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80066e8:	f7f9 ff86 	bl	80005f8 <__aeabi_dmul>
 80066ec:	3501      	adds	r5, #1
 80066ee:	4606      	mov	r6, r0
 80066f0:	460f      	mov	r7, r1
 80066f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066f6:	f109 0908 	add.w	r9, r9, #8
 80066fa:	e7e0      	b.n	80066be <_dtoa_r+0x36e>
 80066fc:	f000 809f 	beq.w	800683e <_dtoa_r+0x4ee>
 8006700:	f1cb 0600 	rsb	r6, fp, #0
 8006704:	4ba1      	ldr	r3, [pc, #644]	; (800698c <_dtoa_r+0x63c>)
 8006706:	4fa2      	ldr	r7, [pc, #648]	; (8006990 <_dtoa_r+0x640>)
 8006708:	f006 020f 	and.w	r2, r6, #15
 800670c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	ec51 0b18 	vmov	r0, r1, d8
 8006718:	f7f9 ff6e 	bl	80005f8 <__aeabi_dmul>
 800671c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006720:	1136      	asrs	r6, r6, #4
 8006722:	2300      	movs	r3, #0
 8006724:	2502      	movs	r5, #2
 8006726:	2e00      	cmp	r6, #0
 8006728:	d17e      	bne.n	8006828 <_dtoa_r+0x4d8>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1d0      	bne.n	80066d0 <_dtoa_r+0x380>
 800672e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006730:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8084 	beq.w	8006842 <_dtoa_r+0x4f2>
 800673a:	4b96      	ldr	r3, [pc, #600]	; (8006994 <_dtoa_r+0x644>)
 800673c:	2200      	movs	r2, #0
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7fa f9cb 	bl	8000adc <__aeabi_dcmplt>
 8006746:	2800      	cmp	r0, #0
 8006748:	d07b      	beq.n	8006842 <_dtoa_r+0x4f2>
 800674a:	9b04      	ldr	r3, [sp, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d078      	beq.n	8006842 <_dtoa_r+0x4f2>
 8006750:	9b01      	ldr	r3, [sp, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	dd39      	ble.n	80067ca <_dtoa_r+0x47a>
 8006756:	4b90      	ldr	r3, [pc, #576]	; (8006998 <_dtoa_r+0x648>)
 8006758:	2200      	movs	r2, #0
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 ff4b 	bl	80005f8 <__aeabi_dmul>
 8006762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006766:	9e01      	ldr	r6, [sp, #4]
 8006768:	f10b 37ff 	add.w	r7, fp, #4294967295
 800676c:	3501      	adds	r5, #1
 800676e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006772:	4628      	mov	r0, r5
 8006774:	f7f9 fed6 	bl	8000524 <__aeabi_i2d>
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	4b86      	ldr	r3, [pc, #536]	; (800699c <_dtoa_r+0x64c>)
 8006782:	2200      	movs	r2, #0
 8006784:	f7f9 fd82 	bl	800028c <__adddf3>
 8006788:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800678c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006790:	9303      	str	r3, [sp, #12]
 8006792:	2e00      	cmp	r6, #0
 8006794:	d158      	bne.n	8006848 <_dtoa_r+0x4f8>
 8006796:	4b82      	ldr	r3, [pc, #520]	; (80069a0 <_dtoa_r+0x650>)
 8006798:	2200      	movs	r2, #0
 800679a:	4640      	mov	r0, r8
 800679c:	4649      	mov	r1, r9
 800679e:	f7f9 fd73 	bl	8000288 <__aeabi_dsub>
 80067a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067a6:	4680      	mov	r8, r0
 80067a8:	4689      	mov	r9, r1
 80067aa:	f7fa f9b5 	bl	8000b18 <__aeabi_dcmpgt>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f040 8296 	bne.w	8006ce0 <_dtoa_r+0x990>
 80067b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80067b8:	4640      	mov	r0, r8
 80067ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067be:	4649      	mov	r1, r9
 80067c0:	f7fa f98c 	bl	8000adc <__aeabi_dcmplt>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	f040 8289 	bne.w	8006cdc <_dtoa_r+0x98c>
 80067ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80067ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f2c0 814e 	blt.w	8006a72 <_dtoa_r+0x722>
 80067d6:	f1bb 0f0e 	cmp.w	fp, #14
 80067da:	f300 814a 	bgt.w	8006a72 <_dtoa_r+0x722>
 80067de:	4b6b      	ldr	r3, [pc, #428]	; (800698c <_dtoa_r+0x63c>)
 80067e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f280 80dc 	bge.w	80069a8 <_dtoa_r+0x658>
 80067f0:	9b04      	ldr	r3, [sp, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f300 80d8 	bgt.w	80069a8 <_dtoa_r+0x658>
 80067f8:	f040 826f 	bne.w	8006cda <_dtoa_r+0x98a>
 80067fc:	4b68      	ldr	r3, [pc, #416]	; (80069a0 <_dtoa_r+0x650>)
 80067fe:	2200      	movs	r2, #0
 8006800:	4640      	mov	r0, r8
 8006802:	4649      	mov	r1, r9
 8006804:	f7f9 fef8 	bl	80005f8 <__aeabi_dmul>
 8006808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800680c:	f7fa f97a 	bl	8000b04 <__aeabi_dcmpge>
 8006810:	9e04      	ldr	r6, [sp, #16]
 8006812:	4637      	mov	r7, r6
 8006814:	2800      	cmp	r0, #0
 8006816:	f040 8245 	bne.w	8006ca4 <_dtoa_r+0x954>
 800681a:	9d00      	ldr	r5, [sp, #0]
 800681c:	2331      	movs	r3, #49	; 0x31
 800681e:	f805 3b01 	strb.w	r3, [r5], #1
 8006822:	f10b 0b01 	add.w	fp, fp, #1
 8006826:	e241      	b.n	8006cac <_dtoa_r+0x95c>
 8006828:	07f2      	lsls	r2, r6, #31
 800682a:	d505      	bpl.n	8006838 <_dtoa_r+0x4e8>
 800682c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006830:	f7f9 fee2 	bl	80005f8 <__aeabi_dmul>
 8006834:	3501      	adds	r5, #1
 8006836:	2301      	movs	r3, #1
 8006838:	1076      	asrs	r6, r6, #1
 800683a:	3708      	adds	r7, #8
 800683c:	e773      	b.n	8006726 <_dtoa_r+0x3d6>
 800683e:	2502      	movs	r5, #2
 8006840:	e775      	b.n	800672e <_dtoa_r+0x3de>
 8006842:	9e04      	ldr	r6, [sp, #16]
 8006844:	465f      	mov	r7, fp
 8006846:	e792      	b.n	800676e <_dtoa_r+0x41e>
 8006848:	9900      	ldr	r1, [sp, #0]
 800684a:	4b50      	ldr	r3, [pc, #320]	; (800698c <_dtoa_r+0x63c>)
 800684c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006850:	4431      	add	r1, r6
 8006852:	9102      	str	r1, [sp, #8]
 8006854:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006856:	eeb0 9a47 	vmov.f32	s18, s14
 800685a:	eef0 9a67 	vmov.f32	s19, s15
 800685e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006862:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006866:	2900      	cmp	r1, #0
 8006868:	d044      	beq.n	80068f4 <_dtoa_r+0x5a4>
 800686a:	494e      	ldr	r1, [pc, #312]	; (80069a4 <_dtoa_r+0x654>)
 800686c:	2000      	movs	r0, #0
 800686e:	f7f9 ffed 	bl	800084c <__aeabi_ddiv>
 8006872:	ec53 2b19 	vmov	r2, r3, d9
 8006876:	f7f9 fd07 	bl	8000288 <__aeabi_dsub>
 800687a:	9d00      	ldr	r5, [sp, #0]
 800687c:	ec41 0b19 	vmov	d9, r0, r1
 8006880:	4649      	mov	r1, r9
 8006882:	4640      	mov	r0, r8
 8006884:	f7fa f968 	bl	8000b58 <__aeabi_d2iz>
 8006888:	4606      	mov	r6, r0
 800688a:	f7f9 fe4b 	bl	8000524 <__aeabi_i2d>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	f7f9 fcf7 	bl	8000288 <__aeabi_dsub>
 800689a:	3630      	adds	r6, #48	; 0x30
 800689c:	f805 6b01 	strb.w	r6, [r5], #1
 80068a0:	ec53 2b19 	vmov	r2, r3, d9
 80068a4:	4680      	mov	r8, r0
 80068a6:	4689      	mov	r9, r1
 80068a8:	f7fa f918 	bl	8000adc <__aeabi_dcmplt>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d164      	bne.n	800697a <_dtoa_r+0x62a>
 80068b0:	4642      	mov	r2, r8
 80068b2:	464b      	mov	r3, r9
 80068b4:	4937      	ldr	r1, [pc, #220]	; (8006994 <_dtoa_r+0x644>)
 80068b6:	2000      	movs	r0, #0
 80068b8:	f7f9 fce6 	bl	8000288 <__aeabi_dsub>
 80068bc:	ec53 2b19 	vmov	r2, r3, d9
 80068c0:	f7fa f90c 	bl	8000adc <__aeabi_dcmplt>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	f040 80b6 	bne.w	8006a36 <_dtoa_r+0x6e6>
 80068ca:	9b02      	ldr	r3, [sp, #8]
 80068cc:	429d      	cmp	r5, r3
 80068ce:	f43f af7c 	beq.w	80067ca <_dtoa_r+0x47a>
 80068d2:	4b31      	ldr	r3, [pc, #196]	; (8006998 <_dtoa_r+0x648>)
 80068d4:	ec51 0b19 	vmov	r0, r1, d9
 80068d8:	2200      	movs	r2, #0
 80068da:	f7f9 fe8d 	bl	80005f8 <__aeabi_dmul>
 80068de:	4b2e      	ldr	r3, [pc, #184]	; (8006998 <_dtoa_r+0x648>)
 80068e0:	ec41 0b19 	vmov	d9, r0, r1
 80068e4:	2200      	movs	r2, #0
 80068e6:	4640      	mov	r0, r8
 80068e8:	4649      	mov	r1, r9
 80068ea:	f7f9 fe85 	bl	80005f8 <__aeabi_dmul>
 80068ee:	4680      	mov	r8, r0
 80068f0:	4689      	mov	r9, r1
 80068f2:	e7c5      	b.n	8006880 <_dtoa_r+0x530>
 80068f4:	ec51 0b17 	vmov	r0, r1, d7
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	9b02      	ldr	r3, [sp, #8]
 80068fe:	9d00      	ldr	r5, [sp, #0]
 8006900:	930f      	str	r3, [sp, #60]	; 0x3c
 8006902:	ec41 0b19 	vmov	d9, r0, r1
 8006906:	4649      	mov	r1, r9
 8006908:	4640      	mov	r0, r8
 800690a:	f7fa f925 	bl	8000b58 <__aeabi_d2iz>
 800690e:	4606      	mov	r6, r0
 8006910:	f7f9 fe08 	bl	8000524 <__aeabi_i2d>
 8006914:	3630      	adds	r6, #48	; 0x30
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f7f9 fcb3 	bl	8000288 <__aeabi_dsub>
 8006922:	f805 6b01 	strb.w	r6, [r5], #1
 8006926:	9b02      	ldr	r3, [sp, #8]
 8006928:	429d      	cmp	r5, r3
 800692a:	4680      	mov	r8, r0
 800692c:	4689      	mov	r9, r1
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	d124      	bne.n	800697e <_dtoa_r+0x62e>
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <_dtoa_r+0x654>)
 8006936:	ec51 0b19 	vmov	r0, r1, d9
 800693a:	f7f9 fca7 	bl	800028c <__adddf3>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7fa f8e7 	bl	8000b18 <__aeabi_dcmpgt>
 800694a:	2800      	cmp	r0, #0
 800694c:	d173      	bne.n	8006a36 <_dtoa_r+0x6e6>
 800694e:	ec53 2b19 	vmov	r2, r3, d9
 8006952:	4914      	ldr	r1, [pc, #80]	; (80069a4 <_dtoa_r+0x654>)
 8006954:	2000      	movs	r0, #0
 8006956:	f7f9 fc97 	bl	8000288 <__aeabi_dsub>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4640      	mov	r0, r8
 8006960:	4649      	mov	r1, r9
 8006962:	f7fa f8bb 	bl	8000adc <__aeabi_dcmplt>
 8006966:	2800      	cmp	r0, #0
 8006968:	f43f af2f 	beq.w	80067ca <_dtoa_r+0x47a>
 800696c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800696e:	1e6b      	subs	r3, r5, #1
 8006970:	930f      	str	r3, [sp, #60]	; 0x3c
 8006972:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006976:	2b30      	cmp	r3, #48	; 0x30
 8006978:	d0f8      	beq.n	800696c <_dtoa_r+0x61c>
 800697a:	46bb      	mov	fp, r7
 800697c:	e04a      	b.n	8006a14 <_dtoa_r+0x6c4>
 800697e:	4b06      	ldr	r3, [pc, #24]	; (8006998 <_dtoa_r+0x648>)
 8006980:	f7f9 fe3a 	bl	80005f8 <__aeabi_dmul>
 8006984:	4680      	mov	r8, r0
 8006986:	4689      	mov	r9, r1
 8006988:	e7bd      	b.n	8006906 <_dtoa_r+0x5b6>
 800698a:	bf00      	nop
 800698c:	08009c70 	.word	0x08009c70
 8006990:	08009c48 	.word	0x08009c48
 8006994:	3ff00000 	.word	0x3ff00000
 8006998:	40240000 	.word	0x40240000
 800699c:	401c0000 	.word	0x401c0000
 80069a0:	40140000 	.word	0x40140000
 80069a4:	3fe00000 	.word	0x3fe00000
 80069a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80069ac:	9d00      	ldr	r5, [sp, #0]
 80069ae:	4642      	mov	r2, r8
 80069b0:	464b      	mov	r3, r9
 80069b2:	4630      	mov	r0, r6
 80069b4:	4639      	mov	r1, r7
 80069b6:	f7f9 ff49 	bl	800084c <__aeabi_ddiv>
 80069ba:	f7fa f8cd 	bl	8000b58 <__aeabi_d2iz>
 80069be:	9001      	str	r0, [sp, #4]
 80069c0:	f7f9 fdb0 	bl	8000524 <__aeabi_i2d>
 80069c4:	4642      	mov	r2, r8
 80069c6:	464b      	mov	r3, r9
 80069c8:	f7f9 fe16 	bl	80005f8 <__aeabi_dmul>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7f9 fc58 	bl	8000288 <__aeabi_dsub>
 80069d8:	9e01      	ldr	r6, [sp, #4]
 80069da:	9f04      	ldr	r7, [sp, #16]
 80069dc:	3630      	adds	r6, #48	; 0x30
 80069de:	f805 6b01 	strb.w	r6, [r5], #1
 80069e2:	9e00      	ldr	r6, [sp, #0]
 80069e4:	1bae      	subs	r6, r5, r6
 80069e6:	42b7      	cmp	r7, r6
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	d134      	bne.n	8006a58 <_dtoa_r+0x708>
 80069ee:	f7f9 fc4d 	bl	800028c <__adddf3>
 80069f2:	4642      	mov	r2, r8
 80069f4:	464b      	mov	r3, r9
 80069f6:	4606      	mov	r6, r0
 80069f8:	460f      	mov	r7, r1
 80069fa:	f7fa f88d 	bl	8000b18 <__aeabi_dcmpgt>
 80069fe:	b9c8      	cbnz	r0, 8006a34 <_dtoa_r+0x6e4>
 8006a00:	4642      	mov	r2, r8
 8006a02:	464b      	mov	r3, r9
 8006a04:	4630      	mov	r0, r6
 8006a06:	4639      	mov	r1, r7
 8006a08:	f7fa f85e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a0c:	b110      	cbz	r0, 8006a14 <_dtoa_r+0x6c4>
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	07db      	lsls	r3, r3, #31
 8006a12:	d40f      	bmi.n	8006a34 <_dtoa_r+0x6e4>
 8006a14:	4651      	mov	r1, sl
 8006a16:	4620      	mov	r0, r4
 8006a18:	f000 fbcc 	bl	80071b4 <_Bfree>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a20:	702b      	strb	r3, [r5, #0]
 8006a22:	f10b 0301 	add.w	r3, fp, #1
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f43f ace2 	beq.w	80063f4 <_dtoa_r+0xa4>
 8006a30:	601d      	str	r5, [r3, #0]
 8006a32:	e4df      	b.n	80063f4 <_dtoa_r+0xa4>
 8006a34:	465f      	mov	r7, fp
 8006a36:	462b      	mov	r3, r5
 8006a38:	461d      	mov	r5, r3
 8006a3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a3e:	2a39      	cmp	r2, #57	; 0x39
 8006a40:	d106      	bne.n	8006a50 <_dtoa_r+0x700>
 8006a42:	9a00      	ldr	r2, [sp, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d1f7      	bne.n	8006a38 <_dtoa_r+0x6e8>
 8006a48:	9900      	ldr	r1, [sp, #0]
 8006a4a:	2230      	movs	r2, #48	; 0x30
 8006a4c:	3701      	adds	r7, #1
 8006a4e:	700a      	strb	r2, [r1, #0]
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	3201      	adds	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e790      	b.n	800697a <_dtoa_r+0x62a>
 8006a58:	4ba3      	ldr	r3, [pc, #652]	; (8006ce8 <_dtoa_r+0x998>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f7f9 fdcc 	bl	80005f8 <__aeabi_dmul>
 8006a60:	2200      	movs	r2, #0
 8006a62:	2300      	movs	r3, #0
 8006a64:	4606      	mov	r6, r0
 8006a66:	460f      	mov	r7, r1
 8006a68:	f7fa f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d09e      	beq.n	80069ae <_dtoa_r+0x65e>
 8006a70:	e7d0      	b.n	8006a14 <_dtoa_r+0x6c4>
 8006a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a74:	2a00      	cmp	r2, #0
 8006a76:	f000 80ca 	beq.w	8006c0e <_dtoa_r+0x8be>
 8006a7a:	9a07      	ldr	r2, [sp, #28]
 8006a7c:	2a01      	cmp	r2, #1
 8006a7e:	f300 80ad 	bgt.w	8006bdc <_dtoa_r+0x88c>
 8006a82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	f000 80a5 	beq.w	8006bd4 <_dtoa_r+0x884>
 8006a8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a8e:	9e08      	ldr	r6, [sp, #32]
 8006a90:	9d05      	ldr	r5, [sp, #20]
 8006a92:	9a05      	ldr	r2, [sp, #20]
 8006a94:	441a      	add	r2, r3
 8006a96:	9205      	str	r2, [sp, #20]
 8006a98:	9a06      	ldr	r2, [sp, #24]
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	441a      	add	r2, r3
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	9206      	str	r2, [sp, #24]
 8006aa2:	f000 fc87 	bl	80073b4 <__i2b>
 8006aa6:	4607      	mov	r7, r0
 8006aa8:	b165      	cbz	r5, 8006ac4 <_dtoa_r+0x774>
 8006aaa:	9b06      	ldr	r3, [sp, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dd09      	ble.n	8006ac4 <_dtoa_r+0x774>
 8006ab0:	42ab      	cmp	r3, r5
 8006ab2:	9a05      	ldr	r2, [sp, #20]
 8006ab4:	bfa8      	it	ge
 8006ab6:	462b      	movge	r3, r5
 8006ab8:	1ad2      	subs	r2, r2, r3
 8006aba:	9205      	str	r2, [sp, #20]
 8006abc:	9a06      	ldr	r2, [sp, #24]
 8006abe:	1aed      	subs	r5, r5, r3
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	9306      	str	r3, [sp, #24]
 8006ac4:	9b08      	ldr	r3, [sp, #32]
 8006ac6:	b1f3      	cbz	r3, 8006b06 <_dtoa_r+0x7b6>
 8006ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80a3 	beq.w	8006c16 <_dtoa_r+0x8c6>
 8006ad0:	2e00      	cmp	r6, #0
 8006ad2:	dd10      	ble.n	8006af6 <_dtoa_r+0x7a6>
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 fd2b 	bl	8007534 <__pow5mult>
 8006ade:	4652      	mov	r2, sl
 8006ae0:	4601      	mov	r1, r0
 8006ae2:	4607      	mov	r7, r0
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fc7b 	bl	80073e0 <__multiply>
 8006aea:	4651      	mov	r1, sl
 8006aec:	4680      	mov	r8, r0
 8006aee:	4620      	mov	r0, r4
 8006af0:	f000 fb60 	bl	80071b4 <_Bfree>
 8006af4:	46c2      	mov	sl, r8
 8006af6:	9b08      	ldr	r3, [sp, #32]
 8006af8:	1b9a      	subs	r2, r3, r6
 8006afa:	d004      	beq.n	8006b06 <_dtoa_r+0x7b6>
 8006afc:	4651      	mov	r1, sl
 8006afe:	4620      	mov	r0, r4
 8006b00:	f000 fd18 	bl	8007534 <__pow5mult>
 8006b04:	4682      	mov	sl, r0
 8006b06:	2101      	movs	r1, #1
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f000 fc53 	bl	80073b4 <__i2b>
 8006b0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	4606      	mov	r6, r0
 8006b14:	f340 8081 	ble.w	8006c1a <_dtoa_r+0x8ca>
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f000 fd09 	bl	8007534 <__pow5mult>
 8006b22:	9b07      	ldr	r3, [sp, #28]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	4606      	mov	r6, r0
 8006b28:	dd7a      	ble.n	8006c20 <_dtoa_r+0x8d0>
 8006b2a:	f04f 0800 	mov.w	r8, #0
 8006b2e:	6933      	ldr	r3, [r6, #16]
 8006b30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b34:	6918      	ldr	r0, [r3, #16]
 8006b36:	f000 fbef 	bl	8007318 <__hi0bits>
 8006b3a:	f1c0 0020 	rsb	r0, r0, #32
 8006b3e:	9b06      	ldr	r3, [sp, #24]
 8006b40:	4418      	add	r0, r3
 8006b42:	f010 001f 	ands.w	r0, r0, #31
 8006b46:	f000 8094 	beq.w	8006c72 <_dtoa_r+0x922>
 8006b4a:	f1c0 0320 	rsb	r3, r0, #32
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	f340 8085 	ble.w	8006c5e <_dtoa_r+0x90e>
 8006b54:	9b05      	ldr	r3, [sp, #20]
 8006b56:	f1c0 001c 	rsb	r0, r0, #28
 8006b5a:	4403      	add	r3, r0
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	9b06      	ldr	r3, [sp, #24]
 8006b60:	4403      	add	r3, r0
 8006b62:	4405      	add	r5, r0
 8006b64:	9306      	str	r3, [sp, #24]
 8006b66:	9b05      	ldr	r3, [sp, #20]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	dd05      	ble.n	8006b78 <_dtoa_r+0x828>
 8006b6c:	4651      	mov	r1, sl
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 fd39 	bl	80075e8 <__lshift>
 8006b76:	4682      	mov	sl, r0
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dd05      	ble.n	8006b8a <_dtoa_r+0x83a>
 8006b7e:	4631      	mov	r1, r6
 8006b80:	461a      	mov	r2, r3
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 fd30 	bl	80075e8 <__lshift>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d072      	beq.n	8006c76 <_dtoa_r+0x926>
 8006b90:	4631      	mov	r1, r6
 8006b92:	4650      	mov	r0, sl
 8006b94:	f000 fd94 	bl	80076c0 <__mcmp>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	da6c      	bge.n	8006c76 <_dtoa_r+0x926>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4651      	mov	r1, sl
 8006ba0:	220a      	movs	r2, #10
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fb28 	bl	80071f8 <__multadd>
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bae:	4682      	mov	sl, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 81b0 	beq.w	8006f16 <_dtoa_r+0xbc6>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	4639      	mov	r1, r7
 8006bba:	220a      	movs	r2, #10
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f000 fb1b 	bl	80071f8 <__multadd>
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	f300 8096 	bgt.w	8006cf8 <_dtoa_r+0x9a8>
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	dc59      	bgt.n	8006c86 <_dtoa_r+0x936>
 8006bd2:	e091      	b.n	8006cf8 <_dtoa_r+0x9a8>
 8006bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bda:	e758      	b.n	8006a8e <_dtoa_r+0x73e>
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	1e5e      	subs	r6, r3, #1
 8006be0:	9b08      	ldr	r3, [sp, #32]
 8006be2:	42b3      	cmp	r3, r6
 8006be4:	bfbf      	itttt	lt
 8006be6:	9b08      	ldrlt	r3, [sp, #32]
 8006be8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006bea:	9608      	strlt	r6, [sp, #32]
 8006bec:	1af3      	sublt	r3, r6, r3
 8006bee:	bfb4      	ite	lt
 8006bf0:	18d2      	addlt	r2, r2, r3
 8006bf2:	1b9e      	subge	r6, r3, r6
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	bfbc      	itt	lt
 8006bf8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006bfa:	2600      	movlt	r6, #0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bfb7      	itett	lt
 8006c00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006c04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006c08:	1a9d      	sublt	r5, r3, r2
 8006c0a:	2300      	movlt	r3, #0
 8006c0c:	e741      	b.n	8006a92 <_dtoa_r+0x742>
 8006c0e:	9e08      	ldr	r6, [sp, #32]
 8006c10:	9d05      	ldr	r5, [sp, #20]
 8006c12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006c14:	e748      	b.n	8006aa8 <_dtoa_r+0x758>
 8006c16:	9a08      	ldr	r2, [sp, #32]
 8006c18:	e770      	b.n	8006afc <_dtoa_r+0x7ac>
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	dc19      	bgt.n	8006c54 <_dtoa_r+0x904>
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	b9bb      	cbnz	r3, 8006c54 <_dtoa_r+0x904>
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c2a:	b99b      	cbnz	r3, 8006c54 <_dtoa_r+0x904>
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c32:	0d1b      	lsrs	r3, r3, #20
 8006c34:	051b      	lsls	r3, r3, #20
 8006c36:	b183      	cbz	r3, 8006c5a <_dtoa_r+0x90a>
 8006c38:	9b05      	ldr	r3, [sp, #20]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	9b06      	ldr	r3, [sp, #24]
 8006c40:	3301      	adds	r3, #1
 8006c42:	9306      	str	r3, [sp, #24]
 8006c44:	f04f 0801 	mov.w	r8, #1
 8006c48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f47f af6f 	bne.w	8006b2e <_dtoa_r+0x7de>
 8006c50:	2001      	movs	r0, #1
 8006c52:	e774      	b.n	8006b3e <_dtoa_r+0x7ee>
 8006c54:	f04f 0800 	mov.w	r8, #0
 8006c58:	e7f6      	b.n	8006c48 <_dtoa_r+0x8f8>
 8006c5a:	4698      	mov	r8, r3
 8006c5c:	e7f4      	b.n	8006c48 <_dtoa_r+0x8f8>
 8006c5e:	d082      	beq.n	8006b66 <_dtoa_r+0x816>
 8006c60:	9a05      	ldr	r2, [sp, #20]
 8006c62:	331c      	adds	r3, #28
 8006c64:	441a      	add	r2, r3
 8006c66:	9205      	str	r2, [sp, #20]
 8006c68:	9a06      	ldr	r2, [sp, #24]
 8006c6a:	441a      	add	r2, r3
 8006c6c:	441d      	add	r5, r3
 8006c6e:	9206      	str	r2, [sp, #24]
 8006c70:	e779      	b.n	8006b66 <_dtoa_r+0x816>
 8006c72:	4603      	mov	r3, r0
 8006c74:	e7f4      	b.n	8006c60 <_dtoa_r+0x910>
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dc37      	bgt.n	8006cec <_dtoa_r+0x99c>
 8006c7c:	9b07      	ldr	r3, [sp, #28]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	dd34      	ble.n	8006cec <_dtoa_r+0x99c>
 8006c82:	9b04      	ldr	r3, [sp, #16]
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	b963      	cbnz	r3, 8006ca4 <_dtoa_r+0x954>
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	2205      	movs	r2, #5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 fab2 	bl	80071f8 <__multadd>
 8006c94:	4601      	mov	r1, r0
 8006c96:	4606      	mov	r6, r0
 8006c98:	4650      	mov	r0, sl
 8006c9a:	f000 fd11 	bl	80076c0 <__mcmp>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f73f adbb 	bgt.w	800681a <_dtoa_r+0x4ca>
 8006ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca6:	9d00      	ldr	r5, [sp, #0]
 8006ca8:	ea6f 0b03 	mvn.w	fp, r3
 8006cac:	f04f 0800 	mov.w	r8, #0
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fa7e 	bl	80071b4 <_Bfree>
 8006cb8:	2f00      	cmp	r7, #0
 8006cba:	f43f aeab 	beq.w	8006a14 <_dtoa_r+0x6c4>
 8006cbe:	f1b8 0f00 	cmp.w	r8, #0
 8006cc2:	d005      	beq.n	8006cd0 <_dtoa_r+0x980>
 8006cc4:	45b8      	cmp	r8, r7
 8006cc6:	d003      	beq.n	8006cd0 <_dtoa_r+0x980>
 8006cc8:	4641      	mov	r1, r8
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fa72 	bl	80071b4 <_Bfree>
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 fa6e 	bl	80071b4 <_Bfree>
 8006cd8:	e69c      	b.n	8006a14 <_dtoa_r+0x6c4>
 8006cda:	2600      	movs	r6, #0
 8006cdc:	4637      	mov	r7, r6
 8006cde:	e7e1      	b.n	8006ca4 <_dtoa_r+0x954>
 8006ce0:	46bb      	mov	fp, r7
 8006ce2:	4637      	mov	r7, r6
 8006ce4:	e599      	b.n	800681a <_dtoa_r+0x4ca>
 8006ce6:	bf00      	nop
 8006ce8:	40240000 	.word	0x40240000
 8006cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80c8 	beq.w	8006e84 <_dtoa_r+0xb34>
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	2d00      	cmp	r5, #0
 8006cfa:	dd05      	ble.n	8006d08 <_dtoa_r+0x9b8>
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	462a      	mov	r2, r5
 8006d00:	4620      	mov	r0, r4
 8006d02:	f000 fc71 	bl	80075e8 <__lshift>
 8006d06:	4607      	mov	r7, r0
 8006d08:	f1b8 0f00 	cmp.w	r8, #0
 8006d0c:	d05b      	beq.n	8006dc6 <_dtoa_r+0xa76>
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4620      	mov	r0, r4
 8006d12:	f000 fa0f 	bl	8007134 <_Balloc>
 8006d16:	4605      	mov	r5, r0
 8006d18:	b928      	cbnz	r0, 8006d26 <_dtoa_r+0x9d6>
 8006d1a:	4b83      	ldr	r3, [pc, #524]	; (8006f28 <_dtoa_r+0xbd8>)
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006d22:	f7ff bb2e 	b.w	8006382 <_dtoa_r+0x32>
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	3202      	adds	r2, #2
 8006d2a:	0092      	lsls	r2, r2, #2
 8006d2c:	f107 010c 	add.w	r1, r7, #12
 8006d30:	300c      	adds	r0, #12
 8006d32:	f001 ff85 	bl	8008c40 <memcpy>
 8006d36:	2201      	movs	r2, #1
 8006d38:	4629      	mov	r1, r5
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fc54 	bl	80075e8 <__lshift>
 8006d40:	9b00      	ldr	r3, [sp, #0]
 8006d42:	3301      	adds	r3, #1
 8006d44:	9304      	str	r3, [sp, #16]
 8006d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	9308      	str	r3, [sp, #32]
 8006d4e:	9b02      	ldr	r3, [sp, #8]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	46b8      	mov	r8, r7
 8006d56:	9306      	str	r3, [sp, #24]
 8006d58:	4607      	mov	r7, r0
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	4650      	mov	r0, sl
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	f7ff fa6c 	bl	8006240 <quorem>
 8006d68:	4641      	mov	r1, r8
 8006d6a:	9002      	str	r0, [sp, #8]
 8006d6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d70:	4650      	mov	r0, sl
 8006d72:	f000 fca5 	bl	80076c0 <__mcmp>
 8006d76:	463a      	mov	r2, r7
 8006d78:	9005      	str	r0, [sp, #20]
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 fcbb 	bl	80076f8 <__mdiff>
 8006d82:	68c2      	ldr	r2, [r0, #12]
 8006d84:	4605      	mov	r5, r0
 8006d86:	bb02      	cbnz	r2, 8006dca <_dtoa_r+0xa7a>
 8006d88:	4601      	mov	r1, r0
 8006d8a:	4650      	mov	r0, sl
 8006d8c:	f000 fc98 	bl	80076c0 <__mcmp>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4629      	mov	r1, r5
 8006d94:	4620      	mov	r0, r4
 8006d96:	9209      	str	r2, [sp, #36]	; 0x24
 8006d98:	f000 fa0c 	bl	80071b4 <_Bfree>
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da0:	9d04      	ldr	r5, [sp, #16]
 8006da2:	ea43 0102 	orr.w	r1, r3, r2
 8006da6:	9b06      	ldr	r3, [sp, #24]
 8006da8:	4319      	orrs	r1, r3
 8006daa:	d110      	bne.n	8006dce <_dtoa_r+0xa7e>
 8006dac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006db0:	d029      	beq.n	8006e06 <_dtoa_r+0xab6>
 8006db2:	9b05      	ldr	r3, [sp, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dd02      	ble.n	8006dbe <_dtoa_r+0xa6e>
 8006db8:	9b02      	ldr	r3, [sp, #8]
 8006dba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	f883 9000 	strb.w	r9, [r3]
 8006dc4:	e774      	b.n	8006cb0 <_dtoa_r+0x960>
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	e7ba      	b.n	8006d40 <_dtoa_r+0x9f0>
 8006dca:	2201      	movs	r2, #1
 8006dcc:	e7e1      	b.n	8006d92 <_dtoa_r+0xa42>
 8006dce:	9b05      	ldr	r3, [sp, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	db04      	blt.n	8006dde <_dtoa_r+0xa8e>
 8006dd4:	9907      	ldr	r1, [sp, #28]
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	9906      	ldr	r1, [sp, #24]
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	d120      	bne.n	8006e20 <_dtoa_r+0xad0>
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	dded      	ble.n	8006dbe <_dtoa_r+0xa6e>
 8006de2:	4651      	mov	r1, sl
 8006de4:	2201      	movs	r2, #1
 8006de6:	4620      	mov	r0, r4
 8006de8:	f000 fbfe 	bl	80075e8 <__lshift>
 8006dec:	4631      	mov	r1, r6
 8006dee:	4682      	mov	sl, r0
 8006df0:	f000 fc66 	bl	80076c0 <__mcmp>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	dc03      	bgt.n	8006e00 <_dtoa_r+0xab0>
 8006df8:	d1e1      	bne.n	8006dbe <_dtoa_r+0xa6e>
 8006dfa:	f019 0f01 	tst.w	r9, #1
 8006dfe:	d0de      	beq.n	8006dbe <_dtoa_r+0xa6e>
 8006e00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e04:	d1d8      	bne.n	8006db8 <_dtoa_r+0xa68>
 8006e06:	9a01      	ldr	r2, [sp, #4]
 8006e08:	2339      	movs	r3, #57	; 0x39
 8006e0a:	7013      	strb	r3, [r2, #0]
 8006e0c:	462b      	mov	r3, r5
 8006e0e:	461d      	mov	r5, r3
 8006e10:	3b01      	subs	r3, #1
 8006e12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e16:	2a39      	cmp	r2, #57	; 0x39
 8006e18:	d06c      	beq.n	8006ef4 <_dtoa_r+0xba4>
 8006e1a:	3201      	adds	r2, #1
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e747      	b.n	8006cb0 <_dtoa_r+0x960>
 8006e20:	2a00      	cmp	r2, #0
 8006e22:	dd07      	ble.n	8006e34 <_dtoa_r+0xae4>
 8006e24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e28:	d0ed      	beq.n	8006e06 <_dtoa_r+0xab6>
 8006e2a:	9a01      	ldr	r2, [sp, #4]
 8006e2c:	f109 0301 	add.w	r3, r9, #1
 8006e30:	7013      	strb	r3, [r2, #0]
 8006e32:	e73d      	b.n	8006cb0 <_dtoa_r+0x960>
 8006e34:	9b04      	ldr	r3, [sp, #16]
 8006e36:	9a08      	ldr	r2, [sp, #32]
 8006e38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d043      	beq.n	8006ec8 <_dtoa_r+0xb78>
 8006e40:	4651      	mov	r1, sl
 8006e42:	2300      	movs	r3, #0
 8006e44:	220a      	movs	r2, #10
 8006e46:	4620      	mov	r0, r4
 8006e48:	f000 f9d6 	bl	80071f8 <__multadd>
 8006e4c:	45b8      	cmp	r8, r7
 8006e4e:	4682      	mov	sl, r0
 8006e50:	f04f 0300 	mov.w	r3, #0
 8006e54:	f04f 020a 	mov.w	r2, #10
 8006e58:	4641      	mov	r1, r8
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	d107      	bne.n	8006e6e <_dtoa_r+0xb1e>
 8006e5e:	f000 f9cb 	bl	80071f8 <__multadd>
 8006e62:	4680      	mov	r8, r0
 8006e64:	4607      	mov	r7, r0
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	9304      	str	r3, [sp, #16]
 8006e6c:	e775      	b.n	8006d5a <_dtoa_r+0xa0a>
 8006e6e:	f000 f9c3 	bl	80071f8 <__multadd>
 8006e72:	4639      	mov	r1, r7
 8006e74:	4680      	mov	r8, r0
 8006e76:	2300      	movs	r3, #0
 8006e78:	220a      	movs	r2, #10
 8006e7a:	4620      	mov	r0, r4
 8006e7c:	f000 f9bc 	bl	80071f8 <__multadd>
 8006e80:	4607      	mov	r7, r0
 8006e82:	e7f0      	b.n	8006e66 <_dtoa_r+0xb16>
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	9d00      	ldr	r5, [sp, #0]
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4650      	mov	r0, sl
 8006e8e:	f7ff f9d7 	bl	8006240 <quorem>
 8006e92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	f805 9b01 	strb.w	r9, [r5], #1
 8006e9c:	1aea      	subs	r2, r5, r3
 8006e9e:	9b01      	ldr	r3, [sp, #4]
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	dd07      	ble.n	8006eb4 <_dtoa_r+0xb64>
 8006ea4:	4651      	mov	r1, sl
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 f9a4 	bl	80071f8 <__multadd>
 8006eb0:	4682      	mov	sl, r0
 8006eb2:	e7ea      	b.n	8006e8a <_dtoa_r+0xb3a>
 8006eb4:	9b01      	ldr	r3, [sp, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bfc8      	it	gt
 8006eba:	461d      	movgt	r5, r3
 8006ebc:	9b00      	ldr	r3, [sp, #0]
 8006ebe:	bfd8      	it	le
 8006ec0:	2501      	movle	r5, #1
 8006ec2:	441d      	add	r5, r3
 8006ec4:	f04f 0800 	mov.w	r8, #0
 8006ec8:	4651      	mov	r1, sl
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 fb8b 	bl	80075e8 <__lshift>
 8006ed2:	4631      	mov	r1, r6
 8006ed4:	4682      	mov	sl, r0
 8006ed6:	f000 fbf3 	bl	80076c0 <__mcmp>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	dc96      	bgt.n	8006e0c <_dtoa_r+0xabc>
 8006ede:	d102      	bne.n	8006ee6 <_dtoa_r+0xb96>
 8006ee0:	f019 0f01 	tst.w	r9, #1
 8006ee4:	d192      	bne.n	8006e0c <_dtoa_r+0xabc>
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	461d      	mov	r5, r3
 8006eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eee:	2a30      	cmp	r2, #48	; 0x30
 8006ef0:	d0fa      	beq.n	8006ee8 <_dtoa_r+0xb98>
 8006ef2:	e6dd      	b.n	8006cb0 <_dtoa_r+0x960>
 8006ef4:	9a00      	ldr	r2, [sp, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d189      	bne.n	8006e0e <_dtoa_r+0xabe>
 8006efa:	f10b 0b01 	add.w	fp, fp, #1
 8006efe:	2331      	movs	r3, #49	; 0x31
 8006f00:	e796      	b.n	8006e30 <_dtoa_r+0xae0>
 8006f02:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <_dtoa_r+0xbdc>)
 8006f04:	f7ff ba99 	b.w	800643a <_dtoa_r+0xea>
 8006f08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f47f aa6d 	bne.w	80063ea <_dtoa_r+0x9a>
 8006f10:	4b07      	ldr	r3, [pc, #28]	; (8006f30 <_dtoa_r+0xbe0>)
 8006f12:	f7ff ba92 	b.w	800643a <_dtoa_r+0xea>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dcb5      	bgt.n	8006e88 <_dtoa_r+0xb38>
 8006f1c:	9b07      	ldr	r3, [sp, #28]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	f73f aeb1 	bgt.w	8006c86 <_dtoa_r+0x936>
 8006f24:	e7b0      	b.n	8006e88 <_dtoa_r+0xb38>
 8006f26:	bf00      	nop
 8006f28:	08009bd9 	.word	0x08009bd9
 8006f2c:	08009b34 	.word	0x08009b34
 8006f30:	08009b5d 	.word	0x08009b5d

08006f34 <_free_r>:
 8006f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d044      	beq.n	8006fc4 <_free_r+0x90>
 8006f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3e:	9001      	str	r0, [sp, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f1a1 0404 	sub.w	r4, r1, #4
 8006f46:	bfb8      	it	lt
 8006f48:	18e4      	addlt	r4, r4, r3
 8006f4a:	f000 f8e7 	bl	800711c <__malloc_lock>
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <_free_r+0x94>)
 8006f50:	9801      	ldr	r0, [sp, #4]
 8006f52:	6813      	ldr	r3, [r2, #0]
 8006f54:	b933      	cbnz	r3, 8006f64 <_free_r+0x30>
 8006f56:	6063      	str	r3, [r4, #4]
 8006f58:	6014      	str	r4, [r2, #0]
 8006f5a:	b003      	add	sp, #12
 8006f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f60:	f000 b8e2 	b.w	8007128 <__malloc_unlock>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d908      	bls.n	8006f7a <_free_r+0x46>
 8006f68:	6825      	ldr	r5, [r4, #0]
 8006f6a:	1961      	adds	r1, r4, r5
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	bf01      	itttt	eq
 8006f70:	6819      	ldreq	r1, [r3, #0]
 8006f72:	685b      	ldreq	r3, [r3, #4]
 8006f74:	1949      	addeq	r1, r1, r5
 8006f76:	6021      	streq	r1, [r4, #0]
 8006f78:	e7ed      	b.n	8006f56 <_free_r+0x22>
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	b10b      	cbz	r3, 8006f84 <_free_r+0x50>
 8006f80:	42a3      	cmp	r3, r4
 8006f82:	d9fa      	bls.n	8006f7a <_free_r+0x46>
 8006f84:	6811      	ldr	r1, [r2, #0]
 8006f86:	1855      	adds	r5, r2, r1
 8006f88:	42a5      	cmp	r5, r4
 8006f8a:	d10b      	bne.n	8006fa4 <_free_r+0x70>
 8006f8c:	6824      	ldr	r4, [r4, #0]
 8006f8e:	4421      	add	r1, r4
 8006f90:	1854      	adds	r4, r2, r1
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	6011      	str	r1, [r2, #0]
 8006f96:	d1e0      	bne.n	8006f5a <_free_r+0x26>
 8006f98:	681c      	ldr	r4, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	6053      	str	r3, [r2, #4]
 8006f9e:	440c      	add	r4, r1
 8006fa0:	6014      	str	r4, [r2, #0]
 8006fa2:	e7da      	b.n	8006f5a <_free_r+0x26>
 8006fa4:	d902      	bls.n	8006fac <_free_r+0x78>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	6003      	str	r3, [r0, #0]
 8006faa:	e7d6      	b.n	8006f5a <_free_r+0x26>
 8006fac:	6825      	ldr	r5, [r4, #0]
 8006fae:	1961      	adds	r1, r4, r5
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	bf04      	itt	eq
 8006fb4:	6819      	ldreq	r1, [r3, #0]
 8006fb6:	685b      	ldreq	r3, [r3, #4]
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	bf04      	itt	eq
 8006fbc:	1949      	addeq	r1, r1, r5
 8006fbe:	6021      	streq	r1, [r4, #0]
 8006fc0:	6054      	str	r4, [r2, #4]
 8006fc2:	e7ca      	b.n	8006f5a <_free_r+0x26>
 8006fc4:	b003      	add	sp, #12
 8006fc6:	bd30      	pop	{r4, r5, pc}
 8006fc8:	20000468 	.word	0x20000468

08006fcc <malloc>:
 8006fcc:	4b02      	ldr	r3, [pc, #8]	; (8006fd8 <malloc+0xc>)
 8006fce:	4601      	mov	r1, r0
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	f000 b823 	b.w	800701c <_malloc_r>
 8006fd6:	bf00      	nop
 8006fd8:	20000064 	.word	0x20000064

08006fdc <sbrk_aligned>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	4e0e      	ldr	r6, [pc, #56]	; (8007018 <sbrk_aligned+0x3c>)
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	6831      	ldr	r1, [r6, #0]
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	b911      	cbnz	r1, 8006fee <sbrk_aligned+0x12>
 8006fe8:	f001 fe1a 	bl	8008c20 <_sbrk_r>
 8006fec:	6030      	str	r0, [r6, #0]
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	f001 fe15 	bl	8008c20 <_sbrk_r>
 8006ff6:	1c43      	adds	r3, r0, #1
 8006ff8:	d00a      	beq.n	8007010 <sbrk_aligned+0x34>
 8006ffa:	1cc4      	adds	r4, r0, #3
 8006ffc:	f024 0403 	bic.w	r4, r4, #3
 8007000:	42a0      	cmp	r0, r4
 8007002:	d007      	beq.n	8007014 <sbrk_aligned+0x38>
 8007004:	1a21      	subs	r1, r4, r0
 8007006:	4628      	mov	r0, r5
 8007008:	f001 fe0a 	bl	8008c20 <_sbrk_r>
 800700c:	3001      	adds	r0, #1
 800700e:	d101      	bne.n	8007014 <sbrk_aligned+0x38>
 8007010:	f04f 34ff 	mov.w	r4, #4294967295
 8007014:	4620      	mov	r0, r4
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	2000046c 	.word	0x2000046c

0800701c <_malloc_r>:
 800701c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007020:	1ccd      	adds	r5, r1, #3
 8007022:	f025 0503 	bic.w	r5, r5, #3
 8007026:	3508      	adds	r5, #8
 8007028:	2d0c      	cmp	r5, #12
 800702a:	bf38      	it	cc
 800702c:	250c      	movcc	r5, #12
 800702e:	2d00      	cmp	r5, #0
 8007030:	4607      	mov	r7, r0
 8007032:	db01      	blt.n	8007038 <_malloc_r+0x1c>
 8007034:	42a9      	cmp	r1, r5
 8007036:	d905      	bls.n	8007044 <_malloc_r+0x28>
 8007038:	230c      	movs	r3, #12
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	2600      	movs	r6, #0
 800703e:	4630      	mov	r0, r6
 8007040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007044:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007118 <_malloc_r+0xfc>
 8007048:	f000 f868 	bl	800711c <__malloc_lock>
 800704c:	f8d8 3000 	ldr.w	r3, [r8]
 8007050:	461c      	mov	r4, r3
 8007052:	bb5c      	cbnz	r4, 80070ac <_malloc_r+0x90>
 8007054:	4629      	mov	r1, r5
 8007056:	4638      	mov	r0, r7
 8007058:	f7ff ffc0 	bl	8006fdc <sbrk_aligned>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	4604      	mov	r4, r0
 8007060:	d155      	bne.n	800710e <_malloc_r+0xf2>
 8007062:	f8d8 4000 	ldr.w	r4, [r8]
 8007066:	4626      	mov	r6, r4
 8007068:	2e00      	cmp	r6, #0
 800706a:	d145      	bne.n	80070f8 <_malloc_r+0xdc>
 800706c:	2c00      	cmp	r4, #0
 800706e:	d048      	beq.n	8007102 <_malloc_r+0xe6>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	4631      	mov	r1, r6
 8007074:	4638      	mov	r0, r7
 8007076:	eb04 0903 	add.w	r9, r4, r3
 800707a:	f001 fdd1 	bl	8008c20 <_sbrk_r>
 800707e:	4581      	cmp	r9, r0
 8007080:	d13f      	bne.n	8007102 <_malloc_r+0xe6>
 8007082:	6821      	ldr	r1, [r4, #0]
 8007084:	1a6d      	subs	r5, r5, r1
 8007086:	4629      	mov	r1, r5
 8007088:	4638      	mov	r0, r7
 800708a:	f7ff ffa7 	bl	8006fdc <sbrk_aligned>
 800708e:	3001      	adds	r0, #1
 8007090:	d037      	beq.n	8007102 <_malloc_r+0xe6>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	442b      	add	r3, r5
 8007096:	6023      	str	r3, [r4, #0]
 8007098:	f8d8 3000 	ldr.w	r3, [r8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d038      	beq.n	8007112 <_malloc_r+0xf6>
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	42a2      	cmp	r2, r4
 80070a4:	d12b      	bne.n	80070fe <_malloc_r+0xe2>
 80070a6:	2200      	movs	r2, #0
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	e00f      	b.n	80070cc <_malloc_r+0xb0>
 80070ac:	6822      	ldr	r2, [r4, #0]
 80070ae:	1b52      	subs	r2, r2, r5
 80070b0:	d41f      	bmi.n	80070f2 <_malloc_r+0xd6>
 80070b2:	2a0b      	cmp	r2, #11
 80070b4:	d917      	bls.n	80070e6 <_malloc_r+0xca>
 80070b6:	1961      	adds	r1, r4, r5
 80070b8:	42a3      	cmp	r3, r4
 80070ba:	6025      	str	r5, [r4, #0]
 80070bc:	bf18      	it	ne
 80070be:	6059      	strne	r1, [r3, #4]
 80070c0:	6863      	ldr	r3, [r4, #4]
 80070c2:	bf08      	it	eq
 80070c4:	f8c8 1000 	streq.w	r1, [r8]
 80070c8:	5162      	str	r2, [r4, r5]
 80070ca:	604b      	str	r3, [r1, #4]
 80070cc:	4638      	mov	r0, r7
 80070ce:	f104 060b 	add.w	r6, r4, #11
 80070d2:	f000 f829 	bl	8007128 <__malloc_unlock>
 80070d6:	f026 0607 	bic.w	r6, r6, #7
 80070da:	1d23      	adds	r3, r4, #4
 80070dc:	1af2      	subs	r2, r6, r3
 80070de:	d0ae      	beq.n	800703e <_malloc_r+0x22>
 80070e0:	1b9b      	subs	r3, r3, r6
 80070e2:	50a3      	str	r3, [r4, r2]
 80070e4:	e7ab      	b.n	800703e <_malloc_r+0x22>
 80070e6:	42a3      	cmp	r3, r4
 80070e8:	6862      	ldr	r2, [r4, #4]
 80070ea:	d1dd      	bne.n	80070a8 <_malloc_r+0x8c>
 80070ec:	f8c8 2000 	str.w	r2, [r8]
 80070f0:	e7ec      	b.n	80070cc <_malloc_r+0xb0>
 80070f2:	4623      	mov	r3, r4
 80070f4:	6864      	ldr	r4, [r4, #4]
 80070f6:	e7ac      	b.n	8007052 <_malloc_r+0x36>
 80070f8:	4634      	mov	r4, r6
 80070fa:	6876      	ldr	r6, [r6, #4]
 80070fc:	e7b4      	b.n	8007068 <_malloc_r+0x4c>
 80070fe:	4613      	mov	r3, r2
 8007100:	e7cc      	b.n	800709c <_malloc_r+0x80>
 8007102:	230c      	movs	r3, #12
 8007104:	603b      	str	r3, [r7, #0]
 8007106:	4638      	mov	r0, r7
 8007108:	f000 f80e 	bl	8007128 <__malloc_unlock>
 800710c:	e797      	b.n	800703e <_malloc_r+0x22>
 800710e:	6025      	str	r5, [r4, #0]
 8007110:	e7dc      	b.n	80070cc <_malloc_r+0xb0>
 8007112:	605b      	str	r3, [r3, #4]
 8007114:	deff      	udf	#255	; 0xff
 8007116:	bf00      	nop
 8007118:	20000468 	.word	0x20000468

0800711c <__malloc_lock>:
 800711c:	4801      	ldr	r0, [pc, #4]	; (8007124 <__malloc_lock+0x8>)
 800711e:	f7ff b887 	b.w	8006230 <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	20000464 	.word	0x20000464

08007128 <__malloc_unlock>:
 8007128:	4801      	ldr	r0, [pc, #4]	; (8007130 <__malloc_unlock+0x8>)
 800712a:	f7ff b882 	b.w	8006232 <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	20000464 	.word	0x20000464

08007134 <_Balloc>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	69c6      	ldr	r6, [r0, #28]
 8007138:	4604      	mov	r4, r0
 800713a:	460d      	mov	r5, r1
 800713c:	b976      	cbnz	r6, 800715c <_Balloc+0x28>
 800713e:	2010      	movs	r0, #16
 8007140:	f7ff ff44 	bl	8006fcc <malloc>
 8007144:	4602      	mov	r2, r0
 8007146:	61e0      	str	r0, [r4, #28]
 8007148:	b920      	cbnz	r0, 8007154 <_Balloc+0x20>
 800714a:	4b18      	ldr	r3, [pc, #96]	; (80071ac <_Balloc+0x78>)
 800714c:	4818      	ldr	r0, [pc, #96]	; (80071b0 <_Balloc+0x7c>)
 800714e:	216b      	movs	r1, #107	; 0x6b
 8007150:	f001 fd8e 	bl	8008c70 <__assert_func>
 8007154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007158:	6006      	str	r6, [r0, #0]
 800715a:	60c6      	str	r6, [r0, #12]
 800715c:	69e6      	ldr	r6, [r4, #28]
 800715e:	68f3      	ldr	r3, [r6, #12]
 8007160:	b183      	cbz	r3, 8007184 <_Balloc+0x50>
 8007162:	69e3      	ldr	r3, [r4, #28]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800716a:	b9b8      	cbnz	r0, 800719c <_Balloc+0x68>
 800716c:	2101      	movs	r1, #1
 800716e:	fa01 f605 	lsl.w	r6, r1, r5
 8007172:	1d72      	adds	r2, r6, #5
 8007174:	0092      	lsls	r2, r2, #2
 8007176:	4620      	mov	r0, r4
 8007178:	f001 fd98 	bl	8008cac <_calloc_r>
 800717c:	b160      	cbz	r0, 8007198 <_Balloc+0x64>
 800717e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007182:	e00e      	b.n	80071a2 <_Balloc+0x6e>
 8007184:	2221      	movs	r2, #33	; 0x21
 8007186:	2104      	movs	r1, #4
 8007188:	4620      	mov	r0, r4
 800718a:	f001 fd8f 	bl	8008cac <_calloc_r>
 800718e:	69e3      	ldr	r3, [r4, #28]
 8007190:	60f0      	str	r0, [r6, #12]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e4      	bne.n	8007162 <_Balloc+0x2e>
 8007198:	2000      	movs	r0, #0
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	6802      	ldr	r2, [r0, #0]
 800719e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071a2:	2300      	movs	r3, #0
 80071a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071a8:	e7f7      	b.n	800719a <_Balloc+0x66>
 80071aa:	bf00      	nop
 80071ac:	08009b6a 	.word	0x08009b6a
 80071b0:	08009bea 	.word	0x08009bea

080071b4 <_Bfree>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	69c6      	ldr	r6, [r0, #28]
 80071b8:	4605      	mov	r5, r0
 80071ba:	460c      	mov	r4, r1
 80071bc:	b976      	cbnz	r6, 80071dc <_Bfree+0x28>
 80071be:	2010      	movs	r0, #16
 80071c0:	f7ff ff04 	bl	8006fcc <malloc>
 80071c4:	4602      	mov	r2, r0
 80071c6:	61e8      	str	r0, [r5, #28]
 80071c8:	b920      	cbnz	r0, 80071d4 <_Bfree+0x20>
 80071ca:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <_Bfree+0x3c>)
 80071cc:	4809      	ldr	r0, [pc, #36]	; (80071f4 <_Bfree+0x40>)
 80071ce:	218f      	movs	r1, #143	; 0x8f
 80071d0:	f001 fd4e 	bl	8008c70 <__assert_func>
 80071d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071d8:	6006      	str	r6, [r0, #0]
 80071da:	60c6      	str	r6, [r0, #12]
 80071dc:	b13c      	cbz	r4, 80071ee <_Bfree+0x3a>
 80071de:	69eb      	ldr	r3, [r5, #28]
 80071e0:	6862      	ldr	r2, [r4, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071e8:	6021      	str	r1, [r4, #0]
 80071ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071ee:	bd70      	pop	{r4, r5, r6, pc}
 80071f0:	08009b6a 	.word	0x08009b6a
 80071f4:	08009bea 	.word	0x08009bea

080071f8 <__multadd>:
 80071f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fc:	690d      	ldr	r5, [r1, #16]
 80071fe:	4607      	mov	r7, r0
 8007200:	460c      	mov	r4, r1
 8007202:	461e      	mov	r6, r3
 8007204:	f101 0c14 	add.w	ip, r1, #20
 8007208:	2000      	movs	r0, #0
 800720a:	f8dc 3000 	ldr.w	r3, [ip]
 800720e:	b299      	uxth	r1, r3
 8007210:	fb02 6101 	mla	r1, r2, r1, r6
 8007214:	0c1e      	lsrs	r6, r3, #16
 8007216:	0c0b      	lsrs	r3, r1, #16
 8007218:	fb02 3306 	mla	r3, r2, r6, r3
 800721c:	b289      	uxth	r1, r1
 800721e:	3001      	adds	r0, #1
 8007220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007224:	4285      	cmp	r5, r0
 8007226:	f84c 1b04 	str.w	r1, [ip], #4
 800722a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800722e:	dcec      	bgt.n	800720a <__multadd+0x12>
 8007230:	b30e      	cbz	r6, 8007276 <__multadd+0x7e>
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	42ab      	cmp	r3, r5
 8007236:	dc19      	bgt.n	800726c <__multadd+0x74>
 8007238:	6861      	ldr	r1, [r4, #4]
 800723a:	4638      	mov	r0, r7
 800723c:	3101      	adds	r1, #1
 800723e:	f7ff ff79 	bl	8007134 <_Balloc>
 8007242:	4680      	mov	r8, r0
 8007244:	b928      	cbnz	r0, 8007252 <__multadd+0x5a>
 8007246:	4602      	mov	r2, r0
 8007248:	4b0c      	ldr	r3, [pc, #48]	; (800727c <__multadd+0x84>)
 800724a:	480d      	ldr	r0, [pc, #52]	; (8007280 <__multadd+0x88>)
 800724c:	21ba      	movs	r1, #186	; 0xba
 800724e:	f001 fd0f 	bl	8008c70 <__assert_func>
 8007252:	6922      	ldr	r2, [r4, #16]
 8007254:	3202      	adds	r2, #2
 8007256:	f104 010c 	add.w	r1, r4, #12
 800725a:	0092      	lsls	r2, r2, #2
 800725c:	300c      	adds	r0, #12
 800725e:	f001 fcef 	bl	8008c40 <memcpy>
 8007262:	4621      	mov	r1, r4
 8007264:	4638      	mov	r0, r7
 8007266:	f7ff ffa5 	bl	80071b4 <_Bfree>
 800726a:	4644      	mov	r4, r8
 800726c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007270:	3501      	adds	r5, #1
 8007272:	615e      	str	r6, [r3, #20]
 8007274:	6125      	str	r5, [r4, #16]
 8007276:	4620      	mov	r0, r4
 8007278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800727c:	08009bd9 	.word	0x08009bd9
 8007280:	08009bea 	.word	0x08009bea

08007284 <__s2b>:
 8007284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007288:	460c      	mov	r4, r1
 800728a:	4615      	mov	r5, r2
 800728c:	461f      	mov	r7, r3
 800728e:	2209      	movs	r2, #9
 8007290:	3308      	adds	r3, #8
 8007292:	4606      	mov	r6, r0
 8007294:	fb93 f3f2 	sdiv	r3, r3, r2
 8007298:	2100      	movs	r1, #0
 800729a:	2201      	movs	r2, #1
 800729c:	429a      	cmp	r2, r3
 800729e:	db09      	blt.n	80072b4 <__s2b+0x30>
 80072a0:	4630      	mov	r0, r6
 80072a2:	f7ff ff47 	bl	8007134 <_Balloc>
 80072a6:	b940      	cbnz	r0, 80072ba <__s2b+0x36>
 80072a8:	4602      	mov	r2, r0
 80072aa:	4b19      	ldr	r3, [pc, #100]	; (8007310 <__s2b+0x8c>)
 80072ac:	4819      	ldr	r0, [pc, #100]	; (8007314 <__s2b+0x90>)
 80072ae:	21d3      	movs	r1, #211	; 0xd3
 80072b0:	f001 fcde 	bl	8008c70 <__assert_func>
 80072b4:	0052      	lsls	r2, r2, #1
 80072b6:	3101      	adds	r1, #1
 80072b8:	e7f0      	b.n	800729c <__s2b+0x18>
 80072ba:	9b08      	ldr	r3, [sp, #32]
 80072bc:	6143      	str	r3, [r0, #20]
 80072be:	2d09      	cmp	r5, #9
 80072c0:	f04f 0301 	mov.w	r3, #1
 80072c4:	6103      	str	r3, [r0, #16]
 80072c6:	dd16      	ble.n	80072f6 <__s2b+0x72>
 80072c8:	f104 0909 	add.w	r9, r4, #9
 80072cc:	46c8      	mov	r8, r9
 80072ce:	442c      	add	r4, r5
 80072d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80072d4:	4601      	mov	r1, r0
 80072d6:	3b30      	subs	r3, #48	; 0x30
 80072d8:	220a      	movs	r2, #10
 80072da:	4630      	mov	r0, r6
 80072dc:	f7ff ff8c 	bl	80071f8 <__multadd>
 80072e0:	45a0      	cmp	r8, r4
 80072e2:	d1f5      	bne.n	80072d0 <__s2b+0x4c>
 80072e4:	f1a5 0408 	sub.w	r4, r5, #8
 80072e8:	444c      	add	r4, r9
 80072ea:	1b2d      	subs	r5, r5, r4
 80072ec:	1963      	adds	r3, r4, r5
 80072ee:	42bb      	cmp	r3, r7
 80072f0:	db04      	blt.n	80072fc <__s2b+0x78>
 80072f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f6:	340a      	adds	r4, #10
 80072f8:	2509      	movs	r5, #9
 80072fa:	e7f6      	b.n	80072ea <__s2b+0x66>
 80072fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007300:	4601      	mov	r1, r0
 8007302:	3b30      	subs	r3, #48	; 0x30
 8007304:	220a      	movs	r2, #10
 8007306:	4630      	mov	r0, r6
 8007308:	f7ff ff76 	bl	80071f8 <__multadd>
 800730c:	e7ee      	b.n	80072ec <__s2b+0x68>
 800730e:	bf00      	nop
 8007310:	08009bd9 	.word	0x08009bd9
 8007314:	08009bea 	.word	0x08009bea

08007318 <__hi0bits>:
 8007318:	0c03      	lsrs	r3, r0, #16
 800731a:	041b      	lsls	r3, r3, #16
 800731c:	b9d3      	cbnz	r3, 8007354 <__hi0bits+0x3c>
 800731e:	0400      	lsls	r0, r0, #16
 8007320:	2310      	movs	r3, #16
 8007322:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007326:	bf04      	itt	eq
 8007328:	0200      	lsleq	r0, r0, #8
 800732a:	3308      	addeq	r3, #8
 800732c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007330:	bf04      	itt	eq
 8007332:	0100      	lsleq	r0, r0, #4
 8007334:	3304      	addeq	r3, #4
 8007336:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800733a:	bf04      	itt	eq
 800733c:	0080      	lsleq	r0, r0, #2
 800733e:	3302      	addeq	r3, #2
 8007340:	2800      	cmp	r0, #0
 8007342:	db05      	blt.n	8007350 <__hi0bits+0x38>
 8007344:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007348:	f103 0301 	add.w	r3, r3, #1
 800734c:	bf08      	it	eq
 800734e:	2320      	moveq	r3, #32
 8007350:	4618      	mov	r0, r3
 8007352:	4770      	bx	lr
 8007354:	2300      	movs	r3, #0
 8007356:	e7e4      	b.n	8007322 <__hi0bits+0xa>

08007358 <__lo0bits>:
 8007358:	6803      	ldr	r3, [r0, #0]
 800735a:	f013 0207 	ands.w	r2, r3, #7
 800735e:	d00c      	beq.n	800737a <__lo0bits+0x22>
 8007360:	07d9      	lsls	r1, r3, #31
 8007362:	d422      	bmi.n	80073aa <__lo0bits+0x52>
 8007364:	079a      	lsls	r2, r3, #30
 8007366:	bf49      	itett	mi
 8007368:	085b      	lsrmi	r3, r3, #1
 800736a:	089b      	lsrpl	r3, r3, #2
 800736c:	6003      	strmi	r3, [r0, #0]
 800736e:	2201      	movmi	r2, #1
 8007370:	bf5c      	itt	pl
 8007372:	6003      	strpl	r3, [r0, #0]
 8007374:	2202      	movpl	r2, #2
 8007376:	4610      	mov	r0, r2
 8007378:	4770      	bx	lr
 800737a:	b299      	uxth	r1, r3
 800737c:	b909      	cbnz	r1, 8007382 <__lo0bits+0x2a>
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	2210      	movs	r2, #16
 8007382:	b2d9      	uxtb	r1, r3
 8007384:	b909      	cbnz	r1, 800738a <__lo0bits+0x32>
 8007386:	3208      	adds	r2, #8
 8007388:	0a1b      	lsrs	r3, r3, #8
 800738a:	0719      	lsls	r1, r3, #28
 800738c:	bf04      	itt	eq
 800738e:	091b      	lsreq	r3, r3, #4
 8007390:	3204      	addeq	r2, #4
 8007392:	0799      	lsls	r1, r3, #30
 8007394:	bf04      	itt	eq
 8007396:	089b      	lsreq	r3, r3, #2
 8007398:	3202      	addeq	r2, #2
 800739a:	07d9      	lsls	r1, r3, #31
 800739c:	d403      	bmi.n	80073a6 <__lo0bits+0x4e>
 800739e:	085b      	lsrs	r3, r3, #1
 80073a0:	f102 0201 	add.w	r2, r2, #1
 80073a4:	d003      	beq.n	80073ae <__lo0bits+0x56>
 80073a6:	6003      	str	r3, [r0, #0]
 80073a8:	e7e5      	b.n	8007376 <__lo0bits+0x1e>
 80073aa:	2200      	movs	r2, #0
 80073ac:	e7e3      	b.n	8007376 <__lo0bits+0x1e>
 80073ae:	2220      	movs	r2, #32
 80073b0:	e7e1      	b.n	8007376 <__lo0bits+0x1e>
	...

080073b4 <__i2b>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	460c      	mov	r4, r1
 80073b8:	2101      	movs	r1, #1
 80073ba:	f7ff febb 	bl	8007134 <_Balloc>
 80073be:	4602      	mov	r2, r0
 80073c0:	b928      	cbnz	r0, 80073ce <__i2b+0x1a>
 80073c2:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <__i2b+0x24>)
 80073c4:	4805      	ldr	r0, [pc, #20]	; (80073dc <__i2b+0x28>)
 80073c6:	f240 1145 	movw	r1, #325	; 0x145
 80073ca:	f001 fc51 	bl	8008c70 <__assert_func>
 80073ce:	2301      	movs	r3, #1
 80073d0:	6144      	str	r4, [r0, #20]
 80073d2:	6103      	str	r3, [r0, #16]
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	bf00      	nop
 80073d8:	08009bd9 	.word	0x08009bd9
 80073dc:	08009bea 	.word	0x08009bea

080073e0 <__multiply>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	4691      	mov	r9, r2
 80073e6:	690a      	ldr	r2, [r1, #16]
 80073e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	bfb8      	it	lt
 80073f0:	460b      	movlt	r3, r1
 80073f2:	460c      	mov	r4, r1
 80073f4:	bfbc      	itt	lt
 80073f6:	464c      	movlt	r4, r9
 80073f8:	4699      	movlt	r9, r3
 80073fa:	6927      	ldr	r7, [r4, #16]
 80073fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007400:	68a3      	ldr	r3, [r4, #8]
 8007402:	6861      	ldr	r1, [r4, #4]
 8007404:	eb07 060a 	add.w	r6, r7, sl
 8007408:	42b3      	cmp	r3, r6
 800740a:	b085      	sub	sp, #20
 800740c:	bfb8      	it	lt
 800740e:	3101      	addlt	r1, #1
 8007410:	f7ff fe90 	bl	8007134 <_Balloc>
 8007414:	b930      	cbnz	r0, 8007424 <__multiply+0x44>
 8007416:	4602      	mov	r2, r0
 8007418:	4b44      	ldr	r3, [pc, #272]	; (800752c <__multiply+0x14c>)
 800741a:	4845      	ldr	r0, [pc, #276]	; (8007530 <__multiply+0x150>)
 800741c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007420:	f001 fc26 	bl	8008c70 <__assert_func>
 8007424:	f100 0514 	add.w	r5, r0, #20
 8007428:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800742c:	462b      	mov	r3, r5
 800742e:	2200      	movs	r2, #0
 8007430:	4543      	cmp	r3, r8
 8007432:	d321      	bcc.n	8007478 <__multiply+0x98>
 8007434:	f104 0314 	add.w	r3, r4, #20
 8007438:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800743c:	f109 0314 	add.w	r3, r9, #20
 8007440:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007444:	9202      	str	r2, [sp, #8]
 8007446:	1b3a      	subs	r2, r7, r4
 8007448:	3a15      	subs	r2, #21
 800744a:	f022 0203 	bic.w	r2, r2, #3
 800744e:	3204      	adds	r2, #4
 8007450:	f104 0115 	add.w	r1, r4, #21
 8007454:	428f      	cmp	r7, r1
 8007456:	bf38      	it	cc
 8007458:	2204      	movcc	r2, #4
 800745a:	9201      	str	r2, [sp, #4]
 800745c:	9a02      	ldr	r2, [sp, #8]
 800745e:	9303      	str	r3, [sp, #12]
 8007460:	429a      	cmp	r2, r3
 8007462:	d80c      	bhi.n	800747e <__multiply+0x9e>
 8007464:	2e00      	cmp	r6, #0
 8007466:	dd03      	ble.n	8007470 <__multiply+0x90>
 8007468:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800746c:	2b00      	cmp	r3, #0
 800746e:	d05b      	beq.n	8007528 <__multiply+0x148>
 8007470:	6106      	str	r6, [r0, #16]
 8007472:	b005      	add	sp, #20
 8007474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007478:	f843 2b04 	str.w	r2, [r3], #4
 800747c:	e7d8      	b.n	8007430 <__multiply+0x50>
 800747e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007482:	f1ba 0f00 	cmp.w	sl, #0
 8007486:	d024      	beq.n	80074d2 <__multiply+0xf2>
 8007488:	f104 0e14 	add.w	lr, r4, #20
 800748c:	46a9      	mov	r9, r5
 800748e:	f04f 0c00 	mov.w	ip, #0
 8007492:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007496:	f8d9 1000 	ldr.w	r1, [r9]
 800749a:	fa1f fb82 	uxth.w	fp, r2
 800749e:	b289      	uxth	r1, r1
 80074a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80074a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80074a8:	f8d9 2000 	ldr.w	r2, [r9]
 80074ac:	4461      	add	r1, ip
 80074ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80074b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074ba:	b289      	uxth	r1, r1
 80074bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074c0:	4577      	cmp	r7, lr
 80074c2:	f849 1b04 	str.w	r1, [r9], #4
 80074c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074ca:	d8e2      	bhi.n	8007492 <__multiply+0xb2>
 80074cc:	9a01      	ldr	r2, [sp, #4]
 80074ce:	f845 c002 	str.w	ip, [r5, r2]
 80074d2:	9a03      	ldr	r2, [sp, #12]
 80074d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074d8:	3304      	adds	r3, #4
 80074da:	f1b9 0f00 	cmp.w	r9, #0
 80074de:	d021      	beq.n	8007524 <__multiply+0x144>
 80074e0:	6829      	ldr	r1, [r5, #0]
 80074e2:	f104 0c14 	add.w	ip, r4, #20
 80074e6:	46ae      	mov	lr, r5
 80074e8:	f04f 0a00 	mov.w	sl, #0
 80074ec:	f8bc b000 	ldrh.w	fp, [ip]
 80074f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074f4:	fb09 220b 	mla	r2, r9, fp, r2
 80074f8:	4452      	add	r2, sl
 80074fa:	b289      	uxth	r1, r1
 80074fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007500:	f84e 1b04 	str.w	r1, [lr], #4
 8007504:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007508:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800750c:	f8be 1000 	ldrh.w	r1, [lr]
 8007510:	fb09 110a 	mla	r1, r9, sl, r1
 8007514:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007518:	4567      	cmp	r7, ip
 800751a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800751e:	d8e5      	bhi.n	80074ec <__multiply+0x10c>
 8007520:	9a01      	ldr	r2, [sp, #4]
 8007522:	50a9      	str	r1, [r5, r2]
 8007524:	3504      	adds	r5, #4
 8007526:	e799      	b.n	800745c <__multiply+0x7c>
 8007528:	3e01      	subs	r6, #1
 800752a:	e79b      	b.n	8007464 <__multiply+0x84>
 800752c:	08009bd9 	.word	0x08009bd9
 8007530:	08009bea 	.word	0x08009bea

08007534 <__pow5mult>:
 8007534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007538:	4615      	mov	r5, r2
 800753a:	f012 0203 	ands.w	r2, r2, #3
 800753e:	4606      	mov	r6, r0
 8007540:	460f      	mov	r7, r1
 8007542:	d007      	beq.n	8007554 <__pow5mult+0x20>
 8007544:	4c25      	ldr	r4, [pc, #148]	; (80075dc <__pow5mult+0xa8>)
 8007546:	3a01      	subs	r2, #1
 8007548:	2300      	movs	r3, #0
 800754a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800754e:	f7ff fe53 	bl	80071f8 <__multadd>
 8007552:	4607      	mov	r7, r0
 8007554:	10ad      	asrs	r5, r5, #2
 8007556:	d03d      	beq.n	80075d4 <__pow5mult+0xa0>
 8007558:	69f4      	ldr	r4, [r6, #28]
 800755a:	b97c      	cbnz	r4, 800757c <__pow5mult+0x48>
 800755c:	2010      	movs	r0, #16
 800755e:	f7ff fd35 	bl	8006fcc <malloc>
 8007562:	4602      	mov	r2, r0
 8007564:	61f0      	str	r0, [r6, #28]
 8007566:	b928      	cbnz	r0, 8007574 <__pow5mult+0x40>
 8007568:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <__pow5mult+0xac>)
 800756a:	481e      	ldr	r0, [pc, #120]	; (80075e4 <__pow5mult+0xb0>)
 800756c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007570:	f001 fb7e 	bl	8008c70 <__assert_func>
 8007574:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007578:	6004      	str	r4, [r0, #0]
 800757a:	60c4      	str	r4, [r0, #12]
 800757c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007584:	b94c      	cbnz	r4, 800759a <__pow5mult+0x66>
 8007586:	f240 2171 	movw	r1, #625	; 0x271
 800758a:	4630      	mov	r0, r6
 800758c:	f7ff ff12 	bl	80073b4 <__i2b>
 8007590:	2300      	movs	r3, #0
 8007592:	f8c8 0008 	str.w	r0, [r8, #8]
 8007596:	4604      	mov	r4, r0
 8007598:	6003      	str	r3, [r0, #0]
 800759a:	f04f 0900 	mov.w	r9, #0
 800759e:	07eb      	lsls	r3, r5, #31
 80075a0:	d50a      	bpl.n	80075b8 <__pow5mult+0x84>
 80075a2:	4639      	mov	r1, r7
 80075a4:	4622      	mov	r2, r4
 80075a6:	4630      	mov	r0, r6
 80075a8:	f7ff ff1a 	bl	80073e0 <__multiply>
 80075ac:	4639      	mov	r1, r7
 80075ae:	4680      	mov	r8, r0
 80075b0:	4630      	mov	r0, r6
 80075b2:	f7ff fdff 	bl	80071b4 <_Bfree>
 80075b6:	4647      	mov	r7, r8
 80075b8:	106d      	asrs	r5, r5, #1
 80075ba:	d00b      	beq.n	80075d4 <__pow5mult+0xa0>
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	b938      	cbnz	r0, 80075d0 <__pow5mult+0x9c>
 80075c0:	4622      	mov	r2, r4
 80075c2:	4621      	mov	r1, r4
 80075c4:	4630      	mov	r0, r6
 80075c6:	f7ff ff0b 	bl	80073e0 <__multiply>
 80075ca:	6020      	str	r0, [r4, #0]
 80075cc:	f8c0 9000 	str.w	r9, [r0]
 80075d0:	4604      	mov	r4, r0
 80075d2:	e7e4      	b.n	800759e <__pow5mult+0x6a>
 80075d4:	4638      	mov	r0, r7
 80075d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075da:	bf00      	nop
 80075dc:	08009d38 	.word	0x08009d38
 80075e0:	08009b6a 	.word	0x08009b6a
 80075e4:	08009bea 	.word	0x08009bea

080075e8 <__lshift>:
 80075e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ec:	460c      	mov	r4, r1
 80075ee:	6849      	ldr	r1, [r1, #4]
 80075f0:	6923      	ldr	r3, [r4, #16]
 80075f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075f6:	68a3      	ldr	r3, [r4, #8]
 80075f8:	4607      	mov	r7, r0
 80075fa:	4691      	mov	r9, r2
 80075fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007600:	f108 0601 	add.w	r6, r8, #1
 8007604:	42b3      	cmp	r3, r6
 8007606:	db0b      	blt.n	8007620 <__lshift+0x38>
 8007608:	4638      	mov	r0, r7
 800760a:	f7ff fd93 	bl	8007134 <_Balloc>
 800760e:	4605      	mov	r5, r0
 8007610:	b948      	cbnz	r0, 8007626 <__lshift+0x3e>
 8007612:	4602      	mov	r2, r0
 8007614:	4b28      	ldr	r3, [pc, #160]	; (80076b8 <__lshift+0xd0>)
 8007616:	4829      	ldr	r0, [pc, #164]	; (80076bc <__lshift+0xd4>)
 8007618:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800761c:	f001 fb28 	bl	8008c70 <__assert_func>
 8007620:	3101      	adds	r1, #1
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	e7ee      	b.n	8007604 <__lshift+0x1c>
 8007626:	2300      	movs	r3, #0
 8007628:	f100 0114 	add.w	r1, r0, #20
 800762c:	f100 0210 	add.w	r2, r0, #16
 8007630:	4618      	mov	r0, r3
 8007632:	4553      	cmp	r3, sl
 8007634:	db33      	blt.n	800769e <__lshift+0xb6>
 8007636:	6920      	ldr	r0, [r4, #16]
 8007638:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800763c:	f104 0314 	add.w	r3, r4, #20
 8007640:	f019 091f 	ands.w	r9, r9, #31
 8007644:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007648:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800764c:	d02b      	beq.n	80076a6 <__lshift+0xbe>
 800764e:	f1c9 0e20 	rsb	lr, r9, #32
 8007652:	468a      	mov	sl, r1
 8007654:	2200      	movs	r2, #0
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	fa00 f009 	lsl.w	r0, r0, r9
 800765c:	4310      	orrs	r0, r2
 800765e:	f84a 0b04 	str.w	r0, [sl], #4
 8007662:	f853 2b04 	ldr.w	r2, [r3], #4
 8007666:	459c      	cmp	ip, r3
 8007668:	fa22 f20e 	lsr.w	r2, r2, lr
 800766c:	d8f3      	bhi.n	8007656 <__lshift+0x6e>
 800766e:	ebac 0304 	sub.w	r3, ip, r4
 8007672:	3b15      	subs	r3, #21
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	3304      	adds	r3, #4
 800767a:	f104 0015 	add.w	r0, r4, #21
 800767e:	4584      	cmp	ip, r0
 8007680:	bf38      	it	cc
 8007682:	2304      	movcc	r3, #4
 8007684:	50ca      	str	r2, [r1, r3]
 8007686:	b10a      	cbz	r2, 800768c <__lshift+0xa4>
 8007688:	f108 0602 	add.w	r6, r8, #2
 800768c:	3e01      	subs	r6, #1
 800768e:	4638      	mov	r0, r7
 8007690:	612e      	str	r6, [r5, #16]
 8007692:	4621      	mov	r1, r4
 8007694:	f7ff fd8e 	bl	80071b4 <_Bfree>
 8007698:	4628      	mov	r0, r5
 800769a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769e:	f842 0f04 	str.w	r0, [r2, #4]!
 80076a2:	3301      	adds	r3, #1
 80076a4:	e7c5      	b.n	8007632 <__lshift+0x4a>
 80076a6:	3904      	subs	r1, #4
 80076a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80076b0:	459c      	cmp	ip, r3
 80076b2:	d8f9      	bhi.n	80076a8 <__lshift+0xc0>
 80076b4:	e7ea      	b.n	800768c <__lshift+0xa4>
 80076b6:	bf00      	nop
 80076b8:	08009bd9 	.word	0x08009bd9
 80076bc:	08009bea 	.word	0x08009bea

080076c0 <__mcmp>:
 80076c0:	b530      	push	{r4, r5, lr}
 80076c2:	6902      	ldr	r2, [r0, #16]
 80076c4:	690c      	ldr	r4, [r1, #16]
 80076c6:	1b12      	subs	r2, r2, r4
 80076c8:	d10e      	bne.n	80076e8 <__mcmp+0x28>
 80076ca:	f100 0314 	add.w	r3, r0, #20
 80076ce:	3114      	adds	r1, #20
 80076d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076e0:	42a5      	cmp	r5, r4
 80076e2:	d003      	beq.n	80076ec <__mcmp+0x2c>
 80076e4:	d305      	bcc.n	80076f2 <__mcmp+0x32>
 80076e6:	2201      	movs	r2, #1
 80076e8:	4610      	mov	r0, r2
 80076ea:	bd30      	pop	{r4, r5, pc}
 80076ec:	4283      	cmp	r3, r0
 80076ee:	d3f3      	bcc.n	80076d8 <__mcmp+0x18>
 80076f0:	e7fa      	b.n	80076e8 <__mcmp+0x28>
 80076f2:	f04f 32ff 	mov.w	r2, #4294967295
 80076f6:	e7f7      	b.n	80076e8 <__mcmp+0x28>

080076f8 <__mdiff>:
 80076f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	460c      	mov	r4, r1
 80076fe:	4606      	mov	r6, r0
 8007700:	4611      	mov	r1, r2
 8007702:	4620      	mov	r0, r4
 8007704:	4690      	mov	r8, r2
 8007706:	f7ff ffdb 	bl	80076c0 <__mcmp>
 800770a:	1e05      	subs	r5, r0, #0
 800770c:	d110      	bne.n	8007730 <__mdiff+0x38>
 800770e:	4629      	mov	r1, r5
 8007710:	4630      	mov	r0, r6
 8007712:	f7ff fd0f 	bl	8007134 <_Balloc>
 8007716:	b930      	cbnz	r0, 8007726 <__mdiff+0x2e>
 8007718:	4b3a      	ldr	r3, [pc, #232]	; (8007804 <__mdiff+0x10c>)
 800771a:	4602      	mov	r2, r0
 800771c:	f240 2137 	movw	r1, #567	; 0x237
 8007720:	4839      	ldr	r0, [pc, #228]	; (8007808 <__mdiff+0x110>)
 8007722:	f001 faa5 	bl	8008c70 <__assert_func>
 8007726:	2301      	movs	r3, #1
 8007728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800772c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007730:	bfa4      	itt	ge
 8007732:	4643      	movge	r3, r8
 8007734:	46a0      	movge	r8, r4
 8007736:	4630      	mov	r0, r6
 8007738:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800773c:	bfa6      	itte	ge
 800773e:	461c      	movge	r4, r3
 8007740:	2500      	movge	r5, #0
 8007742:	2501      	movlt	r5, #1
 8007744:	f7ff fcf6 	bl	8007134 <_Balloc>
 8007748:	b920      	cbnz	r0, 8007754 <__mdiff+0x5c>
 800774a:	4b2e      	ldr	r3, [pc, #184]	; (8007804 <__mdiff+0x10c>)
 800774c:	4602      	mov	r2, r0
 800774e:	f240 2145 	movw	r1, #581	; 0x245
 8007752:	e7e5      	b.n	8007720 <__mdiff+0x28>
 8007754:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007758:	6926      	ldr	r6, [r4, #16]
 800775a:	60c5      	str	r5, [r0, #12]
 800775c:	f104 0914 	add.w	r9, r4, #20
 8007760:	f108 0514 	add.w	r5, r8, #20
 8007764:	f100 0e14 	add.w	lr, r0, #20
 8007768:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800776c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007770:	f108 0210 	add.w	r2, r8, #16
 8007774:	46f2      	mov	sl, lr
 8007776:	2100      	movs	r1, #0
 8007778:	f859 3b04 	ldr.w	r3, [r9], #4
 800777c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007780:	fa11 f88b 	uxtah	r8, r1, fp
 8007784:	b299      	uxth	r1, r3
 8007786:	0c1b      	lsrs	r3, r3, #16
 8007788:	eba8 0801 	sub.w	r8, r8, r1
 800778c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007790:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007794:	fa1f f888 	uxth.w	r8, r8
 8007798:	1419      	asrs	r1, r3, #16
 800779a:	454e      	cmp	r6, r9
 800779c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077a0:	f84a 3b04 	str.w	r3, [sl], #4
 80077a4:	d8e8      	bhi.n	8007778 <__mdiff+0x80>
 80077a6:	1b33      	subs	r3, r6, r4
 80077a8:	3b15      	subs	r3, #21
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	3304      	adds	r3, #4
 80077b0:	3415      	adds	r4, #21
 80077b2:	42a6      	cmp	r6, r4
 80077b4:	bf38      	it	cc
 80077b6:	2304      	movcc	r3, #4
 80077b8:	441d      	add	r5, r3
 80077ba:	4473      	add	r3, lr
 80077bc:	469e      	mov	lr, r3
 80077be:	462e      	mov	r6, r5
 80077c0:	4566      	cmp	r6, ip
 80077c2:	d30e      	bcc.n	80077e2 <__mdiff+0xea>
 80077c4:	f10c 0203 	add.w	r2, ip, #3
 80077c8:	1b52      	subs	r2, r2, r5
 80077ca:	f022 0203 	bic.w	r2, r2, #3
 80077ce:	3d03      	subs	r5, #3
 80077d0:	45ac      	cmp	ip, r5
 80077d2:	bf38      	it	cc
 80077d4:	2200      	movcc	r2, #0
 80077d6:	4413      	add	r3, r2
 80077d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077dc:	b17a      	cbz	r2, 80077fe <__mdiff+0x106>
 80077de:	6107      	str	r7, [r0, #16]
 80077e0:	e7a4      	b.n	800772c <__mdiff+0x34>
 80077e2:	f856 8b04 	ldr.w	r8, [r6], #4
 80077e6:	fa11 f288 	uxtah	r2, r1, r8
 80077ea:	1414      	asrs	r4, r2, #16
 80077ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077f0:	b292      	uxth	r2, r2
 80077f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077f6:	f84e 2b04 	str.w	r2, [lr], #4
 80077fa:	1421      	asrs	r1, r4, #16
 80077fc:	e7e0      	b.n	80077c0 <__mdiff+0xc8>
 80077fe:	3f01      	subs	r7, #1
 8007800:	e7ea      	b.n	80077d8 <__mdiff+0xe0>
 8007802:	bf00      	nop
 8007804:	08009bd9 	.word	0x08009bd9
 8007808:	08009bea 	.word	0x08009bea

0800780c <__ulp>:
 800780c:	b082      	sub	sp, #8
 800780e:	ed8d 0b00 	vstr	d0, [sp]
 8007812:	9a01      	ldr	r2, [sp, #4]
 8007814:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <__ulp+0x48>)
 8007816:	4013      	ands	r3, r2
 8007818:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800781c:	2b00      	cmp	r3, #0
 800781e:	dc08      	bgt.n	8007832 <__ulp+0x26>
 8007820:	425b      	negs	r3, r3
 8007822:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007826:	ea4f 5223 	mov.w	r2, r3, asr #20
 800782a:	da04      	bge.n	8007836 <__ulp+0x2a>
 800782c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007830:	4113      	asrs	r3, r2
 8007832:	2200      	movs	r2, #0
 8007834:	e008      	b.n	8007848 <__ulp+0x3c>
 8007836:	f1a2 0314 	sub.w	r3, r2, #20
 800783a:	2b1e      	cmp	r3, #30
 800783c:	bfda      	itte	le
 800783e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007842:	40da      	lsrle	r2, r3
 8007844:	2201      	movgt	r2, #1
 8007846:	2300      	movs	r3, #0
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	ec41 0b10 	vmov	d0, r0, r1
 8007850:	b002      	add	sp, #8
 8007852:	4770      	bx	lr
 8007854:	7ff00000 	.word	0x7ff00000

08007858 <__b2d>:
 8007858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785c:	6906      	ldr	r6, [r0, #16]
 800785e:	f100 0814 	add.w	r8, r0, #20
 8007862:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007866:	1f37      	subs	r7, r6, #4
 8007868:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800786c:	4610      	mov	r0, r2
 800786e:	f7ff fd53 	bl	8007318 <__hi0bits>
 8007872:	f1c0 0320 	rsb	r3, r0, #32
 8007876:	280a      	cmp	r0, #10
 8007878:	600b      	str	r3, [r1, #0]
 800787a:	491b      	ldr	r1, [pc, #108]	; (80078e8 <__b2d+0x90>)
 800787c:	dc15      	bgt.n	80078aa <__b2d+0x52>
 800787e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007882:	fa22 f30c 	lsr.w	r3, r2, ip
 8007886:	45b8      	cmp	r8, r7
 8007888:	ea43 0501 	orr.w	r5, r3, r1
 800788c:	bf34      	ite	cc
 800788e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007892:	2300      	movcs	r3, #0
 8007894:	3015      	adds	r0, #21
 8007896:	fa02 f000 	lsl.w	r0, r2, r0
 800789a:	fa23 f30c 	lsr.w	r3, r3, ip
 800789e:	4303      	orrs	r3, r0
 80078a0:	461c      	mov	r4, r3
 80078a2:	ec45 4b10 	vmov	d0, r4, r5
 80078a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078aa:	45b8      	cmp	r8, r7
 80078ac:	bf3a      	itte	cc
 80078ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80078b2:	f1a6 0708 	subcc.w	r7, r6, #8
 80078b6:	2300      	movcs	r3, #0
 80078b8:	380b      	subs	r0, #11
 80078ba:	d012      	beq.n	80078e2 <__b2d+0x8a>
 80078bc:	f1c0 0120 	rsb	r1, r0, #32
 80078c0:	fa23 f401 	lsr.w	r4, r3, r1
 80078c4:	4082      	lsls	r2, r0
 80078c6:	4322      	orrs	r2, r4
 80078c8:	4547      	cmp	r7, r8
 80078ca:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80078ce:	bf8c      	ite	hi
 80078d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80078d4:	2200      	movls	r2, #0
 80078d6:	4083      	lsls	r3, r0
 80078d8:	40ca      	lsrs	r2, r1
 80078da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80078de:	4313      	orrs	r3, r2
 80078e0:	e7de      	b.n	80078a0 <__b2d+0x48>
 80078e2:	ea42 0501 	orr.w	r5, r2, r1
 80078e6:	e7db      	b.n	80078a0 <__b2d+0x48>
 80078e8:	3ff00000 	.word	0x3ff00000

080078ec <__d2b>:
 80078ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078f0:	460f      	mov	r7, r1
 80078f2:	2101      	movs	r1, #1
 80078f4:	ec59 8b10 	vmov	r8, r9, d0
 80078f8:	4616      	mov	r6, r2
 80078fa:	f7ff fc1b 	bl	8007134 <_Balloc>
 80078fe:	4604      	mov	r4, r0
 8007900:	b930      	cbnz	r0, 8007910 <__d2b+0x24>
 8007902:	4602      	mov	r2, r0
 8007904:	4b24      	ldr	r3, [pc, #144]	; (8007998 <__d2b+0xac>)
 8007906:	4825      	ldr	r0, [pc, #148]	; (800799c <__d2b+0xb0>)
 8007908:	f240 310f 	movw	r1, #783	; 0x30f
 800790c:	f001 f9b0 	bl	8008c70 <__assert_func>
 8007910:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007914:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007918:	bb2d      	cbnz	r5, 8007966 <__d2b+0x7a>
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	f1b8 0300 	subs.w	r3, r8, #0
 8007920:	d026      	beq.n	8007970 <__d2b+0x84>
 8007922:	4668      	mov	r0, sp
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	f7ff fd17 	bl	8007358 <__lo0bits>
 800792a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800792e:	b1e8      	cbz	r0, 800796c <__d2b+0x80>
 8007930:	f1c0 0320 	rsb	r3, r0, #32
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	430b      	orrs	r3, r1
 800793a:	40c2      	lsrs	r2, r0
 800793c:	6163      	str	r3, [r4, #20]
 800793e:	9201      	str	r2, [sp, #4]
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	61a3      	str	r3, [r4, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	bf14      	ite	ne
 8007948:	2202      	movne	r2, #2
 800794a:	2201      	moveq	r2, #1
 800794c:	6122      	str	r2, [r4, #16]
 800794e:	b1bd      	cbz	r5, 8007980 <__d2b+0x94>
 8007950:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007954:	4405      	add	r5, r0
 8007956:	603d      	str	r5, [r7, #0]
 8007958:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800795c:	6030      	str	r0, [r6, #0]
 800795e:	4620      	mov	r0, r4
 8007960:	b003      	add	sp, #12
 8007962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800796a:	e7d6      	b.n	800791a <__d2b+0x2e>
 800796c:	6161      	str	r1, [r4, #20]
 800796e:	e7e7      	b.n	8007940 <__d2b+0x54>
 8007970:	a801      	add	r0, sp, #4
 8007972:	f7ff fcf1 	bl	8007358 <__lo0bits>
 8007976:	9b01      	ldr	r3, [sp, #4]
 8007978:	6163      	str	r3, [r4, #20]
 800797a:	3020      	adds	r0, #32
 800797c:	2201      	movs	r2, #1
 800797e:	e7e5      	b.n	800794c <__d2b+0x60>
 8007980:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007984:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007988:	6038      	str	r0, [r7, #0]
 800798a:	6918      	ldr	r0, [r3, #16]
 800798c:	f7ff fcc4 	bl	8007318 <__hi0bits>
 8007990:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007994:	e7e2      	b.n	800795c <__d2b+0x70>
 8007996:	bf00      	nop
 8007998:	08009bd9 	.word	0x08009bd9
 800799c:	08009bea 	.word	0x08009bea

080079a0 <__ratio>:
 80079a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	4688      	mov	r8, r1
 80079a6:	4669      	mov	r1, sp
 80079a8:	4681      	mov	r9, r0
 80079aa:	f7ff ff55 	bl	8007858 <__b2d>
 80079ae:	a901      	add	r1, sp, #4
 80079b0:	4640      	mov	r0, r8
 80079b2:	ec55 4b10 	vmov	r4, r5, d0
 80079b6:	f7ff ff4f 	bl	8007858 <__b2d>
 80079ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80079be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80079c2:	eba3 0c02 	sub.w	ip, r3, r2
 80079c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80079d0:	ec51 0b10 	vmov	r0, r1, d0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bfd6      	itet	le
 80079d8:	460a      	movle	r2, r1
 80079da:	462a      	movgt	r2, r5
 80079dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80079e0:	468b      	mov	fp, r1
 80079e2:	462f      	mov	r7, r5
 80079e4:	bfd4      	ite	le
 80079e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80079ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80079ee:	4620      	mov	r0, r4
 80079f0:	ee10 2a10 	vmov	r2, s0
 80079f4:	465b      	mov	r3, fp
 80079f6:	4639      	mov	r1, r7
 80079f8:	f7f8 ff28 	bl	800084c <__aeabi_ddiv>
 80079fc:	ec41 0b10 	vmov	d0, r0, r1
 8007a00:	b003      	add	sp, #12
 8007a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a06 <__copybits>:
 8007a06:	3901      	subs	r1, #1
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	1149      	asrs	r1, r1, #5
 8007a0c:	6914      	ldr	r4, [r2, #16]
 8007a0e:	3101      	adds	r1, #1
 8007a10:	f102 0314 	add.w	r3, r2, #20
 8007a14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a18:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a1c:	1f05      	subs	r5, r0, #4
 8007a1e:	42a3      	cmp	r3, r4
 8007a20:	d30c      	bcc.n	8007a3c <__copybits+0x36>
 8007a22:	1aa3      	subs	r3, r4, r2
 8007a24:	3b11      	subs	r3, #17
 8007a26:	f023 0303 	bic.w	r3, r3, #3
 8007a2a:	3211      	adds	r2, #17
 8007a2c:	42a2      	cmp	r2, r4
 8007a2e:	bf88      	it	hi
 8007a30:	2300      	movhi	r3, #0
 8007a32:	4418      	add	r0, r3
 8007a34:	2300      	movs	r3, #0
 8007a36:	4288      	cmp	r0, r1
 8007a38:	d305      	bcc.n	8007a46 <__copybits+0x40>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a40:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a44:	e7eb      	b.n	8007a1e <__copybits+0x18>
 8007a46:	f840 3b04 	str.w	r3, [r0], #4
 8007a4a:	e7f4      	b.n	8007a36 <__copybits+0x30>

08007a4c <__any_on>:
 8007a4c:	f100 0214 	add.w	r2, r0, #20
 8007a50:	6900      	ldr	r0, [r0, #16]
 8007a52:	114b      	asrs	r3, r1, #5
 8007a54:	4298      	cmp	r0, r3
 8007a56:	b510      	push	{r4, lr}
 8007a58:	db11      	blt.n	8007a7e <__any_on+0x32>
 8007a5a:	dd0a      	ble.n	8007a72 <__any_on+0x26>
 8007a5c:	f011 011f 	ands.w	r1, r1, #31
 8007a60:	d007      	beq.n	8007a72 <__any_on+0x26>
 8007a62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a66:	fa24 f001 	lsr.w	r0, r4, r1
 8007a6a:	fa00 f101 	lsl.w	r1, r0, r1
 8007a6e:	428c      	cmp	r4, r1
 8007a70:	d10b      	bne.n	8007a8a <__any_on+0x3e>
 8007a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d803      	bhi.n	8007a82 <__any_on+0x36>
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	bd10      	pop	{r4, pc}
 8007a7e:	4603      	mov	r3, r0
 8007a80:	e7f7      	b.n	8007a72 <__any_on+0x26>
 8007a82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a86:	2900      	cmp	r1, #0
 8007a88:	d0f5      	beq.n	8007a76 <__any_on+0x2a>
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	e7f6      	b.n	8007a7c <__any_on+0x30>

08007a8e <sulp>:
 8007a8e:	b570      	push	{r4, r5, r6, lr}
 8007a90:	4604      	mov	r4, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	ec45 4b10 	vmov	d0, r4, r5
 8007a98:	4616      	mov	r6, r2
 8007a9a:	f7ff feb7 	bl	800780c <__ulp>
 8007a9e:	ec51 0b10 	vmov	r0, r1, d0
 8007aa2:	b17e      	cbz	r6, 8007ac4 <sulp+0x36>
 8007aa4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007aa8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dd09      	ble.n	8007ac4 <sulp+0x36>
 8007ab0:	051b      	lsls	r3, r3, #20
 8007ab2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ab6:	2400      	movs	r4, #0
 8007ab8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007abc:	4622      	mov	r2, r4
 8007abe:	462b      	mov	r3, r5
 8007ac0:	f7f8 fd9a 	bl	80005f8 <__aeabi_dmul>
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ac8 <_strtod_l>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	ed2d 8b02 	vpush	{d8}
 8007ad0:	b09b      	sub	sp, #108	; 0x6c
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	9216      	str	r2, [sp, #88]	; 0x58
 8007ada:	460d      	mov	r5, r1
 8007adc:	f04f 0800 	mov.w	r8, #0
 8007ae0:	f04f 0900 	mov.w	r9, #0
 8007ae4:	460a      	mov	r2, r1
 8007ae6:	9215      	str	r2, [sp, #84]	; 0x54
 8007ae8:	7811      	ldrb	r1, [r2, #0]
 8007aea:	292b      	cmp	r1, #43	; 0x2b
 8007aec:	d04c      	beq.n	8007b88 <_strtod_l+0xc0>
 8007aee:	d83a      	bhi.n	8007b66 <_strtod_l+0x9e>
 8007af0:	290d      	cmp	r1, #13
 8007af2:	d834      	bhi.n	8007b5e <_strtod_l+0x96>
 8007af4:	2908      	cmp	r1, #8
 8007af6:	d834      	bhi.n	8007b62 <_strtod_l+0x9a>
 8007af8:	2900      	cmp	r1, #0
 8007afa:	d03d      	beq.n	8007b78 <_strtod_l+0xb0>
 8007afc:	2200      	movs	r2, #0
 8007afe:	920a      	str	r2, [sp, #40]	; 0x28
 8007b00:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007b02:	7832      	ldrb	r2, [r6, #0]
 8007b04:	2a30      	cmp	r2, #48	; 0x30
 8007b06:	f040 80b4 	bne.w	8007c72 <_strtod_l+0x1aa>
 8007b0a:	7872      	ldrb	r2, [r6, #1]
 8007b0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007b10:	2a58      	cmp	r2, #88	; 0x58
 8007b12:	d170      	bne.n	8007bf6 <_strtod_l+0x12e>
 8007b14:	9302      	str	r3, [sp, #8]
 8007b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b18:	9301      	str	r3, [sp, #4]
 8007b1a:	ab16      	add	r3, sp, #88	; 0x58
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4a8e      	ldr	r2, [pc, #568]	; (8007d58 <_strtod_l+0x290>)
 8007b20:	ab17      	add	r3, sp, #92	; 0x5c
 8007b22:	a915      	add	r1, sp, #84	; 0x54
 8007b24:	4620      	mov	r0, r4
 8007b26:	f001 f93f 	bl	8008da8 <__gethex>
 8007b2a:	f010 070f 	ands.w	r7, r0, #15
 8007b2e:	4605      	mov	r5, r0
 8007b30:	d005      	beq.n	8007b3e <_strtod_l+0x76>
 8007b32:	2f06      	cmp	r7, #6
 8007b34:	d12a      	bne.n	8007b8c <_strtod_l+0xc4>
 8007b36:	3601      	adds	r6, #1
 8007b38:	2300      	movs	r3, #0
 8007b3a:	9615      	str	r6, [sp, #84]	; 0x54
 8007b3c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f040 857f 	bne.w	8008644 <_strtod_l+0xb7c>
 8007b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b48:	b1db      	cbz	r3, 8007b82 <_strtod_l+0xba>
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b50:	ec43 2b10 	vmov	d0, r2, r3
 8007b54:	b01b      	add	sp, #108	; 0x6c
 8007b56:	ecbd 8b02 	vpop	{d8}
 8007b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5e:	2920      	cmp	r1, #32
 8007b60:	d1cc      	bne.n	8007afc <_strtod_l+0x34>
 8007b62:	3201      	adds	r2, #1
 8007b64:	e7bf      	b.n	8007ae6 <_strtod_l+0x1e>
 8007b66:	292d      	cmp	r1, #45	; 0x2d
 8007b68:	d1c8      	bne.n	8007afc <_strtod_l+0x34>
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	910a      	str	r1, [sp, #40]	; 0x28
 8007b6e:	1c51      	adds	r1, r2, #1
 8007b70:	9115      	str	r1, [sp, #84]	; 0x54
 8007b72:	7852      	ldrb	r2, [r2, #1]
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	d1c3      	bne.n	8007b00 <_strtod_l+0x38>
 8007b78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b7a:	9515      	str	r5, [sp, #84]	; 0x54
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 855f 	bne.w	8008640 <_strtod_l+0xb78>
 8007b82:	4642      	mov	r2, r8
 8007b84:	464b      	mov	r3, r9
 8007b86:	e7e3      	b.n	8007b50 <_strtod_l+0x88>
 8007b88:	2100      	movs	r1, #0
 8007b8a:	e7ef      	b.n	8007b6c <_strtod_l+0xa4>
 8007b8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b8e:	b13a      	cbz	r2, 8007ba0 <_strtod_l+0xd8>
 8007b90:	2135      	movs	r1, #53	; 0x35
 8007b92:	a818      	add	r0, sp, #96	; 0x60
 8007b94:	f7ff ff37 	bl	8007a06 <__copybits>
 8007b98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f7ff fb0a 	bl	80071b4 <_Bfree>
 8007ba0:	3f01      	subs	r7, #1
 8007ba2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ba4:	2f04      	cmp	r7, #4
 8007ba6:	d806      	bhi.n	8007bb6 <_strtod_l+0xee>
 8007ba8:	e8df f007 	tbb	[pc, r7]
 8007bac:	201d0314 	.word	0x201d0314
 8007bb0:	14          	.byte	0x14
 8007bb1:	00          	.byte	0x00
 8007bb2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007bb6:	05e9      	lsls	r1, r5, #23
 8007bb8:	bf48      	it	mi
 8007bba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007bbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bc2:	0d1b      	lsrs	r3, r3, #20
 8007bc4:	051b      	lsls	r3, r3, #20
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1b9      	bne.n	8007b3e <_strtod_l+0x76>
 8007bca:	f7fe fb07 	bl	80061dc <__errno>
 8007bce:	2322      	movs	r3, #34	; 0x22
 8007bd0:	6003      	str	r3, [r0, #0]
 8007bd2:	e7b4      	b.n	8007b3e <_strtod_l+0x76>
 8007bd4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007bd8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007bdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007be0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007be4:	e7e7      	b.n	8007bb6 <_strtod_l+0xee>
 8007be6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007d60 <_strtod_l+0x298>
 8007bea:	e7e4      	b.n	8007bb6 <_strtod_l+0xee>
 8007bec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007bf0:	f04f 38ff 	mov.w	r8, #4294967295
 8007bf4:	e7df      	b.n	8007bb6 <_strtod_l+0xee>
 8007bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	9215      	str	r2, [sp, #84]	; 0x54
 8007bfc:	785b      	ldrb	r3, [r3, #1]
 8007bfe:	2b30      	cmp	r3, #48	; 0x30
 8007c00:	d0f9      	beq.n	8007bf6 <_strtod_l+0x12e>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d09b      	beq.n	8007b3e <_strtod_l+0x76>
 8007c06:	2301      	movs	r3, #1
 8007c08:	f04f 0a00 	mov.w	sl, #0
 8007c0c:	9304      	str	r3, [sp, #16]
 8007c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c12:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007c16:	46d3      	mov	fp, sl
 8007c18:	220a      	movs	r2, #10
 8007c1a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007c1c:	7806      	ldrb	r6, [r0, #0]
 8007c1e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007c22:	b2d9      	uxtb	r1, r3
 8007c24:	2909      	cmp	r1, #9
 8007c26:	d926      	bls.n	8007c76 <_strtod_l+0x1ae>
 8007c28:	494c      	ldr	r1, [pc, #304]	; (8007d5c <_strtod_l+0x294>)
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f000 ffe6 	bl	8008bfc <strncmp>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d030      	beq.n	8007c96 <_strtod_l+0x1ce>
 8007c34:	2000      	movs	r0, #0
 8007c36:	4632      	mov	r2, r6
 8007c38:	9005      	str	r0, [sp, #20]
 8007c3a:	465e      	mov	r6, fp
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2a65      	cmp	r2, #101	; 0x65
 8007c40:	d001      	beq.n	8007c46 <_strtod_l+0x17e>
 8007c42:	2a45      	cmp	r2, #69	; 0x45
 8007c44:	d113      	bne.n	8007c6e <_strtod_l+0x1a6>
 8007c46:	b91e      	cbnz	r6, 8007c50 <_strtod_l+0x188>
 8007c48:	9a04      	ldr	r2, [sp, #16]
 8007c4a:	4302      	orrs	r2, r0
 8007c4c:	d094      	beq.n	8007b78 <_strtod_l+0xb0>
 8007c4e:	2600      	movs	r6, #0
 8007c50:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007c52:	1c6a      	adds	r2, r5, #1
 8007c54:	9215      	str	r2, [sp, #84]	; 0x54
 8007c56:	786a      	ldrb	r2, [r5, #1]
 8007c58:	2a2b      	cmp	r2, #43	; 0x2b
 8007c5a:	d074      	beq.n	8007d46 <_strtod_l+0x27e>
 8007c5c:	2a2d      	cmp	r2, #45	; 0x2d
 8007c5e:	d078      	beq.n	8007d52 <_strtod_l+0x28a>
 8007c60:	f04f 0c00 	mov.w	ip, #0
 8007c64:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007c68:	2909      	cmp	r1, #9
 8007c6a:	d97f      	bls.n	8007d6c <_strtod_l+0x2a4>
 8007c6c:	9515      	str	r5, [sp, #84]	; 0x54
 8007c6e:	2700      	movs	r7, #0
 8007c70:	e09e      	b.n	8007db0 <_strtod_l+0x2e8>
 8007c72:	2300      	movs	r3, #0
 8007c74:	e7c8      	b.n	8007c08 <_strtod_l+0x140>
 8007c76:	f1bb 0f08 	cmp.w	fp, #8
 8007c7a:	bfd8      	it	le
 8007c7c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007c7e:	f100 0001 	add.w	r0, r0, #1
 8007c82:	bfda      	itte	le
 8007c84:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c88:	9309      	strle	r3, [sp, #36]	; 0x24
 8007c8a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007c8e:	f10b 0b01 	add.w	fp, fp, #1
 8007c92:	9015      	str	r0, [sp, #84]	; 0x54
 8007c94:	e7c1      	b.n	8007c1a <_strtod_l+0x152>
 8007c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	9215      	str	r2, [sp, #84]	; 0x54
 8007c9c:	785a      	ldrb	r2, [r3, #1]
 8007c9e:	f1bb 0f00 	cmp.w	fp, #0
 8007ca2:	d037      	beq.n	8007d14 <_strtod_l+0x24c>
 8007ca4:	9005      	str	r0, [sp, #20]
 8007ca6:	465e      	mov	r6, fp
 8007ca8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007cac:	2b09      	cmp	r3, #9
 8007cae:	d912      	bls.n	8007cd6 <_strtod_l+0x20e>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e7c4      	b.n	8007c3e <_strtod_l+0x176>
 8007cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	9215      	str	r2, [sp, #84]	; 0x54
 8007cba:	785a      	ldrb	r2, [r3, #1]
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	2a30      	cmp	r2, #48	; 0x30
 8007cc0:	d0f8      	beq.n	8007cb4 <_strtod_l+0x1ec>
 8007cc2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	f200 84c1 	bhi.w	800864e <_strtod_l+0xb86>
 8007ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cce:	9005      	str	r0, [sp, #20]
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	3a30      	subs	r2, #48	; 0x30
 8007cd8:	f100 0301 	add.w	r3, r0, #1
 8007cdc:	d014      	beq.n	8007d08 <_strtod_l+0x240>
 8007cde:	9905      	ldr	r1, [sp, #20]
 8007ce0:	4419      	add	r1, r3
 8007ce2:	9105      	str	r1, [sp, #20]
 8007ce4:	4633      	mov	r3, r6
 8007ce6:	eb00 0c06 	add.w	ip, r0, r6
 8007cea:	210a      	movs	r1, #10
 8007cec:	4563      	cmp	r3, ip
 8007cee:	d113      	bne.n	8007d18 <_strtod_l+0x250>
 8007cf0:	1833      	adds	r3, r6, r0
 8007cf2:	2b08      	cmp	r3, #8
 8007cf4:	f106 0601 	add.w	r6, r6, #1
 8007cf8:	4406      	add	r6, r0
 8007cfa:	dc1a      	bgt.n	8007d32 <_strtod_l+0x26a>
 8007cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cfe:	230a      	movs	r3, #10
 8007d00:	fb03 2301 	mla	r3, r3, r1, r2
 8007d04:	9309      	str	r3, [sp, #36]	; 0x24
 8007d06:	2300      	movs	r3, #0
 8007d08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d0a:	1c51      	adds	r1, r2, #1
 8007d0c:	9115      	str	r1, [sp, #84]	; 0x54
 8007d0e:	7852      	ldrb	r2, [r2, #1]
 8007d10:	4618      	mov	r0, r3
 8007d12:	e7c9      	b.n	8007ca8 <_strtod_l+0x1e0>
 8007d14:	4658      	mov	r0, fp
 8007d16:	e7d2      	b.n	8007cbe <_strtod_l+0x1f6>
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	f103 0301 	add.w	r3, r3, #1
 8007d1e:	dc03      	bgt.n	8007d28 <_strtod_l+0x260>
 8007d20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d22:	434f      	muls	r7, r1
 8007d24:	9709      	str	r7, [sp, #36]	; 0x24
 8007d26:	e7e1      	b.n	8007cec <_strtod_l+0x224>
 8007d28:	2b10      	cmp	r3, #16
 8007d2a:	bfd8      	it	le
 8007d2c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007d30:	e7dc      	b.n	8007cec <_strtod_l+0x224>
 8007d32:	2e10      	cmp	r6, #16
 8007d34:	bfdc      	itt	le
 8007d36:	230a      	movle	r3, #10
 8007d38:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007d3c:	e7e3      	b.n	8007d06 <_strtod_l+0x23e>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9305      	str	r3, [sp, #20]
 8007d42:	2301      	movs	r3, #1
 8007d44:	e780      	b.n	8007c48 <_strtod_l+0x180>
 8007d46:	f04f 0c00 	mov.w	ip, #0
 8007d4a:	1caa      	adds	r2, r5, #2
 8007d4c:	9215      	str	r2, [sp, #84]	; 0x54
 8007d4e:	78aa      	ldrb	r2, [r5, #2]
 8007d50:	e788      	b.n	8007c64 <_strtod_l+0x19c>
 8007d52:	f04f 0c01 	mov.w	ip, #1
 8007d56:	e7f8      	b.n	8007d4a <_strtod_l+0x282>
 8007d58:	08009d48 	.word	0x08009d48
 8007d5c:	08009d44 	.word	0x08009d44
 8007d60:	7ff00000 	.word	0x7ff00000
 8007d64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d66:	1c51      	adds	r1, r2, #1
 8007d68:	9115      	str	r1, [sp, #84]	; 0x54
 8007d6a:	7852      	ldrb	r2, [r2, #1]
 8007d6c:	2a30      	cmp	r2, #48	; 0x30
 8007d6e:	d0f9      	beq.n	8007d64 <_strtod_l+0x29c>
 8007d70:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d74:	2908      	cmp	r1, #8
 8007d76:	f63f af7a 	bhi.w	8007c6e <_strtod_l+0x1a6>
 8007d7a:	3a30      	subs	r2, #48	; 0x30
 8007d7c:	9208      	str	r2, [sp, #32]
 8007d7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d80:	920c      	str	r2, [sp, #48]	; 0x30
 8007d82:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d84:	1c57      	adds	r7, r2, #1
 8007d86:	9715      	str	r7, [sp, #84]	; 0x54
 8007d88:	7852      	ldrb	r2, [r2, #1]
 8007d8a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007d8e:	f1be 0f09 	cmp.w	lr, #9
 8007d92:	d938      	bls.n	8007e06 <_strtod_l+0x33e>
 8007d94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d96:	1a7f      	subs	r7, r7, r1
 8007d98:	2f08      	cmp	r7, #8
 8007d9a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007d9e:	dc03      	bgt.n	8007da8 <_strtod_l+0x2e0>
 8007da0:	9908      	ldr	r1, [sp, #32]
 8007da2:	428f      	cmp	r7, r1
 8007da4:	bfa8      	it	ge
 8007da6:	460f      	movge	r7, r1
 8007da8:	f1bc 0f00 	cmp.w	ip, #0
 8007dac:	d000      	beq.n	8007db0 <_strtod_l+0x2e8>
 8007dae:	427f      	negs	r7, r7
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	d14f      	bne.n	8007e54 <_strtod_l+0x38c>
 8007db4:	9904      	ldr	r1, [sp, #16]
 8007db6:	4301      	orrs	r1, r0
 8007db8:	f47f aec1 	bne.w	8007b3e <_strtod_l+0x76>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f47f aedb 	bne.w	8007b78 <_strtod_l+0xb0>
 8007dc2:	2a69      	cmp	r2, #105	; 0x69
 8007dc4:	d029      	beq.n	8007e1a <_strtod_l+0x352>
 8007dc6:	dc26      	bgt.n	8007e16 <_strtod_l+0x34e>
 8007dc8:	2a49      	cmp	r2, #73	; 0x49
 8007dca:	d026      	beq.n	8007e1a <_strtod_l+0x352>
 8007dcc:	2a4e      	cmp	r2, #78	; 0x4e
 8007dce:	f47f aed3 	bne.w	8007b78 <_strtod_l+0xb0>
 8007dd2:	499b      	ldr	r1, [pc, #620]	; (8008040 <_strtod_l+0x578>)
 8007dd4:	a815      	add	r0, sp, #84	; 0x54
 8007dd6:	f001 fa27 	bl	8009228 <__match>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	f43f aecc 	beq.w	8007b78 <_strtod_l+0xb0>
 8007de0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	2b28      	cmp	r3, #40	; 0x28
 8007de6:	d12f      	bne.n	8007e48 <_strtod_l+0x380>
 8007de8:	4996      	ldr	r1, [pc, #600]	; (8008044 <_strtod_l+0x57c>)
 8007dea:	aa18      	add	r2, sp, #96	; 0x60
 8007dec:	a815      	add	r0, sp, #84	; 0x54
 8007dee:	f001 fa2f 	bl	8009250 <__hexnan>
 8007df2:	2805      	cmp	r0, #5
 8007df4:	d128      	bne.n	8007e48 <_strtod_l+0x380>
 8007df6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007df8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007dfc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007e00:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007e04:	e69b      	b.n	8007b3e <_strtod_l+0x76>
 8007e06:	9f08      	ldr	r7, [sp, #32]
 8007e08:	210a      	movs	r1, #10
 8007e0a:	fb01 2107 	mla	r1, r1, r7, r2
 8007e0e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007e12:	9208      	str	r2, [sp, #32]
 8007e14:	e7b5      	b.n	8007d82 <_strtod_l+0x2ba>
 8007e16:	2a6e      	cmp	r2, #110	; 0x6e
 8007e18:	e7d9      	b.n	8007dce <_strtod_l+0x306>
 8007e1a:	498b      	ldr	r1, [pc, #556]	; (8008048 <_strtod_l+0x580>)
 8007e1c:	a815      	add	r0, sp, #84	; 0x54
 8007e1e:	f001 fa03 	bl	8009228 <__match>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	f43f aea8 	beq.w	8007b78 <_strtod_l+0xb0>
 8007e28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e2a:	4988      	ldr	r1, [pc, #544]	; (800804c <_strtod_l+0x584>)
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	a815      	add	r0, sp, #84	; 0x54
 8007e30:	9315      	str	r3, [sp, #84]	; 0x54
 8007e32:	f001 f9f9 	bl	8009228 <__match>
 8007e36:	b910      	cbnz	r0, 8007e3e <_strtod_l+0x376>
 8007e38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	9315      	str	r3, [sp, #84]	; 0x54
 8007e3e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800805c <_strtod_l+0x594>
 8007e42:	f04f 0800 	mov.w	r8, #0
 8007e46:	e67a      	b.n	8007b3e <_strtod_l+0x76>
 8007e48:	4881      	ldr	r0, [pc, #516]	; (8008050 <_strtod_l+0x588>)
 8007e4a:	f000 ff09 	bl	8008c60 <nan>
 8007e4e:	ec59 8b10 	vmov	r8, r9, d0
 8007e52:	e674      	b.n	8007b3e <_strtod_l+0x76>
 8007e54:	9b05      	ldr	r3, [sp, #20]
 8007e56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e58:	1afb      	subs	r3, r7, r3
 8007e5a:	f1bb 0f00 	cmp.w	fp, #0
 8007e5e:	bf08      	it	eq
 8007e60:	46b3      	moveq	fp, r6
 8007e62:	2e10      	cmp	r6, #16
 8007e64:	9308      	str	r3, [sp, #32]
 8007e66:	4635      	mov	r5, r6
 8007e68:	bfa8      	it	ge
 8007e6a:	2510      	movge	r5, #16
 8007e6c:	f7f8 fb4a 	bl	8000504 <__aeabi_ui2d>
 8007e70:	2e09      	cmp	r6, #9
 8007e72:	4680      	mov	r8, r0
 8007e74:	4689      	mov	r9, r1
 8007e76:	dd13      	ble.n	8007ea0 <_strtod_l+0x3d8>
 8007e78:	4b76      	ldr	r3, [pc, #472]	; (8008054 <_strtod_l+0x58c>)
 8007e7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e82:	f7f8 fbb9 	bl	80005f8 <__aeabi_dmul>
 8007e86:	4680      	mov	r8, r0
 8007e88:	4650      	mov	r0, sl
 8007e8a:	4689      	mov	r9, r1
 8007e8c:	f7f8 fb3a 	bl	8000504 <__aeabi_ui2d>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4640      	mov	r0, r8
 8007e96:	4649      	mov	r1, r9
 8007e98:	f7f8 f9f8 	bl	800028c <__adddf3>
 8007e9c:	4680      	mov	r8, r0
 8007e9e:	4689      	mov	r9, r1
 8007ea0:	2e0f      	cmp	r6, #15
 8007ea2:	dc38      	bgt.n	8007f16 <_strtod_l+0x44e>
 8007ea4:	9b08      	ldr	r3, [sp, #32]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f43f ae49 	beq.w	8007b3e <_strtod_l+0x76>
 8007eac:	dd24      	ble.n	8007ef8 <_strtod_l+0x430>
 8007eae:	2b16      	cmp	r3, #22
 8007eb0:	dc0b      	bgt.n	8007eca <_strtod_l+0x402>
 8007eb2:	4968      	ldr	r1, [pc, #416]	; (8008054 <_strtod_l+0x58c>)
 8007eb4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	f7f8 fb9a 	bl	80005f8 <__aeabi_dmul>
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	e639      	b.n	8007b3e <_strtod_l+0x76>
 8007eca:	9a08      	ldr	r2, [sp, #32]
 8007ecc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	db20      	blt.n	8007f16 <_strtod_l+0x44e>
 8007ed4:	4c5f      	ldr	r4, [pc, #380]	; (8008054 <_strtod_l+0x58c>)
 8007ed6:	f1c6 060f 	rsb	r6, r6, #15
 8007eda:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007ede:	4642      	mov	r2, r8
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ee6:	f7f8 fb87 	bl	80005f8 <__aeabi_dmul>
 8007eea:	9b08      	ldr	r3, [sp, #32]
 8007eec:	1b9e      	subs	r6, r3, r6
 8007eee:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007ef2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007ef6:	e7e3      	b.n	8007ec0 <_strtod_l+0x3f8>
 8007ef8:	9b08      	ldr	r3, [sp, #32]
 8007efa:	3316      	adds	r3, #22
 8007efc:	db0b      	blt.n	8007f16 <_strtod_l+0x44e>
 8007efe:	9b05      	ldr	r3, [sp, #20]
 8007f00:	1bdf      	subs	r7, r3, r7
 8007f02:	4b54      	ldr	r3, [pc, #336]	; (8008054 <_strtod_l+0x58c>)
 8007f04:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	4649      	mov	r1, r9
 8007f10:	f7f8 fc9c 	bl	800084c <__aeabi_ddiv>
 8007f14:	e7d6      	b.n	8007ec4 <_strtod_l+0x3fc>
 8007f16:	9b08      	ldr	r3, [sp, #32]
 8007f18:	1b75      	subs	r5, r6, r5
 8007f1a:	441d      	add	r5, r3
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	dd70      	ble.n	8008002 <_strtod_l+0x53a>
 8007f20:	f015 030f 	ands.w	r3, r5, #15
 8007f24:	d00a      	beq.n	8007f3c <_strtod_l+0x474>
 8007f26:	494b      	ldr	r1, [pc, #300]	; (8008054 <_strtod_l+0x58c>)
 8007f28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f2c:	4642      	mov	r2, r8
 8007f2e:	464b      	mov	r3, r9
 8007f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f34:	f7f8 fb60 	bl	80005f8 <__aeabi_dmul>
 8007f38:	4680      	mov	r8, r0
 8007f3a:	4689      	mov	r9, r1
 8007f3c:	f035 050f 	bics.w	r5, r5, #15
 8007f40:	d04d      	beq.n	8007fde <_strtod_l+0x516>
 8007f42:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007f46:	dd22      	ble.n	8007f8e <_strtod_l+0x4c6>
 8007f48:	2500      	movs	r5, #0
 8007f4a:	46ab      	mov	fp, r5
 8007f4c:	9509      	str	r5, [sp, #36]	; 0x24
 8007f4e:	9505      	str	r5, [sp, #20]
 8007f50:	2322      	movs	r3, #34	; 0x22
 8007f52:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800805c <_strtod_l+0x594>
 8007f56:	6023      	str	r3, [r4, #0]
 8007f58:	f04f 0800 	mov.w	r8, #0
 8007f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	f43f aded 	beq.w	8007b3e <_strtod_l+0x76>
 8007f64:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f66:	4620      	mov	r0, r4
 8007f68:	f7ff f924 	bl	80071b4 <_Bfree>
 8007f6c:	9905      	ldr	r1, [sp, #20]
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7ff f920 	bl	80071b4 <_Bfree>
 8007f74:	4659      	mov	r1, fp
 8007f76:	4620      	mov	r0, r4
 8007f78:	f7ff f91c 	bl	80071b4 <_Bfree>
 8007f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f7ff f918 	bl	80071b4 <_Bfree>
 8007f84:	4629      	mov	r1, r5
 8007f86:	4620      	mov	r0, r4
 8007f88:	f7ff f914 	bl	80071b4 <_Bfree>
 8007f8c:	e5d7      	b.n	8007b3e <_strtod_l+0x76>
 8007f8e:	4b32      	ldr	r3, [pc, #200]	; (8008058 <_strtod_l+0x590>)
 8007f90:	9304      	str	r3, [sp, #16]
 8007f92:	2300      	movs	r3, #0
 8007f94:	112d      	asrs	r5, r5, #4
 8007f96:	4640      	mov	r0, r8
 8007f98:	4649      	mov	r1, r9
 8007f9a:	469a      	mov	sl, r3
 8007f9c:	2d01      	cmp	r5, #1
 8007f9e:	dc21      	bgt.n	8007fe4 <_strtod_l+0x51c>
 8007fa0:	b10b      	cbz	r3, 8007fa6 <_strtod_l+0x4de>
 8007fa2:	4680      	mov	r8, r0
 8007fa4:	4689      	mov	r9, r1
 8007fa6:	492c      	ldr	r1, [pc, #176]	; (8008058 <_strtod_l+0x590>)
 8007fa8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007fac:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb8:	f7f8 fb1e 	bl	80005f8 <__aeabi_dmul>
 8007fbc:	4b27      	ldr	r3, [pc, #156]	; (800805c <_strtod_l+0x594>)
 8007fbe:	460a      	mov	r2, r1
 8007fc0:	400b      	ands	r3, r1
 8007fc2:	4927      	ldr	r1, [pc, #156]	; (8008060 <_strtod_l+0x598>)
 8007fc4:	428b      	cmp	r3, r1
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	d8be      	bhi.n	8007f48 <_strtod_l+0x480>
 8007fca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007fce:	428b      	cmp	r3, r1
 8007fd0:	bf86      	itte	hi
 8007fd2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008064 <_strtod_l+0x59c>
 8007fd6:	f04f 38ff 	movhi.w	r8, #4294967295
 8007fda:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	e07b      	b.n	80080dc <_strtod_l+0x614>
 8007fe4:	07ea      	lsls	r2, r5, #31
 8007fe6:	d505      	bpl.n	8007ff4 <_strtod_l+0x52c>
 8007fe8:	9b04      	ldr	r3, [sp, #16]
 8007fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fee:	f7f8 fb03 	bl	80005f8 <__aeabi_dmul>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	9a04      	ldr	r2, [sp, #16]
 8007ff6:	3208      	adds	r2, #8
 8007ff8:	f10a 0a01 	add.w	sl, sl, #1
 8007ffc:	106d      	asrs	r5, r5, #1
 8007ffe:	9204      	str	r2, [sp, #16]
 8008000:	e7cc      	b.n	8007f9c <_strtod_l+0x4d4>
 8008002:	d0ec      	beq.n	8007fde <_strtod_l+0x516>
 8008004:	426d      	negs	r5, r5
 8008006:	f015 020f 	ands.w	r2, r5, #15
 800800a:	d00a      	beq.n	8008022 <_strtod_l+0x55a>
 800800c:	4b11      	ldr	r3, [pc, #68]	; (8008054 <_strtod_l+0x58c>)
 800800e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008012:	4640      	mov	r0, r8
 8008014:	4649      	mov	r1, r9
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	f7f8 fc17 	bl	800084c <__aeabi_ddiv>
 800801e:	4680      	mov	r8, r0
 8008020:	4689      	mov	r9, r1
 8008022:	112d      	asrs	r5, r5, #4
 8008024:	d0db      	beq.n	8007fde <_strtod_l+0x516>
 8008026:	2d1f      	cmp	r5, #31
 8008028:	dd1e      	ble.n	8008068 <_strtod_l+0x5a0>
 800802a:	2500      	movs	r5, #0
 800802c:	46ab      	mov	fp, r5
 800802e:	9509      	str	r5, [sp, #36]	; 0x24
 8008030:	9505      	str	r5, [sp, #20]
 8008032:	2322      	movs	r3, #34	; 0x22
 8008034:	f04f 0800 	mov.w	r8, #0
 8008038:	f04f 0900 	mov.w	r9, #0
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	e78d      	b.n	8007f5c <_strtod_l+0x494>
 8008040:	08009b31 	.word	0x08009b31
 8008044:	08009d5c 	.word	0x08009d5c
 8008048:	08009b29 	.word	0x08009b29
 800804c:	08009b60 	.word	0x08009b60
 8008050:	08009eed 	.word	0x08009eed
 8008054:	08009c70 	.word	0x08009c70
 8008058:	08009c48 	.word	0x08009c48
 800805c:	7ff00000 	.word	0x7ff00000
 8008060:	7ca00000 	.word	0x7ca00000
 8008064:	7fefffff 	.word	0x7fefffff
 8008068:	f015 0310 	ands.w	r3, r5, #16
 800806c:	bf18      	it	ne
 800806e:	236a      	movne	r3, #106	; 0x6a
 8008070:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008414 <_strtod_l+0x94c>
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	4640      	mov	r0, r8
 8008078:	4649      	mov	r1, r9
 800807a:	2300      	movs	r3, #0
 800807c:	07ea      	lsls	r2, r5, #31
 800807e:	d504      	bpl.n	800808a <_strtod_l+0x5c2>
 8008080:	e9da 2300 	ldrd	r2, r3, [sl]
 8008084:	f7f8 fab8 	bl	80005f8 <__aeabi_dmul>
 8008088:	2301      	movs	r3, #1
 800808a:	106d      	asrs	r5, r5, #1
 800808c:	f10a 0a08 	add.w	sl, sl, #8
 8008090:	d1f4      	bne.n	800807c <_strtod_l+0x5b4>
 8008092:	b10b      	cbz	r3, 8008098 <_strtod_l+0x5d0>
 8008094:	4680      	mov	r8, r0
 8008096:	4689      	mov	r9, r1
 8008098:	9b04      	ldr	r3, [sp, #16]
 800809a:	b1bb      	cbz	r3, 80080cc <_strtod_l+0x604>
 800809c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80080a0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	4649      	mov	r1, r9
 80080a8:	dd10      	ble.n	80080cc <_strtod_l+0x604>
 80080aa:	2b1f      	cmp	r3, #31
 80080ac:	f340 811e 	ble.w	80082ec <_strtod_l+0x824>
 80080b0:	2b34      	cmp	r3, #52	; 0x34
 80080b2:	bfde      	ittt	le
 80080b4:	f04f 33ff 	movle.w	r3, #4294967295
 80080b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80080bc:	4093      	lslle	r3, r2
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	bfcc      	ite	gt
 80080c4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80080c8:	ea03 0901 	andle.w	r9, r3, r1
 80080cc:	2200      	movs	r2, #0
 80080ce:	2300      	movs	r3, #0
 80080d0:	4640      	mov	r0, r8
 80080d2:	4649      	mov	r1, r9
 80080d4:	f7f8 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d1a6      	bne.n	800802a <_strtod_l+0x562>
 80080dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080de:	9300      	str	r3, [sp, #0]
 80080e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080e2:	4633      	mov	r3, r6
 80080e4:	465a      	mov	r2, fp
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7ff f8cc 	bl	8007284 <__s2b>
 80080ec:	9009      	str	r0, [sp, #36]	; 0x24
 80080ee:	2800      	cmp	r0, #0
 80080f0:	f43f af2a 	beq.w	8007f48 <_strtod_l+0x480>
 80080f4:	9a08      	ldr	r2, [sp, #32]
 80080f6:	9b05      	ldr	r3, [sp, #20]
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	eba3 0307 	sub.w	r3, r3, r7
 80080fe:	bfa8      	it	ge
 8008100:	2300      	movge	r3, #0
 8008102:	930c      	str	r3, [sp, #48]	; 0x30
 8008104:	2500      	movs	r5, #0
 8008106:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800810a:	9312      	str	r3, [sp, #72]	; 0x48
 800810c:	46ab      	mov	fp, r5
 800810e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008110:	4620      	mov	r0, r4
 8008112:	6859      	ldr	r1, [r3, #4]
 8008114:	f7ff f80e 	bl	8007134 <_Balloc>
 8008118:	9005      	str	r0, [sp, #20]
 800811a:	2800      	cmp	r0, #0
 800811c:	f43f af18 	beq.w	8007f50 <_strtod_l+0x488>
 8008120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	3202      	adds	r2, #2
 8008126:	f103 010c 	add.w	r1, r3, #12
 800812a:	0092      	lsls	r2, r2, #2
 800812c:	300c      	adds	r0, #12
 800812e:	f000 fd87 	bl	8008c40 <memcpy>
 8008132:	ec49 8b10 	vmov	d0, r8, r9
 8008136:	aa18      	add	r2, sp, #96	; 0x60
 8008138:	a917      	add	r1, sp, #92	; 0x5c
 800813a:	4620      	mov	r0, r4
 800813c:	f7ff fbd6 	bl	80078ec <__d2b>
 8008140:	ec49 8b18 	vmov	d8, r8, r9
 8008144:	9016      	str	r0, [sp, #88]	; 0x58
 8008146:	2800      	cmp	r0, #0
 8008148:	f43f af02 	beq.w	8007f50 <_strtod_l+0x488>
 800814c:	2101      	movs	r1, #1
 800814e:	4620      	mov	r0, r4
 8008150:	f7ff f930 	bl	80073b4 <__i2b>
 8008154:	4683      	mov	fp, r0
 8008156:	2800      	cmp	r0, #0
 8008158:	f43f aefa 	beq.w	8007f50 <_strtod_l+0x488>
 800815c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800815e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008160:	2e00      	cmp	r6, #0
 8008162:	bfab      	itete	ge
 8008164:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008166:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008168:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800816a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800816e:	bfac      	ite	ge
 8008170:	eb06 0a03 	addge.w	sl, r6, r3
 8008174:	1b9f      	sublt	r7, r3, r6
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	1af6      	subs	r6, r6, r3
 800817a:	4416      	add	r6, r2
 800817c:	4ba0      	ldr	r3, [pc, #640]	; (8008400 <_strtod_l+0x938>)
 800817e:	3e01      	subs	r6, #1
 8008180:	429e      	cmp	r6, r3
 8008182:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008186:	f280 80c4 	bge.w	8008312 <_strtod_l+0x84a>
 800818a:	1b9b      	subs	r3, r3, r6
 800818c:	2b1f      	cmp	r3, #31
 800818e:	eba2 0203 	sub.w	r2, r2, r3
 8008192:	f04f 0101 	mov.w	r1, #1
 8008196:	f300 80b0 	bgt.w	80082fa <_strtod_l+0x832>
 800819a:	fa01 f303 	lsl.w	r3, r1, r3
 800819e:	930e      	str	r3, [sp, #56]	; 0x38
 80081a0:	2300      	movs	r3, #0
 80081a2:	930d      	str	r3, [sp, #52]	; 0x34
 80081a4:	eb0a 0602 	add.w	r6, sl, r2
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	45b2      	cmp	sl, r6
 80081ac:	4417      	add	r7, r2
 80081ae:	441f      	add	r7, r3
 80081b0:	4653      	mov	r3, sl
 80081b2:	bfa8      	it	ge
 80081b4:	4633      	movge	r3, r6
 80081b6:	42bb      	cmp	r3, r7
 80081b8:	bfa8      	it	ge
 80081ba:	463b      	movge	r3, r7
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bfc2      	ittt	gt
 80081c0:	1af6      	subgt	r6, r6, r3
 80081c2:	1aff      	subgt	r7, r7, r3
 80081c4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80081c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	dd17      	ble.n	80081fe <_strtod_l+0x736>
 80081ce:	4659      	mov	r1, fp
 80081d0:	461a      	mov	r2, r3
 80081d2:	4620      	mov	r0, r4
 80081d4:	f7ff f9ae 	bl	8007534 <__pow5mult>
 80081d8:	4683      	mov	fp, r0
 80081da:	2800      	cmp	r0, #0
 80081dc:	f43f aeb8 	beq.w	8007f50 <_strtod_l+0x488>
 80081e0:	4601      	mov	r1, r0
 80081e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80081e4:	4620      	mov	r0, r4
 80081e6:	f7ff f8fb 	bl	80073e0 <__multiply>
 80081ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80081ec:	2800      	cmp	r0, #0
 80081ee:	f43f aeaf 	beq.w	8007f50 <_strtod_l+0x488>
 80081f2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80081f4:	4620      	mov	r0, r4
 80081f6:	f7fe ffdd 	bl	80071b4 <_Bfree>
 80081fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081fc:	9316      	str	r3, [sp, #88]	; 0x58
 80081fe:	2e00      	cmp	r6, #0
 8008200:	f300 808c 	bgt.w	800831c <_strtod_l+0x854>
 8008204:	9b08      	ldr	r3, [sp, #32]
 8008206:	2b00      	cmp	r3, #0
 8008208:	dd08      	ble.n	800821c <_strtod_l+0x754>
 800820a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800820c:	9905      	ldr	r1, [sp, #20]
 800820e:	4620      	mov	r0, r4
 8008210:	f7ff f990 	bl	8007534 <__pow5mult>
 8008214:	9005      	str	r0, [sp, #20]
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f ae9a 	beq.w	8007f50 <_strtod_l+0x488>
 800821c:	2f00      	cmp	r7, #0
 800821e:	dd08      	ble.n	8008232 <_strtod_l+0x76a>
 8008220:	9905      	ldr	r1, [sp, #20]
 8008222:	463a      	mov	r2, r7
 8008224:	4620      	mov	r0, r4
 8008226:	f7ff f9df 	bl	80075e8 <__lshift>
 800822a:	9005      	str	r0, [sp, #20]
 800822c:	2800      	cmp	r0, #0
 800822e:	f43f ae8f 	beq.w	8007f50 <_strtod_l+0x488>
 8008232:	f1ba 0f00 	cmp.w	sl, #0
 8008236:	dd08      	ble.n	800824a <_strtod_l+0x782>
 8008238:	4659      	mov	r1, fp
 800823a:	4652      	mov	r2, sl
 800823c:	4620      	mov	r0, r4
 800823e:	f7ff f9d3 	bl	80075e8 <__lshift>
 8008242:	4683      	mov	fp, r0
 8008244:	2800      	cmp	r0, #0
 8008246:	f43f ae83 	beq.w	8007f50 <_strtod_l+0x488>
 800824a:	9a05      	ldr	r2, [sp, #20]
 800824c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff fa52 	bl	80076f8 <__mdiff>
 8008254:	4605      	mov	r5, r0
 8008256:	2800      	cmp	r0, #0
 8008258:	f43f ae7a 	beq.w	8007f50 <_strtod_l+0x488>
 800825c:	68c3      	ldr	r3, [r0, #12]
 800825e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008260:	2300      	movs	r3, #0
 8008262:	60c3      	str	r3, [r0, #12]
 8008264:	4659      	mov	r1, fp
 8008266:	f7ff fa2b 	bl	80076c0 <__mcmp>
 800826a:	2800      	cmp	r0, #0
 800826c:	da60      	bge.n	8008330 <_strtod_l+0x868>
 800826e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008270:	ea53 0308 	orrs.w	r3, r3, r8
 8008274:	f040 8084 	bne.w	8008380 <_strtod_l+0x8b8>
 8008278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800827c:	2b00      	cmp	r3, #0
 800827e:	d17f      	bne.n	8008380 <_strtod_l+0x8b8>
 8008280:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008284:	0d1b      	lsrs	r3, r3, #20
 8008286:	051b      	lsls	r3, r3, #20
 8008288:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800828c:	d978      	bls.n	8008380 <_strtod_l+0x8b8>
 800828e:	696b      	ldr	r3, [r5, #20]
 8008290:	b913      	cbnz	r3, 8008298 <_strtod_l+0x7d0>
 8008292:	692b      	ldr	r3, [r5, #16]
 8008294:	2b01      	cmp	r3, #1
 8008296:	dd73      	ble.n	8008380 <_strtod_l+0x8b8>
 8008298:	4629      	mov	r1, r5
 800829a:	2201      	movs	r2, #1
 800829c:	4620      	mov	r0, r4
 800829e:	f7ff f9a3 	bl	80075e8 <__lshift>
 80082a2:	4659      	mov	r1, fp
 80082a4:	4605      	mov	r5, r0
 80082a6:	f7ff fa0b 	bl	80076c0 <__mcmp>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	dd68      	ble.n	8008380 <_strtod_l+0x8b8>
 80082ae:	9904      	ldr	r1, [sp, #16]
 80082b0:	4a54      	ldr	r2, [pc, #336]	; (8008404 <_strtod_l+0x93c>)
 80082b2:	464b      	mov	r3, r9
 80082b4:	2900      	cmp	r1, #0
 80082b6:	f000 8084 	beq.w	80083c2 <_strtod_l+0x8fa>
 80082ba:	ea02 0109 	and.w	r1, r2, r9
 80082be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082c2:	dc7e      	bgt.n	80083c2 <_strtod_l+0x8fa>
 80082c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082c8:	f77f aeb3 	ble.w	8008032 <_strtod_l+0x56a>
 80082cc:	4b4e      	ldr	r3, [pc, #312]	; (8008408 <_strtod_l+0x940>)
 80082ce:	4640      	mov	r0, r8
 80082d0:	4649      	mov	r1, r9
 80082d2:	2200      	movs	r2, #0
 80082d4:	f7f8 f990 	bl	80005f8 <__aeabi_dmul>
 80082d8:	4b4a      	ldr	r3, [pc, #296]	; (8008404 <_strtod_l+0x93c>)
 80082da:	400b      	ands	r3, r1
 80082dc:	4680      	mov	r8, r0
 80082de:	4689      	mov	r9, r1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f47f ae3f 	bne.w	8007f64 <_strtod_l+0x49c>
 80082e6:	2322      	movs	r3, #34	; 0x22
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	e63b      	b.n	8007f64 <_strtod_l+0x49c>
 80082ec:	f04f 32ff 	mov.w	r2, #4294967295
 80082f0:	fa02 f303 	lsl.w	r3, r2, r3
 80082f4:	ea03 0808 	and.w	r8, r3, r8
 80082f8:	e6e8      	b.n	80080cc <_strtod_l+0x604>
 80082fa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80082fe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008302:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008306:	36e2      	adds	r6, #226	; 0xe2
 8008308:	fa01 f306 	lsl.w	r3, r1, r6
 800830c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008310:	e748      	b.n	80081a4 <_strtod_l+0x6dc>
 8008312:	2100      	movs	r1, #0
 8008314:	2301      	movs	r3, #1
 8008316:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800831a:	e743      	b.n	80081a4 <_strtod_l+0x6dc>
 800831c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800831e:	4632      	mov	r2, r6
 8008320:	4620      	mov	r0, r4
 8008322:	f7ff f961 	bl	80075e8 <__lshift>
 8008326:	9016      	str	r0, [sp, #88]	; 0x58
 8008328:	2800      	cmp	r0, #0
 800832a:	f47f af6b 	bne.w	8008204 <_strtod_l+0x73c>
 800832e:	e60f      	b.n	8007f50 <_strtod_l+0x488>
 8008330:	46ca      	mov	sl, r9
 8008332:	d171      	bne.n	8008418 <_strtod_l+0x950>
 8008334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008336:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800833a:	b352      	cbz	r2, 8008392 <_strtod_l+0x8ca>
 800833c:	4a33      	ldr	r2, [pc, #204]	; (800840c <_strtod_l+0x944>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d12a      	bne.n	8008398 <_strtod_l+0x8d0>
 8008342:	9b04      	ldr	r3, [sp, #16]
 8008344:	4641      	mov	r1, r8
 8008346:	b1fb      	cbz	r3, 8008388 <_strtod_l+0x8c0>
 8008348:	4b2e      	ldr	r3, [pc, #184]	; (8008404 <_strtod_l+0x93c>)
 800834a:	ea09 0303 	and.w	r3, r9, r3
 800834e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008352:	f04f 32ff 	mov.w	r2, #4294967295
 8008356:	d81a      	bhi.n	800838e <_strtod_l+0x8c6>
 8008358:	0d1b      	lsrs	r3, r3, #20
 800835a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800835e:	fa02 f303 	lsl.w	r3, r2, r3
 8008362:	4299      	cmp	r1, r3
 8008364:	d118      	bne.n	8008398 <_strtod_l+0x8d0>
 8008366:	4b2a      	ldr	r3, [pc, #168]	; (8008410 <_strtod_l+0x948>)
 8008368:	459a      	cmp	sl, r3
 800836a:	d102      	bne.n	8008372 <_strtod_l+0x8aa>
 800836c:	3101      	adds	r1, #1
 800836e:	f43f adef 	beq.w	8007f50 <_strtod_l+0x488>
 8008372:	4b24      	ldr	r3, [pc, #144]	; (8008404 <_strtod_l+0x93c>)
 8008374:	ea0a 0303 	and.w	r3, sl, r3
 8008378:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800837c:	f04f 0800 	mov.w	r8, #0
 8008380:	9b04      	ldr	r3, [sp, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1a2      	bne.n	80082cc <_strtod_l+0x804>
 8008386:	e5ed      	b.n	8007f64 <_strtod_l+0x49c>
 8008388:	f04f 33ff 	mov.w	r3, #4294967295
 800838c:	e7e9      	b.n	8008362 <_strtod_l+0x89a>
 800838e:	4613      	mov	r3, r2
 8008390:	e7e7      	b.n	8008362 <_strtod_l+0x89a>
 8008392:	ea53 0308 	orrs.w	r3, r3, r8
 8008396:	d08a      	beq.n	80082ae <_strtod_l+0x7e6>
 8008398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800839a:	b1e3      	cbz	r3, 80083d6 <_strtod_l+0x90e>
 800839c:	ea13 0f0a 	tst.w	r3, sl
 80083a0:	d0ee      	beq.n	8008380 <_strtod_l+0x8b8>
 80083a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a4:	9a04      	ldr	r2, [sp, #16]
 80083a6:	4640      	mov	r0, r8
 80083a8:	4649      	mov	r1, r9
 80083aa:	b1c3      	cbz	r3, 80083de <_strtod_l+0x916>
 80083ac:	f7ff fb6f 	bl	8007a8e <sulp>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	ec51 0b18 	vmov	r0, r1, d8
 80083b8:	f7f7 ff68 	bl	800028c <__adddf3>
 80083bc:	4680      	mov	r8, r0
 80083be:	4689      	mov	r9, r1
 80083c0:	e7de      	b.n	8008380 <_strtod_l+0x8b8>
 80083c2:	4013      	ands	r3, r2
 80083c4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083c8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80083cc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80083d0:	f04f 38ff 	mov.w	r8, #4294967295
 80083d4:	e7d4      	b.n	8008380 <_strtod_l+0x8b8>
 80083d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d8:	ea13 0f08 	tst.w	r3, r8
 80083dc:	e7e0      	b.n	80083a0 <_strtod_l+0x8d8>
 80083de:	f7ff fb56 	bl	8007a8e <sulp>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	ec51 0b18 	vmov	r0, r1, d8
 80083ea:	f7f7 ff4d 	bl	8000288 <__aeabi_dsub>
 80083ee:	2200      	movs	r2, #0
 80083f0:	2300      	movs	r3, #0
 80083f2:	4680      	mov	r8, r0
 80083f4:	4689      	mov	r9, r1
 80083f6:	f7f8 fb67 	bl	8000ac8 <__aeabi_dcmpeq>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d0c0      	beq.n	8008380 <_strtod_l+0x8b8>
 80083fe:	e618      	b.n	8008032 <_strtod_l+0x56a>
 8008400:	fffffc02 	.word	0xfffffc02
 8008404:	7ff00000 	.word	0x7ff00000
 8008408:	39500000 	.word	0x39500000
 800840c:	000fffff 	.word	0x000fffff
 8008410:	7fefffff 	.word	0x7fefffff
 8008414:	08009d70 	.word	0x08009d70
 8008418:	4659      	mov	r1, fp
 800841a:	4628      	mov	r0, r5
 800841c:	f7ff fac0 	bl	80079a0 <__ratio>
 8008420:	ec57 6b10 	vmov	r6, r7, d0
 8008424:	ee10 0a10 	vmov	r0, s0
 8008428:	2200      	movs	r2, #0
 800842a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 fb5e 	bl	8000af0 <__aeabi_dcmple>
 8008434:	2800      	cmp	r0, #0
 8008436:	d071      	beq.n	800851c <_strtod_l+0xa54>
 8008438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800843a:	2b00      	cmp	r3, #0
 800843c:	d17c      	bne.n	8008538 <_strtod_l+0xa70>
 800843e:	f1b8 0f00 	cmp.w	r8, #0
 8008442:	d15a      	bne.n	80084fa <_strtod_l+0xa32>
 8008444:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008448:	2b00      	cmp	r3, #0
 800844a:	d15d      	bne.n	8008508 <_strtod_l+0xa40>
 800844c:	4b90      	ldr	r3, [pc, #576]	; (8008690 <_strtod_l+0xbc8>)
 800844e:	2200      	movs	r2, #0
 8008450:	4630      	mov	r0, r6
 8008452:	4639      	mov	r1, r7
 8008454:	f7f8 fb42 	bl	8000adc <__aeabi_dcmplt>
 8008458:	2800      	cmp	r0, #0
 800845a:	d15c      	bne.n	8008516 <_strtod_l+0xa4e>
 800845c:	4630      	mov	r0, r6
 800845e:	4639      	mov	r1, r7
 8008460:	4b8c      	ldr	r3, [pc, #560]	; (8008694 <_strtod_l+0xbcc>)
 8008462:	2200      	movs	r2, #0
 8008464:	f7f8 f8c8 	bl	80005f8 <__aeabi_dmul>
 8008468:	4606      	mov	r6, r0
 800846a:	460f      	mov	r7, r1
 800846c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008470:	9606      	str	r6, [sp, #24]
 8008472:	9307      	str	r3, [sp, #28]
 8008474:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008478:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800847c:	4b86      	ldr	r3, [pc, #536]	; (8008698 <_strtod_l+0xbd0>)
 800847e:	ea0a 0303 	and.w	r3, sl, r3
 8008482:	930d      	str	r3, [sp, #52]	; 0x34
 8008484:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008486:	4b85      	ldr	r3, [pc, #532]	; (800869c <_strtod_l+0xbd4>)
 8008488:	429a      	cmp	r2, r3
 800848a:	f040 8090 	bne.w	80085ae <_strtod_l+0xae6>
 800848e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008492:	ec49 8b10 	vmov	d0, r8, r9
 8008496:	f7ff f9b9 	bl	800780c <__ulp>
 800849a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800849e:	ec51 0b10 	vmov	r0, r1, d0
 80084a2:	f7f8 f8a9 	bl	80005f8 <__aeabi_dmul>
 80084a6:	4642      	mov	r2, r8
 80084a8:	464b      	mov	r3, r9
 80084aa:	f7f7 feef 	bl	800028c <__adddf3>
 80084ae:	460b      	mov	r3, r1
 80084b0:	4979      	ldr	r1, [pc, #484]	; (8008698 <_strtod_l+0xbd0>)
 80084b2:	4a7b      	ldr	r2, [pc, #492]	; (80086a0 <_strtod_l+0xbd8>)
 80084b4:	4019      	ands	r1, r3
 80084b6:	4291      	cmp	r1, r2
 80084b8:	4680      	mov	r8, r0
 80084ba:	d944      	bls.n	8008546 <_strtod_l+0xa7e>
 80084bc:	ee18 2a90 	vmov	r2, s17
 80084c0:	4b78      	ldr	r3, [pc, #480]	; (80086a4 <_strtod_l+0xbdc>)
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d104      	bne.n	80084d0 <_strtod_l+0xa08>
 80084c6:	ee18 3a10 	vmov	r3, s16
 80084ca:	3301      	adds	r3, #1
 80084cc:	f43f ad40 	beq.w	8007f50 <_strtod_l+0x488>
 80084d0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80086a4 <_strtod_l+0xbdc>
 80084d4:	f04f 38ff 	mov.w	r8, #4294967295
 80084d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80084da:	4620      	mov	r0, r4
 80084dc:	f7fe fe6a 	bl	80071b4 <_Bfree>
 80084e0:	9905      	ldr	r1, [sp, #20]
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7fe fe66 	bl	80071b4 <_Bfree>
 80084e8:	4659      	mov	r1, fp
 80084ea:	4620      	mov	r0, r4
 80084ec:	f7fe fe62 	bl	80071b4 <_Bfree>
 80084f0:	4629      	mov	r1, r5
 80084f2:	4620      	mov	r0, r4
 80084f4:	f7fe fe5e 	bl	80071b4 <_Bfree>
 80084f8:	e609      	b.n	800810e <_strtod_l+0x646>
 80084fa:	f1b8 0f01 	cmp.w	r8, #1
 80084fe:	d103      	bne.n	8008508 <_strtod_l+0xa40>
 8008500:	f1b9 0f00 	cmp.w	r9, #0
 8008504:	f43f ad95 	beq.w	8008032 <_strtod_l+0x56a>
 8008508:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008660 <_strtod_l+0xb98>
 800850c:	4f60      	ldr	r7, [pc, #384]	; (8008690 <_strtod_l+0xbc8>)
 800850e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008512:	2600      	movs	r6, #0
 8008514:	e7ae      	b.n	8008474 <_strtod_l+0x9ac>
 8008516:	4f5f      	ldr	r7, [pc, #380]	; (8008694 <_strtod_l+0xbcc>)
 8008518:	2600      	movs	r6, #0
 800851a:	e7a7      	b.n	800846c <_strtod_l+0x9a4>
 800851c:	4b5d      	ldr	r3, [pc, #372]	; (8008694 <_strtod_l+0xbcc>)
 800851e:	4630      	mov	r0, r6
 8008520:	4639      	mov	r1, r7
 8008522:	2200      	movs	r2, #0
 8008524:	f7f8 f868 	bl	80005f8 <__aeabi_dmul>
 8008528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800852a:	4606      	mov	r6, r0
 800852c:	460f      	mov	r7, r1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d09c      	beq.n	800846c <_strtod_l+0x9a4>
 8008532:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008536:	e79d      	b.n	8008474 <_strtod_l+0x9ac>
 8008538:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008668 <_strtod_l+0xba0>
 800853c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008540:	ec57 6b17 	vmov	r6, r7, d7
 8008544:	e796      	b.n	8008474 <_strtod_l+0x9ac>
 8008546:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	46ca      	mov	sl, r9
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1c2      	bne.n	80084d8 <_strtod_l+0xa10>
 8008552:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008558:	0d1b      	lsrs	r3, r3, #20
 800855a:	051b      	lsls	r3, r3, #20
 800855c:	429a      	cmp	r2, r3
 800855e:	d1bb      	bne.n	80084d8 <_strtod_l+0xa10>
 8008560:	4630      	mov	r0, r6
 8008562:	4639      	mov	r1, r7
 8008564:	f7f8 fba8 	bl	8000cb8 <__aeabi_d2lz>
 8008568:	f7f8 f818 	bl	800059c <__aeabi_l2d>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	f7f7 fe88 	bl	8000288 <__aeabi_dsub>
 8008578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800857a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800857e:	ea43 0308 	orr.w	r3, r3, r8
 8008582:	4313      	orrs	r3, r2
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	d054      	beq.n	8008634 <_strtod_l+0xb6c>
 800858a:	a339      	add	r3, pc, #228	; (adr r3, 8008670 <_strtod_l+0xba8>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f8 faa4 	bl	8000adc <__aeabi_dcmplt>
 8008594:	2800      	cmp	r0, #0
 8008596:	f47f ace5 	bne.w	8007f64 <_strtod_l+0x49c>
 800859a:	a337      	add	r3, pc, #220	; (adr r3, 8008678 <_strtod_l+0xbb0>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 fab8 	bl	8000b18 <__aeabi_dcmpgt>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d095      	beq.n	80084d8 <_strtod_l+0xa10>
 80085ac:	e4da      	b.n	8007f64 <_strtod_l+0x49c>
 80085ae:	9b04      	ldr	r3, [sp, #16]
 80085b0:	b333      	cbz	r3, 8008600 <_strtod_l+0xb38>
 80085b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085b8:	d822      	bhi.n	8008600 <_strtod_l+0xb38>
 80085ba:	a331      	add	r3, pc, #196	; (adr r3, 8008680 <_strtod_l+0xbb8>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	4630      	mov	r0, r6
 80085c2:	4639      	mov	r1, r7
 80085c4:	f7f8 fa94 	bl	8000af0 <__aeabi_dcmple>
 80085c8:	b1a0      	cbz	r0, 80085f4 <_strtod_l+0xb2c>
 80085ca:	4639      	mov	r1, r7
 80085cc:	4630      	mov	r0, r6
 80085ce:	f7f8 faeb 	bl	8000ba8 <__aeabi_d2uiz>
 80085d2:	2801      	cmp	r0, #1
 80085d4:	bf38      	it	cc
 80085d6:	2001      	movcc	r0, #1
 80085d8:	f7f7 ff94 	bl	8000504 <__aeabi_ui2d>
 80085dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085de:	4606      	mov	r6, r0
 80085e0:	460f      	mov	r7, r1
 80085e2:	bb23      	cbnz	r3, 800862e <_strtod_l+0xb66>
 80085e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085e8:	9010      	str	r0, [sp, #64]	; 0x40
 80085ea:	9311      	str	r3, [sp, #68]	; 0x44
 80085ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085f0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80085f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085f8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80085fc:	1a9b      	subs	r3, r3, r2
 80085fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008600:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008604:	eeb0 0a48 	vmov.f32	s0, s16
 8008608:	eef0 0a68 	vmov.f32	s1, s17
 800860c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008610:	f7ff f8fc 	bl	800780c <__ulp>
 8008614:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008618:	ec53 2b10 	vmov	r2, r3, d0
 800861c:	f7f7 ffec 	bl	80005f8 <__aeabi_dmul>
 8008620:	ec53 2b18 	vmov	r2, r3, d8
 8008624:	f7f7 fe32 	bl	800028c <__adddf3>
 8008628:	4680      	mov	r8, r0
 800862a:	4689      	mov	r9, r1
 800862c:	e78d      	b.n	800854a <_strtod_l+0xa82>
 800862e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008632:	e7db      	b.n	80085ec <_strtod_l+0xb24>
 8008634:	a314      	add	r3, pc, #80	; (adr r3, 8008688 <_strtod_l+0xbc0>)
 8008636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863a:	f7f8 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800863e:	e7b3      	b.n	80085a8 <_strtod_l+0xae0>
 8008640:	2300      	movs	r3, #0
 8008642:	930a      	str	r3, [sp, #40]	; 0x28
 8008644:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	f7ff ba7c 	b.w	8007b46 <_strtod_l+0x7e>
 800864e:	2a65      	cmp	r2, #101	; 0x65
 8008650:	f43f ab75 	beq.w	8007d3e <_strtod_l+0x276>
 8008654:	2a45      	cmp	r2, #69	; 0x45
 8008656:	f43f ab72 	beq.w	8007d3e <_strtod_l+0x276>
 800865a:	2301      	movs	r3, #1
 800865c:	f7ff bbaa 	b.w	8007db4 <_strtod_l+0x2ec>
 8008660:	00000000 	.word	0x00000000
 8008664:	bff00000 	.word	0xbff00000
 8008668:	00000000 	.word	0x00000000
 800866c:	3ff00000 	.word	0x3ff00000
 8008670:	94a03595 	.word	0x94a03595
 8008674:	3fdfffff 	.word	0x3fdfffff
 8008678:	35afe535 	.word	0x35afe535
 800867c:	3fe00000 	.word	0x3fe00000
 8008680:	ffc00000 	.word	0xffc00000
 8008684:	41dfffff 	.word	0x41dfffff
 8008688:	94a03595 	.word	0x94a03595
 800868c:	3fcfffff 	.word	0x3fcfffff
 8008690:	3ff00000 	.word	0x3ff00000
 8008694:	3fe00000 	.word	0x3fe00000
 8008698:	7ff00000 	.word	0x7ff00000
 800869c:	7fe00000 	.word	0x7fe00000
 80086a0:	7c9fffff 	.word	0x7c9fffff
 80086a4:	7fefffff 	.word	0x7fefffff

080086a8 <_strtod_r>:
 80086a8:	4b01      	ldr	r3, [pc, #4]	; (80086b0 <_strtod_r+0x8>)
 80086aa:	f7ff ba0d 	b.w	8007ac8 <_strtod_l>
 80086ae:	bf00      	nop
 80086b0:	20000068 	.word	0x20000068

080086b4 <_strtol_l.constprop.0>:
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ba:	d001      	beq.n	80086c0 <_strtol_l.constprop.0+0xc>
 80086bc:	2b24      	cmp	r3, #36	; 0x24
 80086be:	d906      	bls.n	80086ce <_strtol_l.constprop.0+0x1a>
 80086c0:	f7fd fd8c 	bl	80061dc <__errno>
 80086c4:	2316      	movs	r3, #22
 80086c6:	6003      	str	r3, [r0, #0]
 80086c8:	2000      	movs	r0, #0
 80086ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80087b4 <_strtol_l.constprop.0+0x100>
 80086d2:	460d      	mov	r5, r1
 80086d4:	462e      	mov	r6, r5
 80086d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086da:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80086de:	f017 0708 	ands.w	r7, r7, #8
 80086e2:	d1f7      	bne.n	80086d4 <_strtol_l.constprop.0+0x20>
 80086e4:	2c2d      	cmp	r4, #45	; 0x2d
 80086e6:	d132      	bne.n	800874e <_strtol_l.constprop.0+0x9a>
 80086e8:	782c      	ldrb	r4, [r5, #0]
 80086ea:	2701      	movs	r7, #1
 80086ec:	1cb5      	adds	r5, r6, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d05b      	beq.n	80087aa <_strtol_l.constprop.0+0xf6>
 80086f2:	2b10      	cmp	r3, #16
 80086f4:	d109      	bne.n	800870a <_strtol_l.constprop.0+0x56>
 80086f6:	2c30      	cmp	r4, #48	; 0x30
 80086f8:	d107      	bne.n	800870a <_strtol_l.constprop.0+0x56>
 80086fa:	782c      	ldrb	r4, [r5, #0]
 80086fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008700:	2c58      	cmp	r4, #88	; 0x58
 8008702:	d14d      	bne.n	80087a0 <_strtol_l.constprop.0+0xec>
 8008704:	786c      	ldrb	r4, [r5, #1]
 8008706:	2310      	movs	r3, #16
 8008708:	3502      	adds	r5, #2
 800870a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800870e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008712:	f04f 0e00 	mov.w	lr, #0
 8008716:	fbb8 f9f3 	udiv	r9, r8, r3
 800871a:	4676      	mov	r6, lr
 800871c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008720:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008724:	f1bc 0f09 	cmp.w	ip, #9
 8008728:	d816      	bhi.n	8008758 <_strtol_l.constprop.0+0xa4>
 800872a:	4664      	mov	r4, ip
 800872c:	42a3      	cmp	r3, r4
 800872e:	dd24      	ble.n	800877a <_strtol_l.constprop.0+0xc6>
 8008730:	f1be 3fff 	cmp.w	lr, #4294967295
 8008734:	d008      	beq.n	8008748 <_strtol_l.constprop.0+0x94>
 8008736:	45b1      	cmp	r9, r6
 8008738:	d31c      	bcc.n	8008774 <_strtol_l.constprop.0+0xc0>
 800873a:	d101      	bne.n	8008740 <_strtol_l.constprop.0+0x8c>
 800873c:	45a2      	cmp	sl, r4
 800873e:	db19      	blt.n	8008774 <_strtol_l.constprop.0+0xc0>
 8008740:	fb06 4603 	mla	r6, r6, r3, r4
 8008744:	f04f 0e01 	mov.w	lr, #1
 8008748:	f815 4b01 	ldrb.w	r4, [r5], #1
 800874c:	e7e8      	b.n	8008720 <_strtol_l.constprop.0+0x6c>
 800874e:	2c2b      	cmp	r4, #43	; 0x2b
 8008750:	bf04      	itt	eq
 8008752:	782c      	ldrbeq	r4, [r5, #0]
 8008754:	1cb5      	addeq	r5, r6, #2
 8008756:	e7ca      	b.n	80086ee <_strtol_l.constprop.0+0x3a>
 8008758:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800875c:	f1bc 0f19 	cmp.w	ip, #25
 8008760:	d801      	bhi.n	8008766 <_strtol_l.constprop.0+0xb2>
 8008762:	3c37      	subs	r4, #55	; 0x37
 8008764:	e7e2      	b.n	800872c <_strtol_l.constprop.0+0x78>
 8008766:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800876a:	f1bc 0f19 	cmp.w	ip, #25
 800876e:	d804      	bhi.n	800877a <_strtol_l.constprop.0+0xc6>
 8008770:	3c57      	subs	r4, #87	; 0x57
 8008772:	e7db      	b.n	800872c <_strtol_l.constprop.0+0x78>
 8008774:	f04f 3eff 	mov.w	lr, #4294967295
 8008778:	e7e6      	b.n	8008748 <_strtol_l.constprop.0+0x94>
 800877a:	f1be 3fff 	cmp.w	lr, #4294967295
 800877e:	d105      	bne.n	800878c <_strtol_l.constprop.0+0xd8>
 8008780:	2322      	movs	r3, #34	; 0x22
 8008782:	6003      	str	r3, [r0, #0]
 8008784:	4646      	mov	r6, r8
 8008786:	b942      	cbnz	r2, 800879a <_strtol_l.constprop.0+0xe6>
 8008788:	4630      	mov	r0, r6
 800878a:	e79e      	b.n	80086ca <_strtol_l.constprop.0+0x16>
 800878c:	b107      	cbz	r7, 8008790 <_strtol_l.constprop.0+0xdc>
 800878e:	4276      	negs	r6, r6
 8008790:	2a00      	cmp	r2, #0
 8008792:	d0f9      	beq.n	8008788 <_strtol_l.constprop.0+0xd4>
 8008794:	f1be 0f00 	cmp.w	lr, #0
 8008798:	d000      	beq.n	800879c <_strtol_l.constprop.0+0xe8>
 800879a:	1e69      	subs	r1, r5, #1
 800879c:	6011      	str	r1, [r2, #0]
 800879e:	e7f3      	b.n	8008788 <_strtol_l.constprop.0+0xd4>
 80087a0:	2430      	movs	r4, #48	; 0x30
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1b1      	bne.n	800870a <_strtol_l.constprop.0+0x56>
 80087a6:	2308      	movs	r3, #8
 80087a8:	e7af      	b.n	800870a <_strtol_l.constprop.0+0x56>
 80087aa:	2c30      	cmp	r4, #48	; 0x30
 80087ac:	d0a5      	beq.n	80086fa <_strtol_l.constprop.0+0x46>
 80087ae:	230a      	movs	r3, #10
 80087b0:	e7ab      	b.n	800870a <_strtol_l.constprop.0+0x56>
 80087b2:	bf00      	nop
 80087b4:	08009d99 	.word	0x08009d99

080087b8 <_strtol_r>:
 80087b8:	f7ff bf7c 	b.w	80086b4 <_strtol_l.constprop.0>

080087bc <__ssputs_r>:
 80087bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	688e      	ldr	r6, [r1, #8]
 80087c2:	461f      	mov	r7, r3
 80087c4:	42be      	cmp	r6, r7
 80087c6:	680b      	ldr	r3, [r1, #0]
 80087c8:	4682      	mov	sl, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	4690      	mov	r8, r2
 80087ce:	d82c      	bhi.n	800882a <__ssputs_r+0x6e>
 80087d0:	898a      	ldrh	r2, [r1, #12]
 80087d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087d6:	d026      	beq.n	8008826 <__ssputs_r+0x6a>
 80087d8:	6965      	ldr	r5, [r4, #20]
 80087da:	6909      	ldr	r1, [r1, #16]
 80087dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087e0:	eba3 0901 	sub.w	r9, r3, r1
 80087e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80087e8:	1c7b      	adds	r3, r7, #1
 80087ea:	444b      	add	r3, r9
 80087ec:	106d      	asrs	r5, r5, #1
 80087ee:	429d      	cmp	r5, r3
 80087f0:	bf38      	it	cc
 80087f2:	461d      	movcc	r5, r3
 80087f4:	0553      	lsls	r3, r2, #21
 80087f6:	d527      	bpl.n	8008848 <__ssputs_r+0x8c>
 80087f8:	4629      	mov	r1, r5
 80087fa:	f7fe fc0f 	bl	800701c <_malloc_r>
 80087fe:	4606      	mov	r6, r0
 8008800:	b360      	cbz	r0, 800885c <__ssputs_r+0xa0>
 8008802:	6921      	ldr	r1, [r4, #16]
 8008804:	464a      	mov	r2, r9
 8008806:	f000 fa1b 	bl	8008c40 <memcpy>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	6126      	str	r6, [r4, #16]
 8008818:	6165      	str	r5, [r4, #20]
 800881a:	444e      	add	r6, r9
 800881c:	eba5 0509 	sub.w	r5, r5, r9
 8008820:	6026      	str	r6, [r4, #0]
 8008822:	60a5      	str	r5, [r4, #8]
 8008824:	463e      	mov	r6, r7
 8008826:	42be      	cmp	r6, r7
 8008828:	d900      	bls.n	800882c <__ssputs_r+0x70>
 800882a:	463e      	mov	r6, r7
 800882c:	6820      	ldr	r0, [r4, #0]
 800882e:	4632      	mov	r2, r6
 8008830:	4641      	mov	r1, r8
 8008832:	f000 f9c9 	bl	8008bc8 <memmove>
 8008836:	68a3      	ldr	r3, [r4, #8]
 8008838:	1b9b      	subs	r3, r3, r6
 800883a:	60a3      	str	r3, [r4, #8]
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	4433      	add	r3, r6
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	2000      	movs	r0, #0
 8008844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008848:	462a      	mov	r2, r5
 800884a:	f000 fdae 	bl	80093aa <_realloc_r>
 800884e:	4606      	mov	r6, r0
 8008850:	2800      	cmp	r0, #0
 8008852:	d1e0      	bne.n	8008816 <__ssputs_r+0x5a>
 8008854:	6921      	ldr	r1, [r4, #16]
 8008856:	4650      	mov	r0, sl
 8008858:	f7fe fb6c 	bl	8006f34 <_free_r>
 800885c:	230c      	movs	r3, #12
 800885e:	f8ca 3000 	str.w	r3, [sl]
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	f04f 30ff 	mov.w	r0, #4294967295
 800886e:	e7e9      	b.n	8008844 <__ssputs_r+0x88>

08008870 <_svfiprintf_r>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	4698      	mov	r8, r3
 8008876:	898b      	ldrh	r3, [r1, #12]
 8008878:	061b      	lsls	r3, r3, #24
 800887a:	b09d      	sub	sp, #116	; 0x74
 800887c:	4607      	mov	r7, r0
 800887e:	460d      	mov	r5, r1
 8008880:	4614      	mov	r4, r2
 8008882:	d50e      	bpl.n	80088a2 <_svfiprintf_r+0x32>
 8008884:	690b      	ldr	r3, [r1, #16]
 8008886:	b963      	cbnz	r3, 80088a2 <_svfiprintf_r+0x32>
 8008888:	2140      	movs	r1, #64	; 0x40
 800888a:	f7fe fbc7 	bl	800701c <_malloc_r>
 800888e:	6028      	str	r0, [r5, #0]
 8008890:	6128      	str	r0, [r5, #16]
 8008892:	b920      	cbnz	r0, 800889e <_svfiprintf_r+0x2e>
 8008894:	230c      	movs	r3, #12
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	f04f 30ff 	mov.w	r0, #4294967295
 800889c:	e0d0      	b.n	8008a40 <_svfiprintf_r+0x1d0>
 800889e:	2340      	movs	r3, #64	; 0x40
 80088a0:	616b      	str	r3, [r5, #20]
 80088a2:	2300      	movs	r3, #0
 80088a4:	9309      	str	r3, [sp, #36]	; 0x24
 80088a6:	2320      	movs	r3, #32
 80088a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80088b0:	2330      	movs	r3, #48	; 0x30
 80088b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008a58 <_svfiprintf_r+0x1e8>
 80088b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ba:	f04f 0901 	mov.w	r9, #1
 80088be:	4623      	mov	r3, r4
 80088c0:	469a      	mov	sl, r3
 80088c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088c6:	b10a      	cbz	r2, 80088cc <_svfiprintf_r+0x5c>
 80088c8:	2a25      	cmp	r2, #37	; 0x25
 80088ca:	d1f9      	bne.n	80088c0 <_svfiprintf_r+0x50>
 80088cc:	ebba 0b04 	subs.w	fp, sl, r4
 80088d0:	d00b      	beq.n	80088ea <_svfiprintf_r+0x7a>
 80088d2:	465b      	mov	r3, fp
 80088d4:	4622      	mov	r2, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	4638      	mov	r0, r7
 80088da:	f7ff ff6f 	bl	80087bc <__ssputs_r>
 80088de:	3001      	adds	r0, #1
 80088e0:	f000 80a9 	beq.w	8008a36 <_svfiprintf_r+0x1c6>
 80088e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088e6:	445a      	add	r2, fp
 80088e8:	9209      	str	r2, [sp, #36]	; 0x24
 80088ea:	f89a 3000 	ldrb.w	r3, [sl]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 80a1 	beq.w	8008a36 <_svfiprintf_r+0x1c6>
 80088f4:	2300      	movs	r3, #0
 80088f6:	f04f 32ff 	mov.w	r2, #4294967295
 80088fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088fe:	f10a 0a01 	add.w	sl, sl, #1
 8008902:	9304      	str	r3, [sp, #16]
 8008904:	9307      	str	r3, [sp, #28]
 8008906:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800890a:	931a      	str	r3, [sp, #104]	; 0x68
 800890c:	4654      	mov	r4, sl
 800890e:	2205      	movs	r2, #5
 8008910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008914:	4850      	ldr	r0, [pc, #320]	; (8008a58 <_svfiprintf_r+0x1e8>)
 8008916:	f7f7 fc5b 	bl	80001d0 <memchr>
 800891a:	9a04      	ldr	r2, [sp, #16]
 800891c:	b9d8      	cbnz	r0, 8008956 <_svfiprintf_r+0xe6>
 800891e:	06d0      	lsls	r0, r2, #27
 8008920:	bf44      	itt	mi
 8008922:	2320      	movmi	r3, #32
 8008924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008928:	0711      	lsls	r1, r2, #28
 800892a:	bf44      	itt	mi
 800892c:	232b      	movmi	r3, #43	; 0x2b
 800892e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008932:	f89a 3000 	ldrb.w	r3, [sl]
 8008936:	2b2a      	cmp	r3, #42	; 0x2a
 8008938:	d015      	beq.n	8008966 <_svfiprintf_r+0xf6>
 800893a:	9a07      	ldr	r2, [sp, #28]
 800893c:	4654      	mov	r4, sl
 800893e:	2000      	movs	r0, #0
 8008940:	f04f 0c0a 	mov.w	ip, #10
 8008944:	4621      	mov	r1, r4
 8008946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800894a:	3b30      	subs	r3, #48	; 0x30
 800894c:	2b09      	cmp	r3, #9
 800894e:	d94d      	bls.n	80089ec <_svfiprintf_r+0x17c>
 8008950:	b1b0      	cbz	r0, 8008980 <_svfiprintf_r+0x110>
 8008952:	9207      	str	r2, [sp, #28]
 8008954:	e014      	b.n	8008980 <_svfiprintf_r+0x110>
 8008956:	eba0 0308 	sub.w	r3, r0, r8
 800895a:	fa09 f303 	lsl.w	r3, r9, r3
 800895e:	4313      	orrs	r3, r2
 8008960:	9304      	str	r3, [sp, #16]
 8008962:	46a2      	mov	sl, r4
 8008964:	e7d2      	b.n	800890c <_svfiprintf_r+0x9c>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	1d19      	adds	r1, r3, #4
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	9103      	str	r1, [sp, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	bfbb      	ittet	lt
 8008972:	425b      	neglt	r3, r3
 8008974:	f042 0202 	orrlt.w	r2, r2, #2
 8008978:	9307      	strge	r3, [sp, #28]
 800897a:	9307      	strlt	r3, [sp, #28]
 800897c:	bfb8      	it	lt
 800897e:	9204      	strlt	r2, [sp, #16]
 8008980:	7823      	ldrb	r3, [r4, #0]
 8008982:	2b2e      	cmp	r3, #46	; 0x2e
 8008984:	d10c      	bne.n	80089a0 <_svfiprintf_r+0x130>
 8008986:	7863      	ldrb	r3, [r4, #1]
 8008988:	2b2a      	cmp	r3, #42	; 0x2a
 800898a:	d134      	bne.n	80089f6 <_svfiprintf_r+0x186>
 800898c:	9b03      	ldr	r3, [sp, #12]
 800898e:	1d1a      	adds	r2, r3, #4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	9203      	str	r2, [sp, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	bfb8      	it	lt
 8008998:	f04f 33ff 	movlt.w	r3, #4294967295
 800899c:	3402      	adds	r4, #2
 800899e:	9305      	str	r3, [sp, #20]
 80089a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008a68 <_svfiprintf_r+0x1f8>
 80089a4:	7821      	ldrb	r1, [r4, #0]
 80089a6:	2203      	movs	r2, #3
 80089a8:	4650      	mov	r0, sl
 80089aa:	f7f7 fc11 	bl	80001d0 <memchr>
 80089ae:	b138      	cbz	r0, 80089c0 <_svfiprintf_r+0x150>
 80089b0:	9b04      	ldr	r3, [sp, #16]
 80089b2:	eba0 000a 	sub.w	r0, r0, sl
 80089b6:	2240      	movs	r2, #64	; 0x40
 80089b8:	4082      	lsls	r2, r0
 80089ba:	4313      	orrs	r3, r2
 80089bc:	3401      	adds	r4, #1
 80089be:	9304      	str	r3, [sp, #16]
 80089c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c4:	4825      	ldr	r0, [pc, #148]	; (8008a5c <_svfiprintf_r+0x1ec>)
 80089c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ca:	2206      	movs	r2, #6
 80089cc:	f7f7 fc00 	bl	80001d0 <memchr>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d038      	beq.n	8008a46 <_svfiprintf_r+0x1d6>
 80089d4:	4b22      	ldr	r3, [pc, #136]	; (8008a60 <_svfiprintf_r+0x1f0>)
 80089d6:	bb1b      	cbnz	r3, 8008a20 <_svfiprintf_r+0x1b0>
 80089d8:	9b03      	ldr	r3, [sp, #12]
 80089da:	3307      	adds	r3, #7
 80089dc:	f023 0307 	bic.w	r3, r3, #7
 80089e0:	3308      	adds	r3, #8
 80089e2:	9303      	str	r3, [sp, #12]
 80089e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e6:	4433      	add	r3, r6
 80089e8:	9309      	str	r3, [sp, #36]	; 0x24
 80089ea:	e768      	b.n	80088be <_svfiprintf_r+0x4e>
 80089ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80089f0:	460c      	mov	r4, r1
 80089f2:	2001      	movs	r0, #1
 80089f4:	e7a6      	b.n	8008944 <_svfiprintf_r+0xd4>
 80089f6:	2300      	movs	r3, #0
 80089f8:	3401      	adds	r4, #1
 80089fa:	9305      	str	r3, [sp, #20]
 80089fc:	4619      	mov	r1, r3
 80089fe:	f04f 0c0a 	mov.w	ip, #10
 8008a02:	4620      	mov	r0, r4
 8008a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a08:	3a30      	subs	r2, #48	; 0x30
 8008a0a:	2a09      	cmp	r2, #9
 8008a0c:	d903      	bls.n	8008a16 <_svfiprintf_r+0x1a6>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0c6      	beq.n	80089a0 <_svfiprintf_r+0x130>
 8008a12:	9105      	str	r1, [sp, #20]
 8008a14:	e7c4      	b.n	80089a0 <_svfiprintf_r+0x130>
 8008a16:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e7f0      	b.n	8008a02 <_svfiprintf_r+0x192>
 8008a20:	ab03      	add	r3, sp, #12
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	462a      	mov	r2, r5
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <_svfiprintf_r+0x1f4>)
 8008a28:	a904      	add	r1, sp, #16
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	f7fc fc9a 	bl	8005364 <_printf_float>
 8008a30:	1c42      	adds	r2, r0, #1
 8008a32:	4606      	mov	r6, r0
 8008a34:	d1d6      	bne.n	80089e4 <_svfiprintf_r+0x174>
 8008a36:	89ab      	ldrh	r3, [r5, #12]
 8008a38:	065b      	lsls	r3, r3, #25
 8008a3a:	f53f af2d 	bmi.w	8008898 <_svfiprintf_r+0x28>
 8008a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a40:	b01d      	add	sp, #116	; 0x74
 8008a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a46:	ab03      	add	r3, sp, #12
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <_svfiprintf_r+0x1f4>)
 8008a4e:	a904      	add	r1, sp, #16
 8008a50:	4638      	mov	r0, r7
 8008a52:	f7fc ff2b 	bl	80058ac <_printf_i>
 8008a56:	e7eb      	b.n	8008a30 <_svfiprintf_r+0x1c0>
 8008a58:	08009e99 	.word	0x08009e99
 8008a5c:	08009ea3 	.word	0x08009ea3
 8008a60:	08005365 	.word	0x08005365
 8008a64:	080087bd 	.word	0x080087bd
 8008a68:	08009e9f 	.word	0x08009e9f

08008a6c <__sflush_r>:
 8008a6c:	898a      	ldrh	r2, [r1, #12]
 8008a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a72:	4605      	mov	r5, r0
 8008a74:	0710      	lsls	r0, r2, #28
 8008a76:	460c      	mov	r4, r1
 8008a78:	d458      	bmi.n	8008b2c <__sflush_r+0xc0>
 8008a7a:	684b      	ldr	r3, [r1, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dc05      	bgt.n	8008a8c <__sflush_r+0x20>
 8008a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc02      	bgt.n	8008a8c <__sflush_r+0x20>
 8008a86:	2000      	movs	r0, #0
 8008a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	d0f9      	beq.n	8008a86 <__sflush_r+0x1a>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a98:	682f      	ldr	r7, [r5, #0]
 8008a9a:	6a21      	ldr	r1, [r4, #32]
 8008a9c:	602b      	str	r3, [r5, #0]
 8008a9e:	d032      	beq.n	8008b06 <__sflush_r+0x9a>
 8008aa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	075a      	lsls	r2, r3, #29
 8008aa6:	d505      	bpl.n	8008ab4 <__sflush_r+0x48>
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	1ac0      	subs	r0, r0, r3
 8008aac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aae:	b10b      	cbz	r3, 8008ab4 <__sflush_r+0x48>
 8008ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ab2:	1ac0      	subs	r0, r0, r3
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aba:	6a21      	ldr	r1, [r4, #32]
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b0      	blx	r6
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	d106      	bne.n	8008ad4 <__sflush_r+0x68>
 8008ac6:	6829      	ldr	r1, [r5, #0]
 8008ac8:	291d      	cmp	r1, #29
 8008aca:	d82b      	bhi.n	8008b24 <__sflush_r+0xb8>
 8008acc:	4a29      	ldr	r2, [pc, #164]	; (8008b74 <__sflush_r+0x108>)
 8008ace:	410a      	asrs	r2, r1
 8008ad0:	07d6      	lsls	r6, r2, #31
 8008ad2:	d427      	bmi.n	8008b24 <__sflush_r+0xb8>
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	6062      	str	r2, [r4, #4]
 8008ad8:	04d9      	lsls	r1, r3, #19
 8008ada:	6922      	ldr	r2, [r4, #16]
 8008adc:	6022      	str	r2, [r4, #0]
 8008ade:	d504      	bpl.n	8008aea <__sflush_r+0x7e>
 8008ae0:	1c42      	adds	r2, r0, #1
 8008ae2:	d101      	bne.n	8008ae8 <__sflush_r+0x7c>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b903      	cbnz	r3, 8008aea <__sflush_r+0x7e>
 8008ae8:	6560      	str	r0, [r4, #84]	; 0x54
 8008aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aec:	602f      	str	r7, [r5, #0]
 8008aee:	2900      	cmp	r1, #0
 8008af0:	d0c9      	beq.n	8008a86 <__sflush_r+0x1a>
 8008af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008af6:	4299      	cmp	r1, r3
 8008af8:	d002      	beq.n	8008b00 <__sflush_r+0x94>
 8008afa:	4628      	mov	r0, r5
 8008afc:	f7fe fa1a 	bl	8006f34 <_free_r>
 8008b00:	2000      	movs	r0, #0
 8008b02:	6360      	str	r0, [r4, #52]	; 0x34
 8008b04:	e7c0      	b.n	8008a88 <__sflush_r+0x1c>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b0      	blx	r6
 8008b0c:	1c41      	adds	r1, r0, #1
 8008b0e:	d1c8      	bne.n	8008aa2 <__sflush_r+0x36>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0c5      	beq.n	8008aa2 <__sflush_r+0x36>
 8008b16:	2b1d      	cmp	r3, #29
 8008b18:	d001      	beq.n	8008b1e <__sflush_r+0xb2>
 8008b1a:	2b16      	cmp	r3, #22
 8008b1c:	d101      	bne.n	8008b22 <__sflush_r+0xb6>
 8008b1e:	602f      	str	r7, [r5, #0]
 8008b20:	e7b1      	b.n	8008a86 <__sflush_r+0x1a>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b28:	81a3      	strh	r3, [r4, #12]
 8008b2a:	e7ad      	b.n	8008a88 <__sflush_r+0x1c>
 8008b2c:	690f      	ldr	r7, [r1, #16]
 8008b2e:	2f00      	cmp	r7, #0
 8008b30:	d0a9      	beq.n	8008a86 <__sflush_r+0x1a>
 8008b32:	0793      	lsls	r3, r2, #30
 8008b34:	680e      	ldr	r6, [r1, #0]
 8008b36:	bf08      	it	eq
 8008b38:	694b      	ldreq	r3, [r1, #20]
 8008b3a:	600f      	str	r7, [r1, #0]
 8008b3c:	bf18      	it	ne
 8008b3e:	2300      	movne	r3, #0
 8008b40:	eba6 0807 	sub.w	r8, r6, r7
 8008b44:	608b      	str	r3, [r1, #8]
 8008b46:	f1b8 0f00 	cmp.w	r8, #0
 8008b4a:	dd9c      	ble.n	8008a86 <__sflush_r+0x1a>
 8008b4c:	6a21      	ldr	r1, [r4, #32]
 8008b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b50:	4643      	mov	r3, r8
 8008b52:	463a      	mov	r2, r7
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b0      	blx	r6
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	dc06      	bgt.n	8008b6a <__sflush_r+0xfe>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	e78e      	b.n	8008a88 <__sflush_r+0x1c>
 8008b6a:	4407      	add	r7, r0
 8008b6c:	eba8 0800 	sub.w	r8, r8, r0
 8008b70:	e7e9      	b.n	8008b46 <__sflush_r+0xda>
 8008b72:	bf00      	nop
 8008b74:	dfbffffe 	.word	0xdfbffffe

08008b78 <_fflush_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	690b      	ldr	r3, [r1, #16]
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	b913      	cbnz	r3, 8008b88 <_fflush_r+0x10>
 8008b82:	2500      	movs	r5, #0
 8008b84:	4628      	mov	r0, r5
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	b118      	cbz	r0, 8008b92 <_fflush_r+0x1a>
 8008b8a:	6a03      	ldr	r3, [r0, #32]
 8008b8c:	b90b      	cbnz	r3, 8008b92 <_fflush_r+0x1a>
 8008b8e:	f7fd fa39 	bl	8006004 <__sinit>
 8008b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d0f3      	beq.n	8008b82 <_fflush_r+0xa>
 8008b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b9c:	07d0      	lsls	r0, r2, #31
 8008b9e:	d404      	bmi.n	8008baa <_fflush_r+0x32>
 8008ba0:	0599      	lsls	r1, r3, #22
 8008ba2:	d402      	bmi.n	8008baa <_fflush_r+0x32>
 8008ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ba6:	f7fd fb43 	bl	8006230 <__retarget_lock_acquire_recursive>
 8008baa:	4628      	mov	r0, r5
 8008bac:	4621      	mov	r1, r4
 8008bae:	f7ff ff5d 	bl	8008a6c <__sflush_r>
 8008bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bb4:	07da      	lsls	r2, r3, #31
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	d4e4      	bmi.n	8008b84 <_fflush_r+0xc>
 8008bba:	89a3      	ldrh	r3, [r4, #12]
 8008bbc:	059b      	lsls	r3, r3, #22
 8008bbe:	d4e1      	bmi.n	8008b84 <_fflush_r+0xc>
 8008bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bc2:	f7fd fb36 	bl	8006232 <__retarget_lock_release_recursive>
 8008bc6:	e7dd      	b.n	8008b84 <_fflush_r+0xc>

08008bc8 <memmove>:
 8008bc8:	4288      	cmp	r0, r1
 8008bca:	b510      	push	{r4, lr}
 8008bcc:	eb01 0402 	add.w	r4, r1, r2
 8008bd0:	d902      	bls.n	8008bd8 <memmove+0x10>
 8008bd2:	4284      	cmp	r4, r0
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	d807      	bhi.n	8008be8 <memmove+0x20>
 8008bd8:	1e43      	subs	r3, r0, #1
 8008bda:	42a1      	cmp	r1, r4
 8008bdc:	d008      	beq.n	8008bf0 <memmove+0x28>
 8008bde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008be2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008be6:	e7f8      	b.n	8008bda <memmove+0x12>
 8008be8:	4402      	add	r2, r0
 8008bea:	4601      	mov	r1, r0
 8008bec:	428a      	cmp	r2, r1
 8008bee:	d100      	bne.n	8008bf2 <memmove+0x2a>
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bfa:	e7f7      	b.n	8008bec <memmove+0x24>

08008bfc <strncmp>:
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	b16a      	cbz	r2, 8008c1c <strncmp+0x20>
 8008c00:	3901      	subs	r1, #1
 8008c02:	1884      	adds	r4, r0, r2
 8008c04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d103      	bne.n	8008c18 <strncmp+0x1c>
 8008c10:	42a0      	cmp	r0, r4
 8008c12:	d001      	beq.n	8008c18 <strncmp+0x1c>
 8008c14:	2a00      	cmp	r2, #0
 8008c16:	d1f5      	bne.n	8008c04 <strncmp+0x8>
 8008c18:	1ad0      	subs	r0, r2, r3
 8008c1a:	bd10      	pop	{r4, pc}
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	e7fc      	b.n	8008c1a <strncmp+0x1e>

08008c20 <_sbrk_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d06      	ldr	r5, [pc, #24]	; (8008c3c <_sbrk_r+0x1c>)
 8008c24:	2300      	movs	r3, #0
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	602b      	str	r3, [r5, #0]
 8008c2c:	f7f8 fe16 	bl	800185c <_sbrk>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_sbrk_r+0x1a>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_sbrk_r+0x1a>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	20000460 	.word	0x20000460

08008c40 <memcpy>:
 8008c40:	440a      	add	r2, r1
 8008c42:	4291      	cmp	r1, r2
 8008c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c48:	d100      	bne.n	8008c4c <memcpy+0xc>
 8008c4a:	4770      	bx	lr
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c56:	4291      	cmp	r1, r2
 8008c58:	d1f9      	bne.n	8008c4e <memcpy+0xe>
 8008c5a:	bd10      	pop	{r4, pc}
 8008c5c:	0000      	movs	r0, r0
	...

08008c60 <nan>:
 8008c60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008c68 <nan+0x8>
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	00000000 	.word	0x00000000
 8008c6c:	7ff80000 	.word	0x7ff80000

08008c70 <__assert_func>:
 8008c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c72:	4614      	mov	r4, r2
 8008c74:	461a      	mov	r2, r3
 8008c76:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <__assert_func+0x2c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	68d8      	ldr	r0, [r3, #12]
 8008c7e:	b14c      	cbz	r4, 8008c94 <__assert_func+0x24>
 8008c80:	4b07      	ldr	r3, [pc, #28]	; (8008ca0 <__assert_func+0x30>)
 8008c82:	9100      	str	r1, [sp, #0]
 8008c84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c88:	4906      	ldr	r1, [pc, #24]	; (8008ca4 <__assert_func+0x34>)
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	f000 fbca 	bl	8009424 <fiprintf>
 8008c90:	f000 fbda 	bl	8009448 <abort>
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <__assert_func+0x38>)
 8008c96:	461c      	mov	r4, r3
 8008c98:	e7f3      	b.n	8008c82 <__assert_func+0x12>
 8008c9a:	bf00      	nop
 8008c9c:	20000064 	.word	0x20000064
 8008ca0:	08009eb2 	.word	0x08009eb2
 8008ca4:	08009ebf 	.word	0x08009ebf
 8008ca8:	08009eed 	.word	0x08009eed

08008cac <_calloc_r>:
 8008cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cae:	fba1 2402 	umull	r2, r4, r1, r2
 8008cb2:	b94c      	cbnz	r4, 8008cc8 <_calloc_r+0x1c>
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	9201      	str	r2, [sp, #4]
 8008cb8:	f7fe f9b0 	bl	800701c <_malloc_r>
 8008cbc:	9a01      	ldr	r2, [sp, #4]
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	b930      	cbnz	r0, 8008cd0 <_calloc_r+0x24>
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	b003      	add	sp, #12
 8008cc6:	bd30      	pop	{r4, r5, pc}
 8008cc8:	220c      	movs	r2, #12
 8008cca:	6002      	str	r2, [r0, #0]
 8008ccc:	2500      	movs	r5, #0
 8008cce:	e7f8      	b.n	8008cc2 <_calloc_r+0x16>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	f7fd fa30 	bl	8006136 <memset>
 8008cd6:	e7f4      	b.n	8008cc2 <_calloc_r+0x16>

08008cd8 <rshift>:
 8008cd8:	6903      	ldr	r3, [r0, #16]
 8008cda:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008cde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ce2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ce6:	f100 0414 	add.w	r4, r0, #20
 8008cea:	dd45      	ble.n	8008d78 <rshift+0xa0>
 8008cec:	f011 011f 	ands.w	r1, r1, #31
 8008cf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cf8:	d10c      	bne.n	8008d14 <rshift+0x3c>
 8008cfa:	f100 0710 	add.w	r7, r0, #16
 8008cfe:	4629      	mov	r1, r5
 8008d00:	42b1      	cmp	r1, r6
 8008d02:	d334      	bcc.n	8008d6e <rshift+0x96>
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	1eea      	subs	r2, r5, #3
 8008d0a:	4296      	cmp	r6, r2
 8008d0c:	bf38      	it	cc
 8008d0e:	2300      	movcc	r3, #0
 8008d10:	4423      	add	r3, r4
 8008d12:	e015      	b.n	8008d40 <rshift+0x68>
 8008d14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d18:	f1c1 0820 	rsb	r8, r1, #32
 8008d1c:	40cf      	lsrs	r7, r1
 8008d1e:	f105 0e04 	add.w	lr, r5, #4
 8008d22:	46a1      	mov	r9, r4
 8008d24:	4576      	cmp	r6, lr
 8008d26:	46f4      	mov	ip, lr
 8008d28:	d815      	bhi.n	8008d56 <rshift+0x7e>
 8008d2a:	1a9a      	subs	r2, r3, r2
 8008d2c:	0092      	lsls	r2, r2, #2
 8008d2e:	3a04      	subs	r2, #4
 8008d30:	3501      	adds	r5, #1
 8008d32:	42ae      	cmp	r6, r5
 8008d34:	bf38      	it	cc
 8008d36:	2200      	movcc	r2, #0
 8008d38:	18a3      	adds	r3, r4, r2
 8008d3a:	50a7      	str	r7, [r4, r2]
 8008d3c:	b107      	cbz	r7, 8008d40 <rshift+0x68>
 8008d3e:	3304      	adds	r3, #4
 8008d40:	1b1a      	subs	r2, r3, r4
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d48:	bf08      	it	eq
 8008d4a:	2300      	moveq	r3, #0
 8008d4c:	6102      	str	r2, [r0, #16]
 8008d4e:	bf08      	it	eq
 8008d50:	6143      	streq	r3, [r0, #20]
 8008d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d56:	f8dc c000 	ldr.w	ip, [ip]
 8008d5a:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d5e:	ea4c 0707 	orr.w	r7, ip, r7
 8008d62:	f849 7b04 	str.w	r7, [r9], #4
 8008d66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d6a:	40cf      	lsrs	r7, r1
 8008d6c:	e7da      	b.n	8008d24 <rshift+0x4c>
 8008d6e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d72:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d76:	e7c3      	b.n	8008d00 <rshift+0x28>
 8008d78:	4623      	mov	r3, r4
 8008d7a:	e7e1      	b.n	8008d40 <rshift+0x68>

08008d7c <__hexdig_fun>:
 8008d7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d80:	2b09      	cmp	r3, #9
 8008d82:	d802      	bhi.n	8008d8a <__hexdig_fun+0xe>
 8008d84:	3820      	subs	r0, #32
 8008d86:	b2c0      	uxtb	r0, r0
 8008d88:	4770      	bx	lr
 8008d8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d8e:	2b05      	cmp	r3, #5
 8008d90:	d801      	bhi.n	8008d96 <__hexdig_fun+0x1a>
 8008d92:	3847      	subs	r0, #71	; 0x47
 8008d94:	e7f7      	b.n	8008d86 <__hexdig_fun+0xa>
 8008d96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d9a:	2b05      	cmp	r3, #5
 8008d9c:	d801      	bhi.n	8008da2 <__hexdig_fun+0x26>
 8008d9e:	3827      	subs	r0, #39	; 0x27
 8008da0:	e7f1      	b.n	8008d86 <__hexdig_fun+0xa>
 8008da2:	2000      	movs	r0, #0
 8008da4:	4770      	bx	lr
	...

08008da8 <__gethex>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	4617      	mov	r7, r2
 8008dae:	680a      	ldr	r2, [r1, #0]
 8008db0:	b085      	sub	sp, #20
 8008db2:	f102 0b02 	add.w	fp, r2, #2
 8008db6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008dba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008dbe:	4681      	mov	r9, r0
 8008dc0:	468a      	mov	sl, r1
 8008dc2:	9302      	str	r3, [sp, #8]
 8008dc4:	32fe      	adds	r2, #254	; 0xfe
 8008dc6:	eb02 030b 	add.w	r3, r2, fp
 8008dca:	46d8      	mov	r8, fp
 8008dcc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	2830      	cmp	r0, #48	; 0x30
 8008dd4:	d0f7      	beq.n	8008dc6 <__gethex+0x1e>
 8008dd6:	f7ff ffd1 	bl	8008d7c <__hexdig_fun>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d138      	bne.n	8008e52 <__gethex+0xaa>
 8008de0:	49a7      	ldr	r1, [pc, #668]	; (8009080 <__gethex+0x2d8>)
 8008de2:	2201      	movs	r2, #1
 8008de4:	4640      	mov	r0, r8
 8008de6:	f7ff ff09 	bl	8008bfc <strncmp>
 8008dea:	4606      	mov	r6, r0
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d169      	bne.n	8008ec4 <__gethex+0x11c>
 8008df0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008df4:	465d      	mov	r5, fp
 8008df6:	f7ff ffc1 	bl	8008d7c <__hexdig_fun>
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d064      	beq.n	8008ec8 <__gethex+0x120>
 8008dfe:	465a      	mov	r2, fp
 8008e00:	7810      	ldrb	r0, [r2, #0]
 8008e02:	2830      	cmp	r0, #48	; 0x30
 8008e04:	4690      	mov	r8, r2
 8008e06:	f102 0201 	add.w	r2, r2, #1
 8008e0a:	d0f9      	beq.n	8008e00 <__gethex+0x58>
 8008e0c:	f7ff ffb6 	bl	8008d7c <__hexdig_fun>
 8008e10:	2301      	movs	r3, #1
 8008e12:	fab0 f480 	clz	r4, r0
 8008e16:	0964      	lsrs	r4, r4, #5
 8008e18:	465e      	mov	r6, fp
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	4615      	mov	r5, r2
 8008e20:	3201      	adds	r2, #1
 8008e22:	7828      	ldrb	r0, [r5, #0]
 8008e24:	f7ff ffaa 	bl	8008d7c <__hexdig_fun>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d1f8      	bne.n	8008e1e <__gethex+0x76>
 8008e2c:	4994      	ldr	r1, [pc, #592]	; (8009080 <__gethex+0x2d8>)
 8008e2e:	2201      	movs	r2, #1
 8008e30:	4628      	mov	r0, r5
 8008e32:	f7ff fee3 	bl	8008bfc <strncmp>
 8008e36:	b978      	cbnz	r0, 8008e58 <__gethex+0xb0>
 8008e38:	b946      	cbnz	r6, 8008e4c <__gethex+0xa4>
 8008e3a:	1c6e      	adds	r6, r5, #1
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4615      	mov	r5, r2
 8008e40:	3201      	adds	r2, #1
 8008e42:	7828      	ldrb	r0, [r5, #0]
 8008e44:	f7ff ff9a 	bl	8008d7c <__hexdig_fun>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d1f8      	bne.n	8008e3e <__gethex+0x96>
 8008e4c:	1b73      	subs	r3, r6, r5
 8008e4e:	009e      	lsls	r6, r3, #2
 8008e50:	e004      	b.n	8008e5c <__gethex+0xb4>
 8008e52:	2400      	movs	r4, #0
 8008e54:	4626      	mov	r6, r4
 8008e56:	e7e1      	b.n	8008e1c <__gethex+0x74>
 8008e58:	2e00      	cmp	r6, #0
 8008e5a:	d1f7      	bne.n	8008e4c <__gethex+0xa4>
 8008e5c:	782b      	ldrb	r3, [r5, #0]
 8008e5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e62:	2b50      	cmp	r3, #80	; 0x50
 8008e64:	d13d      	bne.n	8008ee2 <__gethex+0x13a>
 8008e66:	786b      	ldrb	r3, [r5, #1]
 8008e68:	2b2b      	cmp	r3, #43	; 0x2b
 8008e6a:	d02f      	beq.n	8008ecc <__gethex+0x124>
 8008e6c:	2b2d      	cmp	r3, #45	; 0x2d
 8008e6e:	d031      	beq.n	8008ed4 <__gethex+0x12c>
 8008e70:	1c69      	adds	r1, r5, #1
 8008e72:	f04f 0b00 	mov.w	fp, #0
 8008e76:	7808      	ldrb	r0, [r1, #0]
 8008e78:	f7ff ff80 	bl	8008d7c <__hexdig_fun>
 8008e7c:	1e42      	subs	r2, r0, #1
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	2a18      	cmp	r2, #24
 8008e82:	d82e      	bhi.n	8008ee2 <__gethex+0x13a>
 8008e84:	f1a0 0210 	sub.w	r2, r0, #16
 8008e88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e8c:	f7ff ff76 	bl	8008d7c <__hexdig_fun>
 8008e90:	f100 3cff 	add.w	ip, r0, #4294967295
 8008e94:	fa5f fc8c 	uxtb.w	ip, ip
 8008e98:	f1bc 0f18 	cmp.w	ip, #24
 8008e9c:	d91d      	bls.n	8008eda <__gethex+0x132>
 8008e9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ea2:	d000      	beq.n	8008ea6 <__gethex+0xfe>
 8008ea4:	4252      	negs	r2, r2
 8008ea6:	4416      	add	r6, r2
 8008ea8:	f8ca 1000 	str.w	r1, [sl]
 8008eac:	b1dc      	cbz	r4, 8008ee6 <__gethex+0x13e>
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	bf14      	ite	ne
 8008eb4:	f04f 0800 	movne.w	r8, #0
 8008eb8:	f04f 0806 	moveq.w	r8, #6
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	b005      	add	sp, #20
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	4645      	mov	r5, r8
 8008ec6:	4626      	mov	r6, r4
 8008ec8:	2401      	movs	r4, #1
 8008eca:	e7c7      	b.n	8008e5c <__gethex+0xb4>
 8008ecc:	f04f 0b00 	mov.w	fp, #0
 8008ed0:	1ca9      	adds	r1, r5, #2
 8008ed2:	e7d0      	b.n	8008e76 <__gethex+0xce>
 8008ed4:	f04f 0b01 	mov.w	fp, #1
 8008ed8:	e7fa      	b.n	8008ed0 <__gethex+0x128>
 8008eda:	230a      	movs	r3, #10
 8008edc:	fb03 0002 	mla	r0, r3, r2, r0
 8008ee0:	e7d0      	b.n	8008e84 <__gethex+0xdc>
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	e7e0      	b.n	8008ea8 <__gethex+0x100>
 8008ee6:	eba5 0308 	sub.w	r3, r5, r8
 8008eea:	3b01      	subs	r3, #1
 8008eec:	4621      	mov	r1, r4
 8008eee:	2b07      	cmp	r3, #7
 8008ef0:	dc0a      	bgt.n	8008f08 <__gethex+0x160>
 8008ef2:	4648      	mov	r0, r9
 8008ef4:	f7fe f91e 	bl	8007134 <_Balloc>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	b940      	cbnz	r0, 8008f0e <__gethex+0x166>
 8008efc:	4b61      	ldr	r3, [pc, #388]	; (8009084 <__gethex+0x2dc>)
 8008efe:	4602      	mov	r2, r0
 8008f00:	21e4      	movs	r1, #228	; 0xe4
 8008f02:	4861      	ldr	r0, [pc, #388]	; (8009088 <__gethex+0x2e0>)
 8008f04:	f7ff feb4 	bl	8008c70 <__assert_func>
 8008f08:	3101      	adds	r1, #1
 8008f0a:	105b      	asrs	r3, r3, #1
 8008f0c:	e7ef      	b.n	8008eee <__gethex+0x146>
 8008f0e:	f100 0a14 	add.w	sl, r0, #20
 8008f12:	2300      	movs	r3, #0
 8008f14:	495a      	ldr	r1, [pc, #360]	; (8009080 <__gethex+0x2d8>)
 8008f16:	f8cd a004 	str.w	sl, [sp, #4]
 8008f1a:	469b      	mov	fp, r3
 8008f1c:	45a8      	cmp	r8, r5
 8008f1e:	d342      	bcc.n	8008fa6 <__gethex+0x1fe>
 8008f20:	9801      	ldr	r0, [sp, #4]
 8008f22:	f840 bb04 	str.w	fp, [r0], #4
 8008f26:	eba0 000a 	sub.w	r0, r0, sl
 8008f2a:	1080      	asrs	r0, r0, #2
 8008f2c:	6120      	str	r0, [r4, #16]
 8008f2e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008f32:	4658      	mov	r0, fp
 8008f34:	f7fe f9f0 	bl	8007318 <__hi0bits>
 8008f38:	683d      	ldr	r5, [r7, #0]
 8008f3a:	eba8 0000 	sub.w	r0, r8, r0
 8008f3e:	42a8      	cmp	r0, r5
 8008f40:	dd59      	ble.n	8008ff6 <__gethex+0x24e>
 8008f42:	eba0 0805 	sub.w	r8, r0, r5
 8008f46:	4641      	mov	r1, r8
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f7fe fd7f 	bl	8007a4c <__any_on>
 8008f4e:	4683      	mov	fp, r0
 8008f50:	b1b8      	cbz	r0, 8008f82 <__gethex+0x1da>
 8008f52:	f108 33ff 	add.w	r3, r8, #4294967295
 8008f56:	1159      	asrs	r1, r3, #5
 8008f58:	f003 021f 	and.w	r2, r3, #31
 8008f5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008f60:	f04f 0b01 	mov.w	fp, #1
 8008f64:	fa0b f202 	lsl.w	r2, fp, r2
 8008f68:	420a      	tst	r2, r1
 8008f6a:	d00a      	beq.n	8008f82 <__gethex+0x1da>
 8008f6c:	455b      	cmp	r3, fp
 8008f6e:	dd06      	ble.n	8008f7e <__gethex+0x1d6>
 8008f70:	f1a8 0102 	sub.w	r1, r8, #2
 8008f74:	4620      	mov	r0, r4
 8008f76:	f7fe fd69 	bl	8007a4c <__any_on>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d138      	bne.n	8008ff0 <__gethex+0x248>
 8008f7e:	f04f 0b02 	mov.w	fp, #2
 8008f82:	4641      	mov	r1, r8
 8008f84:	4620      	mov	r0, r4
 8008f86:	f7ff fea7 	bl	8008cd8 <rshift>
 8008f8a:	4446      	add	r6, r8
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	42b3      	cmp	r3, r6
 8008f90:	da41      	bge.n	8009016 <__gethex+0x26e>
 8008f92:	4621      	mov	r1, r4
 8008f94:	4648      	mov	r0, r9
 8008f96:	f7fe f90d 	bl	80071b4 <_Bfree>
 8008f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008fa4:	e78a      	b.n	8008ebc <__gethex+0x114>
 8008fa6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008faa:	2a2e      	cmp	r2, #46	; 0x2e
 8008fac:	d014      	beq.n	8008fd8 <__gethex+0x230>
 8008fae:	2b20      	cmp	r3, #32
 8008fb0:	d106      	bne.n	8008fc0 <__gethex+0x218>
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	f843 bb04 	str.w	fp, [r3], #4
 8008fb8:	f04f 0b00 	mov.w	fp, #0
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	465b      	mov	r3, fp
 8008fc0:	7828      	ldrb	r0, [r5, #0]
 8008fc2:	9303      	str	r3, [sp, #12]
 8008fc4:	f7ff feda 	bl	8008d7c <__hexdig_fun>
 8008fc8:	9b03      	ldr	r3, [sp, #12]
 8008fca:	f000 000f 	and.w	r0, r0, #15
 8008fce:	4098      	lsls	r0, r3
 8008fd0:	ea4b 0b00 	orr.w	fp, fp, r0
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	e7a1      	b.n	8008f1c <__gethex+0x174>
 8008fd8:	45a8      	cmp	r8, r5
 8008fda:	d8e8      	bhi.n	8008fae <__gethex+0x206>
 8008fdc:	2201      	movs	r2, #1
 8008fde:	4628      	mov	r0, r5
 8008fe0:	9303      	str	r3, [sp, #12]
 8008fe2:	f7ff fe0b 	bl	8008bfc <strncmp>
 8008fe6:	4926      	ldr	r1, [pc, #152]	; (8009080 <__gethex+0x2d8>)
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d1df      	bne.n	8008fae <__gethex+0x206>
 8008fee:	e795      	b.n	8008f1c <__gethex+0x174>
 8008ff0:	f04f 0b03 	mov.w	fp, #3
 8008ff4:	e7c5      	b.n	8008f82 <__gethex+0x1da>
 8008ff6:	da0b      	bge.n	8009010 <__gethex+0x268>
 8008ff8:	eba5 0800 	sub.w	r8, r5, r0
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	4642      	mov	r2, r8
 8009000:	4648      	mov	r0, r9
 8009002:	f7fe faf1 	bl	80075e8 <__lshift>
 8009006:	eba6 0608 	sub.w	r6, r6, r8
 800900a:	4604      	mov	r4, r0
 800900c:	f100 0a14 	add.w	sl, r0, #20
 8009010:	f04f 0b00 	mov.w	fp, #0
 8009014:	e7ba      	b.n	8008f8c <__gethex+0x1e4>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	42b3      	cmp	r3, r6
 800901a:	dd73      	ble.n	8009104 <__gethex+0x35c>
 800901c:	1b9e      	subs	r6, r3, r6
 800901e:	42b5      	cmp	r5, r6
 8009020:	dc34      	bgt.n	800908c <__gethex+0x2e4>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d023      	beq.n	8009070 <__gethex+0x2c8>
 8009028:	2b03      	cmp	r3, #3
 800902a:	d025      	beq.n	8009078 <__gethex+0x2d0>
 800902c:	2b01      	cmp	r3, #1
 800902e:	d115      	bne.n	800905c <__gethex+0x2b4>
 8009030:	42b5      	cmp	r5, r6
 8009032:	d113      	bne.n	800905c <__gethex+0x2b4>
 8009034:	2d01      	cmp	r5, #1
 8009036:	d10b      	bne.n	8009050 <__gethex+0x2a8>
 8009038:	9a02      	ldr	r2, [sp, #8]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	2301      	movs	r3, #1
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	f8ca 3000 	str.w	r3, [sl]
 8009046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009048:	f04f 0862 	mov.w	r8, #98	; 0x62
 800904c:	601c      	str	r4, [r3, #0]
 800904e:	e735      	b.n	8008ebc <__gethex+0x114>
 8009050:	1e69      	subs	r1, r5, #1
 8009052:	4620      	mov	r0, r4
 8009054:	f7fe fcfa 	bl	8007a4c <__any_on>
 8009058:	2800      	cmp	r0, #0
 800905a:	d1ed      	bne.n	8009038 <__gethex+0x290>
 800905c:	4621      	mov	r1, r4
 800905e:	4648      	mov	r0, r9
 8009060:	f7fe f8a8 	bl	80071b4 <_Bfree>
 8009064:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009066:	2300      	movs	r3, #0
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800906e:	e725      	b.n	8008ebc <__gethex+0x114>
 8009070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1f2      	bne.n	800905c <__gethex+0x2b4>
 8009076:	e7df      	b.n	8009038 <__gethex+0x290>
 8009078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1dc      	bne.n	8009038 <__gethex+0x290>
 800907e:	e7ed      	b.n	800905c <__gethex+0x2b4>
 8009080:	08009d44 	.word	0x08009d44
 8009084:	08009bd9 	.word	0x08009bd9
 8009088:	08009eee 	.word	0x08009eee
 800908c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009090:	f1bb 0f00 	cmp.w	fp, #0
 8009094:	d133      	bne.n	80090fe <__gethex+0x356>
 8009096:	f1b8 0f00 	cmp.w	r8, #0
 800909a:	d004      	beq.n	80090a6 <__gethex+0x2fe>
 800909c:	4641      	mov	r1, r8
 800909e:	4620      	mov	r0, r4
 80090a0:	f7fe fcd4 	bl	8007a4c <__any_on>
 80090a4:	4683      	mov	fp, r0
 80090a6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80090aa:	2301      	movs	r3, #1
 80090ac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80090b0:	f008 081f 	and.w	r8, r8, #31
 80090b4:	fa03 f308 	lsl.w	r3, r3, r8
 80090b8:	4213      	tst	r3, r2
 80090ba:	4631      	mov	r1, r6
 80090bc:	4620      	mov	r0, r4
 80090be:	bf18      	it	ne
 80090c0:	f04b 0b02 	orrne.w	fp, fp, #2
 80090c4:	1bad      	subs	r5, r5, r6
 80090c6:	f7ff fe07 	bl	8008cd8 <rshift>
 80090ca:	687e      	ldr	r6, [r7, #4]
 80090cc:	f04f 0802 	mov.w	r8, #2
 80090d0:	f1bb 0f00 	cmp.w	fp, #0
 80090d4:	d04a      	beq.n	800916c <__gethex+0x3c4>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d016      	beq.n	800910a <__gethex+0x362>
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d018      	beq.n	8009112 <__gethex+0x36a>
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d109      	bne.n	80090f8 <__gethex+0x350>
 80090e4:	f01b 0f02 	tst.w	fp, #2
 80090e8:	d006      	beq.n	80090f8 <__gethex+0x350>
 80090ea:	f8da 3000 	ldr.w	r3, [sl]
 80090ee:	ea4b 0b03 	orr.w	fp, fp, r3
 80090f2:	f01b 0f01 	tst.w	fp, #1
 80090f6:	d10f      	bne.n	8009118 <__gethex+0x370>
 80090f8:	f048 0810 	orr.w	r8, r8, #16
 80090fc:	e036      	b.n	800916c <__gethex+0x3c4>
 80090fe:	f04f 0b01 	mov.w	fp, #1
 8009102:	e7d0      	b.n	80090a6 <__gethex+0x2fe>
 8009104:	f04f 0801 	mov.w	r8, #1
 8009108:	e7e2      	b.n	80090d0 <__gethex+0x328>
 800910a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800910c:	f1c3 0301 	rsb	r3, r3, #1
 8009110:	930f      	str	r3, [sp, #60]	; 0x3c
 8009112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009114:	2b00      	cmp	r3, #0
 8009116:	d0ef      	beq.n	80090f8 <__gethex+0x350>
 8009118:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800911c:	f104 0214 	add.w	r2, r4, #20
 8009120:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800912a:	2300      	movs	r3, #0
 800912c:	4694      	mov	ip, r2
 800912e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009132:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009136:	d01e      	beq.n	8009176 <__gethex+0x3ce>
 8009138:	3101      	adds	r1, #1
 800913a:	f8cc 1000 	str.w	r1, [ip]
 800913e:	f1b8 0f02 	cmp.w	r8, #2
 8009142:	f104 0214 	add.w	r2, r4, #20
 8009146:	d13d      	bne.n	80091c4 <__gethex+0x41c>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	3b01      	subs	r3, #1
 800914c:	42ab      	cmp	r3, r5
 800914e:	d10b      	bne.n	8009168 <__gethex+0x3c0>
 8009150:	1169      	asrs	r1, r5, #5
 8009152:	2301      	movs	r3, #1
 8009154:	f005 051f 	and.w	r5, r5, #31
 8009158:	fa03 f505 	lsl.w	r5, r3, r5
 800915c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009160:	421d      	tst	r5, r3
 8009162:	bf18      	it	ne
 8009164:	f04f 0801 	movne.w	r8, #1
 8009168:	f048 0820 	orr.w	r8, r8, #32
 800916c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800916e:	601c      	str	r4, [r3, #0]
 8009170:	9b02      	ldr	r3, [sp, #8]
 8009172:	601e      	str	r6, [r3, #0]
 8009174:	e6a2      	b.n	8008ebc <__gethex+0x114>
 8009176:	4290      	cmp	r0, r2
 8009178:	f842 3c04 	str.w	r3, [r2, #-4]
 800917c:	d8d6      	bhi.n	800912c <__gethex+0x384>
 800917e:	68a2      	ldr	r2, [r4, #8]
 8009180:	4593      	cmp	fp, r2
 8009182:	db17      	blt.n	80091b4 <__gethex+0x40c>
 8009184:	6861      	ldr	r1, [r4, #4]
 8009186:	4648      	mov	r0, r9
 8009188:	3101      	adds	r1, #1
 800918a:	f7fd ffd3 	bl	8007134 <_Balloc>
 800918e:	4682      	mov	sl, r0
 8009190:	b918      	cbnz	r0, 800919a <__gethex+0x3f2>
 8009192:	4b1b      	ldr	r3, [pc, #108]	; (8009200 <__gethex+0x458>)
 8009194:	4602      	mov	r2, r0
 8009196:	2184      	movs	r1, #132	; 0x84
 8009198:	e6b3      	b.n	8008f02 <__gethex+0x15a>
 800919a:	6922      	ldr	r2, [r4, #16]
 800919c:	3202      	adds	r2, #2
 800919e:	f104 010c 	add.w	r1, r4, #12
 80091a2:	0092      	lsls	r2, r2, #2
 80091a4:	300c      	adds	r0, #12
 80091a6:	f7ff fd4b 	bl	8008c40 <memcpy>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4648      	mov	r0, r9
 80091ae:	f7fe f801 	bl	80071b4 <_Bfree>
 80091b2:	4654      	mov	r4, sl
 80091b4:	6922      	ldr	r2, [r4, #16]
 80091b6:	1c51      	adds	r1, r2, #1
 80091b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80091bc:	6121      	str	r1, [r4, #16]
 80091be:	2101      	movs	r1, #1
 80091c0:	6151      	str	r1, [r2, #20]
 80091c2:	e7bc      	b.n	800913e <__gethex+0x396>
 80091c4:	6921      	ldr	r1, [r4, #16]
 80091c6:	4559      	cmp	r1, fp
 80091c8:	dd0b      	ble.n	80091e2 <__gethex+0x43a>
 80091ca:	2101      	movs	r1, #1
 80091cc:	4620      	mov	r0, r4
 80091ce:	f7ff fd83 	bl	8008cd8 <rshift>
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	3601      	adds	r6, #1
 80091d6:	42b3      	cmp	r3, r6
 80091d8:	f6ff aedb 	blt.w	8008f92 <__gethex+0x1ea>
 80091dc:	f04f 0801 	mov.w	r8, #1
 80091e0:	e7c2      	b.n	8009168 <__gethex+0x3c0>
 80091e2:	f015 051f 	ands.w	r5, r5, #31
 80091e6:	d0f9      	beq.n	80091dc <__gethex+0x434>
 80091e8:	9b01      	ldr	r3, [sp, #4]
 80091ea:	441a      	add	r2, r3
 80091ec:	f1c5 0520 	rsb	r5, r5, #32
 80091f0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80091f4:	f7fe f890 	bl	8007318 <__hi0bits>
 80091f8:	42a8      	cmp	r0, r5
 80091fa:	dbe6      	blt.n	80091ca <__gethex+0x422>
 80091fc:	e7ee      	b.n	80091dc <__gethex+0x434>
 80091fe:	bf00      	nop
 8009200:	08009bd9 	.word	0x08009bd9

08009204 <L_shift>:
 8009204:	f1c2 0208 	rsb	r2, r2, #8
 8009208:	0092      	lsls	r2, r2, #2
 800920a:	b570      	push	{r4, r5, r6, lr}
 800920c:	f1c2 0620 	rsb	r6, r2, #32
 8009210:	6843      	ldr	r3, [r0, #4]
 8009212:	6804      	ldr	r4, [r0, #0]
 8009214:	fa03 f506 	lsl.w	r5, r3, r6
 8009218:	432c      	orrs	r4, r5
 800921a:	40d3      	lsrs	r3, r2
 800921c:	6004      	str	r4, [r0, #0]
 800921e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009222:	4288      	cmp	r0, r1
 8009224:	d3f4      	bcc.n	8009210 <L_shift+0xc>
 8009226:	bd70      	pop	{r4, r5, r6, pc}

08009228 <__match>:
 8009228:	b530      	push	{r4, r5, lr}
 800922a:	6803      	ldr	r3, [r0, #0]
 800922c:	3301      	adds	r3, #1
 800922e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009232:	b914      	cbnz	r4, 800923a <__match+0x12>
 8009234:	6003      	str	r3, [r0, #0]
 8009236:	2001      	movs	r0, #1
 8009238:	bd30      	pop	{r4, r5, pc}
 800923a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800923e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009242:	2d19      	cmp	r5, #25
 8009244:	bf98      	it	ls
 8009246:	3220      	addls	r2, #32
 8009248:	42a2      	cmp	r2, r4
 800924a:	d0f0      	beq.n	800922e <__match+0x6>
 800924c:	2000      	movs	r0, #0
 800924e:	e7f3      	b.n	8009238 <__match+0x10>

08009250 <__hexnan>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	680b      	ldr	r3, [r1, #0]
 8009256:	6801      	ldr	r1, [r0, #0]
 8009258:	115e      	asrs	r6, r3, #5
 800925a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800925e:	f013 031f 	ands.w	r3, r3, #31
 8009262:	b087      	sub	sp, #28
 8009264:	bf18      	it	ne
 8009266:	3604      	addne	r6, #4
 8009268:	2500      	movs	r5, #0
 800926a:	1f37      	subs	r7, r6, #4
 800926c:	4682      	mov	sl, r0
 800926e:	4690      	mov	r8, r2
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	f846 5c04 	str.w	r5, [r6, #-4]
 8009276:	46b9      	mov	r9, r7
 8009278:	463c      	mov	r4, r7
 800927a:	9502      	str	r5, [sp, #8]
 800927c:	46ab      	mov	fp, r5
 800927e:	784a      	ldrb	r2, [r1, #1]
 8009280:	1c4b      	adds	r3, r1, #1
 8009282:	9303      	str	r3, [sp, #12]
 8009284:	b342      	cbz	r2, 80092d8 <__hexnan+0x88>
 8009286:	4610      	mov	r0, r2
 8009288:	9105      	str	r1, [sp, #20]
 800928a:	9204      	str	r2, [sp, #16]
 800928c:	f7ff fd76 	bl	8008d7c <__hexdig_fun>
 8009290:	2800      	cmp	r0, #0
 8009292:	d14f      	bne.n	8009334 <__hexnan+0xe4>
 8009294:	9a04      	ldr	r2, [sp, #16]
 8009296:	9905      	ldr	r1, [sp, #20]
 8009298:	2a20      	cmp	r2, #32
 800929a:	d818      	bhi.n	80092ce <__hexnan+0x7e>
 800929c:	9b02      	ldr	r3, [sp, #8]
 800929e:	459b      	cmp	fp, r3
 80092a0:	dd13      	ble.n	80092ca <__hexnan+0x7a>
 80092a2:	454c      	cmp	r4, r9
 80092a4:	d206      	bcs.n	80092b4 <__hexnan+0x64>
 80092a6:	2d07      	cmp	r5, #7
 80092a8:	dc04      	bgt.n	80092b4 <__hexnan+0x64>
 80092aa:	462a      	mov	r2, r5
 80092ac:	4649      	mov	r1, r9
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7ff ffa8 	bl	8009204 <L_shift>
 80092b4:	4544      	cmp	r4, r8
 80092b6:	d950      	bls.n	800935a <__hexnan+0x10a>
 80092b8:	2300      	movs	r3, #0
 80092ba:	f1a4 0904 	sub.w	r9, r4, #4
 80092be:	f844 3c04 	str.w	r3, [r4, #-4]
 80092c2:	f8cd b008 	str.w	fp, [sp, #8]
 80092c6:	464c      	mov	r4, r9
 80092c8:	461d      	mov	r5, r3
 80092ca:	9903      	ldr	r1, [sp, #12]
 80092cc:	e7d7      	b.n	800927e <__hexnan+0x2e>
 80092ce:	2a29      	cmp	r2, #41	; 0x29
 80092d0:	d155      	bne.n	800937e <__hexnan+0x12e>
 80092d2:	3102      	adds	r1, #2
 80092d4:	f8ca 1000 	str.w	r1, [sl]
 80092d8:	f1bb 0f00 	cmp.w	fp, #0
 80092dc:	d04f      	beq.n	800937e <__hexnan+0x12e>
 80092de:	454c      	cmp	r4, r9
 80092e0:	d206      	bcs.n	80092f0 <__hexnan+0xa0>
 80092e2:	2d07      	cmp	r5, #7
 80092e4:	dc04      	bgt.n	80092f0 <__hexnan+0xa0>
 80092e6:	462a      	mov	r2, r5
 80092e8:	4649      	mov	r1, r9
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7ff ff8a 	bl	8009204 <L_shift>
 80092f0:	4544      	cmp	r4, r8
 80092f2:	d934      	bls.n	800935e <__hexnan+0x10e>
 80092f4:	f1a8 0204 	sub.w	r2, r8, #4
 80092f8:	4623      	mov	r3, r4
 80092fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80092fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8009302:	429f      	cmp	r7, r3
 8009304:	d2f9      	bcs.n	80092fa <__hexnan+0xaa>
 8009306:	1b3b      	subs	r3, r7, r4
 8009308:	f023 0303 	bic.w	r3, r3, #3
 800930c:	3304      	adds	r3, #4
 800930e:	3e03      	subs	r6, #3
 8009310:	3401      	adds	r4, #1
 8009312:	42a6      	cmp	r6, r4
 8009314:	bf38      	it	cc
 8009316:	2304      	movcc	r3, #4
 8009318:	4443      	add	r3, r8
 800931a:	2200      	movs	r2, #0
 800931c:	f843 2b04 	str.w	r2, [r3], #4
 8009320:	429f      	cmp	r7, r3
 8009322:	d2fb      	bcs.n	800931c <__hexnan+0xcc>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	b91b      	cbnz	r3, 8009330 <__hexnan+0xe0>
 8009328:	4547      	cmp	r7, r8
 800932a:	d126      	bne.n	800937a <__hexnan+0x12a>
 800932c:	2301      	movs	r3, #1
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	2005      	movs	r0, #5
 8009332:	e025      	b.n	8009380 <__hexnan+0x130>
 8009334:	3501      	adds	r5, #1
 8009336:	2d08      	cmp	r5, #8
 8009338:	f10b 0b01 	add.w	fp, fp, #1
 800933c:	dd06      	ble.n	800934c <__hexnan+0xfc>
 800933e:	4544      	cmp	r4, r8
 8009340:	d9c3      	bls.n	80092ca <__hexnan+0x7a>
 8009342:	2300      	movs	r3, #0
 8009344:	f844 3c04 	str.w	r3, [r4, #-4]
 8009348:	2501      	movs	r5, #1
 800934a:	3c04      	subs	r4, #4
 800934c:	6822      	ldr	r2, [r4, #0]
 800934e:	f000 000f 	and.w	r0, r0, #15
 8009352:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009356:	6020      	str	r0, [r4, #0]
 8009358:	e7b7      	b.n	80092ca <__hexnan+0x7a>
 800935a:	2508      	movs	r5, #8
 800935c:	e7b5      	b.n	80092ca <__hexnan+0x7a>
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0df      	beq.n	8009324 <__hexnan+0xd4>
 8009364:	f1c3 0320 	rsb	r3, r3, #32
 8009368:	f04f 32ff 	mov.w	r2, #4294967295
 800936c:	40da      	lsrs	r2, r3
 800936e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009372:	4013      	ands	r3, r2
 8009374:	f846 3c04 	str.w	r3, [r6, #-4]
 8009378:	e7d4      	b.n	8009324 <__hexnan+0xd4>
 800937a:	3f04      	subs	r7, #4
 800937c:	e7d2      	b.n	8009324 <__hexnan+0xd4>
 800937e:	2004      	movs	r0, #4
 8009380:	b007      	add	sp, #28
 8009382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009386 <__ascii_mbtowc>:
 8009386:	b082      	sub	sp, #8
 8009388:	b901      	cbnz	r1, 800938c <__ascii_mbtowc+0x6>
 800938a:	a901      	add	r1, sp, #4
 800938c:	b142      	cbz	r2, 80093a0 <__ascii_mbtowc+0x1a>
 800938e:	b14b      	cbz	r3, 80093a4 <__ascii_mbtowc+0x1e>
 8009390:	7813      	ldrb	r3, [r2, #0]
 8009392:	600b      	str	r3, [r1, #0]
 8009394:	7812      	ldrb	r2, [r2, #0]
 8009396:	1e10      	subs	r0, r2, #0
 8009398:	bf18      	it	ne
 800939a:	2001      	movne	r0, #1
 800939c:	b002      	add	sp, #8
 800939e:	4770      	bx	lr
 80093a0:	4610      	mov	r0, r2
 80093a2:	e7fb      	b.n	800939c <__ascii_mbtowc+0x16>
 80093a4:	f06f 0001 	mvn.w	r0, #1
 80093a8:	e7f8      	b.n	800939c <__ascii_mbtowc+0x16>

080093aa <_realloc_r>:
 80093aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ae:	4680      	mov	r8, r0
 80093b0:	4614      	mov	r4, r2
 80093b2:	460e      	mov	r6, r1
 80093b4:	b921      	cbnz	r1, 80093c0 <_realloc_r+0x16>
 80093b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ba:	4611      	mov	r1, r2
 80093bc:	f7fd be2e 	b.w	800701c <_malloc_r>
 80093c0:	b92a      	cbnz	r2, 80093ce <_realloc_r+0x24>
 80093c2:	f7fd fdb7 	bl	8006f34 <_free_r>
 80093c6:	4625      	mov	r5, r4
 80093c8:	4628      	mov	r0, r5
 80093ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ce:	f000 f842 	bl	8009456 <_malloc_usable_size_r>
 80093d2:	4284      	cmp	r4, r0
 80093d4:	4607      	mov	r7, r0
 80093d6:	d802      	bhi.n	80093de <_realloc_r+0x34>
 80093d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093dc:	d812      	bhi.n	8009404 <_realloc_r+0x5a>
 80093de:	4621      	mov	r1, r4
 80093e0:	4640      	mov	r0, r8
 80093e2:	f7fd fe1b 	bl	800701c <_malloc_r>
 80093e6:	4605      	mov	r5, r0
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d0ed      	beq.n	80093c8 <_realloc_r+0x1e>
 80093ec:	42bc      	cmp	r4, r7
 80093ee:	4622      	mov	r2, r4
 80093f0:	4631      	mov	r1, r6
 80093f2:	bf28      	it	cs
 80093f4:	463a      	movcs	r2, r7
 80093f6:	f7ff fc23 	bl	8008c40 <memcpy>
 80093fa:	4631      	mov	r1, r6
 80093fc:	4640      	mov	r0, r8
 80093fe:	f7fd fd99 	bl	8006f34 <_free_r>
 8009402:	e7e1      	b.n	80093c8 <_realloc_r+0x1e>
 8009404:	4635      	mov	r5, r6
 8009406:	e7df      	b.n	80093c8 <_realloc_r+0x1e>

08009408 <__ascii_wctomb>:
 8009408:	b149      	cbz	r1, 800941e <__ascii_wctomb+0x16>
 800940a:	2aff      	cmp	r2, #255	; 0xff
 800940c:	bf85      	ittet	hi
 800940e:	238a      	movhi	r3, #138	; 0x8a
 8009410:	6003      	strhi	r3, [r0, #0]
 8009412:	700a      	strbls	r2, [r1, #0]
 8009414:	f04f 30ff 	movhi.w	r0, #4294967295
 8009418:	bf98      	it	ls
 800941a:	2001      	movls	r0, #1
 800941c:	4770      	bx	lr
 800941e:	4608      	mov	r0, r1
 8009420:	4770      	bx	lr
	...

08009424 <fiprintf>:
 8009424:	b40e      	push	{r1, r2, r3}
 8009426:	b503      	push	{r0, r1, lr}
 8009428:	4601      	mov	r1, r0
 800942a:	ab03      	add	r3, sp, #12
 800942c:	4805      	ldr	r0, [pc, #20]	; (8009444 <fiprintf+0x20>)
 800942e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009432:	6800      	ldr	r0, [r0, #0]
 8009434:	9301      	str	r3, [sp, #4]
 8009436:	f000 f83f 	bl	80094b8 <_vfiprintf_r>
 800943a:	b002      	add	sp, #8
 800943c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009440:	b003      	add	sp, #12
 8009442:	4770      	bx	lr
 8009444:	20000064 	.word	0x20000064

08009448 <abort>:
 8009448:	b508      	push	{r3, lr}
 800944a:	2006      	movs	r0, #6
 800944c:	f000 fa0c 	bl	8009868 <raise>
 8009450:	2001      	movs	r0, #1
 8009452:	f7f8 f98b 	bl	800176c <_exit>

08009456 <_malloc_usable_size_r>:
 8009456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945a:	1f18      	subs	r0, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	bfbc      	itt	lt
 8009460:	580b      	ldrlt	r3, [r1, r0]
 8009462:	18c0      	addlt	r0, r0, r3
 8009464:	4770      	bx	lr

08009466 <__sfputc_r>:
 8009466:	6893      	ldr	r3, [r2, #8]
 8009468:	3b01      	subs	r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	b410      	push	{r4}
 800946e:	6093      	str	r3, [r2, #8]
 8009470:	da08      	bge.n	8009484 <__sfputc_r+0x1e>
 8009472:	6994      	ldr	r4, [r2, #24]
 8009474:	42a3      	cmp	r3, r4
 8009476:	db01      	blt.n	800947c <__sfputc_r+0x16>
 8009478:	290a      	cmp	r1, #10
 800947a:	d103      	bne.n	8009484 <__sfputc_r+0x1e>
 800947c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009480:	f000 b934 	b.w	80096ec <__swbuf_r>
 8009484:	6813      	ldr	r3, [r2, #0]
 8009486:	1c58      	adds	r0, r3, #1
 8009488:	6010      	str	r0, [r2, #0]
 800948a:	7019      	strb	r1, [r3, #0]
 800948c:	4608      	mov	r0, r1
 800948e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009492:	4770      	bx	lr

08009494 <__sfputs_r>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	4606      	mov	r6, r0
 8009498:	460f      	mov	r7, r1
 800949a:	4614      	mov	r4, r2
 800949c:	18d5      	adds	r5, r2, r3
 800949e:	42ac      	cmp	r4, r5
 80094a0:	d101      	bne.n	80094a6 <__sfputs_r+0x12>
 80094a2:	2000      	movs	r0, #0
 80094a4:	e007      	b.n	80094b6 <__sfputs_r+0x22>
 80094a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094aa:	463a      	mov	r2, r7
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff ffda 	bl	8009466 <__sfputc_r>
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	d1f3      	bne.n	800949e <__sfputs_r+0xa>
 80094b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094b8 <_vfiprintf_r>:
 80094b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094bc:	460d      	mov	r5, r1
 80094be:	b09d      	sub	sp, #116	; 0x74
 80094c0:	4614      	mov	r4, r2
 80094c2:	4698      	mov	r8, r3
 80094c4:	4606      	mov	r6, r0
 80094c6:	b118      	cbz	r0, 80094d0 <_vfiprintf_r+0x18>
 80094c8:	6a03      	ldr	r3, [r0, #32]
 80094ca:	b90b      	cbnz	r3, 80094d0 <_vfiprintf_r+0x18>
 80094cc:	f7fc fd9a 	bl	8006004 <__sinit>
 80094d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094d2:	07d9      	lsls	r1, r3, #31
 80094d4:	d405      	bmi.n	80094e2 <_vfiprintf_r+0x2a>
 80094d6:	89ab      	ldrh	r3, [r5, #12]
 80094d8:	059a      	lsls	r2, r3, #22
 80094da:	d402      	bmi.n	80094e2 <_vfiprintf_r+0x2a>
 80094dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094de:	f7fc fea7 	bl	8006230 <__retarget_lock_acquire_recursive>
 80094e2:	89ab      	ldrh	r3, [r5, #12]
 80094e4:	071b      	lsls	r3, r3, #28
 80094e6:	d501      	bpl.n	80094ec <_vfiprintf_r+0x34>
 80094e8:	692b      	ldr	r3, [r5, #16]
 80094ea:	b99b      	cbnz	r3, 8009514 <_vfiprintf_r+0x5c>
 80094ec:	4629      	mov	r1, r5
 80094ee:	4630      	mov	r0, r6
 80094f0:	f000 f93a 	bl	8009768 <__swsetup_r>
 80094f4:	b170      	cbz	r0, 8009514 <_vfiprintf_r+0x5c>
 80094f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094f8:	07dc      	lsls	r4, r3, #31
 80094fa:	d504      	bpl.n	8009506 <_vfiprintf_r+0x4e>
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009500:	b01d      	add	sp, #116	; 0x74
 8009502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009506:	89ab      	ldrh	r3, [r5, #12]
 8009508:	0598      	lsls	r0, r3, #22
 800950a:	d4f7      	bmi.n	80094fc <_vfiprintf_r+0x44>
 800950c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800950e:	f7fc fe90 	bl	8006232 <__retarget_lock_release_recursive>
 8009512:	e7f3      	b.n	80094fc <_vfiprintf_r+0x44>
 8009514:	2300      	movs	r3, #0
 8009516:	9309      	str	r3, [sp, #36]	; 0x24
 8009518:	2320      	movs	r3, #32
 800951a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800951e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009522:	2330      	movs	r3, #48	; 0x30
 8009524:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80096d8 <_vfiprintf_r+0x220>
 8009528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800952c:	f04f 0901 	mov.w	r9, #1
 8009530:	4623      	mov	r3, r4
 8009532:	469a      	mov	sl, r3
 8009534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009538:	b10a      	cbz	r2, 800953e <_vfiprintf_r+0x86>
 800953a:	2a25      	cmp	r2, #37	; 0x25
 800953c:	d1f9      	bne.n	8009532 <_vfiprintf_r+0x7a>
 800953e:	ebba 0b04 	subs.w	fp, sl, r4
 8009542:	d00b      	beq.n	800955c <_vfiprintf_r+0xa4>
 8009544:	465b      	mov	r3, fp
 8009546:	4622      	mov	r2, r4
 8009548:	4629      	mov	r1, r5
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff ffa2 	bl	8009494 <__sfputs_r>
 8009550:	3001      	adds	r0, #1
 8009552:	f000 80a9 	beq.w	80096a8 <_vfiprintf_r+0x1f0>
 8009556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009558:	445a      	add	r2, fp
 800955a:	9209      	str	r2, [sp, #36]	; 0x24
 800955c:	f89a 3000 	ldrb.w	r3, [sl]
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 80a1 	beq.w	80096a8 <_vfiprintf_r+0x1f0>
 8009566:	2300      	movs	r3, #0
 8009568:	f04f 32ff 	mov.w	r2, #4294967295
 800956c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009570:	f10a 0a01 	add.w	sl, sl, #1
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	9307      	str	r3, [sp, #28]
 8009578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800957c:	931a      	str	r3, [sp, #104]	; 0x68
 800957e:	4654      	mov	r4, sl
 8009580:	2205      	movs	r2, #5
 8009582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009586:	4854      	ldr	r0, [pc, #336]	; (80096d8 <_vfiprintf_r+0x220>)
 8009588:	f7f6 fe22 	bl	80001d0 <memchr>
 800958c:	9a04      	ldr	r2, [sp, #16]
 800958e:	b9d8      	cbnz	r0, 80095c8 <_vfiprintf_r+0x110>
 8009590:	06d1      	lsls	r1, r2, #27
 8009592:	bf44      	itt	mi
 8009594:	2320      	movmi	r3, #32
 8009596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800959a:	0713      	lsls	r3, r2, #28
 800959c:	bf44      	itt	mi
 800959e:	232b      	movmi	r3, #43	; 0x2b
 80095a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a4:	f89a 3000 	ldrb.w	r3, [sl]
 80095a8:	2b2a      	cmp	r3, #42	; 0x2a
 80095aa:	d015      	beq.n	80095d8 <_vfiprintf_r+0x120>
 80095ac:	9a07      	ldr	r2, [sp, #28]
 80095ae:	4654      	mov	r4, sl
 80095b0:	2000      	movs	r0, #0
 80095b2:	f04f 0c0a 	mov.w	ip, #10
 80095b6:	4621      	mov	r1, r4
 80095b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095bc:	3b30      	subs	r3, #48	; 0x30
 80095be:	2b09      	cmp	r3, #9
 80095c0:	d94d      	bls.n	800965e <_vfiprintf_r+0x1a6>
 80095c2:	b1b0      	cbz	r0, 80095f2 <_vfiprintf_r+0x13a>
 80095c4:	9207      	str	r2, [sp, #28]
 80095c6:	e014      	b.n	80095f2 <_vfiprintf_r+0x13a>
 80095c8:	eba0 0308 	sub.w	r3, r0, r8
 80095cc:	fa09 f303 	lsl.w	r3, r9, r3
 80095d0:	4313      	orrs	r3, r2
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	46a2      	mov	sl, r4
 80095d6:	e7d2      	b.n	800957e <_vfiprintf_r+0xc6>
 80095d8:	9b03      	ldr	r3, [sp, #12]
 80095da:	1d19      	adds	r1, r3, #4
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	9103      	str	r1, [sp, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	bfbb      	ittet	lt
 80095e4:	425b      	neglt	r3, r3
 80095e6:	f042 0202 	orrlt.w	r2, r2, #2
 80095ea:	9307      	strge	r3, [sp, #28]
 80095ec:	9307      	strlt	r3, [sp, #28]
 80095ee:	bfb8      	it	lt
 80095f0:	9204      	strlt	r2, [sp, #16]
 80095f2:	7823      	ldrb	r3, [r4, #0]
 80095f4:	2b2e      	cmp	r3, #46	; 0x2e
 80095f6:	d10c      	bne.n	8009612 <_vfiprintf_r+0x15a>
 80095f8:	7863      	ldrb	r3, [r4, #1]
 80095fa:	2b2a      	cmp	r3, #42	; 0x2a
 80095fc:	d134      	bne.n	8009668 <_vfiprintf_r+0x1b0>
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	1d1a      	adds	r2, r3, #4
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	9203      	str	r2, [sp, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	bfb8      	it	lt
 800960a:	f04f 33ff 	movlt.w	r3, #4294967295
 800960e:	3402      	adds	r4, #2
 8009610:	9305      	str	r3, [sp, #20]
 8009612:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80096e8 <_vfiprintf_r+0x230>
 8009616:	7821      	ldrb	r1, [r4, #0]
 8009618:	2203      	movs	r2, #3
 800961a:	4650      	mov	r0, sl
 800961c:	f7f6 fdd8 	bl	80001d0 <memchr>
 8009620:	b138      	cbz	r0, 8009632 <_vfiprintf_r+0x17a>
 8009622:	9b04      	ldr	r3, [sp, #16]
 8009624:	eba0 000a 	sub.w	r0, r0, sl
 8009628:	2240      	movs	r2, #64	; 0x40
 800962a:	4082      	lsls	r2, r0
 800962c:	4313      	orrs	r3, r2
 800962e:	3401      	adds	r4, #1
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009636:	4829      	ldr	r0, [pc, #164]	; (80096dc <_vfiprintf_r+0x224>)
 8009638:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800963c:	2206      	movs	r2, #6
 800963e:	f7f6 fdc7 	bl	80001d0 <memchr>
 8009642:	2800      	cmp	r0, #0
 8009644:	d03f      	beq.n	80096c6 <_vfiprintf_r+0x20e>
 8009646:	4b26      	ldr	r3, [pc, #152]	; (80096e0 <_vfiprintf_r+0x228>)
 8009648:	bb1b      	cbnz	r3, 8009692 <_vfiprintf_r+0x1da>
 800964a:	9b03      	ldr	r3, [sp, #12]
 800964c:	3307      	adds	r3, #7
 800964e:	f023 0307 	bic.w	r3, r3, #7
 8009652:	3308      	adds	r3, #8
 8009654:	9303      	str	r3, [sp, #12]
 8009656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009658:	443b      	add	r3, r7
 800965a:	9309      	str	r3, [sp, #36]	; 0x24
 800965c:	e768      	b.n	8009530 <_vfiprintf_r+0x78>
 800965e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009662:	460c      	mov	r4, r1
 8009664:	2001      	movs	r0, #1
 8009666:	e7a6      	b.n	80095b6 <_vfiprintf_r+0xfe>
 8009668:	2300      	movs	r3, #0
 800966a:	3401      	adds	r4, #1
 800966c:	9305      	str	r3, [sp, #20]
 800966e:	4619      	mov	r1, r3
 8009670:	f04f 0c0a 	mov.w	ip, #10
 8009674:	4620      	mov	r0, r4
 8009676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800967a:	3a30      	subs	r2, #48	; 0x30
 800967c:	2a09      	cmp	r2, #9
 800967e:	d903      	bls.n	8009688 <_vfiprintf_r+0x1d0>
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0c6      	beq.n	8009612 <_vfiprintf_r+0x15a>
 8009684:	9105      	str	r1, [sp, #20]
 8009686:	e7c4      	b.n	8009612 <_vfiprintf_r+0x15a>
 8009688:	fb0c 2101 	mla	r1, ip, r1, r2
 800968c:	4604      	mov	r4, r0
 800968e:	2301      	movs	r3, #1
 8009690:	e7f0      	b.n	8009674 <_vfiprintf_r+0x1bc>
 8009692:	ab03      	add	r3, sp, #12
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	462a      	mov	r2, r5
 8009698:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <_vfiprintf_r+0x22c>)
 800969a:	a904      	add	r1, sp, #16
 800969c:	4630      	mov	r0, r6
 800969e:	f7fb fe61 	bl	8005364 <_printf_float>
 80096a2:	4607      	mov	r7, r0
 80096a4:	1c78      	adds	r0, r7, #1
 80096a6:	d1d6      	bne.n	8009656 <_vfiprintf_r+0x19e>
 80096a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096aa:	07d9      	lsls	r1, r3, #31
 80096ac:	d405      	bmi.n	80096ba <_vfiprintf_r+0x202>
 80096ae:	89ab      	ldrh	r3, [r5, #12]
 80096b0:	059a      	lsls	r2, r3, #22
 80096b2:	d402      	bmi.n	80096ba <_vfiprintf_r+0x202>
 80096b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096b6:	f7fc fdbc 	bl	8006232 <__retarget_lock_release_recursive>
 80096ba:	89ab      	ldrh	r3, [r5, #12]
 80096bc:	065b      	lsls	r3, r3, #25
 80096be:	f53f af1d 	bmi.w	80094fc <_vfiprintf_r+0x44>
 80096c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c4:	e71c      	b.n	8009500 <_vfiprintf_r+0x48>
 80096c6:	ab03      	add	r3, sp, #12
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	462a      	mov	r2, r5
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <_vfiprintf_r+0x22c>)
 80096ce:	a904      	add	r1, sp, #16
 80096d0:	4630      	mov	r0, r6
 80096d2:	f7fc f8eb 	bl	80058ac <_printf_i>
 80096d6:	e7e4      	b.n	80096a2 <_vfiprintf_r+0x1ea>
 80096d8:	08009e99 	.word	0x08009e99
 80096dc:	08009ea3 	.word	0x08009ea3
 80096e0:	08005365 	.word	0x08005365
 80096e4:	08009495 	.word	0x08009495
 80096e8:	08009e9f 	.word	0x08009e9f

080096ec <__swbuf_r>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	460e      	mov	r6, r1
 80096f0:	4614      	mov	r4, r2
 80096f2:	4605      	mov	r5, r0
 80096f4:	b118      	cbz	r0, 80096fe <__swbuf_r+0x12>
 80096f6:	6a03      	ldr	r3, [r0, #32]
 80096f8:	b90b      	cbnz	r3, 80096fe <__swbuf_r+0x12>
 80096fa:	f7fc fc83 	bl	8006004 <__sinit>
 80096fe:	69a3      	ldr	r3, [r4, #24]
 8009700:	60a3      	str	r3, [r4, #8]
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	071a      	lsls	r2, r3, #28
 8009706:	d525      	bpl.n	8009754 <__swbuf_r+0x68>
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	b31b      	cbz	r3, 8009754 <__swbuf_r+0x68>
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	6922      	ldr	r2, [r4, #16]
 8009710:	1a98      	subs	r0, r3, r2
 8009712:	6963      	ldr	r3, [r4, #20]
 8009714:	b2f6      	uxtb	r6, r6
 8009716:	4283      	cmp	r3, r0
 8009718:	4637      	mov	r7, r6
 800971a:	dc04      	bgt.n	8009726 <__swbuf_r+0x3a>
 800971c:	4621      	mov	r1, r4
 800971e:	4628      	mov	r0, r5
 8009720:	f7ff fa2a 	bl	8008b78 <_fflush_r>
 8009724:	b9e0      	cbnz	r0, 8009760 <__swbuf_r+0x74>
 8009726:	68a3      	ldr	r3, [r4, #8]
 8009728:	3b01      	subs	r3, #1
 800972a:	60a3      	str	r3, [r4, #8]
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	6022      	str	r2, [r4, #0]
 8009732:	701e      	strb	r6, [r3, #0]
 8009734:	6962      	ldr	r2, [r4, #20]
 8009736:	1c43      	adds	r3, r0, #1
 8009738:	429a      	cmp	r2, r3
 800973a:	d004      	beq.n	8009746 <__swbuf_r+0x5a>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	07db      	lsls	r3, r3, #31
 8009740:	d506      	bpl.n	8009750 <__swbuf_r+0x64>
 8009742:	2e0a      	cmp	r6, #10
 8009744:	d104      	bne.n	8009750 <__swbuf_r+0x64>
 8009746:	4621      	mov	r1, r4
 8009748:	4628      	mov	r0, r5
 800974a:	f7ff fa15 	bl	8008b78 <_fflush_r>
 800974e:	b938      	cbnz	r0, 8009760 <__swbuf_r+0x74>
 8009750:	4638      	mov	r0, r7
 8009752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009754:	4621      	mov	r1, r4
 8009756:	4628      	mov	r0, r5
 8009758:	f000 f806 	bl	8009768 <__swsetup_r>
 800975c:	2800      	cmp	r0, #0
 800975e:	d0d5      	beq.n	800970c <__swbuf_r+0x20>
 8009760:	f04f 37ff 	mov.w	r7, #4294967295
 8009764:	e7f4      	b.n	8009750 <__swbuf_r+0x64>
	...

08009768 <__swsetup_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4b2a      	ldr	r3, [pc, #168]	; (8009814 <__swsetup_r+0xac>)
 800976c:	4605      	mov	r5, r0
 800976e:	6818      	ldr	r0, [r3, #0]
 8009770:	460c      	mov	r4, r1
 8009772:	b118      	cbz	r0, 800977c <__swsetup_r+0x14>
 8009774:	6a03      	ldr	r3, [r0, #32]
 8009776:	b90b      	cbnz	r3, 800977c <__swsetup_r+0x14>
 8009778:	f7fc fc44 	bl	8006004 <__sinit>
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009782:	0718      	lsls	r0, r3, #28
 8009784:	d422      	bmi.n	80097cc <__swsetup_r+0x64>
 8009786:	06d9      	lsls	r1, r3, #27
 8009788:	d407      	bmi.n	800979a <__swsetup_r+0x32>
 800978a:	2309      	movs	r3, #9
 800978c:	602b      	str	r3, [r5, #0]
 800978e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009792:	81a3      	strh	r3, [r4, #12]
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	e034      	b.n	8009804 <__swsetup_r+0x9c>
 800979a:	0758      	lsls	r0, r3, #29
 800979c:	d512      	bpl.n	80097c4 <__swsetup_r+0x5c>
 800979e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097a0:	b141      	cbz	r1, 80097b4 <__swsetup_r+0x4c>
 80097a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a6:	4299      	cmp	r1, r3
 80097a8:	d002      	beq.n	80097b0 <__swsetup_r+0x48>
 80097aa:	4628      	mov	r0, r5
 80097ac:	f7fd fbc2 	bl	8006f34 <_free_r>
 80097b0:	2300      	movs	r3, #0
 80097b2:	6363      	str	r3, [r4, #52]	; 0x34
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097ba:	81a3      	strh	r3, [r4, #12]
 80097bc:	2300      	movs	r3, #0
 80097be:	6063      	str	r3, [r4, #4]
 80097c0:	6923      	ldr	r3, [r4, #16]
 80097c2:	6023      	str	r3, [r4, #0]
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	f043 0308 	orr.w	r3, r3, #8
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	b94b      	cbnz	r3, 80097e4 <__swsetup_r+0x7c>
 80097d0:	89a3      	ldrh	r3, [r4, #12]
 80097d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097da:	d003      	beq.n	80097e4 <__swsetup_r+0x7c>
 80097dc:	4621      	mov	r1, r4
 80097de:	4628      	mov	r0, r5
 80097e0:	f000 f884 	bl	80098ec <__smakebuf_r>
 80097e4:	89a0      	ldrh	r0, [r4, #12]
 80097e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097ea:	f010 0301 	ands.w	r3, r0, #1
 80097ee:	d00a      	beq.n	8009806 <__swsetup_r+0x9e>
 80097f0:	2300      	movs	r3, #0
 80097f2:	60a3      	str	r3, [r4, #8]
 80097f4:	6963      	ldr	r3, [r4, #20]
 80097f6:	425b      	negs	r3, r3
 80097f8:	61a3      	str	r3, [r4, #24]
 80097fa:	6923      	ldr	r3, [r4, #16]
 80097fc:	b943      	cbnz	r3, 8009810 <__swsetup_r+0xa8>
 80097fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009802:	d1c4      	bne.n	800978e <__swsetup_r+0x26>
 8009804:	bd38      	pop	{r3, r4, r5, pc}
 8009806:	0781      	lsls	r1, r0, #30
 8009808:	bf58      	it	pl
 800980a:	6963      	ldrpl	r3, [r4, #20]
 800980c:	60a3      	str	r3, [r4, #8]
 800980e:	e7f4      	b.n	80097fa <__swsetup_r+0x92>
 8009810:	2000      	movs	r0, #0
 8009812:	e7f7      	b.n	8009804 <__swsetup_r+0x9c>
 8009814:	20000064 	.word	0x20000064

08009818 <_raise_r>:
 8009818:	291f      	cmp	r1, #31
 800981a:	b538      	push	{r3, r4, r5, lr}
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	d904      	bls.n	800982c <_raise_r+0x14>
 8009822:	2316      	movs	r3, #22
 8009824:	6003      	str	r3, [r0, #0]
 8009826:	f04f 30ff 	mov.w	r0, #4294967295
 800982a:	bd38      	pop	{r3, r4, r5, pc}
 800982c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800982e:	b112      	cbz	r2, 8009836 <_raise_r+0x1e>
 8009830:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009834:	b94b      	cbnz	r3, 800984a <_raise_r+0x32>
 8009836:	4620      	mov	r0, r4
 8009838:	f000 f830 	bl	800989c <_getpid_r>
 800983c:	462a      	mov	r2, r5
 800983e:	4601      	mov	r1, r0
 8009840:	4620      	mov	r0, r4
 8009842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009846:	f000 b817 	b.w	8009878 <_kill_r>
 800984a:	2b01      	cmp	r3, #1
 800984c:	d00a      	beq.n	8009864 <_raise_r+0x4c>
 800984e:	1c59      	adds	r1, r3, #1
 8009850:	d103      	bne.n	800985a <_raise_r+0x42>
 8009852:	2316      	movs	r3, #22
 8009854:	6003      	str	r3, [r0, #0]
 8009856:	2001      	movs	r0, #1
 8009858:	e7e7      	b.n	800982a <_raise_r+0x12>
 800985a:	2400      	movs	r4, #0
 800985c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009860:	4628      	mov	r0, r5
 8009862:	4798      	blx	r3
 8009864:	2000      	movs	r0, #0
 8009866:	e7e0      	b.n	800982a <_raise_r+0x12>

08009868 <raise>:
 8009868:	4b02      	ldr	r3, [pc, #8]	; (8009874 <raise+0xc>)
 800986a:	4601      	mov	r1, r0
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	f7ff bfd3 	b.w	8009818 <_raise_r>
 8009872:	bf00      	nop
 8009874:	20000064 	.word	0x20000064

08009878 <_kill_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d07      	ldr	r5, [pc, #28]	; (8009898 <_kill_r+0x20>)
 800987c:	2300      	movs	r3, #0
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	4611      	mov	r1, r2
 8009884:	602b      	str	r3, [r5, #0]
 8009886:	f7f7 ff61 	bl	800174c <_kill>
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	d102      	bne.n	8009894 <_kill_r+0x1c>
 800988e:	682b      	ldr	r3, [r5, #0]
 8009890:	b103      	cbz	r3, 8009894 <_kill_r+0x1c>
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	bd38      	pop	{r3, r4, r5, pc}
 8009896:	bf00      	nop
 8009898:	20000460 	.word	0x20000460

0800989c <_getpid_r>:
 800989c:	f7f7 bf4e 	b.w	800173c <_getpid>

080098a0 <__swhatbuf_r>:
 80098a0:	b570      	push	{r4, r5, r6, lr}
 80098a2:	460c      	mov	r4, r1
 80098a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a8:	2900      	cmp	r1, #0
 80098aa:	b096      	sub	sp, #88	; 0x58
 80098ac:	4615      	mov	r5, r2
 80098ae:	461e      	mov	r6, r3
 80098b0:	da0d      	bge.n	80098ce <__swhatbuf_r+0x2e>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80098b8:	f04f 0100 	mov.w	r1, #0
 80098bc:	bf0c      	ite	eq
 80098be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80098c2:	2340      	movne	r3, #64	; 0x40
 80098c4:	2000      	movs	r0, #0
 80098c6:	6031      	str	r1, [r6, #0]
 80098c8:	602b      	str	r3, [r5, #0]
 80098ca:	b016      	add	sp, #88	; 0x58
 80098cc:	bd70      	pop	{r4, r5, r6, pc}
 80098ce:	466a      	mov	r2, sp
 80098d0:	f000 f848 	bl	8009964 <_fstat_r>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	dbec      	blt.n	80098b2 <__swhatbuf_r+0x12>
 80098d8:	9901      	ldr	r1, [sp, #4]
 80098da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80098de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80098e2:	4259      	negs	r1, r3
 80098e4:	4159      	adcs	r1, r3
 80098e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ea:	e7eb      	b.n	80098c4 <__swhatbuf_r+0x24>

080098ec <__smakebuf_r>:
 80098ec:	898b      	ldrh	r3, [r1, #12]
 80098ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098f0:	079d      	lsls	r5, r3, #30
 80098f2:	4606      	mov	r6, r0
 80098f4:	460c      	mov	r4, r1
 80098f6:	d507      	bpl.n	8009908 <__smakebuf_r+0x1c>
 80098f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	2301      	movs	r3, #1
 8009902:	6163      	str	r3, [r4, #20]
 8009904:	b002      	add	sp, #8
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	ab01      	add	r3, sp, #4
 800990a:	466a      	mov	r2, sp
 800990c:	f7ff ffc8 	bl	80098a0 <__swhatbuf_r>
 8009910:	9900      	ldr	r1, [sp, #0]
 8009912:	4605      	mov	r5, r0
 8009914:	4630      	mov	r0, r6
 8009916:	f7fd fb81 	bl	800701c <_malloc_r>
 800991a:	b948      	cbnz	r0, 8009930 <__smakebuf_r+0x44>
 800991c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009920:	059a      	lsls	r2, r3, #22
 8009922:	d4ef      	bmi.n	8009904 <__smakebuf_r+0x18>
 8009924:	f023 0303 	bic.w	r3, r3, #3
 8009928:	f043 0302 	orr.w	r3, r3, #2
 800992c:	81a3      	strh	r3, [r4, #12]
 800992e:	e7e3      	b.n	80098f8 <__smakebuf_r+0xc>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	6020      	str	r0, [r4, #0]
 8009934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	9b00      	ldr	r3, [sp, #0]
 800993c:	6163      	str	r3, [r4, #20]
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	6120      	str	r0, [r4, #16]
 8009942:	b15b      	cbz	r3, 800995c <__smakebuf_r+0x70>
 8009944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009948:	4630      	mov	r0, r6
 800994a:	f000 f81d 	bl	8009988 <_isatty_r>
 800994e:	b128      	cbz	r0, 800995c <__smakebuf_r+0x70>
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	f023 0303 	bic.w	r3, r3, #3
 8009956:	f043 0301 	orr.w	r3, r3, #1
 800995a:	81a3      	strh	r3, [r4, #12]
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	431d      	orrs	r5, r3
 8009960:	81a5      	strh	r5, [r4, #12]
 8009962:	e7cf      	b.n	8009904 <__smakebuf_r+0x18>

08009964 <_fstat_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d07      	ldr	r5, [pc, #28]	; (8009984 <_fstat_r+0x20>)
 8009968:	2300      	movs	r3, #0
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	4611      	mov	r1, r2
 8009970:	602b      	str	r3, [r5, #0]
 8009972:	f7f7 ff4a 	bl	800180a <_fstat>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d102      	bne.n	8009980 <_fstat_r+0x1c>
 800997a:	682b      	ldr	r3, [r5, #0]
 800997c:	b103      	cbz	r3, 8009980 <_fstat_r+0x1c>
 800997e:	6023      	str	r3, [r4, #0]
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	bf00      	nop
 8009984:	20000460 	.word	0x20000460

08009988 <_isatty_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4d06      	ldr	r5, [pc, #24]	; (80099a4 <_isatty_r+0x1c>)
 800998c:	2300      	movs	r3, #0
 800998e:	4604      	mov	r4, r0
 8009990:	4608      	mov	r0, r1
 8009992:	602b      	str	r3, [r5, #0]
 8009994:	f7f7 ff49 	bl	800182a <_isatty>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_isatty_r+0x1a>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_isatty_r+0x1a>
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	20000460 	.word	0x20000460

080099a8 <_init>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	bf00      	nop
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr

080099b4 <_fini>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	bf00      	nop
 80099b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ba:	bc08      	pop	{r3}
 80099bc:	469e      	mov	lr, r3
 80099be:	4770      	bx	lr
