
Drone2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b02c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000698  0800b1c0  0800b1c0  0001b1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b858  0800b858  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b858  0800b858  0001b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b860  0800b860  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b860  0800b860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b864  0800b864  0001b864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001e0  0800ba48  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  0800ba48  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134ad  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022fe  00000000  00000000  000336bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  000359c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00036bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028138  00000000  00000000  00037cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001531c  00000000  00000000  0005fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f72d1  00000000  00000000  0007511c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c3ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c8  00000000  00000000  0016c440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b1a4 	.word	0x0800b1a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b1a4 	.word	0x0800b1a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ffc:	b0c6      	sub	sp, #280	; 0x118
 8000ffe:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f000 fed0 	bl	8001da4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001004:	f000 faea 	bl	80015dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f000 fbfa 	bl	8001800 <MX_GPIO_Init>
  MX_I2C1_Init();
 800100c:	f000 fb38 	bl	8001680 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001010:	f000 fbc6 	bl	80017a0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001014:	f000 fb74 	bl	8001700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MPU_6050_Init();
 8001018:	f000 fc2e 	bl	8001878 <MPU_6050_Init>
  TIM2->CR1 |= TIM_CR1_CEN;
 800101c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6013      	str	r3, [r2, #0]
  float sec = 0;
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	//uint8_t data[256];
	//Get_Pos();
	///sprintf((char*)data, "Roll: %f Pitch: %f Yaw: %f\n", roll, pitch, yaw);
	//HAL_UART_Transmit(&huart2, data, strlen((char*)data), I2C_DELAY);

	HAL_I2C_Mem_Read(&hi2c1, MPU_6050_ADDR, ACCEL_ADDR, I2C_MEMADD_SIZE_8BIT, buf, 6, I2C_DELAY);
 8001034:	2332      	movs	r3, #50	; 0x32
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	2306      	movs	r3, #6
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	4bd0      	ldr	r3, [pc, #832]	; (8001380 <main+0x388>)
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	223b      	movs	r2, #59	; 0x3b
 8001044:	21d0      	movs	r1, #208	; 0xd0
 8001046:	48cf      	ldr	r0, [pc, #828]	; (8001384 <main+0x38c>)
 8001048:	f001 fb80 	bl	800274c <HAL_I2C_Mem_Read>

	AccX = ((int16_t)buf[0] << 8) | (buf[1]);
 800104c:	4bcc      	ldr	r3, [pc, #816]	; (8001380 <main+0x388>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	4acb      	ldr	r2, [pc, #812]	; (8001380 <main+0x388>)
 8001054:	7852      	ldrb	r2, [r2, #1]
 8001056:	4313      	orrs	r3, r2
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	4bc9      	ldr	r3, [pc, #804]	; (8001388 <main+0x390>)
 8001062:	edc3 7a00 	vstr	s15, [r3]
	AccY = ((int16_t)buf[2] << 8) | (buf[3]);
 8001066:	4bc6      	ldr	r3, [pc, #792]	; (8001380 <main+0x388>)
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	4ac4      	ldr	r2, [pc, #784]	; (8001380 <main+0x388>)
 800106e:	78d2      	ldrb	r2, [r2, #3]
 8001070:	4313      	orrs	r3, r2
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	4bc4      	ldr	r3, [pc, #784]	; (800138c <main+0x394>)
 800107c:	edc3 7a00 	vstr	s15, [r3]
	AccZ = ((int16_t)buf[4] << 8) | (buf[5]);
 8001080:	4bbf      	ldr	r3, [pc, #764]	; (8001380 <main+0x388>)
 8001082:	791b      	ldrb	r3, [r3, #4]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	4abe      	ldr	r2, [pc, #760]	; (8001380 <main+0x388>)
 8001088:	7952      	ldrb	r2, [r2, #5]
 800108a:	4313      	orrs	r3, r2
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	4bbe      	ldr	r3, [pc, #760]	; (8001390 <main+0x398>)
 8001096:	edc3 7a00 	vstr	s15, [r3]

	AccX = AccX / 8192.0;
 800109a:	4bbb      	ldr	r3, [pc, #748]	; (8001388 <main+0x390>)
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	eddf 6abc 	vldr	s13, [pc, #752]	; 8001394 <main+0x39c>
 80010a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a8:	4bb7      	ldr	r3, [pc, #732]	; (8001388 <main+0x390>)
 80010aa:	edc3 7a00 	vstr	s15, [r3]
	AccY = AccY / 8192.0;
 80010ae:	4bb7      	ldr	r3, [pc, #732]	; (800138c <main+0x394>)
 80010b0:	ed93 7a00 	vldr	s14, [r3]
 80010b4:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8001394 <main+0x39c>
 80010b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010bc:	4bb3      	ldr	r3, [pc, #716]	; (800138c <main+0x394>)
 80010be:	edc3 7a00 	vstr	s15, [r3]
	AccZ = AccZ / 8192.0;
 80010c2:	4bb3      	ldr	r3, [pc, #716]	; (8001390 <main+0x398>)
 80010c4:	ed93 7a00 	vldr	s14, [r3]
 80010c8:	eddf 6ab2 	vldr	s13, [pc, #712]	; 8001394 <main+0x39c>
 80010cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d0:	4baf      	ldr	r3, [pc, #700]	; (8001390 <main+0x398>)
 80010d2:	edc3 7a00 	vstr	s15, [r3]

	// Calculating Roll and Pitch from the accelerometer data
	accAngleX = (atan(AccY / sqrt(pow(AccX, 2) + pow(AccZ, 2))) * 180 / M_PI) - 0.58; // AccErrorX ~(0.58) See the calculate_IMU_error()custom function for more details
 80010d6:	4bad      	ldr	r3, [pc, #692]	; (800138c <main+0x394>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa34 	bl	8000548 <__aeabi_f2d>
 80010e0:	4604      	mov	r4, r0
 80010e2:	460d      	mov	r5, r1
 80010e4:	4ba8      	ldr	r3, [pc, #672]	; (8001388 <main+0x390>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fa2d 	bl	8000548 <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	ed9f 1b9b 	vldr	d1, [pc, #620]	; 8001360 <main+0x368>
 80010f6:	ec43 2b10 	vmov	d0, r2, r3
 80010fa:	f009 f913 	bl	800a324 <pow>
 80010fe:	ec59 8b10 	vmov	r8, r9, d0
 8001102:	4ba3      	ldr	r3, [pc, #652]	; (8001390 <main+0x398>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_f2d>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	ed9f 1b93 	vldr	d1, [pc, #588]	; 8001360 <main+0x368>
 8001114:	ec43 2b10 	vmov	d0, r2, r3
 8001118:	f009 f904 	bl	800a324 <pow>
 800111c:	ec53 2b10 	vmov	r2, r3, d0
 8001120:	4640      	mov	r0, r8
 8001122:	4649      	mov	r1, r9
 8001124:	f7ff f8b2 	bl	800028c <__adddf3>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	ec43 2b17 	vmov	d7, r2, r3
 8001130:	eeb0 0a47 	vmov.f32	s0, s14
 8001134:	eef0 0a67 	vmov.f32	s1, s15
 8001138:	f009 f964 	bl	800a404 <sqrt>
 800113c:	ec53 2b10 	vmov	r2, r3, d0
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff fb82 	bl	800084c <__aeabi_ddiv>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	ec43 2b17 	vmov	d7, r2, r3
 8001150:	eeb0 0a47 	vmov.f32	s0, s14
 8001154:	eef0 0a67 	vmov.f32	s1, s15
 8001158:	f008 ff3a 	bl	8009fd0 <atan>
 800115c:	ec51 0b10 	vmov	r0, r1, d0
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b8c      	ldr	r3, [pc, #560]	; (8001398 <main+0x3a0>)
 8001166:	f7ff fa47 	bl	80005f8 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	a37d      	add	r3, pc, #500	; (adr r3, 8001368 <main+0x370>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fb68 	bl	800084c <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	a37a      	add	r3, pc, #488	; (adr r3, 8001370 <main+0x378>)
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118a:	f7ff f87d 	bl	8000288 <__aeabi_dsub>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f7ff fd27 	bl	8000be8 <__aeabi_d2f>
 800119a:	4603      	mov	r3, r0
 800119c:	4a7f      	ldr	r2, [pc, #508]	; (800139c <main+0x3a4>)
 800119e:	6013      	str	r3, [r2, #0]
	accAngleY = (atan(-1 * AccX / sqrt(pow(AccY, 2) + pow(AccZ, 2))) * 180 / M_PI) + 1.58; // AccErrorY ~(-1.58)
 80011a0:	4b79      	ldr	r3, [pc, #484]	; (8001388 <main+0x390>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eef1 7a67 	vneg.f32	s15, s15
 80011aa:	ee17 3a90 	vmov	r3, s15
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9ca 	bl	8000548 <__aeabi_f2d>
 80011b4:	4604      	mov	r4, r0
 80011b6:	460d      	mov	r5, r1
 80011b8:	4b74      	ldr	r3, [pc, #464]	; (800138c <main+0x394>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9c3 	bl	8000548 <__aeabi_f2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8001360 <main+0x368>
 80011ca:	ec43 2b10 	vmov	d0, r2, r3
 80011ce:	f009 f8a9 	bl	800a324 <pow>
 80011d2:	ec59 8b10 	vmov	r8, r9, d0
 80011d6:	4b6e      	ldr	r3, [pc, #440]	; (8001390 <main+0x398>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9b4 	bl	8000548 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8001360 <main+0x368>
 80011e8:	ec43 2b10 	vmov	d0, r2, r3
 80011ec:	f009 f89a 	bl	800a324 <pow>
 80011f0:	ec53 2b10 	vmov	r2, r3, d0
 80011f4:	4640      	mov	r0, r8
 80011f6:	4649      	mov	r1, r9
 80011f8:	f7ff f848 	bl	800028c <__adddf3>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	ec43 2b17 	vmov	d7, r2, r3
 8001204:	eeb0 0a47 	vmov.f32	s0, s14
 8001208:	eef0 0a67 	vmov.f32	s1, s15
 800120c:	f009 f8fa 	bl	800a404 <sqrt>
 8001210:	ec53 2b10 	vmov	r2, r3, d0
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	ec43 2b17 	vmov	d7, r2, r3
 8001224:	eeb0 0a47 	vmov.f32	s0, s14
 8001228:	eef0 0a67 	vmov.f32	s1, s15
 800122c:	f008 fed0 	bl	8009fd0 <atan>
 8001230:	ec51 0b10 	vmov	r0, r1, d0
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b57      	ldr	r3, [pc, #348]	; (8001398 <main+0x3a0>)
 800123a:	f7ff f9dd 	bl	80005f8 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	a348      	add	r3, pc, #288	; (adr r3, 8001368 <main+0x370>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff fafe 	bl	800084c <__aeabi_ddiv>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	a347      	add	r3, pc, #284	; (adr r3, 8001378 <main+0x380>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff f815 	bl	800028c <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fcbd 	bl	8000be8 <__aeabi_d2f>
 800126e:	4603      	mov	r3, r0
 8001270:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <main+0x3a8>)
 8001272:	6013      	str	r3, [r2, #0]

	// === Read gyroscope data === //
	previousTime = currentTime;        // Previous time is stored before the actual time read
 8001274:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <main+0x3ac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a4b      	ldr	r2, [pc, #300]	; (80013a8 <main+0x3b0>)
 800127a:	6013      	str	r3, [r2, #0]
	currentTime = TIM2->CNT;       // Current time actual time read
 800127c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800128a:	4b46      	ldr	r3, [pc, #280]	; (80013a4 <main+0x3ac>)
 800128c:	edc3 7a00 	vstr	s15, [r3]
	currentTime = currentTime / 8;
 8001290:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <main+0x3ac>)
 8001292:	ed93 7a00 	vldr	s14, [r3]
 8001296:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800129a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <main+0x3ac>)
 80012a0:	edc3 7a00 	vstr	s15, [r3]
	elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
 80012a4:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <main+0x3ac>)
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <main+0x3b0>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80013ac <main+0x3b4>
 80012b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012bc:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <main+0x3b8>)
 80012be:	edc3 7a00 	vstr	s15, [r3]

	HAL_I2C_Mem_Read(&hi2c1, MPU_6050_ADDR, GYRO_ADDR, I2C_MEMADD_SIZE_8BIT, buf, 6, I2C_DELAY);
 80012c2:	2332      	movs	r3, #50	; 0x32
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	2306      	movs	r3, #6
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <main+0x388>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	2243      	movs	r2, #67	; 0x43
 80012d2:	21d0      	movs	r1, #208	; 0xd0
 80012d4:	482b      	ldr	r0, [pc, #172]	; (8001384 <main+0x38c>)
 80012d6:	f001 fa39 	bl	800274c <HAL_I2C_Mem_Read>
	GyroX = ((int16_t)buf[0] << 8) | (buf[1]);
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <main+0x388>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <main+0x388>)
 80012e2:	7852      	ldrb	r2, [r2, #1]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <main+0x3bc>)
 80012f0:	edc3 7a00 	vstr	s15, [r3]
	GyroY = ((int16_t)buf[2] << 8) | (buf[3]);
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <main+0x388>)
 80012f6:	789b      	ldrb	r3, [r3, #2]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <main+0x388>)
 80012fc:	78d2      	ldrb	r2, [r2, #3]
 80012fe:	4313      	orrs	r3, r2
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <main+0x3c0>)
 800130a:	edc3 7a00 	vstr	s15, [r3]
	GyroZ = ((int16_t)buf[4] << 8) | (buf[5]);
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <main+0x388>)
 8001310:	791b      	ldrb	r3, [r3, #4]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4a1a      	ldr	r2, [pc, #104]	; (8001380 <main+0x388>)
 8001316:	7952      	ldrb	r2, [r2, #5]
 8001318:	4313      	orrs	r3, r2
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <main+0x3c4>)
 8001324:	edc3 7a00 	vstr	s15, [r3]

	GyroX = GyroX / 65.5;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <main+0x3bc>)
 800132a:	ed93 7a00 	vldr	s14, [r3]
 800132e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80013c0 <main+0x3c8>
 8001332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <main+0x3bc>)
 8001338:	edc3 7a00 	vstr	s15, [r3]
	GyroY = GyroY / 65.5;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <main+0x3c0>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80013c0 <main+0x3c8>
 8001346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <main+0x3c0>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
	GyroZ = GyroZ / 65.5;
 8001350:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <main+0x3c4>)
 8001352:	ed93 7a00 	vldr	s14, [r3]
 8001356:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80013c0 <main+0x3c8>
 800135a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135e:	e031      	b.n	80013c4 <main+0x3cc>
 8001360:	00000000 	.word	0x00000000
 8001364:	40000000 	.word	0x40000000
 8001368:	54442d18 	.word	0x54442d18
 800136c:	400921fb 	.word	0x400921fb
 8001370:	28f5c28f 	.word	0x28f5c28f
 8001374:	3fe28f5c 	.word	0x3fe28f5c
 8001378:	147ae148 	.word	0x147ae148
 800137c:	3ff947ae 	.word	0x3ff947ae
 8001380:	20000320 	.word	0x20000320
 8001384:	200001fc 	.word	0x200001fc
 8001388:	20000328 	.word	0x20000328
 800138c:	2000032c 	.word	0x2000032c
 8001390:	20000330 	.word	0x20000330
 8001394:	46000000 	.word	0x46000000
 8001398:	40668000 	.word	0x40668000
 800139c:	20000340 	.word	0x20000340
 80013a0:	20000344 	.word	0x20000344
 80013a4:	20000360 	.word	0x20000360
 80013a8:	20000364 	.word	0x20000364
 80013ac:	447a0000 	.word	0x447a0000
 80013b0:	2000035c 	.word	0x2000035c
 80013b4:	20000334 	.word	0x20000334
 80013b8:	20000338 	.word	0x20000338
 80013bc:	2000033c 	.word	0x2000033c
 80013c0:	42830000 	.word	0x42830000
 80013c4:	4b78      	ldr	r3, [pc, #480]	; (80015a8 <main+0x5b0>)
 80013c6:	edc3 7a00 	vstr	s15, [r3]

	// Correct the outputs with the calculated error values
	GyroX = GyroX + 0.56; // GyroErrorX ~(-0.56)
 80013ca:	4b78      	ldr	r3, [pc, #480]	; (80015ac <main+0x5b4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8ba 	bl	8000548 <__aeabi_f2d>
 80013d4:	a36c      	add	r3, pc, #432	; (adr r3, 8001588 <main+0x590>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7fe ff57 	bl	800028c <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fbff 	bl	8000be8 <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a6f      	ldr	r2, [pc, #444]	; (80015ac <main+0x5b4>)
 80013ee:	6013      	str	r3, [r2, #0]
	GyroY = GyroY - 2; // GyroErrorY ~(2)
 80013f0:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <main+0x5b8>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013fe:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <main+0x5b8>)
 8001400:	edc3 7a00 	vstr	s15, [r3]
	GyroZ = GyroZ + 0.79; // GyroErrorZ ~ (-0.8)
 8001404:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <main+0x5b0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f89d 	bl	8000548 <__aeabi_f2d>
 800140e:	a360      	add	r3, pc, #384	; (adr r3, 8001590 <main+0x598>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7fe ff3a 	bl	800028c <__adddf3>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fbe2 	bl	8000be8 <__aeabi_d2f>
 8001424:	4603      	mov	r3, r0
 8001426:	4a60      	ldr	r2, [pc, #384]	; (80015a8 <main+0x5b0>)
 8001428:	6013      	str	r3, [r2, #0]

	// Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
	gyroAngleX = gyroAngleX + GyroX * elapsedTime; // deg/s * s = deg
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <main+0x5b4>)
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <main+0x5bc>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143a:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <main+0x5c0>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	4b5c      	ldr	r3, [pc, #368]	; (80015b8 <main+0x5c0>)
 8001446:	edc3 7a00 	vstr	s15, [r3]
	gyroAngleY = gyroAngleY + GyroY * elapsedTime;
 800144a:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <main+0x5b8>)
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <main+0x5bc>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145a:	4b58      	ldr	r3, [pc, #352]	; (80015bc <main+0x5c4>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	4b55      	ldr	r3, [pc, #340]	; (80015bc <main+0x5c4>)
 8001466:	edc3 7a00 	vstr	s15, [r3]
	yaw =  yaw + GyroZ * elapsedTime;
 800146a:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <main+0x5b0>)
 800146c:	ed93 7a00 	vldr	s14, [r3]
 8001470:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <main+0x5bc>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	ee27 7a27 	vmul.f32	s14, s14, s15
 800147a:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <main+0x5c8>)
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001484:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <main+0x5c8>)
 8001486:	edc3 7a00 	vstr	s15, [r3]
	// Complementary filter - combine acceleromter and gyro angle values
	roll = 0.96 * gyroAngleX + 0.04 * accAngleX;
 800148a:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <main+0x5c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f85a 	bl	8000548 <__aeabi_f2d>
 8001494:	a340      	add	r3, pc, #256	; (adr r3, 8001598 <main+0x5a0>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7ff f8ad 	bl	80005f8 <__aeabi_dmul>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4614      	mov	r4, r2
 80014a4:	461d      	mov	r5, r3
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <main+0x5cc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f84c 	bl	8000548 <__aeabi_f2d>
 80014b0:	a33b      	add	r3, pc, #236	; (adr r3, 80015a0 <main+0x5a8>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f89f 	bl	80005f8 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4620      	mov	r0, r4
 80014c0:	4629      	mov	r1, r5
 80014c2:	f7fe fee3 	bl	800028c <__adddf3>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb8b 	bl	8000be8 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a3c      	ldr	r2, [pc, #240]	; (80015c8 <main+0x5d0>)
 80014d6:	6013      	str	r3, [r2, #0]
	pitch = 0.96 * gyroAngleY + 0.04 * accAngleY;
 80014d8:	4b38      	ldr	r3, [pc, #224]	; (80015bc <main+0x5c4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f833 	bl	8000548 <__aeabi_f2d>
 80014e2:	a32d      	add	r3, pc, #180	; (adr r3, 8001598 <main+0x5a0>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f886 	bl	80005f8 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4614      	mov	r4, r2
 80014f2:	461d      	mov	r5, r3
 80014f4:	4b35      	ldr	r3, [pc, #212]	; (80015cc <main+0x5d4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f825 	bl	8000548 <__aeabi_f2d>
 80014fe:	a328      	add	r3, pc, #160	; (adr r3, 80015a0 <main+0x5a8>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f878 	bl	80005f8 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4620      	mov	r0, r4
 800150e:	4629      	mov	r1, r5
 8001510:	f7fe febc 	bl	800028c <__adddf3>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fb64 	bl	8000be8 <__aeabi_d2f>
 8001520:	4603      	mov	r3, r0
 8001522:	4a2b      	ldr	r2, [pc, #172]	; (80015d0 <main+0x5d8>)
 8001524:	6013      	str	r3, [r2, #0]

	uint8_t data[256];
	sprintf((char*)data, "Roll: %f Pitch: %f Yaw: %f\n", roll, pitch, yaw);
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <main+0x5d0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f80c 	bl	8000548 <__aeabi_f2d>
 8001530:	4680      	mov	r8, r0
 8001532:	4689      	mov	r9, r1
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <main+0x5d8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <main+0x5c8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fffe 	bl	8000548 <__aeabi_f2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	1d38      	adds	r0, r7, #4
 8001552:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001556:	e9cd 4500 	strd	r4, r5, [sp]
 800155a:	4642      	mov	r2, r8
 800155c:	464b      	mov	r3, r9
 800155e:	491d      	ldr	r1, [pc, #116]	; (80015d4 <main+0x5dc>)
 8001560:	f004 ff44 	bl	80063ec <siprintf>
	HAL_UART_Transmit(&huart2, data, strlen((char*)data), I2C_DELAY);
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fe32 	bl	80001d0 <strlen>
 800156c:	4603      	mov	r3, r0
 800156e:	b29a      	uxth	r2, r3
 8001570:	1d39      	adds	r1, r7, #4
 8001572:	2332      	movs	r3, #50	; 0x32
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <main+0x5e0>)
 8001576:	f003 fb8b 	bl	8004c90 <HAL_UART_Transmit>

	HAL_Delay(.5 * 1000); //(sec * 1000)
 800157a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800157e:	f000 fc8d 	bl	8001e9c <HAL_Delay>
  {
 8001582:	e557      	b.n	8001034 <main+0x3c>
 8001584:	f3af 8000 	nop.w
 8001588:	1eb851ec 	.word	0x1eb851ec
 800158c:	3fe1eb85 	.word	0x3fe1eb85
 8001590:	147ae148 	.word	0x147ae148
 8001594:	3fe947ae 	.word	0x3fe947ae
 8001598:	eb851eb8 	.word	0xeb851eb8
 800159c:	3feeb851 	.word	0x3feeb851
 80015a0:	47ae147b 	.word	0x47ae147b
 80015a4:	3fa47ae1 	.word	0x3fa47ae1
 80015a8:	2000033c 	.word	0x2000033c
 80015ac:	20000334 	.word	0x20000334
 80015b0:	20000338 	.word	0x20000338
 80015b4:	2000035c 	.word	0x2000035c
 80015b8:	20000348 	.word	0x20000348
 80015bc:	2000034c 	.word	0x2000034c
 80015c0:	20000358 	.word	0x20000358
 80015c4:	20000340 	.word	0x20000340
 80015c8:	20000350 	.word	0x20000350
 80015cc:	20000344 	.word	0x20000344
 80015d0:	20000354 	.word	0x20000354
 80015d4:	0800b1c0 	.word	0x0800b1c0
 80015d8:	2000029c 	.word	0x2000029c

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b096      	sub	sp, #88	; 0x58
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	2244      	movs	r2, #68	; 0x44
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 f876 	bl	80056dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001602:	f001 fd09 	bl	8003018 <HAL_PWREx_ControlVoltageScaling>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800160c:	f000 f99c 	bl	8001948 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001610:	2302      	movs	r3, #2
 8001612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161a:	2310      	movs	r3, #16
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001622:	2302      	movs	r3, #2
 8001624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800162a:	230a      	movs	r3, #10
 800162c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800162e:	2307      	movs	r3, #7
 8001630:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001632:	2302      	movs	r3, #2
 8001634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001636:	2302      	movs	r3, #2
 8001638:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4618      	mov	r0, r3
 8001640:	f001 fd40 	bl	80030c4 <HAL_RCC_OscConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800164a:	f000 f97d 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164e:	230f      	movs	r3, #15
 8001650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001652:	2303      	movs	r3, #3
 8001654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001662:	463b      	mov	r3, r7
 8001664:	2104      	movs	r1, #4
 8001666:	4618      	mov	r0, r3
 8001668:	f002 f908 	bl	800387c <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001672:	f000 f969 	bl	8001948 <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	3758      	adds	r7, #88	; 0x58
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_I2C1_Init+0x74>)
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <MX_I2C1_Init+0x78>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_I2C1_Init+0x74>)
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <MX_I2C1_Init+0x7c>)
 800168e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_I2C1_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_I2C1_Init+0x74>)
 8001698:	2201      	movs	r2, #1
 800169a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_I2C1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ba:	480e      	ldr	r0, [pc, #56]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016bc:	f000 fea2 	bl	8002404 <HAL_I2C_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016c6:	f000 f93f 	bl	8001948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016ce:	f001 fbfd 	bl	8002ecc <HAL_I2CEx_ConfigAnalogFilter>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016d8:	f000 f936 	bl	8001948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_I2C1_Init+0x74>)
 80016e0:	f001 fc3f 	bl	8002f62 <HAL_I2CEx_ConfigDigitalFilter>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f000 f92d 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200001fc 	.word	0x200001fc
 80016f8:	40005400 	.word	0x40005400
 80016fc:	00702991 	.word	0x00702991

08001700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <MX_TIM2_Init+0x9c>)
 8001720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <MX_TIM2_Init+0x9c>)
 8001728:	f242 720f 	movw	r2, #9999	; 0x270f
 800172c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172e:	4b1b      	ldr	r3, [pc, #108]	; (800179c <MX_TIM2_Init+0x9c>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <MX_TIM2_Init+0x9c>)
 8001736:	f04f 32ff 	mov.w	r2, #4294967295
 800173a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800173c:	4b17      	ldr	r3, [pc, #92]	; (800179c <MX_TIM2_Init+0x9c>)
 800173e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001742:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <MX_TIM2_Init+0x9c>)
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800174a:	4814      	ldr	r0, [pc, #80]	; (800179c <MX_TIM2_Init+0x9c>)
 800174c:	f002 ff76 	bl	800463c <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001756:	f000 f8f7 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_TIM2_Init+0x9c>)
 8001768:	f002 ffbf 	bl	80046ea <HAL_TIM_ConfigClockSource>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001772:	f000 f8e9 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4806      	ldr	r0, [pc, #24]	; (800179c <MX_TIM2_Init+0x9c>)
 8001784:	f003 f9ae 	bl	8004ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800178e:	f000 f8db 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	3720      	adds	r7, #32
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000250 	.word	0x20000250

080017a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017a6:	4a15      	ldr	r2, [pc, #84]	; (80017fc <MX_USART2_UART_Init+0x5c>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART2_UART_Init+0x58>)
 80017e4:	f003 fa06 	bl	8004bf4 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017ee:	f000 f8ab 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000029c 	.word	0x2000029c
 80017fc:	40004400 	.word	0x40004400

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <MX_GPIO_Init+0x74>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	4a1a      	ldr	r2, [pc, #104]	; (8001874 <MX_GPIO_Init+0x74>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <MX_GPIO_Init+0x74>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <MX_GPIO_Init+0x74>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a14      	ldr	r2, [pc, #80]	; (8001874 <MX_GPIO_Init+0x74>)
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <MX_GPIO_Init+0x74>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_GPIO_Init+0x74>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <MX_GPIO_Init+0x74>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_GPIO_Init+0x74>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_GPIO_Init+0x74>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a08      	ldr	r2, [pc, #32]	; (8001874 <MX_GPIO_Init+0x74>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_GPIO_Init+0x74>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <MPU_6050_Init>:

/* USER CODE BEGIN 4 */
void MPU_6050_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	71fb      	strb	r3, [r7, #7]
	//uint8_t data = 0;
	//ret = HAL_I2C_Mem_Write(&hi2c1, MPU_ADDR, POWER_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
	uint8_t data = 0x00;
 8001882:	2300      	movs	r3, #0
 8001884:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, POWER_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 8001886:	2332      	movs	r3, #50	; 0x32
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	1dbb      	adds	r3, r7, #6
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	226b      	movs	r2, #107	; 0x6b
 8001896:	21d0      	movs	r1, #208	; 0xd0
 8001898:	4825      	ldr	r0, [pc, #148]	; (8001930 <MPU_6050_Init+0xb8>)
 800189a:	f000 fe43 	bl	8002524 <HAL_I2C_Mem_Write>
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK)
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <MPU_6050_Init+0x3e>
	{
		HAL_UART_Transmit(&huart2, (uint8_t*)"Error Initializing MPU_6050\n", strlen("Error Initializing MPU_6050\n"), I2C_DELAY);
 80018a8:	2332      	movs	r3, #50	; 0x32
 80018aa:	221c      	movs	r2, #28
 80018ac:	4921      	ldr	r1, [pc, #132]	; (8001934 <MPU_6050_Init+0xbc>)
 80018ae:	4822      	ldr	r0, [pc, #136]	; (8001938 <MPU_6050_Init+0xc0>)
 80018b0:	f003 f9ee 	bl	8004c90 <HAL_UART_Transmit>
			{
				HAL_UART_Transmit(&huart2, (uint8_t*)"Initialized MPU_6050!\n", strlen("Initialized MPU_6050!\n"), I2C_DELAY);
			}
		}
	}
	return;
 80018b4:	e038      	b.n	8001928 <MPU_6050_Init+0xb0>
		data = 0x08;
 80018b6:	2308      	movs	r3, #8
 80018b8:	71bb      	strb	r3, [r7, #6]
		ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, GYRO_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 80018ba:	2332      	movs	r3, #50	; 0x32
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	2301      	movs	r3, #1
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	1dbb      	adds	r3, r7, #6
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2301      	movs	r3, #1
 80018c8:	221b      	movs	r2, #27
 80018ca:	21d0      	movs	r1, #208	; 0xd0
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <MPU_6050_Init+0xb8>)
 80018ce:	f000 fe29 	bl	8002524 <HAL_I2C_Mem_Write>
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
		if (ret != HAL_OK)
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <MPU_6050_Init+0x72>
			HAL_UART_Transmit(&huart2, (uint8_t*)"Error Initializing Gyro\n", strlen("Error Initializing Gyro\n"), I2C_DELAY);
 80018dc:	2332      	movs	r3, #50	; 0x32
 80018de:	2218      	movs	r2, #24
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <MPU_6050_Init+0xc4>)
 80018e2:	4815      	ldr	r0, [pc, #84]	; (8001938 <MPU_6050_Init+0xc0>)
 80018e4:	f003 f9d4 	bl	8004c90 <HAL_UART_Transmit>
	return;
 80018e8:	e01e      	b.n	8001928 <MPU_6050_Init+0xb0>
			ret = HAL_I2C_Mem_Write(&hi2c1, MPU_6050_ADDR, ACCEL_CONFIG_ADDR, I2C_MEMADD_SIZE_8BIT, &data, I2C_MEMADD_SIZE_8BIT, I2C_DELAY);
 80018ea:	2332      	movs	r3, #50	; 0x32
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	1dbb      	adds	r3, r7, #6
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	221c      	movs	r2, #28
 80018fa:	21d0      	movs	r1, #208	; 0xd0
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <MPU_6050_Init+0xb8>)
 80018fe:	f000 fe11 	bl	8002524 <HAL_I2C_Mem_Write>
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
			if (ret != HAL_OK)
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <MPU_6050_Init+0xa2>
				HAL_UART_Transmit(&huart2, (uint8_t*)"Error Initializing Accel\n", strlen("Error Initializing Accel\n"), I2C_DELAY);
 800190c:	2332      	movs	r3, #50	; 0x32
 800190e:	2219      	movs	r2, #25
 8001910:	490b      	ldr	r1, [pc, #44]	; (8001940 <MPU_6050_Init+0xc8>)
 8001912:	4809      	ldr	r0, [pc, #36]	; (8001938 <MPU_6050_Init+0xc0>)
 8001914:	f003 f9bc 	bl	8004c90 <HAL_UART_Transmit>
	return;
 8001918:	e006      	b.n	8001928 <MPU_6050_Init+0xb0>
				HAL_UART_Transmit(&huart2, (uint8_t*)"Initialized MPU_6050!\n", strlen("Initialized MPU_6050!\n"), I2C_DELAY);
 800191a:	2332      	movs	r3, #50	; 0x32
 800191c:	2216      	movs	r2, #22
 800191e:	4909      	ldr	r1, [pc, #36]	; (8001944 <MPU_6050_Init+0xcc>)
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MPU_6050_Init+0xc0>)
 8001922:	f003 f9b5 	bl	8004c90 <HAL_UART_Transmit>
	return;
 8001926:	bf00      	nop
}
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200001fc 	.word	0x200001fc
 8001934:	0800b1dc 	.word	0x0800b1dc
 8001938:	2000029c 	.word	0x2000029c
 800193c:	0800b1fc 	.word	0x0800b1fc
 8001940:	0800b218 	.word	0x0800b218
 8001944:	0800b234 	.word	0x0800b234

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_MspInit+0x44>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_MspInit+0x44>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	; 0x60
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_MspInit+0x44>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x44>)
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x44>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6593      	str	r3, [r2, #88]	; 0x58
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x44>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000

0800199c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0ac      	sub	sp, #176	; 0xb0
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2288      	movs	r2, #136	; 0x88
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 fe8d 	bl	80056dc <memset>
  if(hi2c->Instance==I2C1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <HAL_I2C_MspInit+0xb0>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d13b      	bne.n	8001a44 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019cc:	2340      	movs	r3, #64	; 0x40
 80019ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019d0:	2300      	movs	r3, #0
 80019d2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 f973 	bl	8003cc4 <HAL_RCCEx_PeriphCLKConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019e4:	f7ff ffb0 	bl	8001948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_I2C_MspInit+0xb4>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <HAL_I2C_MspInit+0xb4>)
 80019ee:	f043 0302 	orr.w	r3, r3, #2
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_I2C_MspInit+0xb4>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a08:	2312      	movs	r3, #18
 8001a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a24:	4619      	mov	r1, r3
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <HAL_I2C_MspInit+0xb8>)
 8001a28:	f000 fb42 	bl	80020b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_I2C_MspInit+0xb4>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_I2C_MspInit+0xb4>)
 8001a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a36:	6593      	str	r3, [r2, #88]	; 0x58
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_I2C_MspInit+0xb4>)
 8001a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a44:	bf00      	nop
 8001a46:	37b0      	adds	r7, #176	; 0xb0
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48000400 	.word	0x48000400

08001a58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a68:	d10b      	bne.n	8001a82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_TIM_Base_MspInit+0x38>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_TIM_Base_MspInit+0x38>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_TIM_Base_MspInit+0x38>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0ac      	sub	sp, #176	; 0xb0
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2288      	movs	r2, #136	; 0x88
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 fe11 	bl	80056dc <memset>
  if(huart->Instance==USART2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a21      	ldr	r2, [pc, #132]	; (8001b44 <HAL_UART_MspInit+0xb0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d13b      	bne.n	8001b3c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f002 f8f7 	bl	8003cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001adc:	f7ff ff34 	bl	8001948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <HAL_UART_MspInit+0xb4>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	4a18      	ldr	r2, [pc, #96]	; (8001b48 <HAL_UART_MspInit+0xb4>)
 8001ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aea:	6593      	str	r3, [r2, #88]	; 0x58
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_UART_MspInit+0xb4>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_UART_MspInit+0xb4>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <HAL_UART_MspInit+0xb4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_UART_MspInit+0xb4>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b10:	230c      	movs	r3, #12
 8001b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b38:	f000 faba 	bl	80020b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b3c:	bf00      	nop
 8001b3e:	37b0      	adds	r7, #176	; 0xb0
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40004400 	.word	0x40004400
 8001b48:	40021000 	.word	0x40021000

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <NMI_Handler+0x4>

08001b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <MemManage_Handler+0x4>

08001b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <BusFault_Handler+0x4>

08001b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <UsageFault_Handler+0x4>

08001b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b98:	f000 f960 	bl	8001e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return 1;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <_kill>:

int _kill(int pid, int sig)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bba:	f003 fd65 	bl	8005688 <__errno>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2216      	movs	r2, #22
 8001bc2:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_exit>:

void _exit (int status)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ffe7 	bl	8001bb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be2:	e7fe      	b.n	8001be2 <_exit+0x12>

08001be4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e00a      	b.n	8001c0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bf6:	f3af 8000 	nop.w
 8001bfa:	4601      	mov	r1, r0
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	b2ca      	uxtb	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dbf0      	blt.n	8001bf6 <_read+0x12>
  }

  return len;
 8001c14:	687b      	ldr	r3, [r7, #4]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e009      	b.n	8001c44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60ba      	str	r2, [r7, #8]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dbf1      	blt.n	8001c30 <_write+0x12>
  }
  return len;
 8001c4c:	687b      	ldr	r3, [r7, #4]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_close>:

int _close(int file)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_isatty>:

int _isatty(int file)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <_sbrk+0x5c>)
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <_sbrk+0x60>)
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <_sbrk+0x64>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <_sbrk+0x68>)
 8001ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d207      	bcs.n	8001d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf0:	f003 fcca 	bl	8005688 <__errno>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	e009      	b.n	8001d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <_sbrk+0x64>)
 8001d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20018000 	.word	0x20018000
 8001d20:	00000400 	.word	0x00000400
 8001d24:	20000368 	.word	0x20000368
 8001d28:	20000380 	.word	0x20000380

08001d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <SystemInit+0x20>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <SystemInit+0x20>)
 8001d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d54:	f7ff ffea 	bl	8001d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d5a:	490d      	ldr	r1, [pc, #52]	; (8001d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <LoopForever+0xe>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d60:	e002      	b.n	8001d68 <LoopCopyDataInit>

08001d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d66:	3304      	adds	r3, #4

08001d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d6c:	d3f9      	bcc.n	8001d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d70:	4c0a      	ldr	r4, [pc, #40]	; (8001d9c <LoopForever+0x16>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d74:	e001      	b.n	8001d7a <LoopFillZerobss>

08001d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d78:	3204      	adds	r2, #4

08001d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d7c:	d3fb      	bcc.n	8001d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f003 fc89 	bl	8005694 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d82:	f7ff f939 	bl	8000ff8 <main>

08001d86 <LoopForever>:

LoopForever:
    b LoopForever
 8001d86:	e7fe      	b.n	8001d86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d90:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d94:	0800b868 	.word	0x0800b868
  ldr r2, =_sbss
 8001d98:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d9c:	20000380 	.word	0x20000380

08001da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC1_2_IRQHandler>
	...

08001da4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_Init+0x3c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a0b      	ldr	r2, [pc, #44]	; (8001de0 <HAL_Init+0x3c>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dba:	2003      	movs	r0, #3
 8001dbc:	f000 f944 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f000 f80f 	bl	8001de4 <HAL_InitTick>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	71fb      	strb	r3, [r7, #7]
 8001dd0:	e001      	b.n	8001dd6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dd2:	f7ff fdbf 	bl	8001954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40022000 	.word	0x40022000

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001df0:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <HAL_InitTick+0x6c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d023      	beq.n	8001e40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_InitTick+0x70>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_InitTick+0x6c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 f941 	bl	8002096 <HAL_SYSTICK_Config>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10f      	bne.n	8001e3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d809      	bhi.n	8001e34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f000 f919 	bl	800205e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_InitTick+0x74>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e004      	b.n	8001e44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	e001      	b.n	8001e44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_IncTick+0x20>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_IncTick+0x24>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <HAL_IncTick+0x24>)
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	2000036c 	.word	0x2000036c

08001e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return uwTick;
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_GetTick+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	2000036c 	.word	0x2000036c

08001e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff ffee 	bl	8001e84 <HAL_GetTick>
 8001ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb4:	d005      	beq.n	8001ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_Delay+0x44>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ec2:	bf00      	nop
 8001ec4:	f7ff ffde 	bl	8001e84 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d8f7      	bhi.n	8001ec4 <HAL_Delay+0x28>
  {
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000008 	.word	0x20000008

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff8e 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff47 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff5c 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff8e 	bl	8001f9c <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5d 	bl	8001f48 <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffb0 	bl	8002004 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020be:	e17f      	b.n	80023c0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 8171 	beq.w	80023ba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d005      	beq.n	80020f0 <HAL_GPIO_Init+0x40>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d130      	bne.n	8002152 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002126:	2201      	movs	r2, #1
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	f003 0201 	and.w	r2, r3, #1
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b03      	cmp	r3, #3
 800215c:	d118      	bne.n	8002190 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002164:	2201      	movs	r2, #1
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	08db      	lsrs	r3, r3, #3
 800217a:	f003 0201 	and.w	r2, r3, #1
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	2b03      	cmp	r3, #3
 800219a:	d017      	beq.n	80021cc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d123      	bne.n	8002220 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	08da      	lsrs	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3208      	adds	r2, #8
 80021e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	220f      	movs	r2, #15
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	08da      	lsrs	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3208      	adds	r2, #8
 800221a:	6939      	ldr	r1, [r7, #16]
 800221c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0203 	and.w	r2, r3, #3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80ac 	beq.w	80023ba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002262:	4b5f      	ldr	r3, [pc, #380]	; (80023e0 <HAL_GPIO_Init+0x330>)
 8002264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002266:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_GPIO_Init+0x330>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6613      	str	r3, [r2, #96]	; 0x60
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <HAL_GPIO_Init+0x330>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800227a:	4a5a      	ldr	r2, [pc, #360]	; (80023e4 <HAL_GPIO_Init+0x334>)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022a4:	d025      	beq.n	80022f2 <HAL_GPIO_Init+0x242>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4f      	ldr	r2, [pc, #316]	; (80023e8 <HAL_GPIO_Init+0x338>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01f      	beq.n	80022ee <HAL_GPIO_Init+0x23e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4e      	ldr	r2, [pc, #312]	; (80023ec <HAL_GPIO_Init+0x33c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d019      	beq.n	80022ea <HAL_GPIO_Init+0x23a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4d      	ldr	r2, [pc, #308]	; (80023f0 <HAL_GPIO_Init+0x340>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0x236>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <HAL_GPIO_Init+0x344>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00d      	beq.n	80022e2 <HAL_GPIO_Init+0x232>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4b      	ldr	r2, [pc, #300]	; (80023f8 <HAL_GPIO_Init+0x348>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x22e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4a      	ldr	r2, [pc, #296]	; (80023fc <HAL_GPIO_Init+0x34c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_GPIO_Init+0x22a>
 80022d6:	2306      	movs	r3, #6
 80022d8:	e00c      	b.n	80022f4 <HAL_GPIO_Init+0x244>
 80022da:	2307      	movs	r3, #7
 80022dc:	e00a      	b.n	80022f4 <HAL_GPIO_Init+0x244>
 80022de:	2305      	movs	r3, #5
 80022e0:	e008      	b.n	80022f4 <HAL_GPIO_Init+0x244>
 80022e2:	2304      	movs	r3, #4
 80022e4:	e006      	b.n	80022f4 <HAL_GPIO_Init+0x244>
 80022e6:	2303      	movs	r3, #3
 80022e8:	e004      	b.n	80022f4 <HAL_GPIO_Init+0x244>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e002      	b.n	80022f4 <HAL_GPIO_Init+0x244>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_GPIO_Init+0x244>
 80022f2:	2300      	movs	r3, #0
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	f002 0203 	and.w	r2, r2, #3
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	4093      	lsls	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002304:	4937      	ldr	r1, [pc, #220]	; (80023e4 <HAL_GPIO_Init+0x334>)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	089b      	lsrs	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002312:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <HAL_GPIO_Init+0x350>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002336:	4a32      	ldr	r2, [pc, #200]	; (8002400 <HAL_GPIO_Init+0x350>)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800233c:	4b30      	ldr	r3, [pc, #192]	; (8002400 <HAL_GPIO_Init+0x350>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002360:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_GPIO_Init+0x350>)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002366:	4b26      	ldr	r3, [pc, #152]	; (8002400 <HAL_GPIO_Init+0x350>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800238a:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <HAL_GPIO_Init+0x350>)
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_GPIO_Init+0x350>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023b4:	4a12      	ldr	r2, [pc, #72]	; (8002400 <HAL_GPIO_Init+0x350>)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	3301      	adds	r3, #1
 80023be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f ae78 	bne.w	80020c0 <HAL_GPIO_Init+0x10>
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	48000400 	.word	0x48000400
 80023ec:	48000800 	.word	0x48000800
 80023f0:	48000c00 	.word	0x48000c00
 80023f4:	48001000 	.word	0x48001000
 80023f8:	48001400 	.word	0x48001400
 80023fc:	48001800 	.word	0x48001800
 8002400:	40010400 	.word	0x40010400

08002404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e081      	b.n	800251a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fab6 	bl	800199c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	; 0x24
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002454:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002464:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	e006      	b.n	800248c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800248a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d104      	bne.n	800249e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800249c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691a      	ldr	r2, [r3, #16]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69d9      	ldr	r1, [r3, #28]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1a      	ldr	r2, [r3, #32]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	4608      	mov	r0, r1
 800252e:	4611      	mov	r1, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4603      	mov	r3, r0
 8002534:	817b      	strh	r3, [r7, #10]
 8002536:	460b      	mov	r3, r1
 8002538:	813b      	strh	r3, [r7, #8]
 800253a:	4613      	mov	r3, r2
 800253c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b20      	cmp	r3, #32
 8002548:	f040 80f9 	bne.w	800273e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_I2C_Mem_Write+0x34>
 8002552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0ed      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Mem_Write+0x4e>
 800256e:	2302      	movs	r3, #2
 8002570:	e0e6      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800257a:	f7ff fc83 	bl	8001e84 <HAL_GetTick>
 800257e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2319      	movs	r3, #25
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 fac3 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0d1      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2221      	movs	r2, #33	; 0x21
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a3a      	ldr	r2, [r7, #32]
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025c4:	88f8      	ldrh	r0, [r7, #6]
 80025c6:	893a      	ldrh	r2, [r7, #8]
 80025c8:	8979      	ldrh	r1, [r7, #10]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	4603      	mov	r3, r0
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f9d3 	bl	8002980 <I2C_RequestMemoryWrite>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0a9      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2bff      	cmp	r3, #255	; 0xff
 80025f4:	d90e      	bls.n	8002614 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	b2da      	uxtb	r2, r3
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	2300      	movs	r3, #0
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fc2b 	bl	8002e68 <I2C_TransferConfig>
 8002612:	e00f      	b.n	8002634 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	b2da      	uxtb	r2, r3
 8002624:	8979      	ldrh	r1, [r7, #10]
 8002626:	2300      	movs	r3, #0
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fc1a 	bl	8002e68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 faad 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e07b      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267c:	b29b      	uxth	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d034      	beq.n	80026ec <HAL_I2C_Mem_Write+0x1c8>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	2b00      	cmp	r3, #0
 8002688:	d130      	bne.n	80026ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fa3f 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e04d      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2bff      	cmp	r3, #255	; 0xff
 80026ac:	d90e      	bls.n	80026cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	8979      	ldrh	r1, [r7, #10]
 80026bc:	2300      	movs	r3, #0
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fbcf 	bl	8002e68 <I2C_TransferConfig>
 80026ca:	e00f      	b.n	80026ec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	8979      	ldrh	r1, [r7, #10]
 80026de:	2300      	movs	r3, #0
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fbbe 	bl	8002e68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d19e      	bne.n	8002634 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fa8c 	bl	8002c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e01a      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2220      	movs	r2, #32
 8002710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_I2C_Mem_Write+0x224>)
 800271e:	400b      	ands	r3, r1
 8002720:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	fe00e800 	.word	0xfe00e800

0800274c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	f040 80fd 	bne.w	800296e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_I2C_Mem_Read+0x34>
 800277a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0f1      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_I2C_Mem_Read+0x4e>
 8002796:	2302      	movs	r3, #2
 8002798:	e0ea      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027a2:	f7ff fb6f 	bl	8001e84 <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f9af 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d5      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2222      	movs	r2, #34	; 0x22
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ec:	88f8      	ldrh	r0, [r7, #6]
 80027ee:	893a      	ldrh	r2, [r7, #8]
 80027f0:	8979      	ldrh	r1, [r7, #10]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4603      	mov	r3, r0
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f913 	bl	8002a28 <I2C_RequestMemoryRead>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0ad      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2bff      	cmp	r3, #255	; 0xff
 800281c:	d90e      	bls.n	800283c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	22ff      	movs	r2, #255	; 0xff
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	b2da      	uxtb	r2, r3
 800282a:	8979      	ldrh	r1, [r7, #10]
 800282c:	4b52      	ldr	r3, [pc, #328]	; (8002978 <HAL_I2C_Mem_Read+0x22c>)
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fb17 	bl	8002e68 <I2C_TransferConfig>
 800283a:	e00f      	b.n	800285c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284a:	b2da      	uxtb	r2, r3
 800284c:	8979      	ldrh	r1, [r7, #10]
 800284e:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_I2C_Mem_Read+0x22c>)
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fb06 	bl	8002e68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	2200      	movs	r2, #0
 8002864:	2104      	movs	r1, #4
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f956 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07c      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d034      	beq.n	800291c <HAL_I2C_Mem_Read+0x1d0>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d130      	bne.n	800291c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	2200      	movs	r2, #0
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f927 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e04d      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d90e      	bls.n	80028fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	22ff      	movs	r2, #255	; 0xff
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	8979      	ldrh	r1, [r7, #10]
 80028ec:	2300      	movs	r3, #0
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fab7 	bl	8002e68 <I2C_TransferConfig>
 80028fa:	e00f      	b.n	800291c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	b2da      	uxtb	r2, r3
 800290c:	8979      	ldrh	r1, [r7, #10]
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 faa6 	bl	8002e68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d19a      	bne.n	800285c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f974 	bl	8002c18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e01a      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2220      	movs	r2, #32
 8002940:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_I2C_Mem_Read+0x230>)
 800294e:	400b      	ands	r3, r1
 8002950:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800296e:	2302      	movs	r3, #2
  }
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	80002400 	.word	0x80002400
 800297c:	fe00e800 	.word	0xfe00e800

08002980 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	4608      	mov	r0, r1
 800298a:	4611      	mov	r1, r2
 800298c:	461a      	mov	r2, r3
 800298e:	4603      	mov	r3, r0
 8002990:	817b      	strh	r3, [r7, #10]
 8002992:	460b      	mov	r3, r1
 8002994:	813b      	strh	r3, [r7, #8]
 8002996:	4613      	mov	r3, r2
 8002998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	8979      	ldrh	r1, [r7, #10]
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <I2C_RequestMemoryWrite+0xa4>)
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fa5d 	bl	8002e68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	69b9      	ldr	r1, [r7, #24]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f8f0 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e02c      	b.n	8002a1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
 80029d2:	e015      	b.n	8002a00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029d4:	893b      	ldrh	r3, [r7, #8]
 80029d6:	0a1b      	lsrs	r3, r3, #8
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	69b9      	ldr	r1, [r7, #24]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f8d6 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e012      	b.n	8002a1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029f6:	893b      	ldrh	r3, [r7, #8]
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2200      	movs	r2, #0
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f884 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	80002000 	.word	0x80002000

08002a28 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af02      	add	r7, sp, #8
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	817b      	strh	r3, [r7, #10]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	813b      	strh	r3, [r7, #8]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	8979      	ldrh	r1, [r7, #10]
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <I2C_RequestMemoryRead+0xa4>)
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fa0a 	bl	8002e68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f89d 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e02c      	b.n	8002ac2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d105      	bne.n	8002a7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a6e:	893b      	ldrh	r3, [r7, #8]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
 8002a78:	e015      	b.n	8002aa6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a7a:	893b      	ldrh	r3, [r7, #8]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	69b9      	ldr	r1, [r7, #24]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f883 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e012      	b.n	8002ac2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a9c:	893b      	ldrh	r3, [r7, #8]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2140      	movs	r1, #64	; 0x40
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f831 	bl	8002b18 <I2C_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	80002000 	.word	0x80002000

08002ad0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d103      	bne.n	8002aee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d007      	beq.n	8002b0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	619a      	str	r2, [r3, #24]
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	4613      	mov	r3, r2
 8002b26:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b28:	e022      	b.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d01e      	beq.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7ff f9a7 	bl	8001e84 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d113      	bne.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e00f      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d0cd      	beq.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ba4:	e02c      	b.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f870 	bl	8002c90 <I2C_IsErrorOccurred>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e02a      	b.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d01e      	beq.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc2:	f7ff f95f 	bl	8001e84 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d302      	bcc.n	8002bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d113      	bne.n	8002c00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e007      	b.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d1cb      	bne.n	8002ba6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c24:	e028      	b.n	8002c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f830 	bl	8002c90 <I2C_IsErrorOccurred>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e026      	b.n	8002c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7ff f923 	bl	8001e84 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d113      	bne.n	8002c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d1cf      	bne.n	8002c26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d075      	beq.n	8002da8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cc4:	e056      	b.n	8002d74 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d052      	beq.n	8002d74 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cce:	f7ff f8d9 	bl	8001e84 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d302      	bcc.n	8002ce4 <I2C_IsErrorOccurred+0x54>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d147      	bne.n	8002d74 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d06:	d12e      	bne.n	8002d66 <I2C_IsErrorOccurred+0xd6>
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d0e:	d02a      	beq.n	8002d66 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d027      	beq.n	8002d66 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d26:	f7ff f8ad 	bl	8001e84 <HAL_GetTick>
 8002d2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d2c:	e01b      	b.n	8002d66 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d2e:	f7ff f8a9 	bl	8001e84 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b19      	cmp	r3, #25
 8002d3a:	d914      	bls.n	8002d66 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d1dc      	bne.n	8002d2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b20      	cmp	r3, #32
 8002d80:	d003      	beq.n	8002d8a <I2C_IsErrorOccurred+0xfa>
 8002d82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d09d      	beq.n	8002cc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2220      	movs	r2, #32
 8002d98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f043 0304 	orr.w	r3, r3, #4
 8002da0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f043 0308 	orr.w	r3, r3, #8
 8002de2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f043 0302 	orr.w	r3, r3, #2
 8002e04:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d01c      	beq.n	8002e58 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff fe56 	bl	8002ad0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <I2C_IsErrorOccurred+0x1d4>)
 8002e30:	400b      	ands	r3, r1
 8002e32:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	fe00e800 	.word	0xfe00e800

08002e68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	817b      	strh	r3, [r7, #10]
 8002e76:	4613      	mov	r3, r2
 8002e78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e80:	7a7b      	ldrb	r3, [r7, #9]
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	0d5b      	lsrs	r3, r3, #21
 8002ea2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <I2C_TransferConfig+0x60>)
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	ea02 0103 	and.w	r1, r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	03ff63ff 	.word	0x03ff63ff

08002ecc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b20      	cmp	r3, #32
 8002ee0:	d138      	bne.n	8002f54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e032      	b.n	8002f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2224      	movs	r2, #36	; 0x24
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6819      	ldr	r1, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b085      	sub	sp, #20
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d139      	bne.n	8002fec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e033      	b.n	8002fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2224      	movs	r2, #36	; 0x24
 8002f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <HAL_PWREx_GetVoltageRange+0x18>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40007000 	.word	0x40007000

08003018 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003026:	d130      	bne.n	800308a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003034:	d038      	beq.n	80030a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003044:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2232      	movs	r2, #50	; 0x32
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0c9b      	lsrs	r3, r3, #18
 8003058:	3301      	adds	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800305c:	e002      	b.n	8003064 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3b01      	subs	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003070:	d102      	bne.n	8003078 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f2      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003084:	d110      	bne.n	80030a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e00f      	b.n	80030aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800308a:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003096:	d007      	beq.n	80030a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a0:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40007000 	.word	0x40007000
 80030bc:	20000000 	.word	0x20000000
 80030c0:	431bde83 	.word	0x431bde83

080030c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e3ca      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d6:	4b97      	ldr	r3, [pc, #604]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e0:	4b94      	ldr	r3, [pc, #592]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80e4 	beq.w	80032c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d007      	beq.n	800310e <HAL_RCC_OscConfig+0x4a>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b0c      	cmp	r3, #12
 8003102:	f040 808b 	bne.w	800321c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2b01      	cmp	r3, #1
 800310a:	f040 8087 	bne.w	800321c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800310e:	4b89      	ldr	r3, [pc, #548]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_RCC_OscConfig+0x62>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e3a2      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	4b82      	ldr	r3, [pc, #520]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <HAL_RCC_OscConfig+0x7c>
 8003136:	4b7f      	ldr	r3, [pc, #508]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313e:	e005      	b.n	800314c <HAL_RCC_OscConfig+0x88>
 8003140:	4b7c      	ldr	r3, [pc, #496]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800314c:	4293      	cmp	r3, r2
 800314e:	d223      	bcs.n	8003198 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fd55 	bl	8003c04 <RCC_SetFlashLatencyFromMSIRange>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e383      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003164:	4b73      	ldr	r3, [pc, #460]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a72      	ldr	r2, [pc, #456]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800316a:	f043 0308 	orr.w	r3, r3, #8
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b70      	ldr	r3, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	496d      	ldr	r1, [pc, #436]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003182:	4b6c      	ldr	r3, [pc, #432]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	4968      	ldr	r1, [pc, #416]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
 8003196:	e025      	b.n	80031e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003198:	4b66      	ldr	r3, [pc, #408]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a65      	ldr	r2, [pc, #404]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800319e:	f043 0308 	orr.w	r3, r3, #8
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b63      	ldr	r3, [pc, #396]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4960      	ldr	r1, [pc, #384]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b6:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	495b      	ldr	r1, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fd15 	bl	8003c04 <RCC_SetFlashLatencyFromMSIRange>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e343      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031e4:	f000 fc4a 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b52      	ldr	r3, [pc, #328]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	4950      	ldr	r1, [pc, #320]	; (8003338 <HAL_RCC_OscConfig+0x274>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	4a4e      	ldr	r2, [pc, #312]	; (800333c <HAL_RCC_OscConfig+0x278>)
 8003202:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003204:	4b4e      	ldr	r3, [pc, #312]	; (8003340 <HAL_RCC_OscConfig+0x27c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fdeb 	bl	8001de4 <HAL_InitTick>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d052      	beq.n	80032be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	e327      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d032      	beq.n	800328a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003224:	4b43      	ldr	r3, [pc, #268]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a42      	ldr	r2, [pc, #264]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003230:	f7fe fe28 	bl	8001e84 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003238:	f7fe fe24 	bl	8001e84 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e310      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800324a:	4b3a      	ldr	r3, [pc, #232]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003256:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a36      	ldr	r2, [pc, #216]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800325c:	f043 0308 	orr.w	r3, r3, #8
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	4b34      	ldr	r3, [pc, #208]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4931      	ldr	r1, [pc, #196]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003274:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	492c      	ldr	r1, [pc, #176]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
 8003288:	e01a      	b.n	80032c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800328a:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a29      	ldr	r2, [pc, #164]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003296:	f7fe fdf5 	bl	8001e84 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800329e:	f7fe fdf1 	bl	8001e84 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e2dd      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f0      	bne.n	800329e <HAL_RCC_OscConfig+0x1da>
 80032bc:	e000      	b.n	80032c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d074      	beq.n	80033b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x21a>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	d10e      	bne.n	80032f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d10b      	bne.n	80032f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d064      	beq.n	80033b4 <HAL_RCC_OscConfig+0x2f0>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d160      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e2ba      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x24a>
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	e026      	b.n	800335c <HAL_RCC_OscConfig+0x298>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003316:	d115      	bne.n	8003344 <HAL_RCC_OscConfig+0x280>
 8003318:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a05      	ldr	r2, [pc, #20]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800331e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b03      	ldr	r3, [pc, #12]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a02      	ldr	r2, [pc, #8]	; (8003334 <HAL_RCC_OscConfig+0x270>)
 800332a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e014      	b.n	800335c <HAL_RCC_OscConfig+0x298>
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000
 8003338:	0800b2f8 	.word	0x0800b2f8
 800333c:	20000000 	.word	0x20000000
 8003340:	20000004 	.word	0x20000004
 8003344:	4ba0      	ldr	r3, [pc, #640]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a9f      	ldr	r2, [pc, #636]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800334a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	4b9d      	ldr	r3, [pc, #628]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a9c      	ldr	r2, [pc, #624]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d013      	beq.n	800338c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003364:	f7fe fd8e 	bl	8001e84 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800336c:	f7fe fd8a 	bl	8001e84 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e276      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800337e:	4b92      	ldr	r3, [pc, #584]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x2a8>
 800338a:	e014      	b.n	80033b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fd7a 	bl	8001e84 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fd76 	bl	8001e84 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e262      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033a6:	4b88      	ldr	r3, [pc, #544]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x2d0>
 80033b2:	e000      	b.n	80033b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d060      	beq.n	8003484 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_OscConfig+0x310>
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b0c      	cmp	r3, #12
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d116      	bne.n	8003402 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d4:	4b7c      	ldr	r3, [pc, #496]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_OscConfig+0x328>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e23f      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ec:	4b76      	ldr	r3, [pc, #472]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	4973      	ldr	r1, [pc, #460]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003400:	e040      	b.n	8003484 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d023      	beq.n	8003452 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340a:	4b6f      	ldr	r3, [pc, #444]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6e      	ldr	r2, [pc, #440]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fe fd35 	bl	8001e84 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341e:	f7fe fd31 	bl	8001e84 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e21d      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003430:	4b65      	ldr	r3, [pc, #404]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b62      	ldr	r3, [pc, #392]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	495f      	ldr	r1, [pc, #380]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
 8003450:	e018      	b.n	8003484 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a5c      	ldr	r2, [pc, #368]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fd11 	bl	8001e84 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003466:	f7fe fd0d 	bl	8001e84 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e1f9      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003478:	4b53      	ldr	r3, [pc, #332]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d03c      	beq.n	800350a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003498:	4b4b      	ldr	r3, [pc, #300]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349e:	4a4a      	ldr	r2, [pc, #296]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fe fcec 	bl	8001e84 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b0:	f7fe fce8 	bl	8001e84 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e1d4      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c2:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80034c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ef      	beq.n	80034b0 <HAL_RCC_OscConfig+0x3ec>
 80034d0:	e01b      	b.n	800350a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d2:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80034d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d8:	4a3b      	ldr	r2, [pc, #236]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e2:	f7fe fccf 	bl	8001e84 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ea:	f7fe fccb 	bl	8001e84 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e1b7      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034fc:	4b32      	ldr	r3, [pc, #200]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80034fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ef      	bne.n	80034ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 80a6 	beq.w	8003664 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003518:	2300      	movs	r3, #0
 800351a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800351e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b27      	ldr	r3, [pc, #156]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	4a26      	ldr	r2, [pc, #152]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	6593      	str	r3, [r2, #88]	; 0x58
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003540:	2301      	movs	r3, #1
 8003542:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003544:	4b21      	ldr	r3, [pc, #132]	; (80035cc <HAL_RCC_OscConfig+0x508>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354c:	2b00      	cmp	r3, #0
 800354e:	d118      	bne.n	8003582 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003550:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <HAL_RCC_OscConfig+0x508>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <HAL_RCC_OscConfig+0x508>)
 8003556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355c:	f7fe fc92 	bl	8001e84 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003564:	f7fe fc8e 	bl	8001e84 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e17a      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <HAL_RCC_OscConfig+0x508>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d108      	bne.n	800359c <HAL_RCC_OscConfig+0x4d8>
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	4a0d      	ldr	r2, [pc, #52]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800359a:	e029      	b.n	80035f0 <HAL_RCC_OscConfig+0x52c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b05      	cmp	r3, #5
 80035a2:	d115      	bne.n	80035d0 <HAL_RCC_OscConfig+0x50c>
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	4a03      	ldr	r2, [pc, #12]	; (80035c8 <HAL_RCC_OscConfig+0x504>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c4:	e014      	b.n	80035f0 <HAL_RCC_OscConfig+0x52c>
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40007000 	.word	0x40007000
 80035d0:	4b9c      	ldr	r3, [pc, #624]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	4a9b      	ldr	r2, [pc, #620]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035e0:	4b98      	ldr	r3, [pc, #608]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	4a97      	ldr	r2, [pc, #604]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80035e8:	f023 0304 	bic.w	r3, r3, #4
 80035ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d016      	beq.n	8003626 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fe fc44 	bl	8001e84 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fe fc40 	bl	8001e84 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e12a      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003616:	4b8b      	ldr	r3, [pc, #556]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ed      	beq.n	8003600 <HAL_RCC_OscConfig+0x53c>
 8003624:	e015      	b.n	8003652 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003626:	f7fe fc2d 	bl	8001e84 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fe fc29 	bl	8001e84 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e113      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003644:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1ed      	bne.n	800362e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003652:	7ffb      	ldrb	r3, [r7, #31]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d105      	bne.n	8003664 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003658:	4b7a      	ldr	r3, [pc, #488]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	4a79      	ldr	r2, [pc, #484]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 800365e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003662:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80fe 	beq.w	800386a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	2b02      	cmp	r3, #2
 8003674:	f040 80d0 	bne.w	8003818 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003678:	4b72      	ldr	r3, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f003 0203 	and.w	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	429a      	cmp	r2, r3
 800368a:	d130      	bne.n	80036ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	3b01      	subs	r3, #1
 8003698:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d127      	bne.n	80036ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d11f      	bne.n	80036ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036b8:	2a07      	cmp	r2, #7
 80036ba:	bf14      	ite	ne
 80036bc:	2201      	movne	r2, #1
 80036be:	2200      	moveq	r2, #0
 80036c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d113      	bne.n	80036ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	3b01      	subs	r3, #1
 80036d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	085b      	lsrs	r3, r3, #1
 80036e6:	3b01      	subs	r3, #1
 80036e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d06e      	beq.n	80037cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b0c      	cmp	r3, #12
 80036f2:	d069      	beq.n	80037c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036f4:	4b53      	ldr	r3, [pc, #332]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003700:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0ad      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003710:	4b4c      	ldr	r3, [pc, #304]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800371a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800371c:	f7fe fbb2 	bl	8001e84 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fbae 	bl	8001e84 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e09a      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003736:	4b43      	ldr	r3, [pc, #268]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003742:	4b40      	ldr	r3, [pc, #256]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	4b40      	ldr	r3, [pc, #256]	; (8003848 <HAL_RCC_OscConfig+0x784>)
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003752:	3a01      	subs	r2, #1
 8003754:	0112      	lsls	r2, r2, #4
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800375c:	0212      	lsls	r2, r2, #8
 800375e:	4311      	orrs	r1, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003764:	0852      	lsrs	r2, r2, #1
 8003766:	3a01      	subs	r2, #1
 8003768:	0552      	lsls	r2, r2, #21
 800376a:	4311      	orrs	r1, r2
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003770:	0852      	lsrs	r2, r2, #1
 8003772:	3a01      	subs	r2, #1
 8003774:	0652      	lsls	r2, r2, #25
 8003776:	4311      	orrs	r1, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800377c:	0912      	lsrs	r2, r2, #4
 800377e:	0452      	lsls	r2, r2, #17
 8003780:	430a      	orrs	r2, r1
 8003782:	4930      	ldr	r1, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003784:	4313      	orrs	r3, r2
 8003786:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003788:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a2d      	ldr	r2, [pc, #180]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 800378e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003792:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003794:	4b2b      	ldr	r3, [pc, #172]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037a0:	f7fe fb70 	bl	8001e84 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe fb6c 	bl	8001e84 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e058      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ba:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037c6:	e050      	b.n	800386a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e04f      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d148      	bne.n	800386a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80037de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a16      	ldr	r2, [pc, #88]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037f0:	f7fe fb48 	bl	8001e84 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe fb44 	bl	8001e84 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e030      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0x734>
 8003816:	e028      	b.n	800386a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b0c      	cmp	r3, #12
 800381c:	d023      	beq.n	8003866 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HAL_RCC_OscConfig+0x780>)
 8003824:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382a:	f7fe fb2b 	bl	8001e84 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003830:	e00c      	b.n	800384c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003832:	f7fe fb27 	bl	8001e84 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d905      	bls.n	800384c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e013      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
 8003844:	40021000 	.word	0x40021000
 8003848:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCC_OscConfig+0x7b0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ec      	bne.n	8003832 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003858:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCC_OscConfig+0x7b0>)
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	4905      	ldr	r1, [pc, #20]	; (8003874 <HAL_RCC_OscConfig+0x7b0>)
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_OscConfig+0x7b4>)
 8003860:	4013      	ands	r3, r2
 8003862:	60cb      	str	r3, [r1, #12]
 8003864:	e001      	b.n	800386a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	feeefffc 	.word	0xfeeefffc

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0e7      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b75      	ldr	r3, [pc, #468]	; (8003a68 <HAL_RCC_ClockConfig+0x1ec>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d910      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b72      	ldr	r3, [pc, #456]	; (8003a68 <HAL_RCC_ClockConfig+0x1ec>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 0207 	bic.w	r2, r3, #7
 80038a6:	4970      	ldr	r1, [pc, #448]	; (8003a68 <HAL_RCC_ClockConfig+0x1ec>)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b6e      	ldr	r3, [pc, #440]	; (8003a68 <HAL_RCC_ClockConfig+0x1ec>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0cf      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d010      	beq.n	80038ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	4b66      	ldr	r3, [pc, #408]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038d8:	429a      	cmp	r2, r3
 80038da:	d908      	bls.n	80038ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b63      	ldr	r3, [pc, #396]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4960      	ldr	r1, [pc, #384]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d04c      	beq.n	8003994 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003902:	4b5a      	ldr	r3, [pc, #360]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d121      	bne.n	8003952 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e0a6      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800391a:	4b54      	ldr	r3, [pc, #336]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d115      	bne.n	8003952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e09a      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d107      	bne.n	8003942 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003932:	4b4e      	ldr	r3, [pc, #312]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e08e      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003942:	4b4a      	ldr	r3, [pc, #296]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e086      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003952:	4b46      	ldr	r3, [pc, #280]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 0203 	bic.w	r2, r3, #3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4943      	ldr	r1, [pc, #268]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fe fa8e 	bl	8001e84 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396a:	e00a      	b.n	8003982 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396c:	f7fe fa8a 	bl	8001e84 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f241 3288 	movw	r2, #5000	; 0x1388
 800397a:	4293      	cmp	r3, r2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e06e      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	4b3a      	ldr	r3, [pc, #232]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 020c 	and.w	r2, r3, #12
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	429a      	cmp	r2, r3
 8003992:	d1eb      	bne.n	800396c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d010      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	4b31      	ldr	r3, [pc, #196]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d208      	bcs.n	80039c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	492b      	ldr	r1, [pc, #172]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c2:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCC_ClockConfig+0x1ec>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d210      	bcs.n	80039f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d0:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <HAL_RCC_ClockConfig+0x1ec>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 0207 	bic.w	r2, r3, #7
 80039d8:	4923      	ldr	r1, [pc, #140]	; (8003a68 <HAL_RCC_ClockConfig+0x1ec>)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e0:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_RCC_ClockConfig+0x1ec>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e036      	b.n	8003a60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fe:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	4918      	ldr	r1, [pc, #96]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1c:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4910      	ldr	r1, [pc, #64]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a30:	f000 f824 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <HAL_RCC_ClockConfig+0x1f0>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	490b      	ldr	r1, [pc, #44]	; (8003a70 <HAL_RCC_ClockConfig+0x1f4>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	4a09      	ldr	r2, [pc, #36]	; (8003a74 <HAL_RCC_ClockConfig+0x1f8>)
 8003a4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_RCC_ClockConfig+0x1fc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe f9c5 	bl	8001de4 <HAL_InitTick>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40022000 	.word	0x40022000
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	0800b2f8 	.word	0x0800b2f8
 8003a74:	20000000 	.word	0x20000000
 8003a78:	20000004 	.word	0x20000004

08003a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b089      	sub	sp, #36	; 0x24
 8003a80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	2300      	movs	r3, #0
 8003a88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8a:	4b3e      	ldr	r3, [pc, #248]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a94:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d121      	bne.n	8003aee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d11e      	bne.n	8003aee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ab0:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003abc:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e005      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003acc:	4b2d      	ldr	r3, [pc, #180]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10d      	bne.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d102      	bne.n	8003afa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	e004      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d101      	bne.n	8003b04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b00:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d134      	bne.n	8003b74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b0a:	4b1e      	ldr	r3, [pc, #120]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d003      	beq.n	8003b22 <HAL_RCC_GetSysClockFreq+0xa6>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d003      	beq.n	8003b28 <HAL_RCC_GetSysClockFreq+0xac>
 8003b20:	e005      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003b24:	617b      	str	r3, [r7, #20]
      break;
 8003b26:	e005      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b2a:	617b      	str	r3, [r7, #20]
      break;
 8003b2c:	e002      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	617b      	str	r3, [r7, #20]
      break;
 8003b32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	3301      	adds	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	fb03 f202 	mul.w	r2, r3, r2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	0e5b      	lsrs	r3, r3, #25
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	3301      	adds	r3, #1
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b74:	69bb      	ldr	r3, [r7, #24]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3724      	adds	r7, #36	; 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	0800b310 	.word	0x0800b310
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	007a1200 	.word	0x007a1200

08003b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b98:	4b03      	ldr	r3, [pc, #12]	; (8003ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20000000 	.word	0x20000000

08003bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bb0:	f7ff fff0 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0a1b      	lsrs	r3, r3, #8
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4904      	ldr	r1, [pc, #16]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	0800b308 	.word	0x0800b308

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bdc:	f7ff ffda 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0adb      	lsrs	r3, r3, #11
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	0800b308 	.word	0x0800b308

08003c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c10:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c1c:	f7ff f9ee 	bl	8002ffc <HAL_PWREx_GetVoltageRange>
 8003c20:	6178      	str	r0, [r7, #20]
 8003c22:	e014      	b.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c24:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c28:	4a24      	ldr	r2, [pc, #144]	; (8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c30:	4b22      	ldr	r3, [pc, #136]	; (8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c3c:	f7ff f9de 	bl	8002ffc <HAL_PWREx_GetVoltageRange>
 8003c40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c54:	d10b      	bne.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d919      	bls.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c60:	d902      	bls.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c62:	2302      	movs	r3, #2
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e013      	b.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c68:	2301      	movs	r3, #1
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	e010      	b.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b80      	cmp	r3, #128	; 0x80
 8003c72:	d902      	bls.n	8003c7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c74:	2303      	movs	r3, #3
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	e00a      	b.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d102      	bne.n	8003c86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c80:	2302      	movs	r3, #2
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	e004      	b.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b70      	cmp	r3, #112	; 0x70
 8003c8a:	d101      	bne.n	8003c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 0207 	bic.w	r2, r3, #7
 8003c98:	4909      	ldr	r1, [pc, #36]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d001      	beq.n	8003cb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40022000 	.word	0x40022000

08003cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ccc:	2300      	movs	r3, #0
 8003cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d041      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ce8:	d02a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003cea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cee:	d824      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cfa:	d81e      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d04:	d010      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d06:	e018      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d08:	4b86      	ldr	r3, [pc, #536]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a85      	ldr	r2, [pc, #532]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d12:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d14:	e015      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fabb 	bl	8004298 <RCCEx_PLLSAI1_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d26:	e00c      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3320      	adds	r3, #32
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fba6 	bl	8004480 <RCCEx_PLLSAI2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d38:	e003      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d3e:	e000      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d42:	7cfb      	ldrb	r3, [r7, #19]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d48:	4b76      	ldr	r3, [pc, #472]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d56:	4973      	ldr	r1, [pc, #460]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d5e:	e001      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	7cfb      	ldrb	r3, [r7, #19]
 8003d62:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d041      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d78:	d02a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d7e:	d824      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d84:	d008      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d8a:	d81e      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d94:	d010      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d96:	e018      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d98:	4b62      	ldr	r3, [pc, #392]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4a61      	ldr	r2, [pc, #388]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003da4:	e015      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 fa73 	bl	8004298 <RCCEx_PLLSAI1_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003db6:	e00c      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3320      	adds	r3, #32
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fb5e 	bl	8004480 <RCCEx_PLLSAI2_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003dc8:	e003      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	74fb      	strb	r3, [r7, #19]
      break;
 8003dce:	e000      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003dd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd2:	7cfb      	ldrb	r3, [r7, #19]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10b      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dd8:	4b52      	ldr	r3, [pc, #328]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de6:	494f      	ldr	r1, [pc, #316]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dee:	e001      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a0 	beq.w	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003e16:	2300      	movs	r3, #0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00d      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1c:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6593      	str	r3, [r2, #88]	; 0x58
 8003e28:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e34:	2301      	movs	r3, #1
 8003e36:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e38:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e44:	f7fe f81e 	bl	8001e84 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e4a:	e009      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4c:	f7fe f81a 	bl	8001e84 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d902      	bls.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e5e:	e005      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e60:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ef      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d15c      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01f      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d019      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e90:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e9c:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	4a20      	ldr	r2, [pc, #128]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eac:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ebc:	4a19      	ldr	r2, [pc, #100]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ece:	f7fd ffd9 	bl	8001e84 <HAL_GetTick>
 8003ed2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed4:	e00b      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7fd ffd5 	bl	8001e84 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d902      	bls.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	74fb      	strb	r3, [r7, #19]
            break;
 8003eec:	e006      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ec      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f12:	4904      	ldr	r1, [pc, #16]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f1a:	e009      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	74bb      	strb	r3, [r7, #18]
 8003f20:	e006      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f30:	7c7b      	ldrb	r3, [r7, #17]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b9e      	ldr	r3, [pc, #632]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	4a9d      	ldr	r2, [pc, #628]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f4e:	4b98      	ldr	r3, [pc, #608]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f023 0203 	bic.w	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5c:	4994      	ldr	r1, [pc, #592]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f70:	4b8f      	ldr	r3, [pc, #572]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f023 020c 	bic.w	r2, r3, #12
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	498c      	ldr	r1, [pc, #560]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f92:	4b87      	ldr	r3, [pc, #540]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	4983      	ldr	r1, [pc, #524]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fb4:	4b7e      	ldr	r3, [pc, #504]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	497b      	ldr	r1, [pc, #492]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fd6:	4b76      	ldr	r3, [pc, #472]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe4:	4972      	ldr	r1, [pc, #456]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff8:	4b6d      	ldr	r3, [pc, #436]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004006:	496a      	ldr	r1, [pc, #424]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401a:	4b65      	ldr	r3, [pc, #404]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004028:	4961      	ldr	r1, [pc, #388]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800403c:	4b5c      	ldr	r3, [pc, #368]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004042:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404a:	4959      	ldr	r1, [pc, #356]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800405e:	4b54      	ldr	r3, [pc, #336]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004064:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406c:	4950      	ldr	r1, [pc, #320]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004080:	4b4b      	ldr	r3, [pc, #300]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	4948      	ldr	r1, [pc, #288]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040a2:	4b43      	ldr	r3, [pc, #268]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	493f      	ldr	r1, [pc, #252]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d028      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c4:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d2:	4937      	ldr	r1, [pc, #220]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e2:	d106      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040e4:	4b32      	ldr	r3, [pc, #200]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4a31      	ldr	r2, [pc, #196]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ee:	60d3      	str	r3, [r2, #12]
 80040f0:	e011      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040fa:	d10c      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f8c8 	bl	8004298 <RCCEx_PLLSAI1_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004112:	7cfb      	ldrb	r3, [r7, #19]
 8004114:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d028      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	491f      	ldr	r1, [pc, #124]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004140:	d106      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004142:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	4a1a      	ldr	r2, [pc, #104]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800414c:	60d3      	str	r3, [r2, #12]
 800414e:	e011      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004158:	d10c      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f899 	bl	8004298 <RCCEx_PLLSAI1_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d02b      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418e:	4908      	ldr	r1, [pc, #32]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800419e:	d109      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a0:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a02      	ldr	r2, [pc, #8]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041aa:	60d3      	str	r3, [r2, #12]
 80041ac:	e014      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2101      	movs	r1, #1
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f867 	bl	8004298 <RCCEx_PLLSAI1_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02f      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f2:	4928      	ldr	r1, [pc, #160]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004202:	d10d      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	2102      	movs	r1, #2
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f844 	bl	8004298 <RCCEx_PLLSAI1_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d014      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800421a:	7cfb      	ldrb	r3, [r7, #19]
 800421c:	74bb      	strb	r3, [r7, #18]
 800421e:	e011      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004228:	d10c      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3320      	adds	r3, #32
 800422e:	2102      	movs	r1, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f000 f925 	bl	8004480 <RCCEx_PLLSAI2_Config>
 8004236:	4603      	mov	r3, r0
 8004238:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004250:	4b10      	ldr	r3, [pc, #64]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800425e:	490d      	ldr	r1, [pc, #52]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004282:	4904      	ldr	r1, [pc, #16]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800428a:	7cbb      	ldrb	r3, [r7, #18]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042a6:	4b75      	ldr	r3, [pc, #468]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d018      	beq.n	80042e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042b2:	4b72      	ldr	r3, [pc, #456]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0203 	and.w	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d10d      	bne.n	80042de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
       ||
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d009      	beq.n	80042de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042ca:	4b6c      	ldr	r3, [pc, #432]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
       ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d047      	beq.n	800436e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	73fb      	strb	r3, [r7, #15]
 80042e2:	e044      	b.n	800436e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d018      	beq.n	800431e <RCCEx_PLLSAI1_Config+0x86>
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d825      	bhi.n	800433c <RCCEx_PLLSAI1_Config+0xa4>
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d002      	beq.n	80042fa <RCCEx_PLLSAI1_Config+0x62>
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d009      	beq.n	800430c <RCCEx_PLLSAI1_Config+0x74>
 80042f8:	e020      	b.n	800433c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042fa:	4b60      	ldr	r3, [pc, #384]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11d      	bne.n	8004342 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800430a:	e01a      	b.n	8004342 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800430c:	4b5b      	ldr	r3, [pc, #364]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d116      	bne.n	8004346 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800431c:	e013      	b.n	8004346 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800431e:	4b57      	ldr	r3, [pc, #348]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10f      	bne.n	800434a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800432a:	4b54      	ldr	r3, [pc, #336]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800433a:	e006      	b.n	800434a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
      break;
 8004340:	e004      	b.n	800434c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004342:	bf00      	nop
 8004344:	e002      	b.n	800434c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004346:	bf00      	nop
 8004348:	e000      	b.n	800434c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800434a:	bf00      	nop
    }

    if(status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10d      	bne.n	800436e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6819      	ldr	r1, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	430b      	orrs	r3, r1
 8004368:	4944      	ldr	r1, [pc, #272]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d17d      	bne.n	8004470 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004374:	4b41      	ldr	r3, [pc, #260]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a40      	ldr	r2, [pc, #256]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 800437a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800437e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004380:	f7fd fd80 	bl	8001e84 <HAL_GetTick>
 8004384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004386:	e009      	b.n	800439c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004388:	f7fd fd7c 	bl	8001e84 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d902      	bls.n	800439c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	73fb      	strb	r3, [r7, #15]
        break;
 800439a:	e005      	b.n	80043a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800439c:	4b37      	ldr	r3, [pc, #220]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1ef      	bne.n	8004388 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d160      	bne.n	8004470 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d111      	bne.n	80043d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043b4:	4b31      	ldr	r3, [pc, #196]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6892      	ldr	r2, [r2, #8]
 80043c4:	0211      	lsls	r1, r2, #8
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68d2      	ldr	r2, [r2, #12]
 80043ca:	0912      	lsrs	r2, r2, #4
 80043cc:	0452      	lsls	r2, r2, #17
 80043ce:	430a      	orrs	r2, r1
 80043d0:	492a      	ldr	r1, [pc, #168]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	610b      	str	r3, [r1, #16]
 80043d6:	e027      	b.n	8004428 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d112      	bne.n	8004404 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043de:	4b27      	ldr	r3, [pc, #156]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6892      	ldr	r2, [r2, #8]
 80043ee:	0211      	lsls	r1, r2, #8
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6912      	ldr	r2, [r2, #16]
 80043f4:	0852      	lsrs	r2, r2, #1
 80043f6:	3a01      	subs	r2, #1
 80043f8:	0552      	lsls	r2, r2, #21
 80043fa:	430a      	orrs	r2, r1
 80043fc:	491f      	ldr	r1, [pc, #124]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	610b      	str	r3, [r1, #16]
 8004402:	e011      	b.n	8004428 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800440c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6892      	ldr	r2, [r2, #8]
 8004414:	0211      	lsls	r1, r2, #8
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6952      	ldr	r2, [r2, #20]
 800441a:	0852      	lsrs	r2, r2, #1
 800441c:	3a01      	subs	r2, #1
 800441e:	0652      	lsls	r2, r2, #25
 8004420:	430a      	orrs	r2, r1
 8004422:	4916      	ldr	r1, [pc, #88]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004428:	4b14      	ldr	r3, [pc, #80]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a13      	ldr	r2, [pc, #76]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 800442e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004432:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fd fd26 	bl	8001e84 <HAL_GetTick>
 8004438:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800443a:	e009      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800443c:	f7fd fd22 	bl	8001e84 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d902      	bls.n	8004450 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	73fb      	strb	r3, [r7, #15]
          break;
 800444e:	e005      	b.n	800445c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ef      	beq.n	800443c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	4904      	ldr	r1, [pc, #16]	; (800447c <RCCEx_PLLSAI1_Config+0x1e4>)
 800446c:	4313      	orrs	r3, r2
 800446e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000

08004480 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800448e:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d018      	beq.n	80044cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800449a:	4b67      	ldr	r3, [pc, #412]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0203 	and.w	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d10d      	bne.n	80044c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
       ||
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80044b2:	4b61      	ldr	r3, [pc, #388]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
       ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d047      	beq.n	8004556 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
 80044ca:	e044      	b.n	8004556 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d018      	beq.n	8004506 <RCCEx_PLLSAI2_Config+0x86>
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d825      	bhi.n	8004524 <RCCEx_PLLSAI2_Config+0xa4>
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d002      	beq.n	80044e2 <RCCEx_PLLSAI2_Config+0x62>
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d009      	beq.n	80044f4 <RCCEx_PLLSAI2_Config+0x74>
 80044e0:	e020      	b.n	8004524 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044e2:	4b55      	ldr	r3, [pc, #340]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d11d      	bne.n	800452a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f2:	e01a      	b.n	800452a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044f4:	4b50      	ldr	r3, [pc, #320]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d116      	bne.n	800452e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004504:	e013      	b.n	800452e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004506:	4b4c      	ldr	r3, [pc, #304]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004512:	4b49      	ldr	r3, [pc, #292]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004522:	e006      	b.n	8004532 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
      break;
 8004528:	e004      	b.n	8004534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800452a:	bf00      	nop
 800452c:	e002      	b.n	8004534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004532:	bf00      	nop
    }

    if(status == HAL_OK)
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10d      	bne.n	8004556 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800453a:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6819      	ldr	r1, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	3b01      	subs	r3, #1
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	430b      	orrs	r3, r1
 8004550:	4939      	ldr	r1, [pc, #228]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004552:	4313      	orrs	r3, r2
 8004554:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d167      	bne.n	800462c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800455c:	4b36      	ldr	r3, [pc, #216]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a35      	ldr	r2, [pc, #212]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004568:	f7fd fc8c 	bl	8001e84 <HAL_GetTick>
 800456c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800456e:	e009      	b.n	8004584 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004570:	f7fd fc88 	bl	8001e84 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d902      	bls.n	8004584 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	73fb      	strb	r3, [r7, #15]
        break;
 8004582:	e005      	b.n	8004590 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004584:	4b2c      	ldr	r3, [pc, #176]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ef      	bne.n	8004570 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d14a      	bne.n	800462c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d111      	bne.n	80045c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800459c:	4b26      	ldr	r3, [pc, #152]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6892      	ldr	r2, [r2, #8]
 80045ac:	0211      	lsls	r1, r2, #8
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68d2      	ldr	r2, [r2, #12]
 80045b2:	0912      	lsrs	r2, r2, #4
 80045b4:	0452      	lsls	r2, r2, #17
 80045b6:	430a      	orrs	r2, r1
 80045b8:	491f      	ldr	r1, [pc, #124]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	614b      	str	r3, [r1, #20]
 80045be:	e011      	b.n	80045e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045c0:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6892      	ldr	r2, [r2, #8]
 80045d0:	0211      	lsls	r1, r2, #8
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6912      	ldr	r2, [r2, #16]
 80045d6:	0852      	lsrs	r2, r2, #1
 80045d8:	3a01      	subs	r2, #1
 80045da:	0652      	lsls	r2, r2, #25
 80045dc:	430a      	orrs	r2, r1
 80045de:	4916      	ldr	r1, [pc, #88]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a13      	ldr	r2, [pc, #76]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fd fc48 	bl	8001e84 <HAL_GetTick>
 80045f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045f6:	e009      	b.n	800460c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045f8:	f7fd fc44 	bl	8001e84 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d902      	bls.n	800460c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	73fb      	strb	r3, [r7, #15]
          break;
 800460a:	e005      	b.n	8004618 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0ef      	beq.n	80045f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	4904      	ldr	r1, [pc, #16]	; (8004638 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40021000 	.word	0x40021000

0800463c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e049      	b.n	80046e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fd f9f8 	bl	8001a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3304      	adds	r3, #4
 8004678:	4619      	mov	r1, r3
 800467a:	4610      	mov	r0, r2
 800467c:	f000 f8fe 	bl	800487c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_TIM_ConfigClockSource+0x1c>
 8004702:	2302      	movs	r3, #2
 8004704:	e0b6      	b.n	8004874 <HAL_TIM_ConfigClockSource+0x18a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004724:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004728:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004730:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004742:	d03e      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0xd8>
 8004744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004748:	f200 8087 	bhi.w	800485a <HAL_TIM_ConfigClockSource+0x170>
 800474c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004750:	f000 8086 	beq.w	8004860 <HAL_TIM_ConfigClockSource+0x176>
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004758:	d87f      	bhi.n	800485a <HAL_TIM_ConfigClockSource+0x170>
 800475a:	2b70      	cmp	r3, #112	; 0x70
 800475c:	d01a      	beq.n	8004794 <HAL_TIM_ConfigClockSource+0xaa>
 800475e:	2b70      	cmp	r3, #112	; 0x70
 8004760:	d87b      	bhi.n	800485a <HAL_TIM_ConfigClockSource+0x170>
 8004762:	2b60      	cmp	r3, #96	; 0x60
 8004764:	d050      	beq.n	8004808 <HAL_TIM_ConfigClockSource+0x11e>
 8004766:	2b60      	cmp	r3, #96	; 0x60
 8004768:	d877      	bhi.n	800485a <HAL_TIM_ConfigClockSource+0x170>
 800476a:	2b50      	cmp	r3, #80	; 0x50
 800476c:	d03c      	beq.n	80047e8 <HAL_TIM_ConfigClockSource+0xfe>
 800476e:	2b50      	cmp	r3, #80	; 0x50
 8004770:	d873      	bhi.n	800485a <HAL_TIM_ConfigClockSource+0x170>
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d058      	beq.n	8004828 <HAL_TIM_ConfigClockSource+0x13e>
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d86f      	bhi.n	800485a <HAL_TIM_ConfigClockSource+0x170>
 800477a:	2b30      	cmp	r3, #48	; 0x30
 800477c:	d064      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x15e>
 800477e:	2b30      	cmp	r3, #48	; 0x30
 8004780:	d86b      	bhi.n	800485a <HAL_TIM_ConfigClockSource+0x170>
 8004782:	2b20      	cmp	r3, #32
 8004784:	d060      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x15e>
 8004786:	2b20      	cmp	r3, #32
 8004788:	d867      	bhi.n	800485a <HAL_TIM_ConfigClockSource+0x170>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d05c      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x15e>
 800478e:	2b10      	cmp	r3, #16
 8004790:	d05a      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0x15e>
 8004792:	e062      	b.n	800485a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6899      	ldr	r1, [r3, #8]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f000 f97e 	bl	8004aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]
      break;
 80047c0:	e04f      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6899      	ldr	r1, [r3, #8]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f000 f967 	bl	8004aa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e4:	609a      	str	r2, [r3, #8]
      break;
 80047e6:	e03c      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	461a      	mov	r2, r3
 80047f6:	f000 f8db 	bl	80049b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2150      	movs	r1, #80	; 0x50
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f934 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004806:	e02c      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6859      	ldr	r1, [r3, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	461a      	mov	r2, r3
 8004816:	f000 f8fa 	bl	8004a0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2160      	movs	r1, #96	; 0x60
 8004820:	4618      	mov	r0, r3
 8004822:	f000 f924 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004826:	e01c      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	461a      	mov	r2, r3
 8004836:	f000 f8bb 	bl	80049b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2140      	movs	r1, #64	; 0x40
 8004840:	4618      	mov	r0, r3
 8004842:	f000 f914 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004846:	e00c      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f000 f90b 	bl	8004a6e <TIM_ITRx_SetConfig>
      break;
 8004858:	e003      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
      break;
 800485e:	e000      	b.n	8004862 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004860:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a40      	ldr	r2, [pc, #256]	; (8004990 <TIM_Base_SetConfig+0x114>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d013      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489a:	d00f      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a3d      	ldr	r2, [pc, #244]	; (8004994 <TIM_Base_SetConfig+0x118>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00b      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a3c      	ldr	r2, [pc, #240]	; (8004998 <TIM_Base_SetConfig+0x11c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d007      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3b      	ldr	r2, [pc, #236]	; (800499c <TIM_Base_SetConfig+0x120>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3a      	ldr	r2, [pc, #232]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d108      	bne.n	80048ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <TIM_Base_SetConfig+0x114>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01f      	beq.n	8004916 <TIM_Base_SetConfig+0x9a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048dc:	d01b      	beq.n	8004916 <TIM_Base_SetConfig+0x9a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <TIM_Base_SetConfig+0x118>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d017      	beq.n	8004916 <TIM_Base_SetConfig+0x9a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <TIM_Base_SetConfig+0x11c>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <TIM_Base_SetConfig+0x9a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <TIM_Base_SetConfig+0x120>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00f      	beq.n	8004916 <TIM_Base_SetConfig+0x9a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a29      	ldr	r2, [pc, #164]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00b      	beq.n	8004916 <TIM_Base_SetConfig+0x9a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <TIM_Base_SetConfig+0x128>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d007      	beq.n	8004916 <TIM_Base_SetConfig+0x9a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <TIM_Base_SetConfig+0x12c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <TIM_Base_SetConfig+0x9a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a26      	ldr	r2, [pc, #152]	; (80049ac <TIM_Base_SetConfig+0x130>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d108      	bne.n	8004928 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a10      	ldr	r2, [pc, #64]	; (8004990 <TIM_Base_SetConfig+0x114>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00f      	beq.n	8004974 <TIM_Base_SetConfig+0xf8>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <TIM_Base_SetConfig+0x124>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00b      	beq.n	8004974 <TIM_Base_SetConfig+0xf8>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <TIM_Base_SetConfig+0x128>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d007      	beq.n	8004974 <TIM_Base_SetConfig+0xf8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a10      	ldr	r2, [pc, #64]	; (80049a8 <TIM_Base_SetConfig+0x12c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d003      	beq.n	8004974 <TIM_Base_SetConfig+0xf8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a0f      	ldr	r2, [pc, #60]	; (80049ac <TIM_Base_SetConfig+0x130>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d103      	bne.n	800497c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	615a      	str	r2, [r3, #20]
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40013400 	.word	0x40013400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40014400 	.word	0x40014400
 80049ac:	40014800 	.word	0x40014800

080049b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0201 	bic.w	r2, r3, #1
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 030a 	bic.w	r3, r3, #10
 80049ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b087      	sub	sp, #28
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	60f8      	str	r0, [r7, #12]
 8004a16:	60b9      	str	r1, [r7, #8]
 8004a18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0210 	bic.w	r2, r3, #16
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	031b      	lsls	r3, r3, #12
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f043 0307 	orr.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e068      	b.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2e      	ldr	r2, [pc, #184]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2d      	ldr	r2, [pc, #180]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d108      	bne.n	8004b42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1e      	ldr	r2, [pc, #120]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01d      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d018      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1b      	ldr	r2, [pc, #108]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a18      	ldr	r2, [pc, #96]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10c      	bne.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40013400 	.word	0x40013400
 8004be4:	40000400 	.word	0x40000400
 8004be8:	40000800 	.word	0x40000800
 8004bec:	40000c00 	.word	0x40000c00
 8004bf0:	40014000 	.word	0x40014000

08004bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e040      	b.n	8004c88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fc ff3c 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2224      	movs	r2, #36	; 0x24
 8004c20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f8c0 	bl	8004db8 <UART_SetConfig>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e022      	b.n	8004c88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fb6c 	bl	8005328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fbf3 	bl	800546c <UART_CheckIdleState>
 8004c86:	4603      	mov	r3, r0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	f040 8082 	bne.w	8004dae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_UART_Transmit+0x26>
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07a      	b.n	8004db0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Transmit+0x38>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e073      	b.n	8004db0 <HAL_UART_Transmit+0x120>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2221      	movs	r2, #33	; 0x21
 8004cdc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cde:	f7fd f8d1 	bl	8001e84 <HAL_GetTick>
 8004ce2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	88fa      	ldrh	r2, [r7, #6]
 8004ce8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d108      	bne.n	8004d10 <HAL_UART_Transmit+0x80>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	61bb      	str	r3, [r7, #24]
 8004d0e:	e003      	b.n	8004d18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d20:	e02d      	b.n	8004d7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2180      	movs	r1, #128	; 0x80
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 fbe6 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e039      	b.n	8004db0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	881a      	ldrh	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	3302      	adds	r3, #2
 8004d56:	61bb      	str	r3, [r7, #24]
 8004d58:	e008      	b.n	8004d6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	b292      	uxth	r2, r2
 8004d64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1cb      	bne.n	8004d22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2200      	movs	r2, #0
 8004d92:	2140      	movs	r1, #64	; 0x40
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fbb2 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e005      	b.n	8004db0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dbc:	b08a      	sub	sp, #40	; 0x28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	4ba4      	ldr	r3, [pc, #656]	; (8005078 <UART_SetConfig+0x2c0>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004df0:	430b      	orrs	r3, r1
 8004df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a99      	ldr	r2, [pc, #612]	; (800507c <UART_SetConfig+0x2c4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e20:	4313      	orrs	r3, r2
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e34:	430a      	orrs	r2, r1
 8004e36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a90      	ldr	r2, [pc, #576]	; (8005080 <UART_SetConfig+0x2c8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d126      	bne.n	8004e90 <UART_SetConfig+0xd8>
 8004e42:	4b90      	ldr	r3, [pc, #576]	; (8005084 <UART_SetConfig+0x2cc>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d81b      	bhi.n	8004e88 <UART_SetConfig+0xd0>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0xa0>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e69 	.word	0x08004e69
 8004e5c:	08004e79 	.word	0x08004e79
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004e81 	.word	0x08004e81
 8004e68:	2301      	movs	r3, #1
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e116      	b.n	800509e <UART_SetConfig+0x2e6>
 8004e70:	2302      	movs	r3, #2
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e76:	e112      	b.n	800509e <UART_SetConfig+0x2e6>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e7e:	e10e      	b.n	800509e <UART_SetConfig+0x2e6>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e86:	e10a      	b.n	800509e <UART_SetConfig+0x2e6>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e8e:	e106      	b.n	800509e <UART_SetConfig+0x2e6>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a7c      	ldr	r2, [pc, #496]	; (8005088 <UART_SetConfig+0x2d0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d138      	bne.n	8004f0c <UART_SetConfig+0x154>
 8004e9a:	4b7a      	ldr	r3, [pc, #488]	; (8005084 <UART_SetConfig+0x2cc>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea0:	f003 030c 	and.w	r3, r3, #12
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d82d      	bhi.n	8004f04 <UART_SetConfig+0x14c>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0xf8>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ee5 	.word	0x08004ee5
 8004eb4:	08004f05 	.word	0x08004f05
 8004eb8:	08004f05 	.word	0x08004f05
 8004ebc:	08004f05 	.word	0x08004f05
 8004ec0:	08004ef5 	.word	0x08004ef5
 8004ec4:	08004f05 	.word	0x08004f05
 8004ec8:	08004f05 	.word	0x08004f05
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004eed 	.word	0x08004eed
 8004ed4:	08004f05 	.word	0x08004f05
 8004ed8:	08004f05 	.word	0x08004f05
 8004edc:	08004f05 	.word	0x08004f05
 8004ee0:	08004efd 	.word	0x08004efd
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004eea:	e0d8      	b.n	800509e <UART_SetConfig+0x2e6>
 8004eec:	2302      	movs	r3, #2
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ef2:	e0d4      	b.n	800509e <UART_SetConfig+0x2e6>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004efa:	e0d0      	b.n	800509e <UART_SetConfig+0x2e6>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f02:	e0cc      	b.n	800509e <UART_SetConfig+0x2e6>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0a:	e0c8      	b.n	800509e <UART_SetConfig+0x2e6>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a5e      	ldr	r2, [pc, #376]	; (800508c <UART_SetConfig+0x2d4>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d125      	bne.n	8004f62 <UART_SetConfig+0x1aa>
 8004f16:	4b5b      	ldr	r3, [pc, #364]	; (8005084 <UART_SetConfig+0x2cc>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f20:	2b30      	cmp	r3, #48	; 0x30
 8004f22:	d016      	beq.n	8004f52 <UART_SetConfig+0x19a>
 8004f24:	2b30      	cmp	r3, #48	; 0x30
 8004f26:	d818      	bhi.n	8004f5a <UART_SetConfig+0x1a2>
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d00a      	beq.n	8004f42 <UART_SetConfig+0x18a>
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	d814      	bhi.n	8004f5a <UART_SetConfig+0x1a2>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <UART_SetConfig+0x182>
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d008      	beq.n	8004f4a <UART_SetConfig+0x192>
 8004f38:	e00f      	b.n	8004f5a <UART_SetConfig+0x1a2>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f40:	e0ad      	b.n	800509e <UART_SetConfig+0x2e6>
 8004f42:	2302      	movs	r3, #2
 8004f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f48:	e0a9      	b.n	800509e <UART_SetConfig+0x2e6>
 8004f4a:	2304      	movs	r3, #4
 8004f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f50:	e0a5      	b.n	800509e <UART_SetConfig+0x2e6>
 8004f52:	2308      	movs	r3, #8
 8004f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f58:	e0a1      	b.n	800509e <UART_SetConfig+0x2e6>
 8004f5a:	2310      	movs	r3, #16
 8004f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f60:	e09d      	b.n	800509e <UART_SetConfig+0x2e6>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a4a      	ldr	r2, [pc, #296]	; (8005090 <UART_SetConfig+0x2d8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d125      	bne.n	8004fb8 <UART_SetConfig+0x200>
 8004f6c:	4b45      	ldr	r3, [pc, #276]	; (8005084 <UART_SetConfig+0x2cc>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f76:	2bc0      	cmp	r3, #192	; 0xc0
 8004f78:	d016      	beq.n	8004fa8 <UART_SetConfig+0x1f0>
 8004f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f7c:	d818      	bhi.n	8004fb0 <UART_SetConfig+0x1f8>
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	d00a      	beq.n	8004f98 <UART_SetConfig+0x1e0>
 8004f82:	2b80      	cmp	r3, #128	; 0x80
 8004f84:	d814      	bhi.n	8004fb0 <UART_SetConfig+0x1f8>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <UART_SetConfig+0x1d8>
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d008      	beq.n	8004fa0 <UART_SetConfig+0x1e8>
 8004f8e:	e00f      	b.n	8004fb0 <UART_SetConfig+0x1f8>
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f96:	e082      	b.n	800509e <UART_SetConfig+0x2e6>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9e:	e07e      	b.n	800509e <UART_SetConfig+0x2e6>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa6:	e07a      	b.n	800509e <UART_SetConfig+0x2e6>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fae:	e076      	b.n	800509e <UART_SetConfig+0x2e6>
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fb6:	e072      	b.n	800509e <UART_SetConfig+0x2e6>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a35      	ldr	r2, [pc, #212]	; (8005094 <UART_SetConfig+0x2dc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d12a      	bne.n	8005018 <UART_SetConfig+0x260>
 8004fc2:	4b30      	ldr	r3, [pc, #192]	; (8005084 <UART_SetConfig+0x2cc>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd0:	d01a      	beq.n	8005008 <UART_SetConfig+0x250>
 8004fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fd6:	d81b      	bhi.n	8005010 <UART_SetConfig+0x258>
 8004fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fdc:	d00c      	beq.n	8004ff8 <UART_SetConfig+0x240>
 8004fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe2:	d815      	bhi.n	8005010 <UART_SetConfig+0x258>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <UART_SetConfig+0x238>
 8004fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fec:	d008      	beq.n	8005000 <UART_SetConfig+0x248>
 8004fee:	e00f      	b.n	8005010 <UART_SetConfig+0x258>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff6:	e052      	b.n	800509e <UART_SetConfig+0x2e6>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffe:	e04e      	b.n	800509e <UART_SetConfig+0x2e6>
 8005000:	2304      	movs	r3, #4
 8005002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005006:	e04a      	b.n	800509e <UART_SetConfig+0x2e6>
 8005008:	2308      	movs	r3, #8
 800500a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800500e:	e046      	b.n	800509e <UART_SetConfig+0x2e6>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005016:	e042      	b.n	800509e <UART_SetConfig+0x2e6>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a17      	ldr	r2, [pc, #92]	; (800507c <UART_SetConfig+0x2c4>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d13a      	bne.n	8005098 <UART_SetConfig+0x2e0>
 8005022:	4b18      	ldr	r3, [pc, #96]	; (8005084 <UART_SetConfig+0x2cc>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800502c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005030:	d01a      	beq.n	8005068 <UART_SetConfig+0x2b0>
 8005032:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005036:	d81b      	bhi.n	8005070 <UART_SetConfig+0x2b8>
 8005038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503c:	d00c      	beq.n	8005058 <UART_SetConfig+0x2a0>
 800503e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005042:	d815      	bhi.n	8005070 <UART_SetConfig+0x2b8>
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <UART_SetConfig+0x298>
 8005048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504c:	d008      	beq.n	8005060 <UART_SetConfig+0x2a8>
 800504e:	e00f      	b.n	8005070 <UART_SetConfig+0x2b8>
 8005050:	2300      	movs	r3, #0
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005056:	e022      	b.n	800509e <UART_SetConfig+0x2e6>
 8005058:	2302      	movs	r3, #2
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800505e:	e01e      	b.n	800509e <UART_SetConfig+0x2e6>
 8005060:	2304      	movs	r3, #4
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005066:	e01a      	b.n	800509e <UART_SetConfig+0x2e6>
 8005068:	2308      	movs	r3, #8
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800506e:	e016      	b.n	800509e <UART_SetConfig+0x2e6>
 8005070:	2310      	movs	r3, #16
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005076:	e012      	b.n	800509e <UART_SetConfig+0x2e6>
 8005078:	efff69f3 	.word	0xefff69f3
 800507c:	40008000 	.word	0x40008000
 8005080:	40013800 	.word	0x40013800
 8005084:	40021000 	.word	0x40021000
 8005088:	40004400 	.word	0x40004400
 800508c:	40004800 	.word	0x40004800
 8005090:	40004c00 	.word	0x40004c00
 8005094:	40005000 	.word	0x40005000
 8005098:	2310      	movs	r3, #16
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a9f      	ldr	r2, [pc, #636]	; (8005320 <UART_SetConfig+0x568>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d17a      	bne.n	800519e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d824      	bhi.n	80050fa <UART_SetConfig+0x342>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x300>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050dd 	.word	0x080050dd
 80050bc:	080050fb 	.word	0x080050fb
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050fb 	.word	0x080050fb
 80050c8:	080050eb 	.word	0x080050eb
 80050cc:	080050fb 	.word	0x080050fb
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	080050fb 	.word	0x080050fb
 80050d8:	080050f3 	.word	0x080050f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050dc:	f7fe fd66 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 80050e0:	61f8      	str	r0, [r7, #28]
        break;
 80050e2:	e010      	b.n	8005106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e4:	4b8f      	ldr	r3, [pc, #572]	; (8005324 <UART_SetConfig+0x56c>)
 80050e6:	61fb      	str	r3, [r7, #28]
        break;
 80050e8:	e00d      	b.n	8005106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ea:	f7fe fcc7 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 80050ee:	61f8      	str	r0, [r7, #28]
        break;
 80050f0:	e009      	b.n	8005106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f6:	61fb      	str	r3, [r7, #28]
        break;
 80050f8:	e005      	b.n	8005106 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005104:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80fb 	beq.w	8005304 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	429a      	cmp	r2, r3
 800511c:	d305      	bcc.n	800512a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	429a      	cmp	r2, r3
 8005128:	d903      	bls.n	8005132 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005130:	e0e8      	b.n	8005304 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	2200      	movs	r2, #0
 8005136:	461c      	mov	r4, r3
 8005138:	4615      	mov	r5, r2
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	022b      	lsls	r3, r5, #8
 8005144:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005148:	0222      	lsls	r2, r4, #8
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	6849      	ldr	r1, [r1, #4]
 800514e:	0849      	lsrs	r1, r1, #1
 8005150:	2000      	movs	r0, #0
 8005152:	4688      	mov	r8, r1
 8005154:	4681      	mov	r9, r0
 8005156:	eb12 0a08 	adds.w	sl, r2, r8
 800515a:	eb43 0b09 	adc.w	fp, r3, r9
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800516c:	4650      	mov	r0, sl
 800516e:	4659      	mov	r1, fp
 8005170:	f7fb fd8a 	bl	8000c88 <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4613      	mov	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005182:	d308      	bcc.n	8005196 <UART_SetConfig+0x3de>
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518a:	d204      	bcs.n	8005196 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	60da      	str	r2, [r3, #12]
 8005194:	e0b6      	b.n	8005304 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800519c:	e0b2      	b.n	8005304 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a6:	d15e      	bne.n	8005266 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d828      	bhi.n	8005202 <UART_SetConfig+0x44a>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <UART_SetConfig+0x400>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051dd 	.word	0x080051dd
 80051bc:	080051e5 	.word	0x080051e5
 80051c0:	080051ed 	.word	0x080051ed
 80051c4:	08005203 	.word	0x08005203
 80051c8:	080051f3 	.word	0x080051f3
 80051cc:	08005203 	.word	0x08005203
 80051d0:	08005203 	.word	0x08005203
 80051d4:	08005203 	.word	0x08005203
 80051d8:	080051fb 	.word	0x080051fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051dc:	f7fe fce6 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 80051e0:	61f8      	str	r0, [r7, #28]
        break;
 80051e2:	e014      	b.n	800520e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051e4:	f7fe fcf8 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 80051e8:	61f8      	str	r0, [r7, #28]
        break;
 80051ea:	e010      	b.n	800520e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051ec:	4b4d      	ldr	r3, [pc, #308]	; (8005324 <UART_SetConfig+0x56c>)
 80051ee:	61fb      	str	r3, [r7, #28]
        break;
 80051f0:	e00d      	b.n	800520e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051f2:	f7fe fc43 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 80051f6:	61f8      	str	r0, [r7, #28]
        break;
 80051f8:	e009      	b.n	800520e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fe:	61fb      	str	r3, [r7, #28]
        break;
 8005200:	e005      	b.n	800520e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800520c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d077      	beq.n	8005304 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	005a      	lsls	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	441a      	add	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b0f      	cmp	r3, #15
 800522e:	d916      	bls.n	800525e <UART_SetConfig+0x4a6>
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005236:	d212      	bcs.n	800525e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f023 030f 	bic.w	r3, r3, #15
 8005240:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	b29b      	uxth	r3, r3
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	b29a      	uxth	r2, r3
 800524e:	8afb      	ldrh	r3, [r7, #22]
 8005250:	4313      	orrs	r3, r2
 8005252:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	8afa      	ldrh	r2, [r7, #22]
 800525a:	60da      	str	r2, [r3, #12]
 800525c:	e052      	b.n	8005304 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005264:	e04e      	b.n	8005304 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800526a:	2b08      	cmp	r3, #8
 800526c:	d827      	bhi.n	80052be <UART_SetConfig+0x506>
 800526e:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x4bc>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	08005299 	.word	0x08005299
 8005278:	080052a1 	.word	0x080052a1
 800527c:	080052a9 	.word	0x080052a9
 8005280:	080052bf 	.word	0x080052bf
 8005284:	080052af 	.word	0x080052af
 8005288:	080052bf 	.word	0x080052bf
 800528c:	080052bf 	.word	0x080052bf
 8005290:	080052bf 	.word	0x080052bf
 8005294:	080052b7 	.word	0x080052b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fe fc88 	bl	8003bac <HAL_RCC_GetPCLK1Freq>
 800529c:	61f8      	str	r0, [r7, #28]
        break;
 800529e:	e014      	b.n	80052ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7fe fc9a 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 80052a4:	61f8      	str	r0, [r7, #28]
        break;
 80052a6:	e010      	b.n	80052ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a8:	4b1e      	ldr	r3, [pc, #120]	; (8005324 <UART_SetConfig+0x56c>)
 80052aa:	61fb      	str	r3, [r7, #28]
        break;
 80052ac:	e00d      	b.n	80052ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ae:	f7fe fbe5 	bl	8003a7c <HAL_RCC_GetSysClockFreq>
 80052b2:	61f8      	str	r0, [r7, #28]
        break;
 80052b4:	e009      	b.n	80052ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ba:	61fb      	str	r3, [r7, #28]
        break;
 80052bc:	e005      	b.n	80052ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052c8:	bf00      	nop
    }

    if (pclk != 0U)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d019      	beq.n	8005304 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	085a      	lsrs	r2, r3, #1
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	441a      	add	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b0f      	cmp	r3, #15
 80052e8:	d909      	bls.n	80052fe <UART_SetConfig+0x546>
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f0:	d205      	bcs.n	80052fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60da      	str	r2, [r3, #12]
 80052fc:	e002      	b.n	8005304 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005310:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	; 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531e:	bf00      	nop
 8005320:	40008000 	.word	0x40008000
 8005324:	00f42400 	.word	0x00f42400

08005328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01a      	beq.n	800543e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005426:	d10a      	bne.n	800543e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af02      	add	r7, sp, #8
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800547c:	f7fc fd02 	bl	8001e84 <HAL_GetTick>
 8005480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b08      	cmp	r3, #8
 800548e:	d10e      	bne.n	80054ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005494:	9300      	str	r3, [sp, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f82d 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e023      	b.n	80054f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d10e      	bne.n	80054da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f817 	bl	80054fe <UART_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e00d      	b.n	80054f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b09c      	sub	sp, #112	; 0x70
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550e:	e0a5      	b.n	800565c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	f000 80a1 	beq.w	800565c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551a:	f7fc fcb3 	bl	8001e84 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005526:	429a      	cmp	r2, r3
 8005528:	d302      	bcc.n	8005530 <UART_WaitOnFlagUntilTimeout+0x32>
 800552a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800552c:	2b00      	cmp	r3, #0
 800552e:	d13e      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800553e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005540:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005544:	667b      	str	r3, [r7, #100]	; 0x64
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800554e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005550:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005554:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800555c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e6      	bne.n	8005530 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	663b      	str	r3, [r7, #96]	; 0x60
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005582:	64ba      	str	r2, [r7, #72]	; 0x48
 8005584:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e067      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d04f      	beq.n	800565c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ca:	d147      	bne.n	800565c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
 80055f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e6      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	613b      	str	r3, [r7, #16]
   return(result);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005628:	623a      	str	r2, [r7, #32]
 800562a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	69f9      	ldr	r1, [r7, #28]
 800562e:	6a3a      	ldr	r2, [r7, #32]
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	61bb      	str	r3, [r7, #24]
   return(result);
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2220      	movs	r2, #32
 8005646:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e010      	b.n	800567e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	4013      	ands	r3, r2
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	429a      	cmp	r2, r3
 8005678:	f43f af4a 	beq.w	8005510 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3770      	adds	r7, #112	; 0x70
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
	...

08005688 <__errno>:
 8005688:	4b01      	ldr	r3, [pc, #4]	; (8005690 <__errno+0x8>)
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	2000000c 	.word	0x2000000c

08005694 <__libc_init_array>:
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	4d0d      	ldr	r5, [pc, #52]	; (80056cc <__libc_init_array+0x38>)
 8005698:	4c0d      	ldr	r4, [pc, #52]	; (80056d0 <__libc_init_array+0x3c>)
 800569a:	1b64      	subs	r4, r4, r5
 800569c:	10a4      	asrs	r4, r4, #2
 800569e:	2600      	movs	r6, #0
 80056a0:	42a6      	cmp	r6, r4
 80056a2:	d109      	bne.n	80056b8 <__libc_init_array+0x24>
 80056a4:	4d0b      	ldr	r5, [pc, #44]	; (80056d4 <__libc_init_array+0x40>)
 80056a6:	4c0c      	ldr	r4, [pc, #48]	; (80056d8 <__libc_init_array+0x44>)
 80056a8:	f005 fd7c 	bl	800b1a4 <_init>
 80056ac:	1b64      	subs	r4, r4, r5
 80056ae:	10a4      	asrs	r4, r4, #2
 80056b0:	2600      	movs	r6, #0
 80056b2:	42a6      	cmp	r6, r4
 80056b4:	d105      	bne.n	80056c2 <__libc_init_array+0x2e>
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056bc:	4798      	blx	r3
 80056be:	3601      	adds	r6, #1
 80056c0:	e7ee      	b.n	80056a0 <__libc_init_array+0xc>
 80056c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c6:	4798      	blx	r3
 80056c8:	3601      	adds	r6, #1
 80056ca:	e7f2      	b.n	80056b2 <__libc_init_array+0x1e>
 80056cc:	0800b860 	.word	0x0800b860
 80056d0:	0800b860 	.word	0x0800b860
 80056d4:	0800b860 	.word	0x0800b860
 80056d8:	0800b864 	.word	0x0800b864

080056dc <memset>:
 80056dc:	4402      	add	r2, r0
 80056de:	4603      	mov	r3, r0
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d100      	bne.n	80056e6 <memset+0xa>
 80056e4:	4770      	bx	lr
 80056e6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ea:	e7f9      	b.n	80056e0 <memset+0x4>

080056ec <__cvt>:
 80056ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	ec55 4b10 	vmov	r4, r5, d0
 80056f4:	2d00      	cmp	r5, #0
 80056f6:	460e      	mov	r6, r1
 80056f8:	4619      	mov	r1, r3
 80056fa:	462b      	mov	r3, r5
 80056fc:	bfbb      	ittet	lt
 80056fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005702:	461d      	movlt	r5, r3
 8005704:	2300      	movge	r3, #0
 8005706:	232d      	movlt	r3, #45	; 0x2d
 8005708:	700b      	strb	r3, [r1, #0]
 800570a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800570c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005710:	4691      	mov	r9, r2
 8005712:	f023 0820 	bic.w	r8, r3, #32
 8005716:	bfbc      	itt	lt
 8005718:	4622      	movlt	r2, r4
 800571a:	4614      	movlt	r4, r2
 800571c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005720:	d005      	beq.n	800572e <__cvt+0x42>
 8005722:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005726:	d100      	bne.n	800572a <__cvt+0x3e>
 8005728:	3601      	adds	r6, #1
 800572a:	2102      	movs	r1, #2
 800572c:	e000      	b.n	8005730 <__cvt+0x44>
 800572e:	2103      	movs	r1, #3
 8005730:	ab03      	add	r3, sp, #12
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	ab02      	add	r3, sp, #8
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	ec45 4b10 	vmov	d0, r4, r5
 800573c:	4653      	mov	r3, sl
 800573e:	4632      	mov	r2, r6
 8005740:	f001 fdae 	bl	80072a0 <_dtoa_r>
 8005744:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005748:	4607      	mov	r7, r0
 800574a:	d102      	bne.n	8005752 <__cvt+0x66>
 800574c:	f019 0f01 	tst.w	r9, #1
 8005750:	d022      	beq.n	8005798 <__cvt+0xac>
 8005752:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005756:	eb07 0906 	add.w	r9, r7, r6
 800575a:	d110      	bne.n	800577e <__cvt+0x92>
 800575c:	783b      	ldrb	r3, [r7, #0]
 800575e:	2b30      	cmp	r3, #48	; 0x30
 8005760:	d10a      	bne.n	8005778 <__cvt+0x8c>
 8005762:	2200      	movs	r2, #0
 8005764:	2300      	movs	r3, #0
 8005766:	4620      	mov	r0, r4
 8005768:	4629      	mov	r1, r5
 800576a:	f7fb f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800576e:	b918      	cbnz	r0, 8005778 <__cvt+0x8c>
 8005770:	f1c6 0601 	rsb	r6, r6, #1
 8005774:	f8ca 6000 	str.w	r6, [sl]
 8005778:	f8da 3000 	ldr.w	r3, [sl]
 800577c:	4499      	add	r9, r3
 800577e:	2200      	movs	r2, #0
 8005780:	2300      	movs	r3, #0
 8005782:	4620      	mov	r0, r4
 8005784:	4629      	mov	r1, r5
 8005786:	f7fb f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800578a:	b108      	cbz	r0, 8005790 <__cvt+0xa4>
 800578c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005790:	2230      	movs	r2, #48	; 0x30
 8005792:	9b03      	ldr	r3, [sp, #12]
 8005794:	454b      	cmp	r3, r9
 8005796:	d307      	bcc.n	80057a8 <__cvt+0xbc>
 8005798:	9b03      	ldr	r3, [sp, #12]
 800579a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800579c:	1bdb      	subs	r3, r3, r7
 800579e:	4638      	mov	r0, r7
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	b004      	add	sp, #16
 80057a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a8:	1c59      	adds	r1, r3, #1
 80057aa:	9103      	str	r1, [sp, #12]
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	e7f0      	b.n	8005792 <__cvt+0xa6>

080057b0 <__exponent>:
 80057b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057b2:	4603      	mov	r3, r0
 80057b4:	2900      	cmp	r1, #0
 80057b6:	bfb8      	it	lt
 80057b8:	4249      	neglt	r1, r1
 80057ba:	f803 2b02 	strb.w	r2, [r3], #2
 80057be:	bfb4      	ite	lt
 80057c0:	222d      	movlt	r2, #45	; 0x2d
 80057c2:	222b      	movge	r2, #43	; 0x2b
 80057c4:	2909      	cmp	r1, #9
 80057c6:	7042      	strb	r2, [r0, #1]
 80057c8:	dd2a      	ble.n	8005820 <__exponent+0x70>
 80057ca:	f10d 0407 	add.w	r4, sp, #7
 80057ce:	46a4      	mov	ip, r4
 80057d0:	270a      	movs	r7, #10
 80057d2:	46a6      	mov	lr, r4
 80057d4:	460a      	mov	r2, r1
 80057d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80057da:	fb07 1516 	mls	r5, r7, r6, r1
 80057de:	3530      	adds	r5, #48	; 0x30
 80057e0:	2a63      	cmp	r2, #99	; 0x63
 80057e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80057e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057ea:	4631      	mov	r1, r6
 80057ec:	dcf1      	bgt.n	80057d2 <__exponent+0x22>
 80057ee:	3130      	adds	r1, #48	; 0x30
 80057f0:	f1ae 0502 	sub.w	r5, lr, #2
 80057f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057f8:	1c44      	adds	r4, r0, #1
 80057fa:	4629      	mov	r1, r5
 80057fc:	4561      	cmp	r1, ip
 80057fe:	d30a      	bcc.n	8005816 <__exponent+0x66>
 8005800:	f10d 0209 	add.w	r2, sp, #9
 8005804:	eba2 020e 	sub.w	r2, r2, lr
 8005808:	4565      	cmp	r5, ip
 800580a:	bf88      	it	hi
 800580c:	2200      	movhi	r2, #0
 800580e:	4413      	add	r3, r2
 8005810:	1a18      	subs	r0, r3, r0
 8005812:	b003      	add	sp, #12
 8005814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800581a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800581e:	e7ed      	b.n	80057fc <__exponent+0x4c>
 8005820:	2330      	movs	r3, #48	; 0x30
 8005822:	3130      	adds	r1, #48	; 0x30
 8005824:	7083      	strb	r3, [r0, #2]
 8005826:	70c1      	strb	r1, [r0, #3]
 8005828:	1d03      	adds	r3, r0, #4
 800582a:	e7f1      	b.n	8005810 <__exponent+0x60>

0800582c <_printf_float>:
 800582c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005830:	ed2d 8b02 	vpush	{d8}
 8005834:	b08d      	sub	sp, #52	; 0x34
 8005836:	460c      	mov	r4, r1
 8005838:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800583c:	4616      	mov	r6, r2
 800583e:	461f      	mov	r7, r3
 8005840:	4605      	mov	r5, r0
 8005842:	f002 fe8b 	bl	800855c <_localeconv_r>
 8005846:	f8d0 a000 	ldr.w	sl, [r0]
 800584a:	4650      	mov	r0, sl
 800584c:	f7fa fcc0 	bl	80001d0 <strlen>
 8005850:	2300      	movs	r3, #0
 8005852:	930a      	str	r3, [sp, #40]	; 0x28
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	9305      	str	r3, [sp, #20]
 8005858:	f8d8 3000 	ldr.w	r3, [r8]
 800585c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005860:	3307      	adds	r3, #7
 8005862:	f023 0307 	bic.w	r3, r3, #7
 8005866:	f103 0208 	add.w	r2, r3, #8
 800586a:	f8c8 2000 	str.w	r2, [r8]
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005876:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800587a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800587e:	9307      	str	r3, [sp, #28]
 8005880:	f8cd 8018 	str.w	r8, [sp, #24]
 8005884:	ee08 0a10 	vmov	s16, r0
 8005888:	4b9f      	ldr	r3, [pc, #636]	; (8005b08 <_printf_float+0x2dc>)
 800588a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800588e:	f04f 32ff 	mov.w	r2, #4294967295
 8005892:	f7fb f94b 	bl	8000b2c <__aeabi_dcmpun>
 8005896:	bb88      	cbnz	r0, 80058fc <_printf_float+0xd0>
 8005898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800589c:	4b9a      	ldr	r3, [pc, #616]	; (8005b08 <_printf_float+0x2dc>)
 800589e:	f04f 32ff 	mov.w	r2, #4294967295
 80058a2:	f7fb f925 	bl	8000af0 <__aeabi_dcmple>
 80058a6:	bb48      	cbnz	r0, 80058fc <_printf_float+0xd0>
 80058a8:	2200      	movs	r2, #0
 80058aa:	2300      	movs	r3, #0
 80058ac:	4640      	mov	r0, r8
 80058ae:	4649      	mov	r1, r9
 80058b0:	f7fb f914 	bl	8000adc <__aeabi_dcmplt>
 80058b4:	b110      	cbz	r0, 80058bc <_printf_float+0x90>
 80058b6:	232d      	movs	r3, #45	; 0x2d
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	4b93      	ldr	r3, [pc, #588]	; (8005b0c <_printf_float+0x2e0>)
 80058be:	4894      	ldr	r0, [pc, #592]	; (8005b10 <_printf_float+0x2e4>)
 80058c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80058c4:	bf94      	ite	ls
 80058c6:	4698      	movls	r8, r3
 80058c8:	4680      	movhi	r8, r0
 80058ca:	2303      	movs	r3, #3
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	9b05      	ldr	r3, [sp, #20]
 80058d0:	f023 0204 	bic.w	r2, r3, #4
 80058d4:	6022      	str	r2, [r4, #0]
 80058d6:	f04f 0900 	mov.w	r9, #0
 80058da:	9700      	str	r7, [sp, #0]
 80058dc:	4633      	mov	r3, r6
 80058de:	aa0b      	add	r2, sp, #44	; 0x2c
 80058e0:	4621      	mov	r1, r4
 80058e2:	4628      	mov	r0, r5
 80058e4:	f000 f9d8 	bl	8005c98 <_printf_common>
 80058e8:	3001      	adds	r0, #1
 80058ea:	f040 8090 	bne.w	8005a0e <_printf_float+0x1e2>
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	b00d      	add	sp, #52	; 0x34
 80058f4:	ecbd 8b02 	vpop	{d8}
 80058f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058fc:	4642      	mov	r2, r8
 80058fe:	464b      	mov	r3, r9
 8005900:	4640      	mov	r0, r8
 8005902:	4649      	mov	r1, r9
 8005904:	f7fb f912 	bl	8000b2c <__aeabi_dcmpun>
 8005908:	b140      	cbz	r0, 800591c <_printf_float+0xf0>
 800590a:	464b      	mov	r3, r9
 800590c:	2b00      	cmp	r3, #0
 800590e:	bfbc      	itt	lt
 8005910:	232d      	movlt	r3, #45	; 0x2d
 8005912:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005916:	487f      	ldr	r0, [pc, #508]	; (8005b14 <_printf_float+0x2e8>)
 8005918:	4b7f      	ldr	r3, [pc, #508]	; (8005b18 <_printf_float+0x2ec>)
 800591a:	e7d1      	b.n	80058c0 <_printf_float+0x94>
 800591c:	6863      	ldr	r3, [r4, #4]
 800591e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005922:	9206      	str	r2, [sp, #24]
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	d13f      	bne.n	80059a8 <_printf_float+0x17c>
 8005928:	2306      	movs	r3, #6
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	9b05      	ldr	r3, [sp, #20]
 800592e:	6861      	ldr	r1, [r4, #4]
 8005930:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005934:	2300      	movs	r3, #0
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	ab0a      	add	r3, sp, #40	; 0x28
 800593a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800593e:	ab09      	add	r3, sp, #36	; 0x24
 8005940:	ec49 8b10 	vmov	d0, r8, r9
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	6022      	str	r2, [r4, #0]
 8005948:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800594c:	4628      	mov	r0, r5
 800594e:	f7ff fecd 	bl	80056ec <__cvt>
 8005952:	9b06      	ldr	r3, [sp, #24]
 8005954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005956:	2b47      	cmp	r3, #71	; 0x47
 8005958:	4680      	mov	r8, r0
 800595a:	d108      	bne.n	800596e <_printf_float+0x142>
 800595c:	1cc8      	adds	r0, r1, #3
 800595e:	db02      	blt.n	8005966 <_printf_float+0x13a>
 8005960:	6863      	ldr	r3, [r4, #4]
 8005962:	4299      	cmp	r1, r3
 8005964:	dd41      	ble.n	80059ea <_printf_float+0x1be>
 8005966:	f1ab 0b02 	sub.w	fp, fp, #2
 800596a:	fa5f fb8b 	uxtb.w	fp, fp
 800596e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005972:	d820      	bhi.n	80059b6 <_printf_float+0x18a>
 8005974:	3901      	subs	r1, #1
 8005976:	465a      	mov	r2, fp
 8005978:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800597c:	9109      	str	r1, [sp, #36]	; 0x24
 800597e:	f7ff ff17 	bl	80057b0 <__exponent>
 8005982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005984:	1813      	adds	r3, r2, r0
 8005986:	2a01      	cmp	r2, #1
 8005988:	4681      	mov	r9, r0
 800598a:	6123      	str	r3, [r4, #16]
 800598c:	dc02      	bgt.n	8005994 <_printf_float+0x168>
 800598e:	6822      	ldr	r2, [r4, #0]
 8005990:	07d2      	lsls	r2, r2, #31
 8005992:	d501      	bpl.n	8005998 <_printf_float+0x16c>
 8005994:	3301      	adds	r3, #1
 8005996:	6123      	str	r3, [r4, #16]
 8005998:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800599c:	2b00      	cmp	r3, #0
 800599e:	d09c      	beq.n	80058da <_printf_float+0xae>
 80059a0:	232d      	movs	r3, #45	; 0x2d
 80059a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a6:	e798      	b.n	80058da <_printf_float+0xae>
 80059a8:	9a06      	ldr	r2, [sp, #24]
 80059aa:	2a47      	cmp	r2, #71	; 0x47
 80059ac:	d1be      	bne.n	800592c <_printf_float+0x100>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1bc      	bne.n	800592c <_printf_float+0x100>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e7b9      	b.n	800592a <_printf_float+0xfe>
 80059b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80059ba:	d118      	bne.n	80059ee <_printf_float+0x1c2>
 80059bc:	2900      	cmp	r1, #0
 80059be:	6863      	ldr	r3, [r4, #4]
 80059c0:	dd0b      	ble.n	80059da <_printf_float+0x1ae>
 80059c2:	6121      	str	r1, [r4, #16]
 80059c4:	b913      	cbnz	r3, 80059cc <_printf_float+0x1a0>
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	07d0      	lsls	r0, r2, #31
 80059ca:	d502      	bpl.n	80059d2 <_printf_float+0x1a6>
 80059cc:	3301      	adds	r3, #1
 80059ce:	440b      	add	r3, r1
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80059d4:	f04f 0900 	mov.w	r9, #0
 80059d8:	e7de      	b.n	8005998 <_printf_float+0x16c>
 80059da:	b913      	cbnz	r3, 80059e2 <_printf_float+0x1b6>
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	07d2      	lsls	r2, r2, #31
 80059e0:	d501      	bpl.n	80059e6 <_printf_float+0x1ba>
 80059e2:	3302      	adds	r3, #2
 80059e4:	e7f4      	b.n	80059d0 <_printf_float+0x1a4>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e7f2      	b.n	80059d0 <_printf_float+0x1a4>
 80059ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80059ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f0:	4299      	cmp	r1, r3
 80059f2:	db05      	blt.n	8005a00 <_printf_float+0x1d4>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	6121      	str	r1, [r4, #16]
 80059f8:	07d8      	lsls	r0, r3, #31
 80059fa:	d5ea      	bpl.n	80059d2 <_printf_float+0x1a6>
 80059fc:	1c4b      	adds	r3, r1, #1
 80059fe:	e7e7      	b.n	80059d0 <_printf_float+0x1a4>
 8005a00:	2900      	cmp	r1, #0
 8005a02:	bfd4      	ite	le
 8005a04:	f1c1 0202 	rsble	r2, r1, #2
 8005a08:	2201      	movgt	r2, #1
 8005a0a:	4413      	add	r3, r2
 8005a0c:	e7e0      	b.n	80059d0 <_printf_float+0x1a4>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	055a      	lsls	r2, r3, #21
 8005a12:	d407      	bmi.n	8005a24 <_printf_float+0x1f8>
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	4642      	mov	r2, r8
 8005a18:	4631      	mov	r1, r6
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	47b8      	blx	r7
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d12c      	bne.n	8005a7c <_printf_float+0x250>
 8005a22:	e764      	b.n	80058ee <_printf_float+0xc2>
 8005a24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a28:	f240 80e0 	bls.w	8005bec <_printf_float+0x3c0>
 8005a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a30:	2200      	movs	r2, #0
 8005a32:	2300      	movs	r3, #0
 8005a34:	f7fb f848 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d034      	beq.n	8005aa6 <_printf_float+0x27a>
 8005a3c:	4a37      	ldr	r2, [pc, #220]	; (8005b1c <_printf_float+0x2f0>)
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	f43f af51 	beq.w	80058ee <_printf_float+0xc2>
 8005a4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a50:	429a      	cmp	r2, r3
 8005a52:	db02      	blt.n	8005a5a <_printf_float+0x22e>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	07d8      	lsls	r0, r3, #31
 8005a58:	d510      	bpl.n	8005a7c <_printf_float+0x250>
 8005a5a:	ee18 3a10 	vmov	r3, s16
 8005a5e:	4652      	mov	r2, sl
 8005a60:	4631      	mov	r1, r6
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	f43f af41 	beq.w	80058ee <_printf_float+0xc2>
 8005a6c:	f04f 0800 	mov.w	r8, #0
 8005a70:	f104 091a 	add.w	r9, r4, #26
 8005a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a76:	3b01      	subs	r3, #1
 8005a78:	4543      	cmp	r3, r8
 8005a7a:	dc09      	bgt.n	8005a90 <_printf_float+0x264>
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	079b      	lsls	r3, r3, #30
 8005a80:	f100 8105 	bmi.w	8005c8e <_printf_float+0x462>
 8005a84:	68e0      	ldr	r0, [r4, #12]
 8005a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a88:	4298      	cmp	r0, r3
 8005a8a:	bfb8      	it	lt
 8005a8c:	4618      	movlt	r0, r3
 8005a8e:	e730      	b.n	80058f2 <_printf_float+0xc6>
 8005a90:	2301      	movs	r3, #1
 8005a92:	464a      	mov	r2, r9
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	47b8      	blx	r7
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	f43f af27 	beq.w	80058ee <_printf_float+0xc2>
 8005aa0:	f108 0801 	add.w	r8, r8, #1
 8005aa4:	e7e6      	b.n	8005a74 <_printf_float+0x248>
 8005aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dc39      	bgt.n	8005b20 <_printf_float+0x2f4>
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <_printf_float+0x2f0>)
 8005aae:	2301      	movs	r3, #1
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f af19 	beq.w	80058ee <_printf_float+0xc2>
 8005abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	d102      	bne.n	8005aca <_printf_float+0x29e>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	07d9      	lsls	r1, r3, #31
 8005ac8:	d5d8      	bpl.n	8005a7c <_printf_float+0x250>
 8005aca:	ee18 3a10 	vmov	r3, s16
 8005ace:	4652      	mov	r2, sl
 8005ad0:	4631      	mov	r1, r6
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b8      	blx	r7
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f43f af09 	beq.w	80058ee <_printf_float+0xc2>
 8005adc:	f04f 0900 	mov.w	r9, #0
 8005ae0:	f104 0a1a 	add.w	sl, r4, #26
 8005ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae6:	425b      	negs	r3, r3
 8005ae8:	454b      	cmp	r3, r9
 8005aea:	dc01      	bgt.n	8005af0 <_printf_float+0x2c4>
 8005aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aee:	e792      	b.n	8005a16 <_printf_float+0x1ea>
 8005af0:	2301      	movs	r3, #1
 8005af2:	4652      	mov	r2, sl
 8005af4:	4631      	mov	r1, r6
 8005af6:	4628      	mov	r0, r5
 8005af8:	47b8      	blx	r7
 8005afa:	3001      	adds	r0, #1
 8005afc:	f43f aef7 	beq.w	80058ee <_printf_float+0xc2>
 8005b00:	f109 0901 	add.w	r9, r9, #1
 8005b04:	e7ee      	b.n	8005ae4 <_printf_float+0x2b8>
 8005b06:	bf00      	nop
 8005b08:	7fefffff 	.word	0x7fefffff
 8005b0c:	0800b344 	.word	0x0800b344
 8005b10:	0800b348 	.word	0x0800b348
 8005b14:	0800b350 	.word	0x0800b350
 8005b18:	0800b34c 	.word	0x0800b34c
 8005b1c:	0800b354 	.word	0x0800b354
 8005b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b24:	429a      	cmp	r2, r3
 8005b26:	bfa8      	it	ge
 8005b28:	461a      	movge	r2, r3
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	4691      	mov	r9, r2
 8005b2e:	dc37      	bgt.n	8005ba0 <_printf_float+0x374>
 8005b30:	f04f 0b00 	mov.w	fp, #0
 8005b34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b38:	f104 021a 	add.w	r2, r4, #26
 8005b3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b3e:	9305      	str	r3, [sp, #20]
 8005b40:	eba3 0309 	sub.w	r3, r3, r9
 8005b44:	455b      	cmp	r3, fp
 8005b46:	dc33      	bgt.n	8005bb0 <_printf_float+0x384>
 8005b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	db3b      	blt.n	8005bc8 <_printf_float+0x39c>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	07da      	lsls	r2, r3, #31
 8005b54:	d438      	bmi.n	8005bc8 <_printf_float+0x39c>
 8005b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b58:	9a05      	ldr	r2, [sp, #20]
 8005b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b5c:	1a9a      	subs	r2, r3, r2
 8005b5e:	eba3 0901 	sub.w	r9, r3, r1
 8005b62:	4591      	cmp	r9, r2
 8005b64:	bfa8      	it	ge
 8005b66:	4691      	movge	r9, r2
 8005b68:	f1b9 0f00 	cmp.w	r9, #0
 8005b6c:	dc35      	bgt.n	8005bda <_printf_float+0x3ae>
 8005b6e:	f04f 0800 	mov.w	r8, #0
 8005b72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b76:	f104 0a1a 	add.w	sl, r4, #26
 8005b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b7e:	1a9b      	subs	r3, r3, r2
 8005b80:	eba3 0309 	sub.w	r3, r3, r9
 8005b84:	4543      	cmp	r3, r8
 8005b86:	f77f af79 	ble.w	8005a7c <_printf_float+0x250>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4652      	mov	r2, sl
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4628      	mov	r0, r5
 8005b92:	47b8      	blx	r7
 8005b94:	3001      	adds	r0, #1
 8005b96:	f43f aeaa 	beq.w	80058ee <_printf_float+0xc2>
 8005b9a:	f108 0801 	add.w	r8, r8, #1
 8005b9e:	e7ec      	b.n	8005b7a <_printf_float+0x34e>
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4642      	mov	r2, r8
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	d1c0      	bne.n	8005b30 <_printf_float+0x304>
 8005bae:	e69e      	b.n	80058ee <_printf_float+0xc2>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	9205      	str	r2, [sp, #20]
 8005bb8:	47b8      	blx	r7
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f43f ae97 	beq.w	80058ee <_printf_float+0xc2>
 8005bc0:	9a05      	ldr	r2, [sp, #20]
 8005bc2:	f10b 0b01 	add.w	fp, fp, #1
 8005bc6:	e7b9      	b.n	8005b3c <_printf_float+0x310>
 8005bc8:	ee18 3a10 	vmov	r3, s16
 8005bcc:	4652      	mov	r2, sl
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d1be      	bne.n	8005b56 <_printf_float+0x32a>
 8005bd8:	e689      	b.n	80058ee <_printf_float+0xc2>
 8005bda:	9a05      	ldr	r2, [sp, #20]
 8005bdc:	464b      	mov	r3, r9
 8005bde:	4442      	add	r2, r8
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	d1c1      	bne.n	8005b6e <_printf_float+0x342>
 8005bea:	e680      	b.n	80058ee <_printf_float+0xc2>
 8005bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bee:	2a01      	cmp	r2, #1
 8005bf0:	dc01      	bgt.n	8005bf6 <_printf_float+0x3ca>
 8005bf2:	07db      	lsls	r3, r3, #31
 8005bf4:	d538      	bpl.n	8005c68 <_printf_float+0x43c>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	47b8      	blx	r7
 8005c00:	3001      	adds	r0, #1
 8005c02:	f43f ae74 	beq.w	80058ee <_printf_float+0xc2>
 8005c06:	ee18 3a10 	vmov	r3, s16
 8005c0a:	4652      	mov	r2, sl
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	f43f ae6b 	beq.w	80058ee <_printf_float+0xc2>
 8005c18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f7fa ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c24:	b9d8      	cbnz	r0, 8005c5e <_printf_float+0x432>
 8005c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c28:	f108 0201 	add.w	r2, r8, #1
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	d10e      	bne.n	8005c56 <_printf_float+0x42a>
 8005c38:	e659      	b.n	80058ee <_printf_float+0xc2>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4652      	mov	r2, sl
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f ae52 	beq.w	80058ee <_printf_float+0xc2>
 8005c4a:	f108 0801 	add.w	r8, r8, #1
 8005c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c50:	3b01      	subs	r3, #1
 8005c52:	4543      	cmp	r3, r8
 8005c54:	dcf1      	bgt.n	8005c3a <_printf_float+0x40e>
 8005c56:	464b      	mov	r3, r9
 8005c58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c5c:	e6dc      	b.n	8005a18 <_printf_float+0x1ec>
 8005c5e:	f04f 0800 	mov.w	r8, #0
 8005c62:	f104 0a1a 	add.w	sl, r4, #26
 8005c66:	e7f2      	b.n	8005c4e <_printf_float+0x422>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	e7df      	b.n	8005c2e <_printf_float+0x402>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	464a      	mov	r2, r9
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f43f ae38 	beq.w	80058ee <_printf_float+0xc2>
 8005c7e:	f108 0801 	add.w	r8, r8, #1
 8005c82:	68e3      	ldr	r3, [r4, #12]
 8005c84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c86:	1a5b      	subs	r3, r3, r1
 8005c88:	4543      	cmp	r3, r8
 8005c8a:	dcf0      	bgt.n	8005c6e <_printf_float+0x442>
 8005c8c:	e6fa      	b.n	8005a84 <_printf_float+0x258>
 8005c8e:	f04f 0800 	mov.w	r8, #0
 8005c92:	f104 0919 	add.w	r9, r4, #25
 8005c96:	e7f4      	b.n	8005c82 <_printf_float+0x456>

08005c98 <_printf_common>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	4699      	mov	r9, r3
 8005ca0:	688a      	ldr	r2, [r1, #8]
 8005ca2:	690b      	ldr	r3, [r1, #16]
 8005ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	bfb8      	it	lt
 8005cac:	4613      	movlt	r3, r2
 8005cae:	6033      	str	r3, [r6, #0]
 8005cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	b10a      	cbz	r2, 8005cbe <_printf_common+0x26>
 8005cba:	3301      	adds	r3, #1
 8005cbc:	6033      	str	r3, [r6, #0]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	0699      	lsls	r1, r3, #26
 8005cc2:	bf42      	ittt	mi
 8005cc4:	6833      	ldrmi	r3, [r6, #0]
 8005cc6:	3302      	addmi	r3, #2
 8005cc8:	6033      	strmi	r3, [r6, #0]
 8005cca:	6825      	ldr	r5, [r4, #0]
 8005ccc:	f015 0506 	ands.w	r5, r5, #6
 8005cd0:	d106      	bne.n	8005ce0 <_printf_common+0x48>
 8005cd2:	f104 0a19 	add.w	sl, r4, #25
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	6832      	ldr	r2, [r6, #0]
 8005cda:	1a9b      	subs	r3, r3, r2
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dc26      	bgt.n	8005d2e <_printf_common+0x96>
 8005ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ce4:	1e13      	subs	r3, r2, #0
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	bf18      	it	ne
 8005cea:	2301      	movne	r3, #1
 8005cec:	0692      	lsls	r2, r2, #26
 8005cee:	d42b      	bmi.n	8005d48 <_printf_common+0xb0>
 8005cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	4638      	mov	r0, r7
 8005cf8:	47c0      	blx	r8
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	d01e      	beq.n	8005d3c <_printf_common+0xa4>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	68e5      	ldr	r5, [r4, #12]
 8005d02:	6832      	ldr	r2, [r6, #0]
 8005d04:	f003 0306 	and.w	r3, r3, #6
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	bf08      	it	eq
 8005d0c:	1aad      	subeq	r5, r5, r2
 8005d0e:	68a3      	ldr	r3, [r4, #8]
 8005d10:	6922      	ldr	r2, [r4, #16]
 8005d12:	bf0c      	ite	eq
 8005d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d18:	2500      	movne	r5, #0
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	bfc4      	itt	gt
 8005d1e:	1a9b      	subgt	r3, r3, r2
 8005d20:	18ed      	addgt	r5, r5, r3
 8005d22:	2600      	movs	r6, #0
 8005d24:	341a      	adds	r4, #26
 8005d26:	42b5      	cmp	r5, r6
 8005d28:	d11a      	bne.n	8005d60 <_printf_common+0xc8>
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e008      	b.n	8005d40 <_printf_common+0xa8>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4652      	mov	r2, sl
 8005d32:	4649      	mov	r1, r9
 8005d34:	4638      	mov	r0, r7
 8005d36:	47c0      	blx	r8
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d103      	bne.n	8005d44 <_printf_common+0xac>
 8005d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d44:	3501      	adds	r5, #1
 8005d46:	e7c6      	b.n	8005cd6 <_printf_common+0x3e>
 8005d48:	18e1      	adds	r1, r4, r3
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	2030      	movs	r0, #48	; 0x30
 8005d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d52:	4422      	add	r2, r4
 8005d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	e7c7      	b.n	8005cf0 <_printf_common+0x58>
 8005d60:	2301      	movs	r3, #1
 8005d62:	4622      	mov	r2, r4
 8005d64:	4649      	mov	r1, r9
 8005d66:	4638      	mov	r0, r7
 8005d68:	47c0      	blx	r8
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d0e6      	beq.n	8005d3c <_printf_common+0xa4>
 8005d6e:	3601      	adds	r6, #1
 8005d70:	e7d9      	b.n	8005d26 <_printf_common+0x8e>
	...

08005d74 <_printf_i>:
 8005d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d78:	7e0f      	ldrb	r7, [r1, #24]
 8005d7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d7c:	2f78      	cmp	r7, #120	; 0x78
 8005d7e:	4691      	mov	r9, r2
 8005d80:	4680      	mov	r8, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	469a      	mov	sl, r3
 8005d86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d8a:	d807      	bhi.n	8005d9c <_printf_i+0x28>
 8005d8c:	2f62      	cmp	r7, #98	; 0x62
 8005d8e:	d80a      	bhi.n	8005da6 <_printf_i+0x32>
 8005d90:	2f00      	cmp	r7, #0
 8005d92:	f000 80d8 	beq.w	8005f46 <_printf_i+0x1d2>
 8005d96:	2f58      	cmp	r7, #88	; 0x58
 8005d98:	f000 80a3 	beq.w	8005ee2 <_printf_i+0x16e>
 8005d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005da4:	e03a      	b.n	8005e1c <_printf_i+0xa8>
 8005da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005daa:	2b15      	cmp	r3, #21
 8005dac:	d8f6      	bhi.n	8005d9c <_printf_i+0x28>
 8005dae:	a101      	add	r1, pc, #4	; (adr r1, 8005db4 <_printf_i+0x40>)
 8005db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005db4:	08005e0d 	.word	0x08005e0d
 8005db8:	08005e21 	.word	0x08005e21
 8005dbc:	08005d9d 	.word	0x08005d9d
 8005dc0:	08005d9d 	.word	0x08005d9d
 8005dc4:	08005d9d 	.word	0x08005d9d
 8005dc8:	08005d9d 	.word	0x08005d9d
 8005dcc:	08005e21 	.word	0x08005e21
 8005dd0:	08005d9d 	.word	0x08005d9d
 8005dd4:	08005d9d 	.word	0x08005d9d
 8005dd8:	08005d9d 	.word	0x08005d9d
 8005ddc:	08005d9d 	.word	0x08005d9d
 8005de0:	08005f2d 	.word	0x08005f2d
 8005de4:	08005e51 	.word	0x08005e51
 8005de8:	08005f0f 	.word	0x08005f0f
 8005dec:	08005d9d 	.word	0x08005d9d
 8005df0:	08005d9d 	.word	0x08005d9d
 8005df4:	08005f4f 	.word	0x08005f4f
 8005df8:	08005d9d 	.word	0x08005d9d
 8005dfc:	08005e51 	.word	0x08005e51
 8005e00:	08005d9d 	.word	0x08005d9d
 8005e04:	08005d9d 	.word	0x08005d9d
 8005e08:	08005f17 	.word	0x08005f17
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	1d1a      	adds	r2, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	602a      	str	r2, [r5, #0]
 8005e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e0a3      	b.n	8005f68 <_printf_i+0x1f4>
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	6829      	ldr	r1, [r5, #0]
 8005e24:	0606      	lsls	r6, r0, #24
 8005e26:	f101 0304 	add.w	r3, r1, #4
 8005e2a:	d50a      	bpl.n	8005e42 <_printf_i+0xce>
 8005e2c:	680e      	ldr	r6, [r1, #0]
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	2e00      	cmp	r6, #0
 8005e32:	da03      	bge.n	8005e3c <_printf_i+0xc8>
 8005e34:	232d      	movs	r3, #45	; 0x2d
 8005e36:	4276      	negs	r6, r6
 8005e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3c:	485e      	ldr	r0, [pc, #376]	; (8005fb8 <_printf_i+0x244>)
 8005e3e:	230a      	movs	r3, #10
 8005e40:	e019      	b.n	8005e76 <_printf_i+0x102>
 8005e42:	680e      	ldr	r6, [r1, #0]
 8005e44:	602b      	str	r3, [r5, #0]
 8005e46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e4a:	bf18      	it	ne
 8005e4c:	b236      	sxthne	r6, r6
 8005e4e:	e7ef      	b.n	8005e30 <_printf_i+0xbc>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	6820      	ldr	r0, [r4, #0]
 8005e54:	1d19      	adds	r1, r3, #4
 8005e56:	6029      	str	r1, [r5, #0]
 8005e58:	0601      	lsls	r1, r0, #24
 8005e5a:	d501      	bpl.n	8005e60 <_printf_i+0xec>
 8005e5c:	681e      	ldr	r6, [r3, #0]
 8005e5e:	e002      	b.n	8005e66 <_printf_i+0xf2>
 8005e60:	0646      	lsls	r6, r0, #25
 8005e62:	d5fb      	bpl.n	8005e5c <_printf_i+0xe8>
 8005e64:	881e      	ldrh	r6, [r3, #0]
 8005e66:	4854      	ldr	r0, [pc, #336]	; (8005fb8 <_printf_i+0x244>)
 8005e68:	2f6f      	cmp	r7, #111	; 0x6f
 8005e6a:	bf0c      	ite	eq
 8005e6c:	2308      	moveq	r3, #8
 8005e6e:	230a      	movne	r3, #10
 8005e70:	2100      	movs	r1, #0
 8005e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e76:	6865      	ldr	r5, [r4, #4]
 8005e78:	60a5      	str	r5, [r4, #8]
 8005e7a:	2d00      	cmp	r5, #0
 8005e7c:	bfa2      	ittt	ge
 8005e7e:	6821      	ldrge	r1, [r4, #0]
 8005e80:	f021 0104 	bicge.w	r1, r1, #4
 8005e84:	6021      	strge	r1, [r4, #0]
 8005e86:	b90e      	cbnz	r6, 8005e8c <_printf_i+0x118>
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	d04d      	beq.n	8005f28 <_printf_i+0x1b4>
 8005e8c:	4615      	mov	r5, r2
 8005e8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e92:	fb03 6711 	mls	r7, r3, r1, r6
 8005e96:	5dc7      	ldrb	r7, [r0, r7]
 8005e98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e9c:	4637      	mov	r7, r6
 8005e9e:	42bb      	cmp	r3, r7
 8005ea0:	460e      	mov	r6, r1
 8005ea2:	d9f4      	bls.n	8005e8e <_printf_i+0x11a>
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d10b      	bne.n	8005ec0 <_printf_i+0x14c>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	07de      	lsls	r6, r3, #31
 8005eac:	d508      	bpl.n	8005ec0 <_printf_i+0x14c>
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	6861      	ldr	r1, [r4, #4]
 8005eb2:	4299      	cmp	r1, r3
 8005eb4:	bfde      	ittt	le
 8005eb6:	2330      	movle	r3, #48	; 0x30
 8005eb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ec0:	1b52      	subs	r2, r2, r5
 8005ec2:	6122      	str	r2, [r4, #16]
 8005ec4:	f8cd a000 	str.w	sl, [sp]
 8005ec8:	464b      	mov	r3, r9
 8005eca:	aa03      	add	r2, sp, #12
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4640      	mov	r0, r8
 8005ed0:	f7ff fee2 	bl	8005c98 <_printf_common>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d14c      	bne.n	8005f72 <_printf_i+0x1fe>
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	b004      	add	sp, #16
 8005ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee2:	4835      	ldr	r0, [pc, #212]	; (8005fb8 <_printf_i+0x244>)
 8005ee4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ee8:	6829      	ldr	r1, [r5, #0]
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ef0:	6029      	str	r1, [r5, #0]
 8005ef2:	061d      	lsls	r5, r3, #24
 8005ef4:	d514      	bpl.n	8005f20 <_printf_i+0x1ac>
 8005ef6:	07df      	lsls	r7, r3, #31
 8005ef8:	bf44      	itt	mi
 8005efa:	f043 0320 	orrmi.w	r3, r3, #32
 8005efe:	6023      	strmi	r3, [r4, #0]
 8005f00:	b91e      	cbnz	r6, 8005f0a <_printf_i+0x196>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	f023 0320 	bic.w	r3, r3, #32
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	2310      	movs	r3, #16
 8005f0c:	e7b0      	b.n	8005e70 <_printf_i+0xfc>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	f043 0320 	orr.w	r3, r3, #32
 8005f14:	6023      	str	r3, [r4, #0]
 8005f16:	2378      	movs	r3, #120	; 0x78
 8005f18:	4828      	ldr	r0, [pc, #160]	; (8005fbc <_printf_i+0x248>)
 8005f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f1e:	e7e3      	b.n	8005ee8 <_printf_i+0x174>
 8005f20:	0659      	lsls	r1, r3, #25
 8005f22:	bf48      	it	mi
 8005f24:	b2b6      	uxthmi	r6, r6
 8005f26:	e7e6      	b.n	8005ef6 <_printf_i+0x182>
 8005f28:	4615      	mov	r5, r2
 8005f2a:	e7bb      	b.n	8005ea4 <_printf_i+0x130>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	6826      	ldr	r6, [r4, #0]
 8005f30:	6961      	ldr	r1, [r4, #20]
 8005f32:	1d18      	adds	r0, r3, #4
 8005f34:	6028      	str	r0, [r5, #0]
 8005f36:	0635      	lsls	r5, r6, #24
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	d501      	bpl.n	8005f40 <_printf_i+0x1cc>
 8005f3c:	6019      	str	r1, [r3, #0]
 8005f3e:	e002      	b.n	8005f46 <_printf_i+0x1d2>
 8005f40:	0670      	lsls	r0, r6, #25
 8005f42:	d5fb      	bpl.n	8005f3c <_printf_i+0x1c8>
 8005f44:	8019      	strh	r1, [r3, #0]
 8005f46:	2300      	movs	r3, #0
 8005f48:	6123      	str	r3, [r4, #16]
 8005f4a:	4615      	mov	r5, r2
 8005f4c:	e7ba      	b.n	8005ec4 <_printf_i+0x150>
 8005f4e:	682b      	ldr	r3, [r5, #0]
 8005f50:	1d1a      	adds	r2, r3, #4
 8005f52:	602a      	str	r2, [r5, #0]
 8005f54:	681d      	ldr	r5, [r3, #0]
 8005f56:	6862      	ldr	r2, [r4, #4]
 8005f58:	2100      	movs	r1, #0
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f7fa f940 	bl	80001e0 <memchr>
 8005f60:	b108      	cbz	r0, 8005f66 <_printf_i+0x1f2>
 8005f62:	1b40      	subs	r0, r0, r5
 8005f64:	6060      	str	r0, [r4, #4]
 8005f66:	6863      	ldr	r3, [r4, #4]
 8005f68:	6123      	str	r3, [r4, #16]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f70:	e7a8      	b.n	8005ec4 <_printf_i+0x150>
 8005f72:	6923      	ldr	r3, [r4, #16]
 8005f74:	462a      	mov	r2, r5
 8005f76:	4649      	mov	r1, r9
 8005f78:	4640      	mov	r0, r8
 8005f7a:	47d0      	blx	sl
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d0ab      	beq.n	8005ed8 <_printf_i+0x164>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	079b      	lsls	r3, r3, #30
 8005f84:	d413      	bmi.n	8005fae <_printf_i+0x23a>
 8005f86:	68e0      	ldr	r0, [r4, #12]
 8005f88:	9b03      	ldr	r3, [sp, #12]
 8005f8a:	4298      	cmp	r0, r3
 8005f8c:	bfb8      	it	lt
 8005f8e:	4618      	movlt	r0, r3
 8005f90:	e7a4      	b.n	8005edc <_printf_i+0x168>
 8005f92:	2301      	movs	r3, #1
 8005f94:	4632      	mov	r2, r6
 8005f96:	4649      	mov	r1, r9
 8005f98:	4640      	mov	r0, r8
 8005f9a:	47d0      	blx	sl
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d09b      	beq.n	8005ed8 <_printf_i+0x164>
 8005fa0:	3501      	adds	r5, #1
 8005fa2:	68e3      	ldr	r3, [r4, #12]
 8005fa4:	9903      	ldr	r1, [sp, #12]
 8005fa6:	1a5b      	subs	r3, r3, r1
 8005fa8:	42ab      	cmp	r3, r5
 8005faa:	dcf2      	bgt.n	8005f92 <_printf_i+0x21e>
 8005fac:	e7eb      	b.n	8005f86 <_printf_i+0x212>
 8005fae:	2500      	movs	r5, #0
 8005fb0:	f104 0619 	add.w	r6, r4, #25
 8005fb4:	e7f5      	b.n	8005fa2 <_printf_i+0x22e>
 8005fb6:	bf00      	nop
 8005fb8:	0800b356 	.word	0x0800b356
 8005fbc:	0800b367 	.word	0x0800b367

08005fc0 <_scanf_float>:
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	b087      	sub	sp, #28
 8005fc6:	4617      	mov	r7, r2
 8005fc8:	9303      	str	r3, [sp, #12]
 8005fca:	688b      	ldr	r3, [r1, #8]
 8005fcc:	1e5a      	subs	r2, r3, #1
 8005fce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005fd2:	bf83      	ittte	hi
 8005fd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005fd8:	195b      	addhi	r3, r3, r5
 8005fda:	9302      	strhi	r3, [sp, #8]
 8005fdc:	2300      	movls	r3, #0
 8005fde:	bf86      	itte	hi
 8005fe0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005fe4:	608b      	strhi	r3, [r1, #8]
 8005fe6:	9302      	strls	r3, [sp, #8]
 8005fe8:	680b      	ldr	r3, [r1, #0]
 8005fea:	468b      	mov	fp, r1
 8005fec:	2500      	movs	r5, #0
 8005fee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005ff2:	f84b 3b1c 	str.w	r3, [fp], #28
 8005ff6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ffa:	4680      	mov	r8, r0
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	465e      	mov	r6, fp
 8006000:	46aa      	mov	sl, r5
 8006002:	46a9      	mov	r9, r5
 8006004:	9501      	str	r5, [sp, #4]
 8006006:	68a2      	ldr	r2, [r4, #8]
 8006008:	b152      	cbz	r2, 8006020 <_scanf_float+0x60>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b4e      	cmp	r3, #78	; 0x4e
 8006010:	d864      	bhi.n	80060dc <_scanf_float+0x11c>
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d83c      	bhi.n	8006090 <_scanf_float+0xd0>
 8006016:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800601a:	b2c8      	uxtb	r0, r1
 800601c:	280e      	cmp	r0, #14
 800601e:	d93a      	bls.n	8006096 <_scanf_float+0xd6>
 8006020:	f1b9 0f00 	cmp.w	r9, #0
 8006024:	d003      	beq.n	800602e <_scanf_float+0x6e>
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006032:	f1ba 0f01 	cmp.w	sl, #1
 8006036:	f200 8113 	bhi.w	8006260 <_scanf_float+0x2a0>
 800603a:	455e      	cmp	r6, fp
 800603c:	f200 8105 	bhi.w	800624a <_scanf_float+0x28a>
 8006040:	2501      	movs	r5, #1
 8006042:	4628      	mov	r0, r5
 8006044:	b007      	add	sp, #28
 8006046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800604e:	2a0d      	cmp	r2, #13
 8006050:	d8e6      	bhi.n	8006020 <_scanf_float+0x60>
 8006052:	a101      	add	r1, pc, #4	; (adr r1, 8006058 <_scanf_float+0x98>)
 8006054:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006058:	08006197 	.word	0x08006197
 800605c:	08006021 	.word	0x08006021
 8006060:	08006021 	.word	0x08006021
 8006064:	08006021 	.word	0x08006021
 8006068:	080061f7 	.word	0x080061f7
 800606c:	080061cf 	.word	0x080061cf
 8006070:	08006021 	.word	0x08006021
 8006074:	08006021 	.word	0x08006021
 8006078:	080061a5 	.word	0x080061a5
 800607c:	08006021 	.word	0x08006021
 8006080:	08006021 	.word	0x08006021
 8006084:	08006021 	.word	0x08006021
 8006088:	08006021 	.word	0x08006021
 800608c:	0800615d 	.word	0x0800615d
 8006090:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006094:	e7db      	b.n	800604e <_scanf_float+0x8e>
 8006096:	290e      	cmp	r1, #14
 8006098:	d8c2      	bhi.n	8006020 <_scanf_float+0x60>
 800609a:	a001      	add	r0, pc, #4	; (adr r0, 80060a0 <_scanf_float+0xe0>)
 800609c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80060a0:	0800614f 	.word	0x0800614f
 80060a4:	08006021 	.word	0x08006021
 80060a8:	0800614f 	.word	0x0800614f
 80060ac:	080061e3 	.word	0x080061e3
 80060b0:	08006021 	.word	0x08006021
 80060b4:	080060fd 	.word	0x080060fd
 80060b8:	08006139 	.word	0x08006139
 80060bc:	08006139 	.word	0x08006139
 80060c0:	08006139 	.word	0x08006139
 80060c4:	08006139 	.word	0x08006139
 80060c8:	08006139 	.word	0x08006139
 80060cc:	08006139 	.word	0x08006139
 80060d0:	08006139 	.word	0x08006139
 80060d4:	08006139 	.word	0x08006139
 80060d8:	08006139 	.word	0x08006139
 80060dc:	2b6e      	cmp	r3, #110	; 0x6e
 80060de:	d809      	bhi.n	80060f4 <_scanf_float+0x134>
 80060e0:	2b60      	cmp	r3, #96	; 0x60
 80060e2:	d8b2      	bhi.n	800604a <_scanf_float+0x8a>
 80060e4:	2b54      	cmp	r3, #84	; 0x54
 80060e6:	d077      	beq.n	80061d8 <_scanf_float+0x218>
 80060e8:	2b59      	cmp	r3, #89	; 0x59
 80060ea:	d199      	bne.n	8006020 <_scanf_float+0x60>
 80060ec:	2d07      	cmp	r5, #7
 80060ee:	d197      	bne.n	8006020 <_scanf_float+0x60>
 80060f0:	2508      	movs	r5, #8
 80060f2:	e029      	b.n	8006148 <_scanf_float+0x188>
 80060f4:	2b74      	cmp	r3, #116	; 0x74
 80060f6:	d06f      	beq.n	80061d8 <_scanf_float+0x218>
 80060f8:	2b79      	cmp	r3, #121	; 0x79
 80060fa:	e7f6      	b.n	80060ea <_scanf_float+0x12a>
 80060fc:	6821      	ldr	r1, [r4, #0]
 80060fe:	05c8      	lsls	r0, r1, #23
 8006100:	d51a      	bpl.n	8006138 <_scanf_float+0x178>
 8006102:	9b02      	ldr	r3, [sp, #8]
 8006104:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006108:	6021      	str	r1, [r4, #0]
 800610a:	f109 0901 	add.w	r9, r9, #1
 800610e:	b11b      	cbz	r3, 8006118 <_scanf_float+0x158>
 8006110:	3b01      	subs	r3, #1
 8006112:	3201      	adds	r2, #1
 8006114:	9302      	str	r3, [sp, #8]
 8006116:	60a2      	str	r2, [r4, #8]
 8006118:	68a3      	ldr	r3, [r4, #8]
 800611a:	3b01      	subs	r3, #1
 800611c:	60a3      	str	r3, [r4, #8]
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	3301      	adds	r3, #1
 8006122:	6123      	str	r3, [r4, #16]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3b01      	subs	r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	f340 8084 	ble.w	8006238 <_scanf_float+0x278>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	e766      	b.n	8006006 <_scanf_float+0x46>
 8006138:	eb1a 0f05 	cmn.w	sl, r5
 800613c:	f47f af70 	bne.w	8006020 <_scanf_float+0x60>
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006146:	6022      	str	r2, [r4, #0]
 8006148:	f806 3b01 	strb.w	r3, [r6], #1
 800614c:	e7e4      	b.n	8006118 <_scanf_float+0x158>
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	0610      	lsls	r0, r2, #24
 8006152:	f57f af65 	bpl.w	8006020 <_scanf_float+0x60>
 8006156:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800615a:	e7f4      	b.n	8006146 <_scanf_float+0x186>
 800615c:	f1ba 0f00 	cmp.w	sl, #0
 8006160:	d10e      	bne.n	8006180 <_scanf_float+0x1c0>
 8006162:	f1b9 0f00 	cmp.w	r9, #0
 8006166:	d10e      	bne.n	8006186 <_scanf_float+0x1c6>
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800616e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006172:	d108      	bne.n	8006186 <_scanf_float+0x1c6>
 8006174:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006178:	6022      	str	r2, [r4, #0]
 800617a:	f04f 0a01 	mov.w	sl, #1
 800617e:	e7e3      	b.n	8006148 <_scanf_float+0x188>
 8006180:	f1ba 0f02 	cmp.w	sl, #2
 8006184:	d055      	beq.n	8006232 <_scanf_float+0x272>
 8006186:	2d01      	cmp	r5, #1
 8006188:	d002      	beq.n	8006190 <_scanf_float+0x1d0>
 800618a:	2d04      	cmp	r5, #4
 800618c:	f47f af48 	bne.w	8006020 <_scanf_float+0x60>
 8006190:	3501      	adds	r5, #1
 8006192:	b2ed      	uxtb	r5, r5
 8006194:	e7d8      	b.n	8006148 <_scanf_float+0x188>
 8006196:	f1ba 0f01 	cmp.w	sl, #1
 800619a:	f47f af41 	bne.w	8006020 <_scanf_float+0x60>
 800619e:	f04f 0a02 	mov.w	sl, #2
 80061a2:	e7d1      	b.n	8006148 <_scanf_float+0x188>
 80061a4:	b97d      	cbnz	r5, 80061c6 <_scanf_float+0x206>
 80061a6:	f1b9 0f00 	cmp.w	r9, #0
 80061aa:	f47f af3c 	bne.w	8006026 <_scanf_float+0x66>
 80061ae:	6822      	ldr	r2, [r4, #0]
 80061b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80061b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80061b8:	f47f af39 	bne.w	800602e <_scanf_float+0x6e>
 80061bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80061c0:	6022      	str	r2, [r4, #0]
 80061c2:	2501      	movs	r5, #1
 80061c4:	e7c0      	b.n	8006148 <_scanf_float+0x188>
 80061c6:	2d03      	cmp	r5, #3
 80061c8:	d0e2      	beq.n	8006190 <_scanf_float+0x1d0>
 80061ca:	2d05      	cmp	r5, #5
 80061cc:	e7de      	b.n	800618c <_scanf_float+0x1cc>
 80061ce:	2d02      	cmp	r5, #2
 80061d0:	f47f af26 	bne.w	8006020 <_scanf_float+0x60>
 80061d4:	2503      	movs	r5, #3
 80061d6:	e7b7      	b.n	8006148 <_scanf_float+0x188>
 80061d8:	2d06      	cmp	r5, #6
 80061da:	f47f af21 	bne.w	8006020 <_scanf_float+0x60>
 80061de:	2507      	movs	r5, #7
 80061e0:	e7b2      	b.n	8006148 <_scanf_float+0x188>
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	0591      	lsls	r1, r2, #22
 80061e6:	f57f af1b 	bpl.w	8006020 <_scanf_float+0x60>
 80061ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80061ee:	6022      	str	r2, [r4, #0]
 80061f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80061f4:	e7a8      	b.n	8006148 <_scanf_float+0x188>
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80061fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006200:	d006      	beq.n	8006210 <_scanf_float+0x250>
 8006202:	0550      	lsls	r0, r2, #21
 8006204:	f57f af0c 	bpl.w	8006020 <_scanf_float+0x60>
 8006208:	f1b9 0f00 	cmp.w	r9, #0
 800620c:	f43f af0f 	beq.w	800602e <_scanf_float+0x6e>
 8006210:	0591      	lsls	r1, r2, #22
 8006212:	bf58      	it	pl
 8006214:	9901      	ldrpl	r1, [sp, #4]
 8006216:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800621a:	bf58      	it	pl
 800621c:	eba9 0101 	subpl.w	r1, r9, r1
 8006220:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006224:	bf58      	it	pl
 8006226:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	f04f 0900 	mov.w	r9, #0
 8006230:	e78a      	b.n	8006148 <_scanf_float+0x188>
 8006232:	f04f 0a03 	mov.w	sl, #3
 8006236:	e787      	b.n	8006148 <_scanf_float+0x188>
 8006238:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800623c:	4639      	mov	r1, r7
 800623e:	4640      	mov	r0, r8
 8006240:	4798      	blx	r3
 8006242:	2800      	cmp	r0, #0
 8006244:	f43f aedf 	beq.w	8006006 <_scanf_float+0x46>
 8006248:	e6ea      	b.n	8006020 <_scanf_float+0x60>
 800624a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800624e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006252:	463a      	mov	r2, r7
 8006254:	4640      	mov	r0, r8
 8006256:	4798      	blx	r3
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	3b01      	subs	r3, #1
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	e6ec      	b.n	800603a <_scanf_float+0x7a>
 8006260:	1e6b      	subs	r3, r5, #1
 8006262:	2b06      	cmp	r3, #6
 8006264:	d825      	bhi.n	80062b2 <_scanf_float+0x2f2>
 8006266:	2d02      	cmp	r5, #2
 8006268:	d836      	bhi.n	80062d8 <_scanf_float+0x318>
 800626a:	455e      	cmp	r6, fp
 800626c:	f67f aee8 	bls.w	8006040 <_scanf_float+0x80>
 8006270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006274:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006278:	463a      	mov	r2, r7
 800627a:	4640      	mov	r0, r8
 800627c:	4798      	blx	r3
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	3b01      	subs	r3, #1
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	e7f1      	b.n	800626a <_scanf_float+0x2aa>
 8006286:	9802      	ldr	r0, [sp, #8]
 8006288:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800628c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006290:	9002      	str	r0, [sp, #8]
 8006292:	463a      	mov	r2, r7
 8006294:	4640      	mov	r0, r8
 8006296:	4798      	blx	r3
 8006298:	6923      	ldr	r3, [r4, #16]
 800629a:	3b01      	subs	r3, #1
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062a2:	fa5f fa8a 	uxtb.w	sl, sl
 80062a6:	f1ba 0f02 	cmp.w	sl, #2
 80062aa:	d1ec      	bne.n	8006286 <_scanf_float+0x2c6>
 80062ac:	3d03      	subs	r5, #3
 80062ae:	b2ed      	uxtb	r5, r5
 80062b0:	1b76      	subs	r6, r6, r5
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	05da      	lsls	r2, r3, #23
 80062b6:	d52f      	bpl.n	8006318 <_scanf_float+0x358>
 80062b8:	055b      	lsls	r3, r3, #21
 80062ba:	d510      	bpl.n	80062de <_scanf_float+0x31e>
 80062bc:	455e      	cmp	r6, fp
 80062be:	f67f aebf 	bls.w	8006040 <_scanf_float+0x80>
 80062c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062ca:	463a      	mov	r2, r7
 80062cc:	4640      	mov	r0, r8
 80062ce:	4798      	blx	r3
 80062d0:	6923      	ldr	r3, [r4, #16]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	6123      	str	r3, [r4, #16]
 80062d6:	e7f1      	b.n	80062bc <_scanf_float+0x2fc>
 80062d8:	46aa      	mov	sl, r5
 80062da:	9602      	str	r6, [sp, #8]
 80062dc:	e7df      	b.n	800629e <_scanf_float+0x2de>
 80062de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	2965      	cmp	r1, #101	; 0x65
 80062e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80062ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	d00c      	beq.n	800630c <_scanf_float+0x34c>
 80062f2:	2945      	cmp	r1, #69	; 0x45
 80062f4:	d00a      	beq.n	800630c <_scanf_float+0x34c>
 80062f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80062fa:	463a      	mov	r2, r7
 80062fc:	4640      	mov	r0, r8
 80062fe:	4798      	blx	r3
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006306:	3b01      	subs	r3, #1
 8006308:	1eb5      	subs	r5, r6, #2
 800630a:	6123      	str	r3, [r4, #16]
 800630c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006310:	463a      	mov	r2, r7
 8006312:	4640      	mov	r0, r8
 8006314:	4798      	blx	r3
 8006316:	462e      	mov	r6, r5
 8006318:	6825      	ldr	r5, [r4, #0]
 800631a:	f015 0510 	ands.w	r5, r5, #16
 800631e:	d159      	bne.n	80063d4 <_scanf_float+0x414>
 8006320:	7035      	strb	r5, [r6, #0]
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632c:	d11b      	bne.n	8006366 <_scanf_float+0x3a6>
 800632e:	9b01      	ldr	r3, [sp, #4]
 8006330:	454b      	cmp	r3, r9
 8006332:	eba3 0209 	sub.w	r2, r3, r9
 8006336:	d123      	bne.n	8006380 <_scanf_float+0x3c0>
 8006338:	2200      	movs	r2, #0
 800633a:	4659      	mov	r1, fp
 800633c:	4640      	mov	r0, r8
 800633e:	f000 fe99 	bl	8007074 <_strtod_r>
 8006342:	6822      	ldr	r2, [r4, #0]
 8006344:	9b03      	ldr	r3, [sp, #12]
 8006346:	f012 0f02 	tst.w	r2, #2
 800634a:	ec57 6b10 	vmov	r6, r7, d0
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	d021      	beq.n	8006396 <_scanf_float+0x3d6>
 8006352:	9903      	ldr	r1, [sp, #12]
 8006354:	1d1a      	adds	r2, r3, #4
 8006356:	600a      	str	r2, [r1, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	e9c3 6700 	strd	r6, r7, [r3]
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60e3      	str	r3, [r4, #12]
 8006364:	e66d      	b.n	8006042 <_scanf_float+0x82>
 8006366:	9b04      	ldr	r3, [sp, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0e5      	beq.n	8006338 <_scanf_float+0x378>
 800636c:	9905      	ldr	r1, [sp, #20]
 800636e:	230a      	movs	r3, #10
 8006370:	462a      	mov	r2, r5
 8006372:	3101      	adds	r1, #1
 8006374:	4640      	mov	r0, r8
 8006376:	f000 ff05 	bl	8007184 <_strtol_r>
 800637a:	9b04      	ldr	r3, [sp, #16]
 800637c:	9e05      	ldr	r6, [sp, #20]
 800637e:	1ac2      	subs	r2, r0, r3
 8006380:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006384:	429e      	cmp	r6, r3
 8006386:	bf28      	it	cs
 8006388:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800638c:	4912      	ldr	r1, [pc, #72]	; (80063d8 <_scanf_float+0x418>)
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f82c 	bl	80063ec <siprintf>
 8006394:	e7d0      	b.n	8006338 <_scanf_float+0x378>
 8006396:	9903      	ldr	r1, [sp, #12]
 8006398:	f012 0f04 	tst.w	r2, #4
 800639c:	f103 0204 	add.w	r2, r3, #4
 80063a0:	600a      	str	r2, [r1, #0]
 80063a2:	d1d9      	bne.n	8006358 <_scanf_float+0x398>
 80063a4:	f8d3 8000 	ldr.w	r8, [r3]
 80063a8:	ee10 2a10 	vmov	r2, s0
 80063ac:	ee10 0a10 	vmov	r0, s0
 80063b0:	463b      	mov	r3, r7
 80063b2:	4639      	mov	r1, r7
 80063b4:	f7fa fbba 	bl	8000b2c <__aeabi_dcmpun>
 80063b8:	b128      	cbz	r0, 80063c6 <_scanf_float+0x406>
 80063ba:	4808      	ldr	r0, [pc, #32]	; (80063dc <_scanf_float+0x41c>)
 80063bc:	f000 f810 	bl	80063e0 <nanf>
 80063c0:	ed88 0a00 	vstr	s0, [r8]
 80063c4:	e7cb      	b.n	800635e <_scanf_float+0x39e>
 80063c6:	4630      	mov	r0, r6
 80063c8:	4639      	mov	r1, r7
 80063ca:	f7fa fc0d 	bl	8000be8 <__aeabi_d2f>
 80063ce:	f8c8 0000 	str.w	r0, [r8]
 80063d2:	e7c4      	b.n	800635e <_scanf_float+0x39e>
 80063d4:	2500      	movs	r5, #0
 80063d6:	e634      	b.n	8006042 <_scanf_float+0x82>
 80063d8:	0800b378 	.word	0x0800b378
 80063dc:	0800b780 	.word	0x0800b780

080063e0 <nanf>:
 80063e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80063e8 <nanf+0x8>
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	7fc00000 	.word	0x7fc00000

080063ec <siprintf>:
 80063ec:	b40e      	push	{r1, r2, r3}
 80063ee:	b500      	push	{lr}
 80063f0:	b09c      	sub	sp, #112	; 0x70
 80063f2:	ab1d      	add	r3, sp, #116	; 0x74
 80063f4:	9002      	str	r0, [sp, #8]
 80063f6:	9006      	str	r0, [sp, #24]
 80063f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063fc:	4809      	ldr	r0, [pc, #36]	; (8006424 <siprintf+0x38>)
 80063fe:	9107      	str	r1, [sp, #28]
 8006400:	9104      	str	r1, [sp, #16]
 8006402:	4909      	ldr	r1, [pc, #36]	; (8006428 <siprintf+0x3c>)
 8006404:	f853 2b04 	ldr.w	r2, [r3], #4
 8006408:	9105      	str	r1, [sp, #20]
 800640a:	6800      	ldr	r0, [r0, #0]
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	a902      	add	r1, sp, #8
 8006410:	f002 fee4 	bl	80091dc <_svfiprintf_r>
 8006414:	9b02      	ldr	r3, [sp, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	b01c      	add	sp, #112	; 0x70
 800641c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006420:	b003      	add	sp, #12
 8006422:	4770      	bx	lr
 8006424:	2000000c 	.word	0x2000000c
 8006428:	ffff0208 	.word	0xffff0208

0800642c <sulp>:
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	ec45 4b10 	vmov	d0, r4, r5
 8006436:	4616      	mov	r6, r2
 8006438:	f002 fc2e 	bl	8008c98 <__ulp>
 800643c:	ec51 0b10 	vmov	r0, r1, d0
 8006440:	b17e      	cbz	r6, 8006462 <sulp+0x36>
 8006442:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006446:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800644a:	2b00      	cmp	r3, #0
 800644c:	dd09      	ble.n	8006462 <sulp+0x36>
 800644e:	051b      	lsls	r3, r3, #20
 8006450:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006454:	2400      	movs	r4, #0
 8006456:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800645a:	4622      	mov	r2, r4
 800645c:	462b      	mov	r3, r5
 800645e:	f7fa f8cb 	bl	80005f8 <__aeabi_dmul>
 8006462:	bd70      	pop	{r4, r5, r6, pc}
 8006464:	0000      	movs	r0, r0
	...

08006468 <_strtod_l>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	ed2d 8b02 	vpush	{d8}
 8006470:	b09d      	sub	sp, #116	; 0x74
 8006472:	461f      	mov	r7, r3
 8006474:	2300      	movs	r3, #0
 8006476:	9318      	str	r3, [sp, #96]	; 0x60
 8006478:	4ba2      	ldr	r3, [pc, #648]	; (8006704 <_strtod_l+0x29c>)
 800647a:	9213      	str	r2, [sp, #76]	; 0x4c
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	9305      	str	r3, [sp, #20]
 8006480:	4604      	mov	r4, r0
 8006482:	4618      	mov	r0, r3
 8006484:	4688      	mov	r8, r1
 8006486:	f7f9 fea3 	bl	80001d0 <strlen>
 800648a:	f04f 0a00 	mov.w	sl, #0
 800648e:	4605      	mov	r5, r0
 8006490:	f04f 0b00 	mov.w	fp, #0
 8006494:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800649a:	781a      	ldrb	r2, [r3, #0]
 800649c:	2a2b      	cmp	r2, #43	; 0x2b
 800649e:	d04e      	beq.n	800653e <_strtod_l+0xd6>
 80064a0:	d83b      	bhi.n	800651a <_strtod_l+0xb2>
 80064a2:	2a0d      	cmp	r2, #13
 80064a4:	d834      	bhi.n	8006510 <_strtod_l+0xa8>
 80064a6:	2a08      	cmp	r2, #8
 80064a8:	d834      	bhi.n	8006514 <_strtod_l+0xac>
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	d03e      	beq.n	800652c <_strtod_l+0xc4>
 80064ae:	2300      	movs	r3, #0
 80064b0:	930a      	str	r3, [sp, #40]	; 0x28
 80064b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80064b4:	7833      	ldrb	r3, [r6, #0]
 80064b6:	2b30      	cmp	r3, #48	; 0x30
 80064b8:	f040 80b0 	bne.w	800661c <_strtod_l+0x1b4>
 80064bc:	7873      	ldrb	r3, [r6, #1]
 80064be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80064c2:	2b58      	cmp	r3, #88	; 0x58
 80064c4:	d168      	bne.n	8006598 <_strtod_l+0x130>
 80064c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	ab18      	add	r3, sp, #96	; 0x60
 80064cc:	9702      	str	r7, [sp, #8]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	4a8d      	ldr	r2, [pc, #564]	; (8006708 <_strtod_l+0x2a0>)
 80064d2:	ab19      	add	r3, sp, #100	; 0x64
 80064d4:	a917      	add	r1, sp, #92	; 0x5c
 80064d6:	4620      	mov	r0, r4
 80064d8:	f001 fd38 	bl	8007f4c <__gethex>
 80064dc:	f010 0707 	ands.w	r7, r0, #7
 80064e0:	4605      	mov	r5, r0
 80064e2:	d005      	beq.n	80064f0 <_strtod_l+0x88>
 80064e4:	2f06      	cmp	r7, #6
 80064e6:	d12c      	bne.n	8006542 <_strtod_l+0xda>
 80064e8:	3601      	adds	r6, #1
 80064ea:	2300      	movs	r3, #0
 80064ec:	9617      	str	r6, [sp, #92]	; 0x5c
 80064ee:	930a      	str	r3, [sp, #40]	; 0x28
 80064f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f040 8590 	bne.w	8007018 <_strtod_l+0xbb0>
 80064f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064fa:	b1eb      	cbz	r3, 8006538 <_strtod_l+0xd0>
 80064fc:	4652      	mov	r2, sl
 80064fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006502:	ec43 2b10 	vmov	d0, r2, r3
 8006506:	b01d      	add	sp, #116	; 0x74
 8006508:	ecbd 8b02 	vpop	{d8}
 800650c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006510:	2a20      	cmp	r2, #32
 8006512:	d1cc      	bne.n	80064ae <_strtod_l+0x46>
 8006514:	3301      	adds	r3, #1
 8006516:	9317      	str	r3, [sp, #92]	; 0x5c
 8006518:	e7be      	b.n	8006498 <_strtod_l+0x30>
 800651a:	2a2d      	cmp	r2, #45	; 0x2d
 800651c:	d1c7      	bne.n	80064ae <_strtod_l+0x46>
 800651e:	2201      	movs	r2, #1
 8006520:	920a      	str	r2, [sp, #40]	; 0x28
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	9217      	str	r2, [sp, #92]	; 0x5c
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1c2      	bne.n	80064b2 <_strtod_l+0x4a>
 800652c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800652e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 856e 	bne.w	8007014 <_strtod_l+0xbac>
 8006538:	4652      	mov	r2, sl
 800653a:	465b      	mov	r3, fp
 800653c:	e7e1      	b.n	8006502 <_strtod_l+0x9a>
 800653e:	2200      	movs	r2, #0
 8006540:	e7ee      	b.n	8006520 <_strtod_l+0xb8>
 8006542:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006544:	b13a      	cbz	r2, 8006556 <_strtod_l+0xee>
 8006546:	2135      	movs	r1, #53	; 0x35
 8006548:	a81a      	add	r0, sp, #104	; 0x68
 800654a:	f002 fcb0 	bl	8008eae <__copybits>
 800654e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006550:	4620      	mov	r0, r4
 8006552:	f002 f86f 	bl	8008634 <_Bfree>
 8006556:	3f01      	subs	r7, #1
 8006558:	2f04      	cmp	r7, #4
 800655a:	d806      	bhi.n	800656a <_strtod_l+0x102>
 800655c:	e8df f007 	tbb	[pc, r7]
 8006560:	1714030a 	.word	0x1714030a
 8006564:	0a          	.byte	0x0a
 8006565:	00          	.byte	0x00
 8006566:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800656a:	0728      	lsls	r0, r5, #28
 800656c:	d5c0      	bpl.n	80064f0 <_strtod_l+0x88>
 800656e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006572:	e7bd      	b.n	80064f0 <_strtod_l+0x88>
 8006574:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006578:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800657a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800657e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006582:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006586:	e7f0      	b.n	800656a <_strtod_l+0x102>
 8006588:	f8df b180 	ldr.w	fp, [pc, #384]	; 800670c <_strtod_l+0x2a4>
 800658c:	e7ed      	b.n	800656a <_strtod_l+0x102>
 800658e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006592:	f04f 3aff 	mov.w	sl, #4294967295
 8006596:	e7e8      	b.n	800656a <_strtod_l+0x102>
 8006598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	9217      	str	r2, [sp, #92]	; 0x5c
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b30      	cmp	r3, #48	; 0x30
 80065a2:	d0f9      	beq.n	8006598 <_strtod_l+0x130>
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0a3      	beq.n	80064f0 <_strtod_l+0x88>
 80065a8:	2301      	movs	r3, #1
 80065aa:	f04f 0900 	mov.w	r9, #0
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065b2:	9308      	str	r3, [sp, #32]
 80065b4:	f8cd 901c 	str.w	r9, [sp, #28]
 80065b8:	464f      	mov	r7, r9
 80065ba:	220a      	movs	r2, #10
 80065bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80065be:	7806      	ldrb	r6, [r0, #0]
 80065c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80065c4:	b2d9      	uxtb	r1, r3
 80065c6:	2909      	cmp	r1, #9
 80065c8:	d92a      	bls.n	8006620 <_strtod_l+0x1b8>
 80065ca:	9905      	ldr	r1, [sp, #20]
 80065cc:	462a      	mov	r2, r5
 80065ce:	f002 ff1f 	bl	8009410 <strncmp>
 80065d2:	b398      	cbz	r0, 800663c <_strtod_l+0x1d4>
 80065d4:	2000      	movs	r0, #0
 80065d6:	4632      	mov	r2, r6
 80065d8:	463d      	mov	r5, r7
 80065da:	9005      	str	r0, [sp, #20]
 80065dc:	4603      	mov	r3, r0
 80065de:	2a65      	cmp	r2, #101	; 0x65
 80065e0:	d001      	beq.n	80065e6 <_strtod_l+0x17e>
 80065e2:	2a45      	cmp	r2, #69	; 0x45
 80065e4:	d118      	bne.n	8006618 <_strtod_l+0x1b0>
 80065e6:	b91d      	cbnz	r5, 80065f0 <_strtod_l+0x188>
 80065e8:	9a04      	ldr	r2, [sp, #16]
 80065ea:	4302      	orrs	r2, r0
 80065ec:	d09e      	beq.n	800652c <_strtod_l+0xc4>
 80065ee:	2500      	movs	r5, #0
 80065f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80065f4:	f108 0201 	add.w	r2, r8, #1
 80065f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80065fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80065fe:	2a2b      	cmp	r2, #43	; 0x2b
 8006600:	d075      	beq.n	80066ee <_strtod_l+0x286>
 8006602:	2a2d      	cmp	r2, #45	; 0x2d
 8006604:	d07b      	beq.n	80066fe <_strtod_l+0x296>
 8006606:	f04f 0c00 	mov.w	ip, #0
 800660a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800660e:	2909      	cmp	r1, #9
 8006610:	f240 8082 	bls.w	8006718 <_strtod_l+0x2b0>
 8006614:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006618:	2600      	movs	r6, #0
 800661a:	e09d      	b.n	8006758 <_strtod_l+0x2f0>
 800661c:	2300      	movs	r3, #0
 800661e:	e7c4      	b.n	80065aa <_strtod_l+0x142>
 8006620:	2f08      	cmp	r7, #8
 8006622:	bfd8      	it	le
 8006624:	9907      	ldrle	r1, [sp, #28]
 8006626:	f100 0001 	add.w	r0, r0, #1
 800662a:	bfda      	itte	le
 800662c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006630:	9307      	strle	r3, [sp, #28]
 8006632:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006636:	3701      	adds	r7, #1
 8006638:	9017      	str	r0, [sp, #92]	; 0x5c
 800663a:	e7bf      	b.n	80065bc <_strtod_l+0x154>
 800663c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800663e:	195a      	adds	r2, r3, r5
 8006640:	9217      	str	r2, [sp, #92]	; 0x5c
 8006642:	5d5a      	ldrb	r2, [r3, r5]
 8006644:	2f00      	cmp	r7, #0
 8006646:	d037      	beq.n	80066b8 <_strtod_l+0x250>
 8006648:	9005      	str	r0, [sp, #20]
 800664a:	463d      	mov	r5, r7
 800664c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006650:	2b09      	cmp	r3, #9
 8006652:	d912      	bls.n	800667a <_strtod_l+0x212>
 8006654:	2301      	movs	r3, #1
 8006656:	e7c2      	b.n	80065de <_strtod_l+0x176>
 8006658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	9217      	str	r2, [sp, #92]	; 0x5c
 800665e:	785a      	ldrb	r2, [r3, #1]
 8006660:	3001      	adds	r0, #1
 8006662:	2a30      	cmp	r2, #48	; 0x30
 8006664:	d0f8      	beq.n	8006658 <_strtod_l+0x1f0>
 8006666:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800666a:	2b08      	cmp	r3, #8
 800666c:	f200 84d9 	bhi.w	8007022 <_strtod_l+0xbba>
 8006670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006672:	9005      	str	r0, [sp, #20]
 8006674:	2000      	movs	r0, #0
 8006676:	9308      	str	r3, [sp, #32]
 8006678:	4605      	mov	r5, r0
 800667a:	3a30      	subs	r2, #48	; 0x30
 800667c:	f100 0301 	add.w	r3, r0, #1
 8006680:	d014      	beq.n	80066ac <_strtod_l+0x244>
 8006682:	9905      	ldr	r1, [sp, #20]
 8006684:	4419      	add	r1, r3
 8006686:	9105      	str	r1, [sp, #20]
 8006688:	462b      	mov	r3, r5
 800668a:	eb00 0e05 	add.w	lr, r0, r5
 800668e:	210a      	movs	r1, #10
 8006690:	4573      	cmp	r3, lr
 8006692:	d113      	bne.n	80066bc <_strtod_l+0x254>
 8006694:	182b      	adds	r3, r5, r0
 8006696:	2b08      	cmp	r3, #8
 8006698:	f105 0501 	add.w	r5, r5, #1
 800669c:	4405      	add	r5, r0
 800669e:	dc1c      	bgt.n	80066da <_strtod_l+0x272>
 80066a0:	9907      	ldr	r1, [sp, #28]
 80066a2:	230a      	movs	r3, #10
 80066a4:	fb03 2301 	mla	r3, r3, r1, r2
 80066a8:	9307      	str	r3, [sp, #28]
 80066aa:	2300      	movs	r3, #0
 80066ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80066ae:	1c51      	adds	r1, r2, #1
 80066b0:	9117      	str	r1, [sp, #92]	; 0x5c
 80066b2:	7852      	ldrb	r2, [r2, #1]
 80066b4:	4618      	mov	r0, r3
 80066b6:	e7c9      	b.n	800664c <_strtod_l+0x1e4>
 80066b8:	4638      	mov	r0, r7
 80066ba:	e7d2      	b.n	8006662 <_strtod_l+0x1fa>
 80066bc:	2b08      	cmp	r3, #8
 80066be:	dc04      	bgt.n	80066ca <_strtod_l+0x262>
 80066c0:	9e07      	ldr	r6, [sp, #28]
 80066c2:	434e      	muls	r6, r1
 80066c4:	9607      	str	r6, [sp, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	e7e2      	b.n	8006690 <_strtod_l+0x228>
 80066ca:	f103 0c01 	add.w	ip, r3, #1
 80066ce:	f1bc 0f10 	cmp.w	ip, #16
 80066d2:	bfd8      	it	le
 80066d4:	fb01 f909 	mulle.w	r9, r1, r9
 80066d8:	e7f5      	b.n	80066c6 <_strtod_l+0x25e>
 80066da:	2d10      	cmp	r5, #16
 80066dc:	bfdc      	itt	le
 80066de:	230a      	movle	r3, #10
 80066e0:	fb03 2909 	mlale	r9, r3, r9, r2
 80066e4:	e7e1      	b.n	80066aa <_strtod_l+0x242>
 80066e6:	2300      	movs	r3, #0
 80066e8:	9305      	str	r3, [sp, #20]
 80066ea:	2301      	movs	r3, #1
 80066ec:	e77c      	b.n	80065e8 <_strtod_l+0x180>
 80066ee:	f04f 0c00 	mov.w	ip, #0
 80066f2:	f108 0202 	add.w	r2, r8, #2
 80066f6:	9217      	str	r2, [sp, #92]	; 0x5c
 80066f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80066fc:	e785      	b.n	800660a <_strtod_l+0x1a2>
 80066fe:	f04f 0c01 	mov.w	ip, #1
 8006702:	e7f6      	b.n	80066f2 <_strtod_l+0x28a>
 8006704:	0800b5c8 	.word	0x0800b5c8
 8006708:	0800b380 	.word	0x0800b380
 800670c:	7ff00000 	.word	0x7ff00000
 8006710:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006712:	1c51      	adds	r1, r2, #1
 8006714:	9117      	str	r1, [sp, #92]	; 0x5c
 8006716:	7852      	ldrb	r2, [r2, #1]
 8006718:	2a30      	cmp	r2, #48	; 0x30
 800671a:	d0f9      	beq.n	8006710 <_strtod_l+0x2a8>
 800671c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006720:	2908      	cmp	r1, #8
 8006722:	f63f af79 	bhi.w	8006618 <_strtod_l+0x1b0>
 8006726:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800672a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800672c:	9206      	str	r2, [sp, #24]
 800672e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006730:	1c51      	adds	r1, r2, #1
 8006732:	9117      	str	r1, [sp, #92]	; 0x5c
 8006734:	7852      	ldrb	r2, [r2, #1]
 8006736:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800673a:	2e09      	cmp	r6, #9
 800673c:	d937      	bls.n	80067ae <_strtod_l+0x346>
 800673e:	9e06      	ldr	r6, [sp, #24]
 8006740:	1b89      	subs	r1, r1, r6
 8006742:	2908      	cmp	r1, #8
 8006744:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006748:	dc02      	bgt.n	8006750 <_strtod_l+0x2e8>
 800674a:	4576      	cmp	r6, lr
 800674c:	bfa8      	it	ge
 800674e:	4676      	movge	r6, lr
 8006750:	f1bc 0f00 	cmp.w	ip, #0
 8006754:	d000      	beq.n	8006758 <_strtod_l+0x2f0>
 8006756:	4276      	negs	r6, r6
 8006758:	2d00      	cmp	r5, #0
 800675a:	d14d      	bne.n	80067f8 <_strtod_l+0x390>
 800675c:	9904      	ldr	r1, [sp, #16]
 800675e:	4301      	orrs	r1, r0
 8006760:	f47f aec6 	bne.w	80064f0 <_strtod_l+0x88>
 8006764:	2b00      	cmp	r3, #0
 8006766:	f47f aee1 	bne.w	800652c <_strtod_l+0xc4>
 800676a:	2a69      	cmp	r2, #105	; 0x69
 800676c:	d027      	beq.n	80067be <_strtod_l+0x356>
 800676e:	dc24      	bgt.n	80067ba <_strtod_l+0x352>
 8006770:	2a49      	cmp	r2, #73	; 0x49
 8006772:	d024      	beq.n	80067be <_strtod_l+0x356>
 8006774:	2a4e      	cmp	r2, #78	; 0x4e
 8006776:	f47f aed9 	bne.w	800652c <_strtod_l+0xc4>
 800677a:	499f      	ldr	r1, [pc, #636]	; (80069f8 <_strtod_l+0x590>)
 800677c:	a817      	add	r0, sp, #92	; 0x5c
 800677e:	f001 fe3d 	bl	80083fc <__match>
 8006782:	2800      	cmp	r0, #0
 8006784:	f43f aed2 	beq.w	800652c <_strtod_l+0xc4>
 8006788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b28      	cmp	r3, #40	; 0x28
 800678e:	d12d      	bne.n	80067ec <_strtod_l+0x384>
 8006790:	499a      	ldr	r1, [pc, #616]	; (80069fc <_strtod_l+0x594>)
 8006792:	aa1a      	add	r2, sp, #104	; 0x68
 8006794:	a817      	add	r0, sp, #92	; 0x5c
 8006796:	f001 fe45 	bl	8008424 <__hexnan>
 800679a:	2805      	cmp	r0, #5
 800679c:	d126      	bne.n	80067ec <_strtod_l+0x384>
 800679e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80067a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80067a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80067ac:	e6a0      	b.n	80064f0 <_strtod_l+0x88>
 80067ae:	210a      	movs	r1, #10
 80067b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80067b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80067b8:	e7b9      	b.n	800672e <_strtod_l+0x2c6>
 80067ba:	2a6e      	cmp	r2, #110	; 0x6e
 80067bc:	e7db      	b.n	8006776 <_strtod_l+0x30e>
 80067be:	4990      	ldr	r1, [pc, #576]	; (8006a00 <_strtod_l+0x598>)
 80067c0:	a817      	add	r0, sp, #92	; 0x5c
 80067c2:	f001 fe1b 	bl	80083fc <__match>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f43f aeb0 	beq.w	800652c <_strtod_l+0xc4>
 80067cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067ce:	498d      	ldr	r1, [pc, #564]	; (8006a04 <_strtod_l+0x59c>)
 80067d0:	3b01      	subs	r3, #1
 80067d2:	a817      	add	r0, sp, #92	; 0x5c
 80067d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80067d6:	f001 fe11 	bl	80083fc <__match>
 80067da:	b910      	cbnz	r0, 80067e2 <_strtod_l+0x37a>
 80067dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067de:	3301      	adds	r3, #1
 80067e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80067e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006a14 <_strtod_l+0x5ac>
 80067e6:	f04f 0a00 	mov.w	sl, #0
 80067ea:	e681      	b.n	80064f0 <_strtod_l+0x88>
 80067ec:	4886      	ldr	r0, [pc, #536]	; (8006a08 <_strtod_l+0x5a0>)
 80067ee:	f002 fdf7 	bl	80093e0 <nan>
 80067f2:	ec5b ab10 	vmov	sl, fp, d0
 80067f6:	e67b      	b.n	80064f0 <_strtod_l+0x88>
 80067f8:	9b05      	ldr	r3, [sp, #20]
 80067fa:	9807      	ldr	r0, [sp, #28]
 80067fc:	1af3      	subs	r3, r6, r3
 80067fe:	2f00      	cmp	r7, #0
 8006800:	bf08      	it	eq
 8006802:	462f      	moveq	r7, r5
 8006804:	2d10      	cmp	r5, #16
 8006806:	9306      	str	r3, [sp, #24]
 8006808:	46a8      	mov	r8, r5
 800680a:	bfa8      	it	ge
 800680c:	f04f 0810 	movge.w	r8, #16
 8006810:	f7f9 fe78 	bl	8000504 <__aeabi_ui2d>
 8006814:	2d09      	cmp	r5, #9
 8006816:	4682      	mov	sl, r0
 8006818:	468b      	mov	fp, r1
 800681a:	dd13      	ble.n	8006844 <_strtod_l+0x3dc>
 800681c:	4b7b      	ldr	r3, [pc, #492]	; (8006a0c <_strtod_l+0x5a4>)
 800681e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006822:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006826:	f7f9 fee7 	bl	80005f8 <__aeabi_dmul>
 800682a:	4682      	mov	sl, r0
 800682c:	4648      	mov	r0, r9
 800682e:	468b      	mov	fp, r1
 8006830:	f7f9 fe68 	bl	8000504 <__aeabi_ui2d>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4650      	mov	r0, sl
 800683a:	4659      	mov	r1, fp
 800683c:	f7f9 fd26 	bl	800028c <__adddf3>
 8006840:	4682      	mov	sl, r0
 8006842:	468b      	mov	fp, r1
 8006844:	2d0f      	cmp	r5, #15
 8006846:	dc38      	bgt.n	80068ba <_strtod_l+0x452>
 8006848:	9b06      	ldr	r3, [sp, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f43f ae50 	beq.w	80064f0 <_strtod_l+0x88>
 8006850:	dd24      	ble.n	800689c <_strtod_l+0x434>
 8006852:	2b16      	cmp	r3, #22
 8006854:	dc0b      	bgt.n	800686e <_strtod_l+0x406>
 8006856:	496d      	ldr	r1, [pc, #436]	; (8006a0c <_strtod_l+0x5a4>)
 8006858:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800685c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006860:	4652      	mov	r2, sl
 8006862:	465b      	mov	r3, fp
 8006864:	f7f9 fec8 	bl	80005f8 <__aeabi_dmul>
 8006868:	4682      	mov	sl, r0
 800686a:	468b      	mov	fp, r1
 800686c:	e640      	b.n	80064f0 <_strtod_l+0x88>
 800686e:	9a06      	ldr	r2, [sp, #24]
 8006870:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006874:	4293      	cmp	r3, r2
 8006876:	db20      	blt.n	80068ba <_strtod_l+0x452>
 8006878:	4c64      	ldr	r4, [pc, #400]	; (8006a0c <_strtod_l+0x5a4>)
 800687a:	f1c5 050f 	rsb	r5, r5, #15
 800687e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006882:	4652      	mov	r2, sl
 8006884:	465b      	mov	r3, fp
 8006886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800688a:	f7f9 feb5 	bl	80005f8 <__aeabi_dmul>
 800688e:	9b06      	ldr	r3, [sp, #24]
 8006890:	1b5d      	subs	r5, r3, r5
 8006892:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006896:	e9d4 2300 	ldrd	r2, r3, [r4]
 800689a:	e7e3      	b.n	8006864 <_strtod_l+0x3fc>
 800689c:	9b06      	ldr	r3, [sp, #24]
 800689e:	3316      	adds	r3, #22
 80068a0:	db0b      	blt.n	80068ba <_strtod_l+0x452>
 80068a2:	9b05      	ldr	r3, [sp, #20]
 80068a4:	1b9e      	subs	r6, r3, r6
 80068a6:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <_strtod_l+0x5a4>)
 80068a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80068ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068b0:	4650      	mov	r0, sl
 80068b2:	4659      	mov	r1, fp
 80068b4:	f7f9 ffca 	bl	800084c <__aeabi_ddiv>
 80068b8:	e7d6      	b.n	8006868 <_strtod_l+0x400>
 80068ba:	9b06      	ldr	r3, [sp, #24]
 80068bc:	eba5 0808 	sub.w	r8, r5, r8
 80068c0:	4498      	add	r8, r3
 80068c2:	f1b8 0f00 	cmp.w	r8, #0
 80068c6:	dd74      	ble.n	80069b2 <_strtod_l+0x54a>
 80068c8:	f018 030f 	ands.w	r3, r8, #15
 80068cc:	d00a      	beq.n	80068e4 <_strtod_l+0x47c>
 80068ce:	494f      	ldr	r1, [pc, #316]	; (8006a0c <_strtod_l+0x5a4>)
 80068d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80068d4:	4652      	mov	r2, sl
 80068d6:	465b      	mov	r3, fp
 80068d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068dc:	f7f9 fe8c 	bl	80005f8 <__aeabi_dmul>
 80068e0:	4682      	mov	sl, r0
 80068e2:	468b      	mov	fp, r1
 80068e4:	f038 080f 	bics.w	r8, r8, #15
 80068e8:	d04f      	beq.n	800698a <_strtod_l+0x522>
 80068ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80068ee:	dd22      	ble.n	8006936 <_strtod_l+0x4ce>
 80068f0:	2500      	movs	r5, #0
 80068f2:	462e      	mov	r6, r5
 80068f4:	9507      	str	r5, [sp, #28]
 80068f6:	9505      	str	r5, [sp, #20]
 80068f8:	2322      	movs	r3, #34	; 0x22
 80068fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006a14 <_strtod_l+0x5ac>
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	f04f 0a00 	mov.w	sl, #0
 8006904:	9b07      	ldr	r3, [sp, #28]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f43f adf2 	beq.w	80064f0 <_strtod_l+0x88>
 800690c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800690e:	4620      	mov	r0, r4
 8006910:	f001 fe90 	bl	8008634 <_Bfree>
 8006914:	9905      	ldr	r1, [sp, #20]
 8006916:	4620      	mov	r0, r4
 8006918:	f001 fe8c 	bl	8008634 <_Bfree>
 800691c:	4631      	mov	r1, r6
 800691e:	4620      	mov	r0, r4
 8006920:	f001 fe88 	bl	8008634 <_Bfree>
 8006924:	9907      	ldr	r1, [sp, #28]
 8006926:	4620      	mov	r0, r4
 8006928:	f001 fe84 	bl	8008634 <_Bfree>
 800692c:	4629      	mov	r1, r5
 800692e:	4620      	mov	r0, r4
 8006930:	f001 fe80 	bl	8008634 <_Bfree>
 8006934:	e5dc      	b.n	80064f0 <_strtod_l+0x88>
 8006936:	4b36      	ldr	r3, [pc, #216]	; (8006a10 <_strtod_l+0x5a8>)
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	2300      	movs	r3, #0
 800693c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006940:	4650      	mov	r0, sl
 8006942:	4659      	mov	r1, fp
 8006944:	4699      	mov	r9, r3
 8006946:	f1b8 0f01 	cmp.w	r8, #1
 800694a:	dc21      	bgt.n	8006990 <_strtod_l+0x528>
 800694c:	b10b      	cbz	r3, 8006952 <_strtod_l+0x4ea>
 800694e:	4682      	mov	sl, r0
 8006950:	468b      	mov	fp, r1
 8006952:	4b2f      	ldr	r3, [pc, #188]	; (8006a10 <_strtod_l+0x5a8>)
 8006954:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006958:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800695c:	4652      	mov	r2, sl
 800695e:	465b      	mov	r3, fp
 8006960:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006964:	f7f9 fe48 	bl	80005f8 <__aeabi_dmul>
 8006968:	4b2a      	ldr	r3, [pc, #168]	; (8006a14 <_strtod_l+0x5ac>)
 800696a:	460a      	mov	r2, r1
 800696c:	400b      	ands	r3, r1
 800696e:	492a      	ldr	r1, [pc, #168]	; (8006a18 <_strtod_l+0x5b0>)
 8006970:	428b      	cmp	r3, r1
 8006972:	4682      	mov	sl, r0
 8006974:	d8bc      	bhi.n	80068f0 <_strtod_l+0x488>
 8006976:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800697a:	428b      	cmp	r3, r1
 800697c:	bf86      	itte	hi
 800697e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006a1c <_strtod_l+0x5b4>
 8006982:	f04f 3aff 	movhi.w	sl, #4294967295
 8006986:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800698a:	2300      	movs	r3, #0
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	e084      	b.n	8006a9a <_strtod_l+0x632>
 8006990:	f018 0f01 	tst.w	r8, #1
 8006994:	d005      	beq.n	80069a2 <_strtod_l+0x53a>
 8006996:	9b04      	ldr	r3, [sp, #16]
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f7f9 fe2c 	bl	80005f8 <__aeabi_dmul>
 80069a0:	2301      	movs	r3, #1
 80069a2:	9a04      	ldr	r2, [sp, #16]
 80069a4:	3208      	adds	r2, #8
 80069a6:	f109 0901 	add.w	r9, r9, #1
 80069aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80069ae:	9204      	str	r2, [sp, #16]
 80069b0:	e7c9      	b.n	8006946 <_strtod_l+0x4de>
 80069b2:	d0ea      	beq.n	800698a <_strtod_l+0x522>
 80069b4:	f1c8 0800 	rsb	r8, r8, #0
 80069b8:	f018 020f 	ands.w	r2, r8, #15
 80069bc:	d00a      	beq.n	80069d4 <_strtod_l+0x56c>
 80069be:	4b13      	ldr	r3, [pc, #76]	; (8006a0c <_strtod_l+0x5a4>)
 80069c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069c4:	4650      	mov	r0, sl
 80069c6:	4659      	mov	r1, fp
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f7f9 ff3e 	bl	800084c <__aeabi_ddiv>
 80069d0:	4682      	mov	sl, r0
 80069d2:	468b      	mov	fp, r1
 80069d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80069d8:	d0d7      	beq.n	800698a <_strtod_l+0x522>
 80069da:	f1b8 0f1f 	cmp.w	r8, #31
 80069de:	dd1f      	ble.n	8006a20 <_strtod_l+0x5b8>
 80069e0:	2500      	movs	r5, #0
 80069e2:	462e      	mov	r6, r5
 80069e4:	9507      	str	r5, [sp, #28]
 80069e6:	9505      	str	r5, [sp, #20]
 80069e8:	2322      	movs	r3, #34	; 0x22
 80069ea:	f04f 0a00 	mov.w	sl, #0
 80069ee:	f04f 0b00 	mov.w	fp, #0
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	e786      	b.n	8006904 <_strtod_l+0x49c>
 80069f6:	bf00      	nop
 80069f8:	0800b351 	.word	0x0800b351
 80069fc:	0800b394 	.word	0x0800b394
 8006a00:	0800b349 	.word	0x0800b349
 8006a04:	0800b4d4 	.word	0x0800b4d4
 8006a08:	0800b780 	.word	0x0800b780
 8006a0c:	0800b660 	.word	0x0800b660
 8006a10:	0800b638 	.word	0x0800b638
 8006a14:	7ff00000 	.word	0x7ff00000
 8006a18:	7ca00000 	.word	0x7ca00000
 8006a1c:	7fefffff 	.word	0x7fefffff
 8006a20:	f018 0310 	ands.w	r3, r8, #16
 8006a24:	bf18      	it	ne
 8006a26:	236a      	movne	r3, #106	; 0x6a
 8006a28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006dd8 <_strtod_l+0x970>
 8006a2c:	9304      	str	r3, [sp, #16]
 8006a2e:	4650      	mov	r0, sl
 8006a30:	4659      	mov	r1, fp
 8006a32:	2300      	movs	r3, #0
 8006a34:	f018 0f01 	tst.w	r8, #1
 8006a38:	d004      	beq.n	8006a44 <_strtod_l+0x5dc>
 8006a3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006a3e:	f7f9 fddb 	bl	80005f8 <__aeabi_dmul>
 8006a42:	2301      	movs	r3, #1
 8006a44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006a48:	f109 0908 	add.w	r9, r9, #8
 8006a4c:	d1f2      	bne.n	8006a34 <_strtod_l+0x5cc>
 8006a4e:	b10b      	cbz	r3, 8006a54 <_strtod_l+0x5ec>
 8006a50:	4682      	mov	sl, r0
 8006a52:	468b      	mov	fp, r1
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	b1c3      	cbz	r3, 8006a8a <_strtod_l+0x622>
 8006a58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006a5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	4659      	mov	r1, fp
 8006a64:	dd11      	ble.n	8006a8a <_strtod_l+0x622>
 8006a66:	2b1f      	cmp	r3, #31
 8006a68:	f340 8124 	ble.w	8006cb4 <_strtod_l+0x84c>
 8006a6c:	2b34      	cmp	r3, #52	; 0x34
 8006a6e:	bfde      	ittt	le
 8006a70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006a74:	f04f 33ff 	movle.w	r3, #4294967295
 8006a78:	fa03 f202 	lslle.w	r2, r3, r2
 8006a7c:	f04f 0a00 	mov.w	sl, #0
 8006a80:	bfcc      	ite	gt
 8006a82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006a86:	ea02 0b01 	andle.w	fp, r2, r1
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4650      	mov	r0, sl
 8006a90:	4659      	mov	r1, fp
 8006a92:	f7fa f819 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d1a2      	bne.n	80069e0 <_strtod_l+0x578>
 8006a9a:	9b07      	ldr	r3, [sp, #28]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	9908      	ldr	r1, [sp, #32]
 8006aa0:	462b      	mov	r3, r5
 8006aa2:	463a      	mov	r2, r7
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f001 fe2d 	bl	8008704 <__s2b>
 8006aaa:	9007      	str	r0, [sp, #28]
 8006aac:	2800      	cmp	r0, #0
 8006aae:	f43f af1f 	beq.w	80068f0 <_strtod_l+0x488>
 8006ab2:	9b05      	ldr	r3, [sp, #20]
 8006ab4:	1b9e      	subs	r6, r3, r6
 8006ab6:	9b06      	ldr	r3, [sp, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bfb4      	ite	lt
 8006abc:	4633      	movlt	r3, r6
 8006abe:	2300      	movge	r3, #0
 8006ac0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ac2:	9b06      	ldr	r3, [sp, #24]
 8006ac4:	2500      	movs	r5, #0
 8006ac6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006aca:	9312      	str	r3, [sp, #72]	; 0x48
 8006acc:	462e      	mov	r6, r5
 8006ace:	9b07      	ldr	r3, [sp, #28]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	f001 fd6e 	bl	80085b4 <_Balloc>
 8006ad8:	9005      	str	r0, [sp, #20]
 8006ada:	2800      	cmp	r0, #0
 8006adc:	f43f af0c 	beq.w	80068f8 <_strtod_l+0x490>
 8006ae0:	9b07      	ldr	r3, [sp, #28]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	3202      	adds	r2, #2
 8006ae6:	f103 010c 	add.w	r1, r3, #12
 8006aea:	0092      	lsls	r2, r2, #2
 8006aec:	300c      	adds	r0, #12
 8006aee:	f001 fd53 	bl	8008598 <memcpy>
 8006af2:	ec4b ab10 	vmov	d0, sl, fp
 8006af6:	aa1a      	add	r2, sp, #104	; 0x68
 8006af8:	a919      	add	r1, sp, #100	; 0x64
 8006afa:	4620      	mov	r0, r4
 8006afc:	f002 f948 	bl	8008d90 <__d2b>
 8006b00:	ec4b ab18 	vmov	d8, sl, fp
 8006b04:	9018      	str	r0, [sp, #96]	; 0x60
 8006b06:	2800      	cmp	r0, #0
 8006b08:	f43f aef6 	beq.w	80068f8 <_strtod_l+0x490>
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f001 fe92 	bl	8008838 <__i2b>
 8006b14:	4606      	mov	r6, r0
 8006b16:	2800      	cmp	r0, #0
 8006b18:	f43f aeee 	beq.w	80068f8 <_strtod_l+0x490>
 8006b1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b1e:	9904      	ldr	r1, [sp, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bfab      	itete	ge
 8006b24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006b26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006b28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006b2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006b2e:	bfac      	ite	ge
 8006b30:	eb03 0902 	addge.w	r9, r3, r2
 8006b34:	1ad7      	sublt	r7, r2, r3
 8006b36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b38:	eba3 0801 	sub.w	r8, r3, r1
 8006b3c:	4490      	add	r8, r2
 8006b3e:	4ba1      	ldr	r3, [pc, #644]	; (8006dc4 <_strtod_l+0x95c>)
 8006b40:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b44:	4598      	cmp	r8, r3
 8006b46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006b4a:	f280 80c7 	bge.w	8006cdc <_strtod_l+0x874>
 8006b4e:	eba3 0308 	sub.w	r3, r3, r8
 8006b52:	2b1f      	cmp	r3, #31
 8006b54:	eba2 0203 	sub.w	r2, r2, r3
 8006b58:	f04f 0101 	mov.w	r1, #1
 8006b5c:	f300 80b1 	bgt.w	8006cc2 <_strtod_l+0x85a>
 8006b60:	fa01 f303 	lsl.w	r3, r1, r3
 8006b64:	930d      	str	r3, [sp, #52]	; 0x34
 8006b66:	2300      	movs	r3, #0
 8006b68:	9308      	str	r3, [sp, #32]
 8006b6a:	eb09 0802 	add.w	r8, r9, r2
 8006b6e:	9b04      	ldr	r3, [sp, #16]
 8006b70:	45c1      	cmp	r9, r8
 8006b72:	4417      	add	r7, r2
 8006b74:	441f      	add	r7, r3
 8006b76:	464b      	mov	r3, r9
 8006b78:	bfa8      	it	ge
 8006b7a:	4643      	movge	r3, r8
 8006b7c:	42bb      	cmp	r3, r7
 8006b7e:	bfa8      	it	ge
 8006b80:	463b      	movge	r3, r7
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bfc2      	ittt	gt
 8006b86:	eba8 0803 	subgt.w	r8, r8, r3
 8006b8a:	1aff      	subgt	r7, r7, r3
 8006b8c:	eba9 0903 	subgt.w	r9, r9, r3
 8006b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	dd17      	ble.n	8006bc6 <_strtod_l+0x75e>
 8006b96:	4631      	mov	r1, r6
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f001 ff0c 	bl	80089b8 <__pow5mult>
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	f43f aea8 	beq.w	80068f8 <_strtod_l+0x490>
 8006ba8:	4601      	mov	r1, r0
 8006baa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006bac:	4620      	mov	r0, r4
 8006bae:	f001 fe59 	bl	8008864 <__multiply>
 8006bb2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	f43f ae9f 	beq.w	80068f8 <_strtod_l+0x490>
 8006bba:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f001 fd39 	bl	8008634 <_Bfree>
 8006bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc4:	9318      	str	r3, [sp, #96]	; 0x60
 8006bc6:	f1b8 0f00 	cmp.w	r8, #0
 8006bca:	f300 808c 	bgt.w	8006ce6 <_strtod_l+0x87e>
 8006bce:	9b06      	ldr	r3, [sp, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	dd08      	ble.n	8006be6 <_strtod_l+0x77e>
 8006bd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bd6:	9905      	ldr	r1, [sp, #20]
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f001 feed 	bl	80089b8 <__pow5mult>
 8006bde:	9005      	str	r0, [sp, #20]
 8006be0:	2800      	cmp	r0, #0
 8006be2:	f43f ae89 	beq.w	80068f8 <_strtod_l+0x490>
 8006be6:	2f00      	cmp	r7, #0
 8006be8:	dd08      	ble.n	8006bfc <_strtod_l+0x794>
 8006bea:	9905      	ldr	r1, [sp, #20]
 8006bec:	463a      	mov	r2, r7
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f001 ff3c 	bl	8008a6c <__lshift>
 8006bf4:	9005      	str	r0, [sp, #20]
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	f43f ae7e 	beq.w	80068f8 <_strtod_l+0x490>
 8006bfc:	f1b9 0f00 	cmp.w	r9, #0
 8006c00:	dd08      	ble.n	8006c14 <_strtod_l+0x7ac>
 8006c02:	4631      	mov	r1, r6
 8006c04:	464a      	mov	r2, r9
 8006c06:	4620      	mov	r0, r4
 8006c08:	f001 ff30 	bl	8008a6c <__lshift>
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f43f ae72 	beq.w	80068f8 <_strtod_l+0x490>
 8006c14:	9a05      	ldr	r2, [sp, #20]
 8006c16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f001 ffb3 	bl	8008b84 <__mdiff>
 8006c1e:	4605      	mov	r5, r0
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f43f ae69 	beq.w	80068f8 <_strtod_l+0x490>
 8006c26:	68c3      	ldr	r3, [r0, #12]
 8006c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60c3      	str	r3, [r0, #12]
 8006c2e:	4631      	mov	r1, r6
 8006c30:	f001 ff8c 	bl	8008b4c <__mcmp>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	da60      	bge.n	8006cfa <_strtod_l+0x892>
 8006c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c3a:	ea53 030a 	orrs.w	r3, r3, sl
 8006c3e:	f040 8082 	bne.w	8006d46 <_strtod_l+0x8de>
 8006c42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d17d      	bne.n	8006d46 <_strtod_l+0x8de>
 8006c4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c4e:	0d1b      	lsrs	r3, r3, #20
 8006c50:	051b      	lsls	r3, r3, #20
 8006c52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006c56:	d976      	bls.n	8006d46 <_strtod_l+0x8de>
 8006c58:	696b      	ldr	r3, [r5, #20]
 8006c5a:	b913      	cbnz	r3, 8006c62 <_strtod_l+0x7fa>
 8006c5c:	692b      	ldr	r3, [r5, #16]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	dd71      	ble.n	8006d46 <_strtod_l+0x8de>
 8006c62:	4629      	mov	r1, r5
 8006c64:	2201      	movs	r2, #1
 8006c66:	4620      	mov	r0, r4
 8006c68:	f001 ff00 	bl	8008a6c <__lshift>
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4605      	mov	r5, r0
 8006c70:	f001 ff6c 	bl	8008b4c <__mcmp>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	dd66      	ble.n	8006d46 <_strtod_l+0x8de>
 8006c78:	9904      	ldr	r1, [sp, #16]
 8006c7a:	4a53      	ldr	r2, [pc, #332]	; (8006dc8 <_strtod_l+0x960>)
 8006c7c:	465b      	mov	r3, fp
 8006c7e:	2900      	cmp	r1, #0
 8006c80:	f000 8081 	beq.w	8006d86 <_strtod_l+0x91e>
 8006c84:	ea02 010b 	and.w	r1, r2, fp
 8006c88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c8c:	dc7b      	bgt.n	8006d86 <_strtod_l+0x91e>
 8006c8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006c92:	f77f aea9 	ble.w	80069e8 <_strtod_l+0x580>
 8006c96:	4b4d      	ldr	r3, [pc, #308]	; (8006dcc <_strtod_l+0x964>)
 8006c98:	4650      	mov	r0, sl
 8006c9a:	4659      	mov	r1, fp
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f7f9 fcab 	bl	80005f8 <__aeabi_dmul>
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4303      	orrs	r3, r0
 8006ca6:	bf08      	it	eq
 8006ca8:	2322      	moveq	r3, #34	; 0x22
 8006caa:	4682      	mov	sl, r0
 8006cac:	468b      	mov	fp, r1
 8006cae:	bf08      	it	eq
 8006cb0:	6023      	streq	r3, [r4, #0]
 8006cb2:	e62b      	b.n	800690c <_strtod_l+0x4a4>
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	ea03 0a0a 	and.w	sl, r3, sl
 8006cc0:	e6e3      	b.n	8006a8a <_strtod_l+0x622>
 8006cc2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006cc6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006cca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006cce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006cd2:	fa01 f308 	lsl.w	r3, r1, r8
 8006cd6:	9308      	str	r3, [sp, #32]
 8006cd8:	910d      	str	r1, [sp, #52]	; 0x34
 8006cda:	e746      	b.n	8006b6a <_strtod_l+0x702>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	9308      	str	r3, [sp, #32]
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ce4:	e741      	b.n	8006b6a <_strtod_l+0x702>
 8006ce6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ce8:	4642      	mov	r2, r8
 8006cea:	4620      	mov	r0, r4
 8006cec:	f001 febe 	bl	8008a6c <__lshift>
 8006cf0:	9018      	str	r0, [sp, #96]	; 0x60
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	f47f af6b 	bne.w	8006bce <_strtod_l+0x766>
 8006cf8:	e5fe      	b.n	80068f8 <_strtod_l+0x490>
 8006cfa:	465f      	mov	r7, fp
 8006cfc:	d16e      	bne.n	8006ddc <_strtod_l+0x974>
 8006cfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d04:	b342      	cbz	r2, 8006d58 <_strtod_l+0x8f0>
 8006d06:	4a32      	ldr	r2, [pc, #200]	; (8006dd0 <_strtod_l+0x968>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d128      	bne.n	8006d5e <_strtod_l+0x8f6>
 8006d0c:	9b04      	ldr	r3, [sp, #16]
 8006d0e:	4651      	mov	r1, sl
 8006d10:	b1eb      	cbz	r3, 8006d4e <_strtod_l+0x8e6>
 8006d12:	4b2d      	ldr	r3, [pc, #180]	; (8006dc8 <_strtod_l+0x960>)
 8006d14:	403b      	ands	r3, r7
 8006d16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1e:	d819      	bhi.n	8006d54 <_strtod_l+0x8ec>
 8006d20:	0d1b      	lsrs	r3, r3, #20
 8006d22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d26:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2a:	4299      	cmp	r1, r3
 8006d2c:	d117      	bne.n	8006d5e <_strtod_l+0x8f6>
 8006d2e:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <_strtod_l+0x96c>)
 8006d30:	429f      	cmp	r7, r3
 8006d32:	d102      	bne.n	8006d3a <_strtod_l+0x8d2>
 8006d34:	3101      	adds	r1, #1
 8006d36:	f43f addf 	beq.w	80068f8 <_strtod_l+0x490>
 8006d3a:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <_strtod_l+0x960>)
 8006d3c:	403b      	ands	r3, r7
 8006d3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006d42:	f04f 0a00 	mov.w	sl, #0
 8006d46:	9b04      	ldr	r3, [sp, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1a4      	bne.n	8006c96 <_strtod_l+0x82e>
 8006d4c:	e5de      	b.n	800690c <_strtod_l+0x4a4>
 8006d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d52:	e7ea      	b.n	8006d2a <_strtod_l+0x8c2>
 8006d54:	4613      	mov	r3, r2
 8006d56:	e7e8      	b.n	8006d2a <_strtod_l+0x8c2>
 8006d58:	ea53 030a 	orrs.w	r3, r3, sl
 8006d5c:	d08c      	beq.n	8006c78 <_strtod_l+0x810>
 8006d5e:	9b08      	ldr	r3, [sp, #32]
 8006d60:	b1db      	cbz	r3, 8006d9a <_strtod_l+0x932>
 8006d62:	423b      	tst	r3, r7
 8006d64:	d0ef      	beq.n	8006d46 <_strtod_l+0x8de>
 8006d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d68:	9a04      	ldr	r2, [sp, #16]
 8006d6a:	4650      	mov	r0, sl
 8006d6c:	4659      	mov	r1, fp
 8006d6e:	b1c3      	cbz	r3, 8006da2 <_strtod_l+0x93a>
 8006d70:	f7ff fb5c 	bl	800642c <sulp>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	ec51 0b18 	vmov	r0, r1, d8
 8006d7c:	f7f9 fa86 	bl	800028c <__adddf3>
 8006d80:	4682      	mov	sl, r0
 8006d82:	468b      	mov	fp, r1
 8006d84:	e7df      	b.n	8006d46 <_strtod_l+0x8de>
 8006d86:	4013      	ands	r3, r2
 8006d88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006d90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006d94:	f04f 3aff 	mov.w	sl, #4294967295
 8006d98:	e7d5      	b.n	8006d46 <_strtod_l+0x8de>
 8006d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d9c:	ea13 0f0a 	tst.w	r3, sl
 8006da0:	e7e0      	b.n	8006d64 <_strtod_l+0x8fc>
 8006da2:	f7ff fb43 	bl	800642c <sulp>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	ec51 0b18 	vmov	r0, r1, d8
 8006dae:	f7f9 fa6b 	bl	8000288 <__aeabi_dsub>
 8006db2:	2200      	movs	r2, #0
 8006db4:	2300      	movs	r3, #0
 8006db6:	4682      	mov	sl, r0
 8006db8:	468b      	mov	fp, r1
 8006dba:	f7f9 fe85 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d0c1      	beq.n	8006d46 <_strtod_l+0x8de>
 8006dc2:	e611      	b.n	80069e8 <_strtod_l+0x580>
 8006dc4:	fffffc02 	.word	0xfffffc02
 8006dc8:	7ff00000 	.word	0x7ff00000
 8006dcc:	39500000 	.word	0x39500000
 8006dd0:	000fffff 	.word	0x000fffff
 8006dd4:	7fefffff 	.word	0x7fefffff
 8006dd8:	0800b3a8 	.word	0x0800b3a8
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4628      	mov	r0, r5
 8006de0:	f002 f832 	bl	8008e48 <__ratio>
 8006de4:	ec59 8b10 	vmov	r8, r9, d0
 8006de8:	ee10 0a10 	vmov	r0, s0
 8006dec:	2200      	movs	r2, #0
 8006dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006df2:	4649      	mov	r1, r9
 8006df4:	f7f9 fe7c 	bl	8000af0 <__aeabi_dcmple>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d07a      	beq.n	8006ef2 <_strtod_l+0xa8a>
 8006dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d04a      	beq.n	8006e98 <_strtod_l+0xa30>
 8006e02:	4b95      	ldr	r3, [pc, #596]	; (8007058 <_strtod_l+0xbf0>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006e0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007058 <_strtod_l+0xbf0>
 8006e0e:	f04f 0800 	mov.w	r8, #0
 8006e12:	4b92      	ldr	r3, [pc, #584]	; (800705c <_strtod_l+0xbf4>)
 8006e14:	403b      	ands	r3, r7
 8006e16:	930d      	str	r3, [sp, #52]	; 0x34
 8006e18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e1a:	4b91      	ldr	r3, [pc, #580]	; (8007060 <_strtod_l+0xbf8>)
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	f040 80b0 	bne.w	8006f82 <_strtod_l+0xb1a>
 8006e22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006e2a:	ec4b ab10 	vmov	d0, sl, fp
 8006e2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006e32:	f001 ff31 	bl	8008c98 <__ulp>
 8006e36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006e3a:	ec53 2b10 	vmov	r2, r3, d0
 8006e3e:	f7f9 fbdb 	bl	80005f8 <__aeabi_dmul>
 8006e42:	4652      	mov	r2, sl
 8006e44:	465b      	mov	r3, fp
 8006e46:	f7f9 fa21 	bl	800028c <__adddf3>
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4983      	ldr	r1, [pc, #524]	; (800705c <_strtod_l+0xbf4>)
 8006e4e:	4a85      	ldr	r2, [pc, #532]	; (8007064 <_strtod_l+0xbfc>)
 8006e50:	4019      	ands	r1, r3
 8006e52:	4291      	cmp	r1, r2
 8006e54:	4682      	mov	sl, r0
 8006e56:	d960      	bls.n	8006f1a <_strtod_l+0xab2>
 8006e58:	ee18 3a90 	vmov	r3, s17
 8006e5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d104      	bne.n	8006e6e <_strtod_l+0xa06>
 8006e64:	ee18 3a10 	vmov	r3, s16
 8006e68:	3301      	adds	r3, #1
 8006e6a:	f43f ad45 	beq.w	80068f8 <_strtod_l+0x490>
 8006e6e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007070 <_strtod_l+0xc08>
 8006e72:	f04f 3aff 	mov.w	sl, #4294967295
 8006e76:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f001 fbdb 	bl	8008634 <_Bfree>
 8006e7e:	9905      	ldr	r1, [sp, #20]
 8006e80:	4620      	mov	r0, r4
 8006e82:	f001 fbd7 	bl	8008634 <_Bfree>
 8006e86:	4631      	mov	r1, r6
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 fbd3 	bl	8008634 <_Bfree>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4620      	mov	r0, r4
 8006e92:	f001 fbcf 	bl	8008634 <_Bfree>
 8006e96:	e61a      	b.n	8006ace <_strtod_l+0x666>
 8006e98:	f1ba 0f00 	cmp.w	sl, #0
 8006e9c:	d11b      	bne.n	8006ed6 <_strtod_l+0xa6e>
 8006e9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ea2:	b9f3      	cbnz	r3, 8006ee2 <_strtod_l+0xa7a>
 8006ea4:	4b6c      	ldr	r3, [pc, #432]	; (8007058 <_strtod_l+0xbf0>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4640      	mov	r0, r8
 8006eaa:	4649      	mov	r1, r9
 8006eac:	f7f9 fe16 	bl	8000adc <__aeabi_dcmplt>
 8006eb0:	b9d0      	cbnz	r0, 8006ee8 <_strtod_l+0xa80>
 8006eb2:	4640      	mov	r0, r8
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	4b6c      	ldr	r3, [pc, #432]	; (8007068 <_strtod_l+0xc00>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f7f9 fb9d 	bl	80005f8 <__aeabi_dmul>
 8006ebe:	4680      	mov	r8, r0
 8006ec0:	4689      	mov	r9, r1
 8006ec2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006ec6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006eca:	9315      	str	r3, [sp, #84]	; 0x54
 8006ecc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ed0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ed4:	e79d      	b.n	8006e12 <_strtod_l+0x9aa>
 8006ed6:	f1ba 0f01 	cmp.w	sl, #1
 8006eda:	d102      	bne.n	8006ee2 <_strtod_l+0xa7a>
 8006edc:	2f00      	cmp	r7, #0
 8006ede:	f43f ad83 	beq.w	80069e8 <_strtod_l+0x580>
 8006ee2:	4b62      	ldr	r3, [pc, #392]	; (800706c <_strtod_l+0xc04>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	e78e      	b.n	8006e06 <_strtod_l+0x99e>
 8006ee8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007068 <_strtod_l+0xc00>
 8006eec:	f04f 0800 	mov.w	r8, #0
 8006ef0:	e7e7      	b.n	8006ec2 <_strtod_l+0xa5a>
 8006ef2:	4b5d      	ldr	r3, [pc, #372]	; (8007068 <_strtod_l+0xc00>)
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f7f9 fb7d 	bl	80005f8 <__aeabi_dmul>
 8006efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f00:	4680      	mov	r8, r0
 8006f02:	4689      	mov	r9, r1
 8006f04:	b933      	cbnz	r3, 8006f14 <_strtod_l+0xaac>
 8006f06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f0a:	900e      	str	r0, [sp, #56]	; 0x38
 8006f0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f12:	e7dd      	b.n	8006ed0 <_strtod_l+0xa68>
 8006f14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006f18:	e7f9      	b.n	8006f0e <_strtod_l+0xaa6>
 8006f1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1a8      	bne.n	8006e76 <_strtod_l+0xa0e>
 8006f24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f2a:	0d1b      	lsrs	r3, r3, #20
 8006f2c:	051b      	lsls	r3, r3, #20
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d1a1      	bne.n	8006e76 <_strtod_l+0xa0e>
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 febf 	bl	8000cb8 <__aeabi_d2lz>
 8006f3a:	f7f9 fb2f 	bl	800059c <__aeabi_l2d>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4640      	mov	r0, r8
 8006f44:	4649      	mov	r1, r9
 8006f46:	f7f9 f99f 	bl	8000288 <__aeabi_dsub>
 8006f4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f50:	ea43 030a 	orr.w	r3, r3, sl
 8006f54:	4313      	orrs	r3, r2
 8006f56:	4680      	mov	r8, r0
 8006f58:	4689      	mov	r9, r1
 8006f5a:	d055      	beq.n	8007008 <_strtod_l+0xba0>
 8006f5c:	a336      	add	r3, pc, #216	; (adr r3, 8007038 <_strtod_l+0xbd0>)
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	f7f9 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	f47f acd0 	bne.w	800690c <_strtod_l+0x4a4>
 8006f6c:	a334      	add	r3, pc, #208	; (adr r3, 8007040 <_strtod_l+0xbd8>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f7f9 fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	f43f af7b 	beq.w	8006e76 <_strtod_l+0xa0e>
 8006f80:	e4c4      	b.n	800690c <_strtod_l+0x4a4>
 8006f82:	9b04      	ldr	r3, [sp, #16]
 8006f84:	b333      	cbz	r3, 8006fd4 <_strtod_l+0xb6c>
 8006f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f8c:	d822      	bhi.n	8006fd4 <_strtod_l+0xb6c>
 8006f8e:	a32e      	add	r3, pc, #184	; (adr r3, 8007048 <_strtod_l+0xbe0>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	4640      	mov	r0, r8
 8006f96:	4649      	mov	r1, r9
 8006f98:	f7f9 fdaa 	bl	8000af0 <__aeabi_dcmple>
 8006f9c:	b1a0      	cbz	r0, 8006fc8 <_strtod_l+0xb60>
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	f7f9 fe01 	bl	8000ba8 <__aeabi_d2uiz>
 8006fa6:	2801      	cmp	r0, #1
 8006fa8:	bf38      	it	cc
 8006faa:	2001      	movcc	r0, #1
 8006fac:	f7f9 faaa 	bl	8000504 <__aeabi_ui2d>
 8006fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	bb23      	cbnz	r3, 8007002 <_strtod_l+0xb9a>
 8006fb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fbc:	9010      	str	r0, [sp, #64]	; 0x40
 8006fbe:	9311      	str	r3, [sp, #68]	; 0x44
 8006fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fcc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fd8:	eeb0 0a48 	vmov.f32	s0, s16
 8006fdc:	eef0 0a68 	vmov.f32	s1, s17
 8006fe0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006fe4:	f001 fe58 	bl	8008c98 <__ulp>
 8006fe8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006fec:	ec53 2b10 	vmov	r2, r3, d0
 8006ff0:	f7f9 fb02 	bl	80005f8 <__aeabi_dmul>
 8006ff4:	ec53 2b18 	vmov	r2, r3, d8
 8006ff8:	f7f9 f948 	bl	800028c <__adddf3>
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	468b      	mov	fp, r1
 8007000:	e78d      	b.n	8006f1e <_strtod_l+0xab6>
 8007002:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007006:	e7db      	b.n	8006fc0 <_strtod_l+0xb58>
 8007008:	a311      	add	r3, pc, #68	; (adr r3, 8007050 <_strtod_l+0xbe8>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 fd65 	bl	8000adc <__aeabi_dcmplt>
 8007012:	e7b2      	b.n	8006f7a <_strtod_l+0xb12>
 8007014:	2300      	movs	r3, #0
 8007016:	930a      	str	r3, [sp, #40]	; 0x28
 8007018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800701a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	f7ff ba6b 	b.w	80064f8 <_strtod_l+0x90>
 8007022:	2a65      	cmp	r2, #101	; 0x65
 8007024:	f43f ab5f 	beq.w	80066e6 <_strtod_l+0x27e>
 8007028:	2a45      	cmp	r2, #69	; 0x45
 800702a:	f43f ab5c 	beq.w	80066e6 <_strtod_l+0x27e>
 800702e:	2301      	movs	r3, #1
 8007030:	f7ff bb94 	b.w	800675c <_strtod_l+0x2f4>
 8007034:	f3af 8000 	nop.w
 8007038:	94a03595 	.word	0x94a03595
 800703c:	3fdfffff 	.word	0x3fdfffff
 8007040:	35afe535 	.word	0x35afe535
 8007044:	3fe00000 	.word	0x3fe00000
 8007048:	ffc00000 	.word	0xffc00000
 800704c:	41dfffff 	.word	0x41dfffff
 8007050:	94a03595 	.word	0x94a03595
 8007054:	3fcfffff 	.word	0x3fcfffff
 8007058:	3ff00000 	.word	0x3ff00000
 800705c:	7ff00000 	.word	0x7ff00000
 8007060:	7fe00000 	.word	0x7fe00000
 8007064:	7c9fffff 	.word	0x7c9fffff
 8007068:	3fe00000 	.word	0x3fe00000
 800706c:	bff00000 	.word	0xbff00000
 8007070:	7fefffff 	.word	0x7fefffff

08007074 <_strtod_r>:
 8007074:	4b01      	ldr	r3, [pc, #4]	; (800707c <_strtod_r+0x8>)
 8007076:	f7ff b9f7 	b.w	8006468 <_strtod_l>
 800707a:	bf00      	nop
 800707c:	20000074 	.word	0x20000074

08007080 <_strtol_l.constprop.0>:
 8007080:	2b01      	cmp	r3, #1
 8007082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007086:	d001      	beq.n	800708c <_strtol_l.constprop.0+0xc>
 8007088:	2b24      	cmp	r3, #36	; 0x24
 800708a:	d906      	bls.n	800709a <_strtol_l.constprop.0+0x1a>
 800708c:	f7fe fafc 	bl	8005688 <__errno>
 8007090:	2316      	movs	r3, #22
 8007092:	6003      	str	r3, [r0, #0]
 8007094:	2000      	movs	r0, #0
 8007096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007180 <_strtol_l.constprop.0+0x100>
 800709e:	460d      	mov	r5, r1
 80070a0:	462e      	mov	r6, r5
 80070a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80070aa:	f017 0708 	ands.w	r7, r7, #8
 80070ae:	d1f7      	bne.n	80070a0 <_strtol_l.constprop.0+0x20>
 80070b0:	2c2d      	cmp	r4, #45	; 0x2d
 80070b2:	d132      	bne.n	800711a <_strtol_l.constprop.0+0x9a>
 80070b4:	782c      	ldrb	r4, [r5, #0]
 80070b6:	2701      	movs	r7, #1
 80070b8:	1cb5      	adds	r5, r6, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d05b      	beq.n	8007176 <_strtol_l.constprop.0+0xf6>
 80070be:	2b10      	cmp	r3, #16
 80070c0:	d109      	bne.n	80070d6 <_strtol_l.constprop.0+0x56>
 80070c2:	2c30      	cmp	r4, #48	; 0x30
 80070c4:	d107      	bne.n	80070d6 <_strtol_l.constprop.0+0x56>
 80070c6:	782c      	ldrb	r4, [r5, #0]
 80070c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80070cc:	2c58      	cmp	r4, #88	; 0x58
 80070ce:	d14d      	bne.n	800716c <_strtol_l.constprop.0+0xec>
 80070d0:	786c      	ldrb	r4, [r5, #1]
 80070d2:	2310      	movs	r3, #16
 80070d4:	3502      	adds	r5, #2
 80070d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80070da:	f108 38ff 	add.w	r8, r8, #4294967295
 80070de:	f04f 0c00 	mov.w	ip, #0
 80070e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80070e6:	4666      	mov	r6, ip
 80070e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80070ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80070f0:	f1be 0f09 	cmp.w	lr, #9
 80070f4:	d816      	bhi.n	8007124 <_strtol_l.constprop.0+0xa4>
 80070f6:	4674      	mov	r4, lr
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	dd24      	ble.n	8007146 <_strtol_l.constprop.0+0xc6>
 80070fc:	f1bc 0f00 	cmp.w	ip, #0
 8007100:	db1e      	blt.n	8007140 <_strtol_l.constprop.0+0xc0>
 8007102:	45b1      	cmp	r9, r6
 8007104:	d31c      	bcc.n	8007140 <_strtol_l.constprop.0+0xc0>
 8007106:	d101      	bne.n	800710c <_strtol_l.constprop.0+0x8c>
 8007108:	45a2      	cmp	sl, r4
 800710a:	db19      	blt.n	8007140 <_strtol_l.constprop.0+0xc0>
 800710c:	fb06 4603 	mla	r6, r6, r3, r4
 8007110:	f04f 0c01 	mov.w	ip, #1
 8007114:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007118:	e7e8      	b.n	80070ec <_strtol_l.constprop.0+0x6c>
 800711a:	2c2b      	cmp	r4, #43	; 0x2b
 800711c:	bf04      	itt	eq
 800711e:	782c      	ldrbeq	r4, [r5, #0]
 8007120:	1cb5      	addeq	r5, r6, #2
 8007122:	e7ca      	b.n	80070ba <_strtol_l.constprop.0+0x3a>
 8007124:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007128:	f1be 0f19 	cmp.w	lr, #25
 800712c:	d801      	bhi.n	8007132 <_strtol_l.constprop.0+0xb2>
 800712e:	3c37      	subs	r4, #55	; 0x37
 8007130:	e7e2      	b.n	80070f8 <_strtol_l.constprop.0+0x78>
 8007132:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007136:	f1be 0f19 	cmp.w	lr, #25
 800713a:	d804      	bhi.n	8007146 <_strtol_l.constprop.0+0xc6>
 800713c:	3c57      	subs	r4, #87	; 0x57
 800713e:	e7db      	b.n	80070f8 <_strtol_l.constprop.0+0x78>
 8007140:	f04f 3cff 	mov.w	ip, #4294967295
 8007144:	e7e6      	b.n	8007114 <_strtol_l.constprop.0+0x94>
 8007146:	f1bc 0f00 	cmp.w	ip, #0
 800714a:	da05      	bge.n	8007158 <_strtol_l.constprop.0+0xd8>
 800714c:	2322      	movs	r3, #34	; 0x22
 800714e:	6003      	str	r3, [r0, #0]
 8007150:	4646      	mov	r6, r8
 8007152:	b942      	cbnz	r2, 8007166 <_strtol_l.constprop.0+0xe6>
 8007154:	4630      	mov	r0, r6
 8007156:	e79e      	b.n	8007096 <_strtol_l.constprop.0+0x16>
 8007158:	b107      	cbz	r7, 800715c <_strtol_l.constprop.0+0xdc>
 800715a:	4276      	negs	r6, r6
 800715c:	2a00      	cmp	r2, #0
 800715e:	d0f9      	beq.n	8007154 <_strtol_l.constprop.0+0xd4>
 8007160:	f1bc 0f00 	cmp.w	ip, #0
 8007164:	d000      	beq.n	8007168 <_strtol_l.constprop.0+0xe8>
 8007166:	1e69      	subs	r1, r5, #1
 8007168:	6011      	str	r1, [r2, #0]
 800716a:	e7f3      	b.n	8007154 <_strtol_l.constprop.0+0xd4>
 800716c:	2430      	movs	r4, #48	; 0x30
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1b1      	bne.n	80070d6 <_strtol_l.constprop.0+0x56>
 8007172:	2308      	movs	r3, #8
 8007174:	e7af      	b.n	80070d6 <_strtol_l.constprop.0+0x56>
 8007176:	2c30      	cmp	r4, #48	; 0x30
 8007178:	d0a5      	beq.n	80070c6 <_strtol_l.constprop.0+0x46>
 800717a:	230a      	movs	r3, #10
 800717c:	e7ab      	b.n	80070d6 <_strtol_l.constprop.0+0x56>
 800717e:	bf00      	nop
 8007180:	0800b3d1 	.word	0x0800b3d1

08007184 <_strtol_r>:
 8007184:	f7ff bf7c 	b.w	8007080 <_strtol_l.constprop.0>

08007188 <quorem>:
 8007188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	6903      	ldr	r3, [r0, #16]
 800718e:	690c      	ldr	r4, [r1, #16]
 8007190:	42a3      	cmp	r3, r4
 8007192:	4607      	mov	r7, r0
 8007194:	f2c0 8081 	blt.w	800729a <quorem+0x112>
 8007198:	3c01      	subs	r4, #1
 800719a:	f101 0814 	add.w	r8, r1, #20
 800719e:	f100 0514 	add.w	r5, r0, #20
 80071a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071b0:	3301      	adds	r3, #1
 80071b2:	429a      	cmp	r2, r3
 80071b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80071b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80071c0:	d331      	bcc.n	8007226 <quorem+0x9e>
 80071c2:	f04f 0e00 	mov.w	lr, #0
 80071c6:	4640      	mov	r0, r8
 80071c8:	46ac      	mov	ip, r5
 80071ca:	46f2      	mov	sl, lr
 80071cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80071d0:	b293      	uxth	r3, r2
 80071d2:	fb06 e303 	mla	r3, r6, r3, lr
 80071d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ebaa 0303 	sub.w	r3, sl, r3
 80071e0:	f8dc a000 	ldr.w	sl, [ip]
 80071e4:	0c12      	lsrs	r2, r2, #16
 80071e6:	fa13 f38a 	uxtah	r3, r3, sl
 80071ea:	fb06 e202 	mla	r2, r6, r2, lr
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	9b00      	ldr	r3, [sp, #0]
 80071f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071f6:	b292      	uxth	r2, r2
 80071f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007200:	f8bd 3000 	ldrh.w	r3, [sp]
 8007204:	4581      	cmp	r9, r0
 8007206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800720a:	f84c 3b04 	str.w	r3, [ip], #4
 800720e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007212:	d2db      	bcs.n	80071cc <quorem+0x44>
 8007214:	f855 300b 	ldr.w	r3, [r5, fp]
 8007218:	b92b      	cbnz	r3, 8007226 <quorem+0x9e>
 800721a:	9b01      	ldr	r3, [sp, #4]
 800721c:	3b04      	subs	r3, #4
 800721e:	429d      	cmp	r5, r3
 8007220:	461a      	mov	r2, r3
 8007222:	d32e      	bcc.n	8007282 <quorem+0xfa>
 8007224:	613c      	str	r4, [r7, #16]
 8007226:	4638      	mov	r0, r7
 8007228:	f001 fc90 	bl	8008b4c <__mcmp>
 800722c:	2800      	cmp	r0, #0
 800722e:	db24      	blt.n	800727a <quorem+0xf2>
 8007230:	3601      	adds	r6, #1
 8007232:	4628      	mov	r0, r5
 8007234:	f04f 0c00 	mov.w	ip, #0
 8007238:	f858 2b04 	ldr.w	r2, [r8], #4
 800723c:	f8d0 e000 	ldr.w	lr, [r0]
 8007240:	b293      	uxth	r3, r2
 8007242:	ebac 0303 	sub.w	r3, ip, r3
 8007246:	0c12      	lsrs	r2, r2, #16
 8007248:	fa13 f38e 	uxtah	r3, r3, lr
 800724c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007250:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007254:	b29b      	uxth	r3, r3
 8007256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800725a:	45c1      	cmp	r9, r8
 800725c:	f840 3b04 	str.w	r3, [r0], #4
 8007260:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007264:	d2e8      	bcs.n	8007238 <quorem+0xb0>
 8007266:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800726a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800726e:	b922      	cbnz	r2, 800727a <quorem+0xf2>
 8007270:	3b04      	subs	r3, #4
 8007272:	429d      	cmp	r5, r3
 8007274:	461a      	mov	r2, r3
 8007276:	d30a      	bcc.n	800728e <quorem+0x106>
 8007278:	613c      	str	r4, [r7, #16]
 800727a:	4630      	mov	r0, r6
 800727c:	b003      	add	sp, #12
 800727e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	3b04      	subs	r3, #4
 8007286:	2a00      	cmp	r2, #0
 8007288:	d1cc      	bne.n	8007224 <quorem+0x9c>
 800728a:	3c01      	subs	r4, #1
 800728c:	e7c7      	b.n	800721e <quorem+0x96>
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	3b04      	subs	r3, #4
 8007292:	2a00      	cmp	r2, #0
 8007294:	d1f0      	bne.n	8007278 <quorem+0xf0>
 8007296:	3c01      	subs	r4, #1
 8007298:	e7eb      	b.n	8007272 <quorem+0xea>
 800729a:	2000      	movs	r0, #0
 800729c:	e7ee      	b.n	800727c <quorem+0xf4>
	...

080072a0 <_dtoa_r>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	ed2d 8b04 	vpush	{d8-d9}
 80072a8:	ec57 6b10 	vmov	r6, r7, d0
 80072ac:	b093      	sub	sp, #76	; 0x4c
 80072ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80072b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80072b4:	9106      	str	r1, [sp, #24]
 80072b6:	ee10 aa10 	vmov	sl, s0
 80072ba:	4604      	mov	r4, r0
 80072bc:	9209      	str	r2, [sp, #36]	; 0x24
 80072be:	930c      	str	r3, [sp, #48]	; 0x30
 80072c0:	46bb      	mov	fp, r7
 80072c2:	b975      	cbnz	r5, 80072e2 <_dtoa_r+0x42>
 80072c4:	2010      	movs	r0, #16
 80072c6:	f001 f94d 	bl	8008564 <malloc>
 80072ca:	4602      	mov	r2, r0
 80072cc:	6260      	str	r0, [r4, #36]	; 0x24
 80072ce:	b920      	cbnz	r0, 80072da <_dtoa_r+0x3a>
 80072d0:	4ba7      	ldr	r3, [pc, #668]	; (8007570 <_dtoa_r+0x2d0>)
 80072d2:	21ea      	movs	r1, #234	; 0xea
 80072d4:	48a7      	ldr	r0, [pc, #668]	; (8007574 <_dtoa_r+0x2d4>)
 80072d6:	f002 f8bd 	bl	8009454 <__assert_func>
 80072da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072de:	6005      	str	r5, [r0, #0]
 80072e0:	60c5      	str	r5, [r0, #12]
 80072e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e4:	6819      	ldr	r1, [r3, #0]
 80072e6:	b151      	cbz	r1, 80072fe <_dtoa_r+0x5e>
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	604a      	str	r2, [r1, #4]
 80072ec:	2301      	movs	r3, #1
 80072ee:	4093      	lsls	r3, r2
 80072f0:	608b      	str	r3, [r1, #8]
 80072f2:	4620      	mov	r0, r4
 80072f4:	f001 f99e 	bl	8008634 <_Bfree>
 80072f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	1e3b      	subs	r3, r7, #0
 8007300:	bfaa      	itet	ge
 8007302:	2300      	movge	r3, #0
 8007304:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007308:	f8c8 3000 	strge.w	r3, [r8]
 800730c:	4b9a      	ldr	r3, [pc, #616]	; (8007578 <_dtoa_r+0x2d8>)
 800730e:	bfbc      	itt	lt
 8007310:	2201      	movlt	r2, #1
 8007312:	f8c8 2000 	strlt.w	r2, [r8]
 8007316:	ea33 030b 	bics.w	r3, r3, fp
 800731a:	d11b      	bne.n	8007354 <_dtoa_r+0xb4>
 800731c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800731e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007328:	4333      	orrs	r3, r6
 800732a:	f000 8592 	beq.w	8007e52 <_dtoa_r+0xbb2>
 800732e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007330:	b963      	cbnz	r3, 800734c <_dtoa_r+0xac>
 8007332:	4b92      	ldr	r3, [pc, #584]	; (800757c <_dtoa_r+0x2dc>)
 8007334:	e022      	b.n	800737c <_dtoa_r+0xdc>
 8007336:	4b92      	ldr	r3, [pc, #584]	; (8007580 <_dtoa_r+0x2e0>)
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	3308      	adds	r3, #8
 800733c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	9801      	ldr	r0, [sp, #4]
 8007342:	b013      	add	sp, #76	; 0x4c
 8007344:	ecbd 8b04 	vpop	{d8-d9}
 8007348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734c:	4b8b      	ldr	r3, [pc, #556]	; (800757c <_dtoa_r+0x2dc>)
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	3303      	adds	r3, #3
 8007352:	e7f3      	b.n	800733c <_dtoa_r+0x9c>
 8007354:	2200      	movs	r2, #0
 8007356:	2300      	movs	r3, #0
 8007358:	4650      	mov	r0, sl
 800735a:	4659      	mov	r1, fp
 800735c:	f7f9 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007360:	ec4b ab19 	vmov	d9, sl, fp
 8007364:	4680      	mov	r8, r0
 8007366:	b158      	cbz	r0, 8007380 <_dtoa_r+0xe0>
 8007368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800736a:	2301      	movs	r3, #1
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 856b 	beq.w	8007e4c <_dtoa_r+0xbac>
 8007376:	4883      	ldr	r0, [pc, #524]	; (8007584 <_dtoa_r+0x2e4>)
 8007378:	6018      	str	r0, [r3, #0]
 800737a:	1e43      	subs	r3, r0, #1
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	e7df      	b.n	8007340 <_dtoa_r+0xa0>
 8007380:	ec4b ab10 	vmov	d0, sl, fp
 8007384:	aa10      	add	r2, sp, #64	; 0x40
 8007386:	a911      	add	r1, sp, #68	; 0x44
 8007388:	4620      	mov	r0, r4
 800738a:	f001 fd01 	bl	8008d90 <__d2b>
 800738e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007392:	ee08 0a10 	vmov	s16, r0
 8007396:	2d00      	cmp	r5, #0
 8007398:	f000 8084 	beq.w	80074a4 <_dtoa_r+0x204>
 800739c:	ee19 3a90 	vmov	r3, s19
 80073a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80073a8:	4656      	mov	r6, sl
 80073aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80073ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80073b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80073b6:	4b74      	ldr	r3, [pc, #464]	; (8007588 <_dtoa_r+0x2e8>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	4630      	mov	r0, r6
 80073bc:	4639      	mov	r1, r7
 80073be:	f7f8 ff63 	bl	8000288 <__aeabi_dsub>
 80073c2:	a365      	add	r3, pc, #404	; (adr r3, 8007558 <_dtoa_r+0x2b8>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	f7f9 f916 	bl	80005f8 <__aeabi_dmul>
 80073cc:	a364      	add	r3, pc, #400	; (adr r3, 8007560 <_dtoa_r+0x2c0>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f8 ff5b 	bl	800028c <__adddf3>
 80073d6:	4606      	mov	r6, r0
 80073d8:	4628      	mov	r0, r5
 80073da:	460f      	mov	r7, r1
 80073dc:	f7f9 f8a2 	bl	8000524 <__aeabi_i2d>
 80073e0:	a361      	add	r3, pc, #388	; (adr r3, 8007568 <_dtoa_r+0x2c8>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f7f9 f907 	bl	80005f8 <__aeabi_dmul>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4630      	mov	r0, r6
 80073f0:	4639      	mov	r1, r7
 80073f2:	f7f8 ff4b 	bl	800028c <__adddf3>
 80073f6:	4606      	mov	r6, r0
 80073f8:	460f      	mov	r7, r1
 80073fa:	f7f9 fbad 	bl	8000b58 <__aeabi_d2iz>
 80073fe:	2200      	movs	r2, #0
 8007400:	9000      	str	r0, [sp, #0]
 8007402:	2300      	movs	r3, #0
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f7f9 fb68 	bl	8000adc <__aeabi_dcmplt>
 800740c:	b150      	cbz	r0, 8007424 <_dtoa_r+0x184>
 800740e:	9800      	ldr	r0, [sp, #0]
 8007410:	f7f9 f888 	bl	8000524 <__aeabi_i2d>
 8007414:	4632      	mov	r2, r6
 8007416:	463b      	mov	r3, r7
 8007418:	f7f9 fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 800741c:	b910      	cbnz	r0, 8007424 <_dtoa_r+0x184>
 800741e:	9b00      	ldr	r3, [sp, #0]
 8007420:	3b01      	subs	r3, #1
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	9b00      	ldr	r3, [sp, #0]
 8007426:	2b16      	cmp	r3, #22
 8007428:	d85a      	bhi.n	80074e0 <_dtoa_r+0x240>
 800742a:	9a00      	ldr	r2, [sp, #0]
 800742c:	4b57      	ldr	r3, [pc, #348]	; (800758c <_dtoa_r+0x2ec>)
 800742e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	ec51 0b19 	vmov	r0, r1, d9
 800743a:	f7f9 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800743e:	2800      	cmp	r0, #0
 8007440:	d050      	beq.n	80074e4 <_dtoa_r+0x244>
 8007442:	9b00      	ldr	r3, [sp, #0]
 8007444:	3b01      	subs	r3, #1
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	2300      	movs	r3, #0
 800744a:	930b      	str	r3, [sp, #44]	; 0x2c
 800744c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800744e:	1b5d      	subs	r5, r3, r5
 8007450:	1e6b      	subs	r3, r5, #1
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	bf45      	ittet	mi
 8007456:	f1c5 0301 	rsbmi	r3, r5, #1
 800745a:	9304      	strmi	r3, [sp, #16]
 800745c:	2300      	movpl	r3, #0
 800745e:	2300      	movmi	r3, #0
 8007460:	bf4c      	ite	mi
 8007462:	9305      	strmi	r3, [sp, #20]
 8007464:	9304      	strpl	r3, [sp, #16]
 8007466:	9b00      	ldr	r3, [sp, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	db3d      	blt.n	80074e8 <_dtoa_r+0x248>
 800746c:	9b05      	ldr	r3, [sp, #20]
 800746e:	9a00      	ldr	r2, [sp, #0]
 8007470:	920a      	str	r2, [sp, #40]	; 0x28
 8007472:	4413      	add	r3, r2
 8007474:	9305      	str	r3, [sp, #20]
 8007476:	2300      	movs	r3, #0
 8007478:	9307      	str	r3, [sp, #28]
 800747a:	9b06      	ldr	r3, [sp, #24]
 800747c:	2b09      	cmp	r3, #9
 800747e:	f200 8089 	bhi.w	8007594 <_dtoa_r+0x2f4>
 8007482:	2b05      	cmp	r3, #5
 8007484:	bfc4      	itt	gt
 8007486:	3b04      	subgt	r3, #4
 8007488:	9306      	strgt	r3, [sp, #24]
 800748a:	9b06      	ldr	r3, [sp, #24]
 800748c:	f1a3 0302 	sub.w	r3, r3, #2
 8007490:	bfcc      	ite	gt
 8007492:	2500      	movgt	r5, #0
 8007494:	2501      	movle	r5, #1
 8007496:	2b03      	cmp	r3, #3
 8007498:	f200 8087 	bhi.w	80075aa <_dtoa_r+0x30a>
 800749c:	e8df f003 	tbb	[pc, r3]
 80074a0:	59383a2d 	.word	0x59383a2d
 80074a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80074a8:	441d      	add	r5, r3
 80074aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	bfc1      	itttt	gt
 80074b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80074b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80074ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80074be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80074c2:	bfda      	itte	le
 80074c4:	f1c3 0320 	rsble	r3, r3, #32
 80074c8:	fa06 f003 	lslle.w	r0, r6, r3
 80074cc:	4318      	orrgt	r0, r3
 80074ce:	f7f9 f819 	bl	8000504 <__aeabi_ui2d>
 80074d2:	2301      	movs	r3, #1
 80074d4:	4606      	mov	r6, r0
 80074d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80074da:	3d01      	subs	r5, #1
 80074dc:	930e      	str	r3, [sp, #56]	; 0x38
 80074de:	e76a      	b.n	80073b6 <_dtoa_r+0x116>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e7b2      	b.n	800744a <_dtoa_r+0x1aa>
 80074e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80074e6:	e7b1      	b.n	800744c <_dtoa_r+0x1ac>
 80074e8:	9b04      	ldr	r3, [sp, #16]
 80074ea:	9a00      	ldr	r2, [sp, #0]
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	9304      	str	r3, [sp, #16]
 80074f0:	4253      	negs	r3, r2
 80074f2:	9307      	str	r3, [sp, #28]
 80074f4:	2300      	movs	r3, #0
 80074f6:	930a      	str	r3, [sp, #40]	; 0x28
 80074f8:	e7bf      	b.n	800747a <_dtoa_r+0x1da>
 80074fa:	2300      	movs	r3, #0
 80074fc:	9308      	str	r3, [sp, #32]
 80074fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	dc55      	bgt.n	80075b0 <_dtoa_r+0x310>
 8007504:	2301      	movs	r3, #1
 8007506:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800750a:	461a      	mov	r2, r3
 800750c:	9209      	str	r2, [sp, #36]	; 0x24
 800750e:	e00c      	b.n	800752a <_dtoa_r+0x28a>
 8007510:	2301      	movs	r3, #1
 8007512:	e7f3      	b.n	80074fc <_dtoa_r+0x25c>
 8007514:	2300      	movs	r3, #0
 8007516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007518:	9308      	str	r3, [sp, #32]
 800751a:	9b00      	ldr	r3, [sp, #0]
 800751c:	4413      	add	r3, r2
 800751e:	9302      	str	r3, [sp, #8]
 8007520:	3301      	adds	r3, #1
 8007522:	2b01      	cmp	r3, #1
 8007524:	9303      	str	r3, [sp, #12]
 8007526:	bfb8      	it	lt
 8007528:	2301      	movlt	r3, #1
 800752a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800752c:	2200      	movs	r2, #0
 800752e:	6042      	str	r2, [r0, #4]
 8007530:	2204      	movs	r2, #4
 8007532:	f102 0614 	add.w	r6, r2, #20
 8007536:	429e      	cmp	r6, r3
 8007538:	6841      	ldr	r1, [r0, #4]
 800753a:	d93d      	bls.n	80075b8 <_dtoa_r+0x318>
 800753c:	4620      	mov	r0, r4
 800753e:	f001 f839 	bl	80085b4 <_Balloc>
 8007542:	9001      	str	r0, [sp, #4]
 8007544:	2800      	cmp	r0, #0
 8007546:	d13b      	bne.n	80075c0 <_dtoa_r+0x320>
 8007548:	4b11      	ldr	r3, [pc, #68]	; (8007590 <_dtoa_r+0x2f0>)
 800754a:	4602      	mov	r2, r0
 800754c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007550:	e6c0      	b.n	80072d4 <_dtoa_r+0x34>
 8007552:	2301      	movs	r3, #1
 8007554:	e7df      	b.n	8007516 <_dtoa_r+0x276>
 8007556:	bf00      	nop
 8007558:	636f4361 	.word	0x636f4361
 800755c:	3fd287a7 	.word	0x3fd287a7
 8007560:	8b60c8b3 	.word	0x8b60c8b3
 8007564:	3fc68a28 	.word	0x3fc68a28
 8007568:	509f79fb 	.word	0x509f79fb
 800756c:	3fd34413 	.word	0x3fd34413
 8007570:	0800b4de 	.word	0x0800b4de
 8007574:	0800b4f5 	.word	0x0800b4f5
 8007578:	7ff00000 	.word	0x7ff00000
 800757c:	0800b4da 	.word	0x0800b4da
 8007580:	0800b4d1 	.word	0x0800b4d1
 8007584:	0800b355 	.word	0x0800b355
 8007588:	3ff80000 	.word	0x3ff80000
 800758c:	0800b660 	.word	0x0800b660
 8007590:	0800b550 	.word	0x0800b550
 8007594:	2501      	movs	r5, #1
 8007596:	2300      	movs	r3, #0
 8007598:	9306      	str	r3, [sp, #24]
 800759a:	9508      	str	r5, [sp, #32]
 800759c:	f04f 33ff 	mov.w	r3, #4294967295
 80075a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075a4:	2200      	movs	r2, #0
 80075a6:	2312      	movs	r3, #18
 80075a8:	e7b0      	b.n	800750c <_dtoa_r+0x26c>
 80075aa:	2301      	movs	r3, #1
 80075ac:	9308      	str	r3, [sp, #32]
 80075ae:	e7f5      	b.n	800759c <_dtoa_r+0x2fc>
 80075b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80075b6:	e7b8      	b.n	800752a <_dtoa_r+0x28a>
 80075b8:	3101      	adds	r1, #1
 80075ba:	6041      	str	r1, [r0, #4]
 80075bc:	0052      	lsls	r2, r2, #1
 80075be:	e7b8      	b.n	8007532 <_dtoa_r+0x292>
 80075c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075c2:	9a01      	ldr	r2, [sp, #4]
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	9b03      	ldr	r3, [sp, #12]
 80075c8:	2b0e      	cmp	r3, #14
 80075ca:	f200 809d 	bhi.w	8007708 <_dtoa_r+0x468>
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	f000 809a 	beq.w	8007708 <_dtoa_r+0x468>
 80075d4:	9b00      	ldr	r3, [sp, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	dd32      	ble.n	8007640 <_dtoa_r+0x3a0>
 80075da:	4ab7      	ldr	r2, [pc, #732]	; (80078b8 <_dtoa_r+0x618>)
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80075e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075e8:	9b00      	ldr	r3, [sp, #0]
 80075ea:	05d8      	lsls	r0, r3, #23
 80075ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80075f0:	d516      	bpl.n	8007620 <_dtoa_r+0x380>
 80075f2:	4bb2      	ldr	r3, [pc, #712]	; (80078bc <_dtoa_r+0x61c>)
 80075f4:	ec51 0b19 	vmov	r0, r1, d9
 80075f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075fc:	f7f9 f926 	bl	800084c <__aeabi_ddiv>
 8007600:	f007 070f 	and.w	r7, r7, #15
 8007604:	4682      	mov	sl, r0
 8007606:	468b      	mov	fp, r1
 8007608:	2503      	movs	r5, #3
 800760a:	4eac      	ldr	r6, [pc, #688]	; (80078bc <_dtoa_r+0x61c>)
 800760c:	b957      	cbnz	r7, 8007624 <_dtoa_r+0x384>
 800760e:	4642      	mov	r2, r8
 8007610:	464b      	mov	r3, r9
 8007612:	4650      	mov	r0, sl
 8007614:	4659      	mov	r1, fp
 8007616:	f7f9 f919 	bl	800084c <__aeabi_ddiv>
 800761a:	4682      	mov	sl, r0
 800761c:	468b      	mov	fp, r1
 800761e:	e028      	b.n	8007672 <_dtoa_r+0x3d2>
 8007620:	2502      	movs	r5, #2
 8007622:	e7f2      	b.n	800760a <_dtoa_r+0x36a>
 8007624:	07f9      	lsls	r1, r7, #31
 8007626:	d508      	bpl.n	800763a <_dtoa_r+0x39a>
 8007628:	4640      	mov	r0, r8
 800762a:	4649      	mov	r1, r9
 800762c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007630:	f7f8 ffe2 	bl	80005f8 <__aeabi_dmul>
 8007634:	3501      	adds	r5, #1
 8007636:	4680      	mov	r8, r0
 8007638:	4689      	mov	r9, r1
 800763a:	107f      	asrs	r7, r7, #1
 800763c:	3608      	adds	r6, #8
 800763e:	e7e5      	b.n	800760c <_dtoa_r+0x36c>
 8007640:	f000 809b 	beq.w	800777a <_dtoa_r+0x4da>
 8007644:	9b00      	ldr	r3, [sp, #0]
 8007646:	4f9d      	ldr	r7, [pc, #628]	; (80078bc <_dtoa_r+0x61c>)
 8007648:	425e      	negs	r6, r3
 800764a:	4b9b      	ldr	r3, [pc, #620]	; (80078b8 <_dtoa_r+0x618>)
 800764c:	f006 020f 	and.w	r2, r6, #15
 8007650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	ec51 0b19 	vmov	r0, r1, d9
 800765c:	f7f8 ffcc 	bl	80005f8 <__aeabi_dmul>
 8007660:	1136      	asrs	r6, r6, #4
 8007662:	4682      	mov	sl, r0
 8007664:	468b      	mov	fp, r1
 8007666:	2300      	movs	r3, #0
 8007668:	2502      	movs	r5, #2
 800766a:	2e00      	cmp	r6, #0
 800766c:	d17a      	bne.n	8007764 <_dtoa_r+0x4c4>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1d3      	bne.n	800761a <_dtoa_r+0x37a>
 8007672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8082 	beq.w	800777e <_dtoa_r+0x4de>
 800767a:	4b91      	ldr	r3, [pc, #580]	; (80078c0 <_dtoa_r+0x620>)
 800767c:	2200      	movs	r2, #0
 800767e:	4650      	mov	r0, sl
 8007680:	4659      	mov	r1, fp
 8007682:	f7f9 fa2b 	bl	8000adc <__aeabi_dcmplt>
 8007686:	2800      	cmp	r0, #0
 8007688:	d079      	beq.n	800777e <_dtoa_r+0x4de>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d076      	beq.n	800777e <_dtoa_r+0x4de>
 8007690:	9b02      	ldr	r3, [sp, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	dd36      	ble.n	8007704 <_dtoa_r+0x464>
 8007696:	9b00      	ldr	r3, [sp, #0]
 8007698:	4650      	mov	r0, sl
 800769a:	4659      	mov	r1, fp
 800769c:	1e5f      	subs	r7, r3, #1
 800769e:	2200      	movs	r2, #0
 80076a0:	4b88      	ldr	r3, [pc, #544]	; (80078c4 <_dtoa_r+0x624>)
 80076a2:	f7f8 ffa9 	bl	80005f8 <__aeabi_dmul>
 80076a6:	9e02      	ldr	r6, [sp, #8]
 80076a8:	4682      	mov	sl, r0
 80076aa:	468b      	mov	fp, r1
 80076ac:	3501      	adds	r5, #1
 80076ae:	4628      	mov	r0, r5
 80076b0:	f7f8 ff38 	bl	8000524 <__aeabi_i2d>
 80076b4:	4652      	mov	r2, sl
 80076b6:	465b      	mov	r3, fp
 80076b8:	f7f8 ff9e 	bl	80005f8 <__aeabi_dmul>
 80076bc:	4b82      	ldr	r3, [pc, #520]	; (80078c8 <_dtoa_r+0x628>)
 80076be:	2200      	movs	r2, #0
 80076c0:	f7f8 fde4 	bl	800028c <__adddf3>
 80076c4:	46d0      	mov	r8, sl
 80076c6:	46d9      	mov	r9, fp
 80076c8:	4682      	mov	sl, r0
 80076ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	d158      	bne.n	8007784 <_dtoa_r+0x4e4>
 80076d2:	4b7e      	ldr	r3, [pc, #504]	; (80078cc <_dtoa_r+0x62c>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	4640      	mov	r0, r8
 80076d8:	4649      	mov	r1, r9
 80076da:	f7f8 fdd5 	bl	8000288 <__aeabi_dsub>
 80076de:	4652      	mov	r2, sl
 80076e0:	465b      	mov	r3, fp
 80076e2:	4680      	mov	r8, r0
 80076e4:	4689      	mov	r9, r1
 80076e6:	f7f9 fa17 	bl	8000b18 <__aeabi_dcmpgt>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	f040 8295 	bne.w	8007c1a <_dtoa_r+0x97a>
 80076f0:	4652      	mov	r2, sl
 80076f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80076f6:	4640      	mov	r0, r8
 80076f8:	4649      	mov	r1, r9
 80076fa:	f7f9 f9ef 	bl	8000adc <__aeabi_dcmplt>
 80076fe:	2800      	cmp	r0, #0
 8007700:	f040 8289 	bne.w	8007c16 <_dtoa_r+0x976>
 8007704:	ec5b ab19 	vmov	sl, fp, d9
 8007708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800770a:	2b00      	cmp	r3, #0
 800770c:	f2c0 8148 	blt.w	80079a0 <_dtoa_r+0x700>
 8007710:	9a00      	ldr	r2, [sp, #0]
 8007712:	2a0e      	cmp	r2, #14
 8007714:	f300 8144 	bgt.w	80079a0 <_dtoa_r+0x700>
 8007718:	4b67      	ldr	r3, [pc, #412]	; (80078b8 <_dtoa_r+0x618>)
 800771a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800771e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	f280 80d5 	bge.w	80078d4 <_dtoa_r+0x634>
 800772a:	9b03      	ldr	r3, [sp, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f300 80d1 	bgt.w	80078d4 <_dtoa_r+0x634>
 8007732:	f040 826f 	bne.w	8007c14 <_dtoa_r+0x974>
 8007736:	4b65      	ldr	r3, [pc, #404]	; (80078cc <_dtoa_r+0x62c>)
 8007738:	2200      	movs	r2, #0
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	f7f8 ff5b 	bl	80005f8 <__aeabi_dmul>
 8007742:	4652      	mov	r2, sl
 8007744:	465b      	mov	r3, fp
 8007746:	f7f9 f9dd 	bl	8000b04 <__aeabi_dcmpge>
 800774a:	9e03      	ldr	r6, [sp, #12]
 800774c:	4637      	mov	r7, r6
 800774e:	2800      	cmp	r0, #0
 8007750:	f040 8245 	bne.w	8007bde <_dtoa_r+0x93e>
 8007754:	9d01      	ldr	r5, [sp, #4]
 8007756:	2331      	movs	r3, #49	; 0x31
 8007758:	f805 3b01 	strb.w	r3, [r5], #1
 800775c:	9b00      	ldr	r3, [sp, #0]
 800775e:	3301      	adds	r3, #1
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	e240      	b.n	8007be6 <_dtoa_r+0x946>
 8007764:	07f2      	lsls	r2, r6, #31
 8007766:	d505      	bpl.n	8007774 <_dtoa_r+0x4d4>
 8007768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800776c:	f7f8 ff44 	bl	80005f8 <__aeabi_dmul>
 8007770:	3501      	adds	r5, #1
 8007772:	2301      	movs	r3, #1
 8007774:	1076      	asrs	r6, r6, #1
 8007776:	3708      	adds	r7, #8
 8007778:	e777      	b.n	800766a <_dtoa_r+0x3ca>
 800777a:	2502      	movs	r5, #2
 800777c:	e779      	b.n	8007672 <_dtoa_r+0x3d2>
 800777e:	9f00      	ldr	r7, [sp, #0]
 8007780:	9e03      	ldr	r6, [sp, #12]
 8007782:	e794      	b.n	80076ae <_dtoa_r+0x40e>
 8007784:	9901      	ldr	r1, [sp, #4]
 8007786:	4b4c      	ldr	r3, [pc, #304]	; (80078b8 <_dtoa_r+0x618>)
 8007788:	4431      	add	r1, r6
 800778a:	910d      	str	r1, [sp, #52]	; 0x34
 800778c:	9908      	ldr	r1, [sp, #32]
 800778e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007792:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007796:	2900      	cmp	r1, #0
 8007798:	d043      	beq.n	8007822 <_dtoa_r+0x582>
 800779a:	494d      	ldr	r1, [pc, #308]	; (80078d0 <_dtoa_r+0x630>)
 800779c:	2000      	movs	r0, #0
 800779e:	f7f9 f855 	bl	800084c <__aeabi_ddiv>
 80077a2:	4652      	mov	r2, sl
 80077a4:	465b      	mov	r3, fp
 80077a6:	f7f8 fd6f 	bl	8000288 <__aeabi_dsub>
 80077aa:	9d01      	ldr	r5, [sp, #4]
 80077ac:	4682      	mov	sl, r0
 80077ae:	468b      	mov	fp, r1
 80077b0:	4649      	mov	r1, r9
 80077b2:	4640      	mov	r0, r8
 80077b4:	f7f9 f9d0 	bl	8000b58 <__aeabi_d2iz>
 80077b8:	4606      	mov	r6, r0
 80077ba:	f7f8 feb3 	bl	8000524 <__aeabi_i2d>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4640      	mov	r0, r8
 80077c4:	4649      	mov	r1, r9
 80077c6:	f7f8 fd5f 	bl	8000288 <__aeabi_dsub>
 80077ca:	3630      	adds	r6, #48	; 0x30
 80077cc:	f805 6b01 	strb.w	r6, [r5], #1
 80077d0:	4652      	mov	r2, sl
 80077d2:	465b      	mov	r3, fp
 80077d4:	4680      	mov	r8, r0
 80077d6:	4689      	mov	r9, r1
 80077d8:	f7f9 f980 	bl	8000adc <__aeabi_dcmplt>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d163      	bne.n	80078a8 <_dtoa_r+0x608>
 80077e0:	4642      	mov	r2, r8
 80077e2:	464b      	mov	r3, r9
 80077e4:	4936      	ldr	r1, [pc, #216]	; (80078c0 <_dtoa_r+0x620>)
 80077e6:	2000      	movs	r0, #0
 80077e8:	f7f8 fd4e 	bl	8000288 <__aeabi_dsub>
 80077ec:	4652      	mov	r2, sl
 80077ee:	465b      	mov	r3, fp
 80077f0:	f7f9 f974 	bl	8000adc <__aeabi_dcmplt>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	f040 80b5 	bne.w	8007964 <_dtoa_r+0x6c4>
 80077fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077fc:	429d      	cmp	r5, r3
 80077fe:	d081      	beq.n	8007704 <_dtoa_r+0x464>
 8007800:	4b30      	ldr	r3, [pc, #192]	; (80078c4 <_dtoa_r+0x624>)
 8007802:	2200      	movs	r2, #0
 8007804:	4650      	mov	r0, sl
 8007806:	4659      	mov	r1, fp
 8007808:	f7f8 fef6 	bl	80005f8 <__aeabi_dmul>
 800780c:	4b2d      	ldr	r3, [pc, #180]	; (80078c4 <_dtoa_r+0x624>)
 800780e:	4682      	mov	sl, r0
 8007810:	468b      	mov	fp, r1
 8007812:	4640      	mov	r0, r8
 8007814:	4649      	mov	r1, r9
 8007816:	2200      	movs	r2, #0
 8007818:	f7f8 feee 	bl	80005f8 <__aeabi_dmul>
 800781c:	4680      	mov	r8, r0
 800781e:	4689      	mov	r9, r1
 8007820:	e7c6      	b.n	80077b0 <_dtoa_r+0x510>
 8007822:	4650      	mov	r0, sl
 8007824:	4659      	mov	r1, fp
 8007826:	f7f8 fee7 	bl	80005f8 <__aeabi_dmul>
 800782a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800782c:	9d01      	ldr	r5, [sp, #4]
 800782e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007830:	4682      	mov	sl, r0
 8007832:	468b      	mov	fp, r1
 8007834:	4649      	mov	r1, r9
 8007836:	4640      	mov	r0, r8
 8007838:	f7f9 f98e 	bl	8000b58 <__aeabi_d2iz>
 800783c:	4606      	mov	r6, r0
 800783e:	f7f8 fe71 	bl	8000524 <__aeabi_i2d>
 8007842:	3630      	adds	r6, #48	; 0x30
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4640      	mov	r0, r8
 800784a:	4649      	mov	r1, r9
 800784c:	f7f8 fd1c 	bl	8000288 <__aeabi_dsub>
 8007850:	f805 6b01 	strb.w	r6, [r5], #1
 8007854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007856:	429d      	cmp	r5, r3
 8007858:	4680      	mov	r8, r0
 800785a:	4689      	mov	r9, r1
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	d124      	bne.n	80078ac <_dtoa_r+0x60c>
 8007862:	4b1b      	ldr	r3, [pc, #108]	; (80078d0 <_dtoa_r+0x630>)
 8007864:	4650      	mov	r0, sl
 8007866:	4659      	mov	r1, fp
 8007868:	f7f8 fd10 	bl	800028c <__adddf3>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4640      	mov	r0, r8
 8007872:	4649      	mov	r1, r9
 8007874:	f7f9 f950 	bl	8000b18 <__aeabi_dcmpgt>
 8007878:	2800      	cmp	r0, #0
 800787a:	d173      	bne.n	8007964 <_dtoa_r+0x6c4>
 800787c:	4652      	mov	r2, sl
 800787e:	465b      	mov	r3, fp
 8007880:	4913      	ldr	r1, [pc, #76]	; (80078d0 <_dtoa_r+0x630>)
 8007882:	2000      	movs	r0, #0
 8007884:	f7f8 fd00 	bl	8000288 <__aeabi_dsub>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4640      	mov	r0, r8
 800788e:	4649      	mov	r1, r9
 8007890:	f7f9 f924 	bl	8000adc <__aeabi_dcmplt>
 8007894:	2800      	cmp	r0, #0
 8007896:	f43f af35 	beq.w	8007704 <_dtoa_r+0x464>
 800789a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800789c:	1e6b      	subs	r3, r5, #1
 800789e:	930f      	str	r3, [sp, #60]	; 0x3c
 80078a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078a4:	2b30      	cmp	r3, #48	; 0x30
 80078a6:	d0f8      	beq.n	800789a <_dtoa_r+0x5fa>
 80078a8:	9700      	str	r7, [sp, #0]
 80078aa:	e049      	b.n	8007940 <_dtoa_r+0x6a0>
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <_dtoa_r+0x624>)
 80078ae:	f7f8 fea3 	bl	80005f8 <__aeabi_dmul>
 80078b2:	4680      	mov	r8, r0
 80078b4:	4689      	mov	r9, r1
 80078b6:	e7bd      	b.n	8007834 <_dtoa_r+0x594>
 80078b8:	0800b660 	.word	0x0800b660
 80078bc:	0800b638 	.word	0x0800b638
 80078c0:	3ff00000 	.word	0x3ff00000
 80078c4:	40240000 	.word	0x40240000
 80078c8:	401c0000 	.word	0x401c0000
 80078cc:	40140000 	.word	0x40140000
 80078d0:	3fe00000 	.word	0x3fe00000
 80078d4:	9d01      	ldr	r5, [sp, #4]
 80078d6:	4656      	mov	r6, sl
 80078d8:	465f      	mov	r7, fp
 80078da:	4642      	mov	r2, r8
 80078dc:	464b      	mov	r3, r9
 80078de:	4630      	mov	r0, r6
 80078e0:	4639      	mov	r1, r7
 80078e2:	f7f8 ffb3 	bl	800084c <__aeabi_ddiv>
 80078e6:	f7f9 f937 	bl	8000b58 <__aeabi_d2iz>
 80078ea:	4682      	mov	sl, r0
 80078ec:	f7f8 fe1a 	bl	8000524 <__aeabi_i2d>
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	f7f8 fe80 	bl	80005f8 <__aeabi_dmul>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4630      	mov	r0, r6
 80078fe:	4639      	mov	r1, r7
 8007900:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007904:	f7f8 fcc0 	bl	8000288 <__aeabi_dsub>
 8007908:	f805 6b01 	strb.w	r6, [r5], #1
 800790c:	9e01      	ldr	r6, [sp, #4]
 800790e:	9f03      	ldr	r7, [sp, #12]
 8007910:	1bae      	subs	r6, r5, r6
 8007912:	42b7      	cmp	r7, r6
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	d135      	bne.n	8007986 <_dtoa_r+0x6e6>
 800791a:	f7f8 fcb7 	bl	800028c <__adddf3>
 800791e:	4642      	mov	r2, r8
 8007920:	464b      	mov	r3, r9
 8007922:	4606      	mov	r6, r0
 8007924:	460f      	mov	r7, r1
 8007926:	f7f9 f8f7 	bl	8000b18 <__aeabi_dcmpgt>
 800792a:	b9d0      	cbnz	r0, 8007962 <_dtoa_r+0x6c2>
 800792c:	4642      	mov	r2, r8
 800792e:	464b      	mov	r3, r9
 8007930:	4630      	mov	r0, r6
 8007932:	4639      	mov	r1, r7
 8007934:	f7f9 f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007938:	b110      	cbz	r0, 8007940 <_dtoa_r+0x6a0>
 800793a:	f01a 0f01 	tst.w	sl, #1
 800793e:	d110      	bne.n	8007962 <_dtoa_r+0x6c2>
 8007940:	4620      	mov	r0, r4
 8007942:	ee18 1a10 	vmov	r1, s16
 8007946:	f000 fe75 	bl	8008634 <_Bfree>
 800794a:	2300      	movs	r3, #0
 800794c:	9800      	ldr	r0, [sp, #0]
 800794e:	702b      	strb	r3, [r5, #0]
 8007950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007952:	3001      	adds	r0, #1
 8007954:	6018      	str	r0, [r3, #0]
 8007956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007958:	2b00      	cmp	r3, #0
 800795a:	f43f acf1 	beq.w	8007340 <_dtoa_r+0xa0>
 800795e:	601d      	str	r5, [r3, #0]
 8007960:	e4ee      	b.n	8007340 <_dtoa_r+0xa0>
 8007962:	9f00      	ldr	r7, [sp, #0]
 8007964:	462b      	mov	r3, r5
 8007966:	461d      	mov	r5, r3
 8007968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800796c:	2a39      	cmp	r2, #57	; 0x39
 800796e:	d106      	bne.n	800797e <_dtoa_r+0x6de>
 8007970:	9a01      	ldr	r2, [sp, #4]
 8007972:	429a      	cmp	r2, r3
 8007974:	d1f7      	bne.n	8007966 <_dtoa_r+0x6c6>
 8007976:	9901      	ldr	r1, [sp, #4]
 8007978:	2230      	movs	r2, #48	; 0x30
 800797a:	3701      	adds	r7, #1
 800797c:	700a      	strb	r2, [r1, #0]
 800797e:	781a      	ldrb	r2, [r3, #0]
 8007980:	3201      	adds	r2, #1
 8007982:	701a      	strb	r2, [r3, #0]
 8007984:	e790      	b.n	80078a8 <_dtoa_r+0x608>
 8007986:	4ba6      	ldr	r3, [pc, #664]	; (8007c20 <_dtoa_r+0x980>)
 8007988:	2200      	movs	r2, #0
 800798a:	f7f8 fe35 	bl	80005f8 <__aeabi_dmul>
 800798e:	2200      	movs	r2, #0
 8007990:	2300      	movs	r3, #0
 8007992:	4606      	mov	r6, r0
 8007994:	460f      	mov	r7, r1
 8007996:	f7f9 f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800799a:	2800      	cmp	r0, #0
 800799c:	d09d      	beq.n	80078da <_dtoa_r+0x63a>
 800799e:	e7cf      	b.n	8007940 <_dtoa_r+0x6a0>
 80079a0:	9a08      	ldr	r2, [sp, #32]
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	f000 80d7 	beq.w	8007b56 <_dtoa_r+0x8b6>
 80079a8:	9a06      	ldr	r2, [sp, #24]
 80079aa:	2a01      	cmp	r2, #1
 80079ac:	f300 80ba 	bgt.w	8007b24 <_dtoa_r+0x884>
 80079b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	f000 80b2 	beq.w	8007b1c <_dtoa_r+0x87c>
 80079b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079bc:	9e07      	ldr	r6, [sp, #28]
 80079be:	9d04      	ldr	r5, [sp, #16]
 80079c0:	9a04      	ldr	r2, [sp, #16]
 80079c2:	441a      	add	r2, r3
 80079c4:	9204      	str	r2, [sp, #16]
 80079c6:	9a05      	ldr	r2, [sp, #20]
 80079c8:	2101      	movs	r1, #1
 80079ca:	441a      	add	r2, r3
 80079cc:	4620      	mov	r0, r4
 80079ce:	9205      	str	r2, [sp, #20]
 80079d0:	f000 ff32 	bl	8008838 <__i2b>
 80079d4:	4607      	mov	r7, r0
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	dd0c      	ble.n	80079f4 <_dtoa_r+0x754>
 80079da:	9b05      	ldr	r3, [sp, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	dd09      	ble.n	80079f4 <_dtoa_r+0x754>
 80079e0:	42ab      	cmp	r3, r5
 80079e2:	9a04      	ldr	r2, [sp, #16]
 80079e4:	bfa8      	it	ge
 80079e6:	462b      	movge	r3, r5
 80079e8:	1ad2      	subs	r2, r2, r3
 80079ea:	9204      	str	r2, [sp, #16]
 80079ec:	9a05      	ldr	r2, [sp, #20]
 80079ee:	1aed      	subs	r5, r5, r3
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	9305      	str	r3, [sp, #20]
 80079f4:	9b07      	ldr	r3, [sp, #28]
 80079f6:	b31b      	cbz	r3, 8007a40 <_dtoa_r+0x7a0>
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 80af 	beq.w	8007b5e <_dtoa_r+0x8be>
 8007a00:	2e00      	cmp	r6, #0
 8007a02:	dd13      	ble.n	8007a2c <_dtoa_r+0x78c>
 8007a04:	4639      	mov	r1, r7
 8007a06:	4632      	mov	r2, r6
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 ffd5 	bl	80089b8 <__pow5mult>
 8007a0e:	ee18 2a10 	vmov	r2, s16
 8007a12:	4601      	mov	r1, r0
 8007a14:	4607      	mov	r7, r0
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 ff24 	bl	8008864 <__multiply>
 8007a1c:	ee18 1a10 	vmov	r1, s16
 8007a20:	4680      	mov	r8, r0
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 fe06 	bl	8008634 <_Bfree>
 8007a28:	ee08 8a10 	vmov	s16, r8
 8007a2c:	9b07      	ldr	r3, [sp, #28]
 8007a2e:	1b9a      	subs	r2, r3, r6
 8007a30:	d006      	beq.n	8007a40 <_dtoa_r+0x7a0>
 8007a32:	ee18 1a10 	vmov	r1, s16
 8007a36:	4620      	mov	r0, r4
 8007a38:	f000 ffbe 	bl	80089b8 <__pow5mult>
 8007a3c:	ee08 0a10 	vmov	s16, r0
 8007a40:	2101      	movs	r1, #1
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 fef8 	bl	8008838 <__i2b>
 8007a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	f340 8088 	ble.w	8007b62 <_dtoa_r+0x8c2>
 8007a52:	461a      	mov	r2, r3
 8007a54:	4601      	mov	r1, r0
 8007a56:	4620      	mov	r0, r4
 8007a58:	f000 ffae 	bl	80089b8 <__pow5mult>
 8007a5c:	9b06      	ldr	r3, [sp, #24]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	4606      	mov	r6, r0
 8007a62:	f340 8081 	ble.w	8007b68 <_dtoa_r+0x8c8>
 8007a66:	f04f 0800 	mov.w	r8, #0
 8007a6a:	6933      	ldr	r3, [r6, #16]
 8007a6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a70:	6918      	ldr	r0, [r3, #16]
 8007a72:	f000 fe91 	bl	8008798 <__hi0bits>
 8007a76:	f1c0 0020 	rsb	r0, r0, #32
 8007a7a:	9b05      	ldr	r3, [sp, #20]
 8007a7c:	4418      	add	r0, r3
 8007a7e:	f010 001f 	ands.w	r0, r0, #31
 8007a82:	f000 8092 	beq.w	8007baa <_dtoa_r+0x90a>
 8007a86:	f1c0 0320 	rsb	r3, r0, #32
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	f340 808a 	ble.w	8007ba4 <_dtoa_r+0x904>
 8007a90:	f1c0 001c 	rsb	r0, r0, #28
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	4403      	add	r3, r0
 8007a98:	9304      	str	r3, [sp, #16]
 8007a9a:	9b05      	ldr	r3, [sp, #20]
 8007a9c:	4403      	add	r3, r0
 8007a9e:	4405      	add	r5, r0
 8007aa0:	9305      	str	r3, [sp, #20]
 8007aa2:	9b04      	ldr	r3, [sp, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dd07      	ble.n	8007ab8 <_dtoa_r+0x818>
 8007aa8:	ee18 1a10 	vmov	r1, s16
 8007aac:	461a      	mov	r2, r3
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 ffdc 	bl	8008a6c <__lshift>
 8007ab4:	ee08 0a10 	vmov	s16, r0
 8007ab8:	9b05      	ldr	r3, [sp, #20]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dd05      	ble.n	8007aca <_dtoa_r+0x82a>
 8007abe:	4631      	mov	r1, r6
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 ffd2 	bl	8008a6c <__lshift>
 8007ac8:	4606      	mov	r6, r0
 8007aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d06e      	beq.n	8007bae <_dtoa_r+0x90e>
 8007ad0:	ee18 0a10 	vmov	r0, s16
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	f001 f839 	bl	8008b4c <__mcmp>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	da67      	bge.n	8007bae <_dtoa_r+0x90e>
 8007ade:	9b00      	ldr	r3, [sp, #0]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	ee18 1a10 	vmov	r1, s16
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	220a      	movs	r2, #10
 8007aea:	2300      	movs	r3, #0
 8007aec:	4620      	mov	r0, r4
 8007aee:	f000 fdc3 	bl	8008678 <__multadd>
 8007af2:	9b08      	ldr	r3, [sp, #32]
 8007af4:	ee08 0a10 	vmov	s16, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 81b1 	beq.w	8007e60 <_dtoa_r+0xbc0>
 8007afe:	2300      	movs	r3, #0
 8007b00:	4639      	mov	r1, r7
 8007b02:	220a      	movs	r2, #10
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 fdb7 	bl	8008678 <__multadd>
 8007b0a:	9b02      	ldr	r3, [sp, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	4607      	mov	r7, r0
 8007b10:	f300 808e 	bgt.w	8007c30 <_dtoa_r+0x990>
 8007b14:	9b06      	ldr	r3, [sp, #24]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	dc51      	bgt.n	8007bbe <_dtoa_r+0x91e>
 8007b1a:	e089      	b.n	8007c30 <_dtoa_r+0x990>
 8007b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b22:	e74b      	b.n	80079bc <_dtoa_r+0x71c>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	1e5e      	subs	r6, r3, #1
 8007b28:	9b07      	ldr	r3, [sp, #28]
 8007b2a:	42b3      	cmp	r3, r6
 8007b2c:	bfbf      	itttt	lt
 8007b2e:	9b07      	ldrlt	r3, [sp, #28]
 8007b30:	9607      	strlt	r6, [sp, #28]
 8007b32:	1af2      	sublt	r2, r6, r3
 8007b34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007b36:	bfb6      	itet	lt
 8007b38:	189b      	addlt	r3, r3, r2
 8007b3a:	1b9e      	subge	r6, r3, r6
 8007b3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	bfb8      	it	lt
 8007b42:	2600      	movlt	r6, #0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bfb7      	itett	lt
 8007b48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007b4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007b50:	1a9d      	sublt	r5, r3, r2
 8007b52:	2300      	movlt	r3, #0
 8007b54:	e734      	b.n	80079c0 <_dtoa_r+0x720>
 8007b56:	9e07      	ldr	r6, [sp, #28]
 8007b58:	9d04      	ldr	r5, [sp, #16]
 8007b5a:	9f08      	ldr	r7, [sp, #32]
 8007b5c:	e73b      	b.n	80079d6 <_dtoa_r+0x736>
 8007b5e:	9a07      	ldr	r2, [sp, #28]
 8007b60:	e767      	b.n	8007a32 <_dtoa_r+0x792>
 8007b62:	9b06      	ldr	r3, [sp, #24]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	dc18      	bgt.n	8007b9a <_dtoa_r+0x8fa>
 8007b68:	f1ba 0f00 	cmp.w	sl, #0
 8007b6c:	d115      	bne.n	8007b9a <_dtoa_r+0x8fa>
 8007b6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b72:	b993      	cbnz	r3, 8007b9a <_dtoa_r+0x8fa>
 8007b74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007b78:	0d1b      	lsrs	r3, r3, #20
 8007b7a:	051b      	lsls	r3, r3, #20
 8007b7c:	b183      	cbz	r3, 8007ba0 <_dtoa_r+0x900>
 8007b7e:	9b04      	ldr	r3, [sp, #16]
 8007b80:	3301      	adds	r3, #1
 8007b82:	9304      	str	r3, [sp, #16]
 8007b84:	9b05      	ldr	r3, [sp, #20]
 8007b86:	3301      	adds	r3, #1
 8007b88:	9305      	str	r3, [sp, #20]
 8007b8a:	f04f 0801 	mov.w	r8, #1
 8007b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f47f af6a 	bne.w	8007a6a <_dtoa_r+0x7ca>
 8007b96:	2001      	movs	r0, #1
 8007b98:	e76f      	b.n	8007a7a <_dtoa_r+0x7da>
 8007b9a:	f04f 0800 	mov.w	r8, #0
 8007b9e:	e7f6      	b.n	8007b8e <_dtoa_r+0x8ee>
 8007ba0:	4698      	mov	r8, r3
 8007ba2:	e7f4      	b.n	8007b8e <_dtoa_r+0x8ee>
 8007ba4:	f43f af7d 	beq.w	8007aa2 <_dtoa_r+0x802>
 8007ba8:	4618      	mov	r0, r3
 8007baa:	301c      	adds	r0, #28
 8007bac:	e772      	b.n	8007a94 <_dtoa_r+0x7f4>
 8007bae:	9b03      	ldr	r3, [sp, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	dc37      	bgt.n	8007c24 <_dtoa_r+0x984>
 8007bb4:	9b06      	ldr	r3, [sp, #24]
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	dd34      	ble.n	8007c24 <_dtoa_r+0x984>
 8007bba:	9b03      	ldr	r3, [sp, #12]
 8007bbc:	9302      	str	r3, [sp, #8]
 8007bbe:	9b02      	ldr	r3, [sp, #8]
 8007bc0:	b96b      	cbnz	r3, 8007bde <_dtoa_r+0x93e>
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	2205      	movs	r2, #5
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f000 fd56 	bl	8008678 <__multadd>
 8007bcc:	4601      	mov	r1, r0
 8007bce:	4606      	mov	r6, r0
 8007bd0:	ee18 0a10 	vmov	r0, s16
 8007bd4:	f000 ffba 	bl	8008b4c <__mcmp>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	f73f adbb 	bgt.w	8007754 <_dtoa_r+0x4b4>
 8007bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007be0:	9d01      	ldr	r5, [sp, #4]
 8007be2:	43db      	mvns	r3, r3
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	f04f 0800 	mov.w	r8, #0
 8007bea:	4631      	mov	r1, r6
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 fd21 	bl	8008634 <_Bfree>
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	f43f aea4 	beq.w	8007940 <_dtoa_r+0x6a0>
 8007bf8:	f1b8 0f00 	cmp.w	r8, #0
 8007bfc:	d005      	beq.n	8007c0a <_dtoa_r+0x96a>
 8007bfe:	45b8      	cmp	r8, r7
 8007c00:	d003      	beq.n	8007c0a <_dtoa_r+0x96a>
 8007c02:	4641      	mov	r1, r8
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 fd15 	bl	8008634 <_Bfree>
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 fd11 	bl	8008634 <_Bfree>
 8007c12:	e695      	b.n	8007940 <_dtoa_r+0x6a0>
 8007c14:	2600      	movs	r6, #0
 8007c16:	4637      	mov	r7, r6
 8007c18:	e7e1      	b.n	8007bde <_dtoa_r+0x93e>
 8007c1a:	9700      	str	r7, [sp, #0]
 8007c1c:	4637      	mov	r7, r6
 8007c1e:	e599      	b.n	8007754 <_dtoa_r+0x4b4>
 8007c20:	40240000 	.word	0x40240000
 8007c24:	9b08      	ldr	r3, [sp, #32]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 80ca 	beq.w	8007dc0 <_dtoa_r+0xb20>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	9302      	str	r3, [sp, #8]
 8007c30:	2d00      	cmp	r5, #0
 8007c32:	dd05      	ble.n	8007c40 <_dtoa_r+0x9a0>
 8007c34:	4639      	mov	r1, r7
 8007c36:	462a      	mov	r2, r5
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 ff17 	bl	8008a6c <__lshift>
 8007c3e:	4607      	mov	r7, r0
 8007c40:	f1b8 0f00 	cmp.w	r8, #0
 8007c44:	d05b      	beq.n	8007cfe <_dtoa_r+0xa5e>
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fcb3 	bl	80085b4 <_Balloc>
 8007c4e:	4605      	mov	r5, r0
 8007c50:	b928      	cbnz	r0, 8007c5e <_dtoa_r+0x9be>
 8007c52:	4b87      	ldr	r3, [pc, #540]	; (8007e70 <_dtoa_r+0xbd0>)
 8007c54:	4602      	mov	r2, r0
 8007c56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007c5a:	f7ff bb3b 	b.w	80072d4 <_dtoa_r+0x34>
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	3202      	adds	r2, #2
 8007c62:	0092      	lsls	r2, r2, #2
 8007c64:	f107 010c 	add.w	r1, r7, #12
 8007c68:	300c      	adds	r0, #12
 8007c6a:	f000 fc95 	bl	8008598 <memcpy>
 8007c6e:	2201      	movs	r2, #1
 8007c70:	4629      	mov	r1, r5
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 fefa 	bl	8008a6c <__lshift>
 8007c78:	9b01      	ldr	r3, [sp, #4]
 8007c7a:	f103 0901 	add.w	r9, r3, #1
 8007c7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007c82:	4413      	add	r3, r2
 8007c84:	9305      	str	r3, [sp, #20]
 8007c86:	f00a 0301 	and.w	r3, sl, #1
 8007c8a:	46b8      	mov	r8, r7
 8007c8c:	9304      	str	r3, [sp, #16]
 8007c8e:	4607      	mov	r7, r0
 8007c90:	4631      	mov	r1, r6
 8007c92:	ee18 0a10 	vmov	r0, s16
 8007c96:	f7ff fa77 	bl	8007188 <quorem>
 8007c9a:	4641      	mov	r1, r8
 8007c9c:	9002      	str	r0, [sp, #8]
 8007c9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ca2:	ee18 0a10 	vmov	r0, s16
 8007ca6:	f000 ff51 	bl	8008b4c <__mcmp>
 8007caa:	463a      	mov	r2, r7
 8007cac:	9003      	str	r0, [sp, #12]
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f000 ff67 	bl	8008b84 <__mdiff>
 8007cb6:	68c2      	ldr	r2, [r0, #12]
 8007cb8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	bb02      	cbnz	r2, 8007d02 <_dtoa_r+0xa62>
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	ee18 0a10 	vmov	r0, s16
 8007cc6:	f000 ff41 	bl	8008b4c <__mcmp>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4620      	mov	r0, r4
 8007cd0:	9207      	str	r2, [sp, #28]
 8007cd2:	f000 fcaf 	bl	8008634 <_Bfree>
 8007cd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007cda:	ea43 0102 	orr.w	r1, r3, r2
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	430b      	orrs	r3, r1
 8007ce2:	464d      	mov	r5, r9
 8007ce4:	d10f      	bne.n	8007d06 <_dtoa_r+0xa66>
 8007ce6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007cea:	d02a      	beq.n	8007d42 <_dtoa_r+0xaa2>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	dd02      	ble.n	8007cf8 <_dtoa_r+0xa58>
 8007cf2:	9b02      	ldr	r3, [sp, #8]
 8007cf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007cf8:	f88b a000 	strb.w	sl, [fp]
 8007cfc:	e775      	b.n	8007bea <_dtoa_r+0x94a>
 8007cfe:	4638      	mov	r0, r7
 8007d00:	e7ba      	b.n	8007c78 <_dtoa_r+0x9d8>
 8007d02:	2201      	movs	r2, #1
 8007d04:	e7e2      	b.n	8007ccc <_dtoa_r+0xa2c>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	db04      	blt.n	8007d16 <_dtoa_r+0xa76>
 8007d0c:	9906      	ldr	r1, [sp, #24]
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	9904      	ldr	r1, [sp, #16]
 8007d12:	430b      	orrs	r3, r1
 8007d14:	d122      	bne.n	8007d5c <_dtoa_r+0xabc>
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	ddee      	ble.n	8007cf8 <_dtoa_r+0xa58>
 8007d1a:	ee18 1a10 	vmov	r1, s16
 8007d1e:	2201      	movs	r2, #1
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fea3 	bl	8008a6c <__lshift>
 8007d26:	4631      	mov	r1, r6
 8007d28:	ee08 0a10 	vmov	s16, r0
 8007d2c:	f000 ff0e 	bl	8008b4c <__mcmp>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	dc03      	bgt.n	8007d3c <_dtoa_r+0xa9c>
 8007d34:	d1e0      	bne.n	8007cf8 <_dtoa_r+0xa58>
 8007d36:	f01a 0f01 	tst.w	sl, #1
 8007d3a:	d0dd      	beq.n	8007cf8 <_dtoa_r+0xa58>
 8007d3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d40:	d1d7      	bne.n	8007cf2 <_dtoa_r+0xa52>
 8007d42:	2339      	movs	r3, #57	; 0x39
 8007d44:	f88b 3000 	strb.w	r3, [fp]
 8007d48:	462b      	mov	r3, r5
 8007d4a:	461d      	mov	r5, r3
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d52:	2a39      	cmp	r2, #57	; 0x39
 8007d54:	d071      	beq.n	8007e3a <_dtoa_r+0xb9a>
 8007d56:	3201      	adds	r2, #1
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	e746      	b.n	8007bea <_dtoa_r+0x94a>
 8007d5c:	2a00      	cmp	r2, #0
 8007d5e:	dd07      	ble.n	8007d70 <_dtoa_r+0xad0>
 8007d60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007d64:	d0ed      	beq.n	8007d42 <_dtoa_r+0xaa2>
 8007d66:	f10a 0301 	add.w	r3, sl, #1
 8007d6a:	f88b 3000 	strb.w	r3, [fp]
 8007d6e:	e73c      	b.n	8007bea <_dtoa_r+0x94a>
 8007d70:	9b05      	ldr	r3, [sp, #20]
 8007d72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007d76:	4599      	cmp	r9, r3
 8007d78:	d047      	beq.n	8007e0a <_dtoa_r+0xb6a>
 8007d7a:	ee18 1a10 	vmov	r1, s16
 8007d7e:	2300      	movs	r3, #0
 8007d80:	220a      	movs	r2, #10
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 fc78 	bl	8008678 <__multadd>
 8007d88:	45b8      	cmp	r8, r7
 8007d8a:	ee08 0a10 	vmov	s16, r0
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	f04f 020a 	mov.w	r2, #10
 8007d96:	4641      	mov	r1, r8
 8007d98:	4620      	mov	r0, r4
 8007d9a:	d106      	bne.n	8007daa <_dtoa_r+0xb0a>
 8007d9c:	f000 fc6c 	bl	8008678 <__multadd>
 8007da0:	4680      	mov	r8, r0
 8007da2:	4607      	mov	r7, r0
 8007da4:	f109 0901 	add.w	r9, r9, #1
 8007da8:	e772      	b.n	8007c90 <_dtoa_r+0x9f0>
 8007daa:	f000 fc65 	bl	8008678 <__multadd>
 8007dae:	4639      	mov	r1, r7
 8007db0:	4680      	mov	r8, r0
 8007db2:	2300      	movs	r3, #0
 8007db4:	220a      	movs	r2, #10
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fc5e 	bl	8008678 <__multadd>
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	e7f1      	b.n	8007da4 <_dtoa_r+0xb04>
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	9302      	str	r3, [sp, #8]
 8007dc4:	9d01      	ldr	r5, [sp, #4]
 8007dc6:	ee18 0a10 	vmov	r0, s16
 8007dca:	4631      	mov	r1, r6
 8007dcc:	f7ff f9dc 	bl	8007188 <quorem>
 8007dd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007dd4:	9b01      	ldr	r3, [sp, #4]
 8007dd6:	f805 ab01 	strb.w	sl, [r5], #1
 8007dda:	1aea      	subs	r2, r5, r3
 8007ddc:	9b02      	ldr	r3, [sp, #8]
 8007dde:	4293      	cmp	r3, r2
 8007de0:	dd09      	ble.n	8007df6 <_dtoa_r+0xb56>
 8007de2:	ee18 1a10 	vmov	r1, s16
 8007de6:	2300      	movs	r3, #0
 8007de8:	220a      	movs	r2, #10
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 fc44 	bl	8008678 <__multadd>
 8007df0:	ee08 0a10 	vmov	s16, r0
 8007df4:	e7e7      	b.n	8007dc6 <_dtoa_r+0xb26>
 8007df6:	9b02      	ldr	r3, [sp, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	bfc8      	it	gt
 8007dfc:	461d      	movgt	r5, r3
 8007dfe:	9b01      	ldr	r3, [sp, #4]
 8007e00:	bfd8      	it	le
 8007e02:	2501      	movle	r5, #1
 8007e04:	441d      	add	r5, r3
 8007e06:	f04f 0800 	mov.w	r8, #0
 8007e0a:	ee18 1a10 	vmov	r1, s16
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fe2b 	bl	8008a6c <__lshift>
 8007e16:	4631      	mov	r1, r6
 8007e18:	ee08 0a10 	vmov	s16, r0
 8007e1c:	f000 fe96 	bl	8008b4c <__mcmp>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	dc91      	bgt.n	8007d48 <_dtoa_r+0xaa8>
 8007e24:	d102      	bne.n	8007e2c <_dtoa_r+0xb8c>
 8007e26:	f01a 0f01 	tst.w	sl, #1
 8007e2a:	d18d      	bne.n	8007d48 <_dtoa_r+0xaa8>
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	461d      	mov	r5, r3
 8007e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e34:	2a30      	cmp	r2, #48	; 0x30
 8007e36:	d0fa      	beq.n	8007e2e <_dtoa_r+0xb8e>
 8007e38:	e6d7      	b.n	8007bea <_dtoa_r+0x94a>
 8007e3a:	9a01      	ldr	r2, [sp, #4]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d184      	bne.n	8007d4a <_dtoa_r+0xaaa>
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	2331      	movs	r3, #49	; 0x31
 8007e48:	7013      	strb	r3, [r2, #0]
 8007e4a:	e6ce      	b.n	8007bea <_dtoa_r+0x94a>
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <_dtoa_r+0xbd4>)
 8007e4e:	f7ff ba95 	b.w	800737c <_dtoa_r+0xdc>
 8007e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f47f aa6e 	bne.w	8007336 <_dtoa_r+0x96>
 8007e5a:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <_dtoa_r+0xbd8>)
 8007e5c:	f7ff ba8e 	b.w	800737c <_dtoa_r+0xdc>
 8007e60:	9b02      	ldr	r3, [sp, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dcae      	bgt.n	8007dc4 <_dtoa_r+0xb24>
 8007e66:	9b06      	ldr	r3, [sp, #24]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	f73f aea8 	bgt.w	8007bbe <_dtoa_r+0x91e>
 8007e6e:	e7a9      	b.n	8007dc4 <_dtoa_r+0xb24>
 8007e70:	0800b550 	.word	0x0800b550
 8007e74:	0800b354 	.word	0x0800b354
 8007e78:	0800b4d1 	.word	0x0800b4d1

08007e7c <rshift>:
 8007e7c:	6903      	ldr	r3, [r0, #16]
 8007e7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e86:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e8a:	f100 0414 	add.w	r4, r0, #20
 8007e8e:	dd45      	ble.n	8007f1c <rshift+0xa0>
 8007e90:	f011 011f 	ands.w	r1, r1, #31
 8007e94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e9c:	d10c      	bne.n	8007eb8 <rshift+0x3c>
 8007e9e:	f100 0710 	add.w	r7, r0, #16
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	42b1      	cmp	r1, r6
 8007ea6:	d334      	bcc.n	8007f12 <rshift+0x96>
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	1eea      	subs	r2, r5, #3
 8007eae:	4296      	cmp	r6, r2
 8007eb0:	bf38      	it	cc
 8007eb2:	2300      	movcc	r3, #0
 8007eb4:	4423      	add	r3, r4
 8007eb6:	e015      	b.n	8007ee4 <rshift+0x68>
 8007eb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ebc:	f1c1 0820 	rsb	r8, r1, #32
 8007ec0:	40cf      	lsrs	r7, r1
 8007ec2:	f105 0e04 	add.w	lr, r5, #4
 8007ec6:	46a1      	mov	r9, r4
 8007ec8:	4576      	cmp	r6, lr
 8007eca:	46f4      	mov	ip, lr
 8007ecc:	d815      	bhi.n	8007efa <rshift+0x7e>
 8007ece:	1a9a      	subs	r2, r3, r2
 8007ed0:	0092      	lsls	r2, r2, #2
 8007ed2:	3a04      	subs	r2, #4
 8007ed4:	3501      	adds	r5, #1
 8007ed6:	42ae      	cmp	r6, r5
 8007ed8:	bf38      	it	cc
 8007eda:	2200      	movcc	r2, #0
 8007edc:	18a3      	adds	r3, r4, r2
 8007ede:	50a7      	str	r7, [r4, r2]
 8007ee0:	b107      	cbz	r7, 8007ee4 <rshift+0x68>
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	1b1a      	subs	r2, r3, r4
 8007ee6:	42a3      	cmp	r3, r4
 8007ee8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007eec:	bf08      	it	eq
 8007eee:	2300      	moveq	r3, #0
 8007ef0:	6102      	str	r2, [r0, #16]
 8007ef2:	bf08      	it	eq
 8007ef4:	6143      	streq	r3, [r0, #20]
 8007ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007efa:	f8dc c000 	ldr.w	ip, [ip]
 8007efe:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f02:	ea4c 0707 	orr.w	r7, ip, r7
 8007f06:	f849 7b04 	str.w	r7, [r9], #4
 8007f0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f0e:	40cf      	lsrs	r7, r1
 8007f10:	e7da      	b.n	8007ec8 <rshift+0x4c>
 8007f12:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f16:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f1a:	e7c3      	b.n	8007ea4 <rshift+0x28>
 8007f1c:	4623      	mov	r3, r4
 8007f1e:	e7e1      	b.n	8007ee4 <rshift+0x68>

08007f20 <__hexdig_fun>:
 8007f20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f24:	2b09      	cmp	r3, #9
 8007f26:	d802      	bhi.n	8007f2e <__hexdig_fun+0xe>
 8007f28:	3820      	subs	r0, #32
 8007f2a:	b2c0      	uxtb	r0, r0
 8007f2c:	4770      	bx	lr
 8007f2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d801      	bhi.n	8007f3a <__hexdig_fun+0x1a>
 8007f36:	3847      	subs	r0, #71	; 0x47
 8007f38:	e7f7      	b.n	8007f2a <__hexdig_fun+0xa>
 8007f3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f3e:	2b05      	cmp	r3, #5
 8007f40:	d801      	bhi.n	8007f46 <__hexdig_fun+0x26>
 8007f42:	3827      	subs	r0, #39	; 0x27
 8007f44:	e7f1      	b.n	8007f2a <__hexdig_fun+0xa>
 8007f46:	2000      	movs	r0, #0
 8007f48:	4770      	bx	lr
	...

08007f4c <__gethex>:
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	ed2d 8b02 	vpush	{d8}
 8007f54:	b089      	sub	sp, #36	; 0x24
 8007f56:	ee08 0a10 	vmov	s16, r0
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	4bb4      	ldr	r3, [pc, #720]	; (8008230 <__gethex+0x2e4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	4618      	mov	r0, r3
 8007f64:	468b      	mov	fp, r1
 8007f66:	4690      	mov	r8, r2
 8007f68:	f7f8 f932 	bl	80001d0 <strlen>
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	f8db 2000 	ldr.w	r2, [fp]
 8007f72:	4403      	add	r3, r0
 8007f74:	4682      	mov	sl, r0
 8007f76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f7a:	9305      	str	r3, [sp, #20]
 8007f7c:	1c93      	adds	r3, r2, #2
 8007f7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f86:	32fe      	adds	r2, #254	; 0xfe
 8007f88:	18d1      	adds	r1, r2, r3
 8007f8a:	461f      	mov	r7, r3
 8007f8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f90:	9100      	str	r1, [sp, #0]
 8007f92:	2830      	cmp	r0, #48	; 0x30
 8007f94:	d0f8      	beq.n	8007f88 <__gethex+0x3c>
 8007f96:	f7ff ffc3 	bl	8007f20 <__hexdig_fun>
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d13a      	bne.n	8008016 <__gethex+0xca>
 8007fa0:	9901      	ldr	r1, [sp, #4]
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	f001 fa33 	bl	8009410 <strncmp>
 8007faa:	4605      	mov	r5, r0
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d168      	bne.n	8008082 <__gethex+0x136>
 8007fb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007fb4:	eb07 060a 	add.w	r6, r7, sl
 8007fb8:	f7ff ffb2 	bl	8007f20 <__hexdig_fun>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d062      	beq.n	8008086 <__gethex+0x13a>
 8007fc0:	4633      	mov	r3, r6
 8007fc2:	7818      	ldrb	r0, [r3, #0]
 8007fc4:	2830      	cmp	r0, #48	; 0x30
 8007fc6:	461f      	mov	r7, r3
 8007fc8:	f103 0301 	add.w	r3, r3, #1
 8007fcc:	d0f9      	beq.n	8007fc2 <__gethex+0x76>
 8007fce:	f7ff ffa7 	bl	8007f20 <__hexdig_fun>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	fab0 f480 	clz	r4, r0
 8007fd8:	0964      	lsrs	r4, r4, #5
 8007fda:	4635      	mov	r5, r6
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	463a      	mov	r2, r7
 8007fe0:	4616      	mov	r6, r2
 8007fe2:	3201      	adds	r2, #1
 8007fe4:	7830      	ldrb	r0, [r6, #0]
 8007fe6:	f7ff ff9b 	bl	8007f20 <__hexdig_fun>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d1f8      	bne.n	8007fe0 <__gethex+0x94>
 8007fee:	9901      	ldr	r1, [sp, #4]
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f001 fa0c 	bl	8009410 <strncmp>
 8007ff8:	b980      	cbnz	r0, 800801c <__gethex+0xd0>
 8007ffa:	b94d      	cbnz	r5, 8008010 <__gethex+0xc4>
 8007ffc:	eb06 050a 	add.w	r5, r6, sl
 8008000:	462a      	mov	r2, r5
 8008002:	4616      	mov	r6, r2
 8008004:	3201      	adds	r2, #1
 8008006:	7830      	ldrb	r0, [r6, #0]
 8008008:	f7ff ff8a 	bl	8007f20 <__hexdig_fun>
 800800c:	2800      	cmp	r0, #0
 800800e:	d1f8      	bne.n	8008002 <__gethex+0xb6>
 8008010:	1bad      	subs	r5, r5, r6
 8008012:	00ad      	lsls	r5, r5, #2
 8008014:	e004      	b.n	8008020 <__gethex+0xd4>
 8008016:	2400      	movs	r4, #0
 8008018:	4625      	mov	r5, r4
 800801a:	e7e0      	b.n	8007fde <__gethex+0x92>
 800801c:	2d00      	cmp	r5, #0
 800801e:	d1f7      	bne.n	8008010 <__gethex+0xc4>
 8008020:	7833      	ldrb	r3, [r6, #0]
 8008022:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008026:	2b50      	cmp	r3, #80	; 0x50
 8008028:	d13b      	bne.n	80080a2 <__gethex+0x156>
 800802a:	7873      	ldrb	r3, [r6, #1]
 800802c:	2b2b      	cmp	r3, #43	; 0x2b
 800802e:	d02c      	beq.n	800808a <__gethex+0x13e>
 8008030:	2b2d      	cmp	r3, #45	; 0x2d
 8008032:	d02e      	beq.n	8008092 <__gethex+0x146>
 8008034:	1c71      	adds	r1, r6, #1
 8008036:	f04f 0900 	mov.w	r9, #0
 800803a:	7808      	ldrb	r0, [r1, #0]
 800803c:	f7ff ff70 	bl	8007f20 <__hexdig_fun>
 8008040:	1e43      	subs	r3, r0, #1
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b18      	cmp	r3, #24
 8008046:	d82c      	bhi.n	80080a2 <__gethex+0x156>
 8008048:	f1a0 0210 	sub.w	r2, r0, #16
 800804c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008050:	f7ff ff66 	bl	8007f20 <__hexdig_fun>
 8008054:	1e43      	subs	r3, r0, #1
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b18      	cmp	r3, #24
 800805a:	d91d      	bls.n	8008098 <__gethex+0x14c>
 800805c:	f1b9 0f00 	cmp.w	r9, #0
 8008060:	d000      	beq.n	8008064 <__gethex+0x118>
 8008062:	4252      	negs	r2, r2
 8008064:	4415      	add	r5, r2
 8008066:	f8cb 1000 	str.w	r1, [fp]
 800806a:	b1e4      	cbz	r4, 80080a6 <__gethex+0x15a>
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	bf14      	ite	ne
 8008072:	2700      	movne	r7, #0
 8008074:	2706      	moveq	r7, #6
 8008076:	4638      	mov	r0, r7
 8008078:	b009      	add	sp, #36	; 0x24
 800807a:	ecbd 8b02 	vpop	{d8}
 800807e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008082:	463e      	mov	r6, r7
 8008084:	4625      	mov	r5, r4
 8008086:	2401      	movs	r4, #1
 8008088:	e7ca      	b.n	8008020 <__gethex+0xd4>
 800808a:	f04f 0900 	mov.w	r9, #0
 800808e:	1cb1      	adds	r1, r6, #2
 8008090:	e7d3      	b.n	800803a <__gethex+0xee>
 8008092:	f04f 0901 	mov.w	r9, #1
 8008096:	e7fa      	b.n	800808e <__gethex+0x142>
 8008098:	230a      	movs	r3, #10
 800809a:	fb03 0202 	mla	r2, r3, r2, r0
 800809e:	3a10      	subs	r2, #16
 80080a0:	e7d4      	b.n	800804c <__gethex+0x100>
 80080a2:	4631      	mov	r1, r6
 80080a4:	e7df      	b.n	8008066 <__gethex+0x11a>
 80080a6:	1bf3      	subs	r3, r6, r7
 80080a8:	3b01      	subs	r3, #1
 80080aa:	4621      	mov	r1, r4
 80080ac:	2b07      	cmp	r3, #7
 80080ae:	dc0b      	bgt.n	80080c8 <__gethex+0x17c>
 80080b0:	ee18 0a10 	vmov	r0, s16
 80080b4:	f000 fa7e 	bl	80085b4 <_Balloc>
 80080b8:	4604      	mov	r4, r0
 80080ba:	b940      	cbnz	r0, 80080ce <__gethex+0x182>
 80080bc:	4b5d      	ldr	r3, [pc, #372]	; (8008234 <__gethex+0x2e8>)
 80080be:	4602      	mov	r2, r0
 80080c0:	21de      	movs	r1, #222	; 0xde
 80080c2:	485d      	ldr	r0, [pc, #372]	; (8008238 <__gethex+0x2ec>)
 80080c4:	f001 f9c6 	bl	8009454 <__assert_func>
 80080c8:	3101      	adds	r1, #1
 80080ca:	105b      	asrs	r3, r3, #1
 80080cc:	e7ee      	b.n	80080ac <__gethex+0x160>
 80080ce:	f100 0914 	add.w	r9, r0, #20
 80080d2:	f04f 0b00 	mov.w	fp, #0
 80080d6:	f1ca 0301 	rsb	r3, sl, #1
 80080da:	f8cd 9008 	str.w	r9, [sp, #8]
 80080de:	f8cd b000 	str.w	fp, [sp]
 80080e2:	9306      	str	r3, [sp, #24]
 80080e4:	42b7      	cmp	r7, r6
 80080e6:	d340      	bcc.n	800816a <__gethex+0x21e>
 80080e8:	9802      	ldr	r0, [sp, #8]
 80080ea:	9b00      	ldr	r3, [sp, #0]
 80080ec:	f840 3b04 	str.w	r3, [r0], #4
 80080f0:	eba0 0009 	sub.w	r0, r0, r9
 80080f4:	1080      	asrs	r0, r0, #2
 80080f6:	0146      	lsls	r6, r0, #5
 80080f8:	6120      	str	r0, [r4, #16]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fb4c 	bl	8008798 <__hi0bits>
 8008100:	1a30      	subs	r0, r6, r0
 8008102:	f8d8 6000 	ldr.w	r6, [r8]
 8008106:	42b0      	cmp	r0, r6
 8008108:	dd63      	ble.n	80081d2 <__gethex+0x286>
 800810a:	1b87      	subs	r7, r0, r6
 800810c:	4639      	mov	r1, r7
 800810e:	4620      	mov	r0, r4
 8008110:	f000 fef0 	bl	8008ef4 <__any_on>
 8008114:	4682      	mov	sl, r0
 8008116:	b1a8      	cbz	r0, 8008144 <__gethex+0x1f8>
 8008118:	1e7b      	subs	r3, r7, #1
 800811a:	1159      	asrs	r1, r3, #5
 800811c:	f003 021f 	and.w	r2, r3, #31
 8008120:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008124:	f04f 0a01 	mov.w	sl, #1
 8008128:	fa0a f202 	lsl.w	r2, sl, r2
 800812c:	420a      	tst	r2, r1
 800812e:	d009      	beq.n	8008144 <__gethex+0x1f8>
 8008130:	4553      	cmp	r3, sl
 8008132:	dd05      	ble.n	8008140 <__gethex+0x1f4>
 8008134:	1eb9      	subs	r1, r7, #2
 8008136:	4620      	mov	r0, r4
 8008138:	f000 fedc 	bl	8008ef4 <__any_on>
 800813c:	2800      	cmp	r0, #0
 800813e:	d145      	bne.n	80081cc <__gethex+0x280>
 8008140:	f04f 0a02 	mov.w	sl, #2
 8008144:	4639      	mov	r1, r7
 8008146:	4620      	mov	r0, r4
 8008148:	f7ff fe98 	bl	8007e7c <rshift>
 800814c:	443d      	add	r5, r7
 800814e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008152:	42ab      	cmp	r3, r5
 8008154:	da4c      	bge.n	80081f0 <__gethex+0x2a4>
 8008156:	ee18 0a10 	vmov	r0, s16
 800815a:	4621      	mov	r1, r4
 800815c:	f000 fa6a 	bl	8008634 <_Bfree>
 8008160:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008162:	2300      	movs	r3, #0
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	27a3      	movs	r7, #163	; 0xa3
 8008168:	e785      	b.n	8008076 <__gethex+0x12a>
 800816a:	1e73      	subs	r3, r6, #1
 800816c:	9a05      	ldr	r2, [sp, #20]
 800816e:	9303      	str	r3, [sp, #12]
 8008170:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008174:	4293      	cmp	r3, r2
 8008176:	d019      	beq.n	80081ac <__gethex+0x260>
 8008178:	f1bb 0f20 	cmp.w	fp, #32
 800817c:	d107      	bne.n	800818e <__gethex+0x242>
 800817e:	9b02      	ldr	r3, [sp, #8]
 8008180:	9a00      	ldr	r2, [sp, #0]
 8008182:	f843 2b04 	str.w	r2, [r3], #4
 8008186:	9302      	str	r3, [sp, #8]
 8008188:	2300      	movs	r3, #0
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	469b      	mov	fp, r3
 800818e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008192:	f7ff fec5 	bl	8007f20 <__hexdig_fun>
 8008196:	9b00      	ldr	r3, [sp, #0]
 8008198:	f000 000f 	and.w	r0, r0, #15
 800819c:	fa00 f00b 	lsl.w	r0, r0, fp
 80081a0:	4303      	orrs	r3, r0
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	f10b 0b04 	add.w	fp, fp, #4
 80081a8:	9b03      	ldr	r3, [sp, #12]
 80081aa:	e00d      	b.n	80081c8 <__gethex+0x27c>
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	9a06      	ldr	r2, [sp, #24]
 80081b0:	4413      	add	r3, r2
 80081b2:	42bb      	cmp	r3, r7
 80081b4:	d3e0      	bcc.n	8008178 <__gethex+0x22c>
 80081b6:	4618      	mov	r0, r3
 80081b8:	9901      	ldr	r1, [sp, #4]
 80081ba:	9307      	str	r3, [sp, #28]
 80081bc:	4652      	mov	r2, sl
 80081be:	f001 f927 	bl	8009410 <strncmp>
 80081c2:	9b07      	ldr	r3, [sp, #28]
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d1d7      	bne.n	8008178 <__gethex+0x22c>
 80081c8:	461e      	mov	r6, r3
 80081ca:	e78b      	b.n	80080e4 <__gethex+0x198>
 80081cc:	f04f 0a03 	mov.w	sl, #3
 80081d0:	e7b8      	b.n	8008144 <__gethex+0x1f8>
 80081d2:	da0a      	bge.n	80081ea <__gethex+0x29e>
 80081d4:	1a37      	subs	r7, r6, r0
 80081d6:	4621      	mov	r1, r4
 80081d8:	ee18 0a10 	vmov	r0, s16
 80081dc:	463a      	mov	r2, r7
 80081de:	f000 fc45 	bl	8008a6c <__lshift>
 80081e2:	1bed      	subs	r5, r5, r7
 80081e4:	4604      	mov	r4, r0
 80081e6:	f100 0914 	add.w	r9, r0, #20
 80081ea:	f04f 0a00 	mov.w	sl, #0
 80081ee:	e7ae      	b.n	800814e <__gethex+0x202>
 80081f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80081f4:	42a8      	cmp	r0, r5
 80081f6:	dd72      	ble.n	80082de <__gethex+0x392>
 80081f8:	1b45      	subs	r5, r0, r5
 80081fa:	42ae      	cmp	r6, r5
 80081fc:	dc36      	bgt.n	800826c <__gethex+0x320>
 80081fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008202:	2b02      	cmp	r3, #2
 8008204:	d02a      	beq.n	800825c <__gethex+0x310>
 8008206:	2b03      	cmp	r3, #3
 8008208:	d02c      	beq.n	8008264 <__gethex+0x318>
 800820a:	2b01      	cmp	r3, #1
 800820c:	d11c      	bne.n	8008248 <__gethex+0x2fc>
 800820e:	42ae      	cmp	r6, r5
 8008210:	d11a      	bne.n	8008248 <__gethex+0x2fc>
 8008212:	2e01      	cmp	r6, #1
 8008214:	d112      	bne.n	800823c <__gethex+0x2f0>
 8008216:	9a04      	ldr	r2, [sp, #16]
 8008218:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800821c:	6013      	str	r3, [r2, #0]
 800821e:	2301      	movs	r3, #1
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	f8c9 3000 	str.w	r3, [r9]
 8008226:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008228:	2762      	movs	r7, #98	; 0x62
 800822a:	601c      	str	r4, [r3, #0]
 800822c:	e723      	b.n	8008076 <__gethex+0x12a>
 800822e:	bf00      	nop
 8008230:	0800b5c8 	.word	0x0800b5c8
 8008234:	0800b550 	.word	0x0800b550
 8008238:	0800b561 	.word	0x0800b561
 800823c:	1e71      	subs	r1, r6, #1
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fe58 	bl	8008ef4 <__any_on>
 8008244:	2800      	cmp	r0, #0
 8008246:	d1e6      	bne.n	8008216 <__gethex+0x2ca>
 8008248:	ee18 0a10 	vmov	r0, s16
 800824c:	4621      	mov	r1, r4
 800824e:	f000 f9f1 	bl	8008634 <_Bfree>
 8008252:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008254:	2300      	movs	r3, #0
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	2750      	movs	r7, #80	; 0x50
 800825a:	e70c      	b.n	8008076 <__gethex+0x12a>
 800825c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f2      	bne.n	8008248 <__gethex+0x2fc>
 8008262:	e7d8      	b.n	8008216 <__gethex+0x2ca>
 8008264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1d5      	bne.n	8008216 <__gethex+0x2ca>
 800826a:	e7ed      	b.n	8008248 <__gethex+0x2fc>
 800826c:	1e6f      	subs	r7, r5, #1
 800826e:	f1ba 0f00 	cmp.w	sl, #0
 8008272:	d131      	bne.n	80082d8 <__gethex+0x38c>
 8008274:	b127      	cbz	r7, 8008280 <__gethex+0x334>
 8008276:	4639      	mov	r1, r7
 8008278:	4620      	mov	r0, r4
 800827a:	f000 fe3b 	bl	8008ef4 <__any_on>
 800827e:	4682      	mov	sl, r0
 8008280:	117b      	asrs	r3, r7, #5
 8008282:	2101      	movs	r1, #1
 8008284:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008288:	f007 071f 	and.w	r7, r7, #31
 800828c:	fa01 f707 	lsl.w	r7, r1, r7
 8008290:	421f      	tst	r7, r3
 8008292:	4629      	mov	r1, r5
 8008294:	4620      	mov	r0, r4
 8008296:	bf18      	it	ne
 8008298:	f04a 0a02 	orrne.w	sl, sl, #2
 800829c:	1b76      	subs	r6, r6, r5
 800829e:	f7ff fded 	bl	8007e7c <rshift>
 80082a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80082a6:	2702      	movs	r7, #2
 80082a8:	f1ba 0f00 	cmp.w	sl, #0
 80082ac:	d048      	beq.n	8008340 <__gethex+0x3f4>
 80082ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d015      	beq.n	80082e2 <__gethex+0x396>
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d017      	beq.n	80082ea <__gethex+0x39e>
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d109      	bne.n	80082d2 <__gethex+0x386>
 80082be:	f01a 0f02 	tst.w	sl, #2
 80082c2:	d006      	beq.n	80082d2 <__gethex+0x386>
 80082c4:	f8d9 0000 	ldr.w	r0, [r9]
 80082c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80082cc:	f01a 0f01 	tst.w	sl, #1
 80082d0:	d10e      	bne.n	80082f0 <__gethex+0x3a4>
 80082d2:	f047 0710 	orr.w	r7, r7, #16
 80082d6:	e033      	b.n	8008340 <__gethex+0x3f4>
 80082d8:	f04f 0a01 	mov.w	sl, #1
 80082dc:	e7d0      	b.n	8008280 <__gethex+0x334>
 80082de:	2701      	movs	r7, #1
 80082e0:	e7e2      	b.n	80082a8 <__gethex+0x35c>
 80082e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082e4:	f1c3 0301 	rsb	r3, r3, #1
 80082e8:	9315      	str	r3, [sp, #84]	; 0x54
 80082ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0f0      	beq.n	80082d2 <__gethex+0x386>
 80082f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082f4:	f104 0314 	add.w	r3, r4, #20
 80082f8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80082fc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008300:	f04f 0c00 	mov.w	ip, #0
 8008304:	4618      	mov	r0, r3
 8008306:	f853 2b04 	ldr.w	r2, [r3], #4
 800830a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800830e:	d01c      	beq.n	800834a <__gethex+0x3fe>
 8008310:	3201      	adds	r2, #1
 8008312:	6002      	str	r2, [r0, #0]
 8008314:	2f02      	cmp	r7, #2
 8008316:	f104 0314 	add.w	r3, r4, #20
 800831a:	d13f      	bne.n	800839c <__gethex+0x450>
 800831c:	f8d8 2000 	ldr.w	r2, [r8]
 8008320:	3a01      	subs	r2, #1
 8008322:	42b2      	cmp	r2, r6
 8008324:	d10a      	bne.n	800833c <__gethex+0x3f0>
 8008326:	1171      	asrs	r1, r6, #5
 8008328:	2201      	movs	r2, #1
 800832a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800832e:	f006 061f 	and.w	r6, r6, #31
 8008332:	fa02 f606 	lsl.w	r6, r2, r6
 8008336:	421e      	tst	r6, r3
 8008338:	bf18      	it	ne
 800833a:	4617      	movne	r7, r2
 800833c:	f047 0720 	orr.w	r7, r7, #32
 8008340:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008342:	601c      	str	r4, [r3, #0]
 8008344:	9b04      	ldr	r3, [sp, #16]
 8008346:	601d      	str	r5, [r3, #0]
 8008348:	e695      	b.n	8008076 <__gethex+0x12a>
 800834a:	4299      	cmp	r1, r3
 800834c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008350:	d8d8      	bhi.n	8008304 <__gethex+0x3b8>
 8008352:	68a3      	ldr	r3, [r4, #8]
 8008354:	459b      	cmp	fp, r3
 8008356:	db19      	blt.n	800838c <__gethex+0x440>
 8008358:	6861      	ldr	r1, [r4, #4]
 800835a:	ee18 0a10 	vmov	r0, s16
 800835e:	3101      	adds	r1, #1
 8008360:	f000 f928 	bl	80085b4 <_Balloc>
 8008364:	4681      	mov	r9, r0
 8008366:	b918      	cbnz	r0, 8008370 <__gethex+0x424>
 8008368:	4b1a      	ldr	r3, [pc, #104]	; (80083d4 <__gethex+0x488>)
 800836a:	4602      	mov	r2, r0
 800836c:	2184      	movs	r1, #132	; 0x84
 800836e:	e6a8      	b.n	80080c2 <__gethex+0x176>
 8008370:	6922      	ldr	r2, [r4, #16]
 8008372:	3202      	adds	r2, #2
 8008374:	f104 010c 	add.w	r1, r4, #12
 8008378:	0092      	lsls	r2, r2, #2
 800837a:	300c      	adds	r0, #12
 800837c:	f000 f90c 	bl	8008598 <memcpy>
 8008380:	4621      	mov	r1, r4
 8008382:	ee18 0a10 	vmov	r0, s16
 8008386:	f000 f955 	bl	8008634 <_Bfree>
 800838a:	464c      	mov	r4, r9
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008394:	6122      	str	r2, [r4, #16]
 8008396:	2201      	movs	r2, #1
 8008398:	615a      	str	r2, [r3, #20]
 800839a:	e7bb      	b.n	8008314 <__gethex+0x3c8>
 800839c:	6922      	ldr	r2, [r4, #16]
 800839e:	455a      	cmp	r2, fp
 80083a0:	dd0b      	ble.n	80083ba <__gethex+0x46e>
 80083a2:	2101      	movs	r1, #1
 80083a4:	4620      	mov	r0, r4
 80083a6:	f7ff fd69 	bl	8007e7c <rshift>
 80083aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083ae:	3501      	adds	r5, #1
 80083b0:	42ab      	cmp	r3, r5
 80083b2:	f6ff aed0 	blt.w	8008156 <__gethex+0x20a>
 80083b6:	2701      	movs	r7, #1
 80083b8:	e7c0      	b.n	800833c <__gethex+0x3f0>
 80083ba:	f016 061f 	ands.w	r6, r6, #31
 80083be:	d0fa      	beq.n	80083b6 <__gethex+0x46a>
 80083c0:	4453      	add	r3, sl
 80083c2:	f1c6 0620 	rsb	r6, r6, #32
 80083c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80083ca:	f000 f9e5 	bl	8008798 <__hi0bits>
 80083ce:	42b0      	cmp	r0, r6
 80083d0:	dbe7      	blt.n	80083a2 <__gethex+0x456>
 80083d2:	e7f0      	b.n	80083b6 <__gethex+0x46a>
 80083d4:	0800b550 	.word	0x0800b550

080083d8 <L_shift>:
 80083d8:	f1c2 0208 	rsb	r2, r2, #8
 80083dc:	0092      	lsls	r2, r2, #2
 80083de:	b570      	push	{r4, r5, r6, lr}
 80083e0:	f1c2 0620 	rsb	r6, r2, #32
 80083e4:	6843      	ldr	r3, [r0, #4]
 80083e6:	6804      	ldr	r4, [r0, #0]
 80083e8:	fa03 f506 	lsl.w	r5, r3, r6
 80083ec:	432c      	orrs	r4, r5
 80083ee:	40d3      	lsrs	r3, r2
 80083f0:	6004      	str	r4, [r0, #0]
 80083f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80083f6:	4288      	cmp	r0, r1
 80083f8:	d3f4      	bcc.n	80083e4 <L_shift+0xc>
 80083fa:	bd70      	pop	{r4, r5, r6, pc}

080083fc <__match>:
 80083fc:	b530      	push	{r4, r5, lr}
 80083fe:	6803      	ldr	r3, [r0, #0]
 8008400:	3301      	adds	r3, #1
 8008402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008406:	b914      	cbnz	r4, 800840e <__match+0x12>
 8008408:	6003      	str	r3, [r0, #0]
 800840a:	2001      	movs	r0, #1
 800840c:	bd30      	pop	{r4, r5, pc}
 800840e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008412:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008416:	2d19      	cmp	r5, #25
 8008418:	bf98      	it	ls
 800841a:	3220      	addls	r2, #32
 800841c:	42a2      	cmp	r2, r4
 800841e:	d0f0      	beq.n	8008402 <__match+0x6>
 8008420:	2000      	movs	r0, #0
 8008422:	e7f3      	b.n	800840c <__match+0x10>

08008424 <__hexnan>:
 8008424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	680b      	ldr	r3, [r1, #0]
 800842a:	115e      	asrs	r6, r3, #5
 800842c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008430:	f013 031f 	ands.w	r3, r3, #31
 8008434:	b087      	sub	sp, #28
 8008436:	bf18      	it	ne
 8008438:	3604      	addne	r6, #4
 800843a:	2500      	movs	r5, #0
 800843c:	1f37      	subs	r7, r6, #4
 800843e:	4690      	mov	r8, r2
 8008440:	6802      	ldr	r2, [r0, #0]
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	4682      	mov	sl, r0
 8008446:	f846 5c04 	str.w	r5, [r6, #-4]
 800844a:	46b9      	mov	r9, r7
 800844c:	463c      	mov	r4, r7
 800844e:	9502      	str	r5, [sp, #8]
 8008450:	46ab      	mov	fp, r5
 8008452:	7851      	ldrb	r1, [r2, #1]
 8008454:	1c53      	adds	r3, r2, #1
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	b341      	cbz	r1, 80084ac <__hexnan+0x88>
 800845a:	4608      	mov	r0, r1
 800845c:	9205      	str	r2, [sp, #20]
 800845e:	9104      	str	r1, [sp, #16]
 8008460:	f7ff fd5e 	bl	8007f20 <__hexdig_fun>
 8008464:	2800      	cmp	r0, #0
 8008466:	d14f      	bne.n	8008508 <__hexnan+0xe4>
 8008468:	9904      	ldr	r1, [sp, #16]
 800846a:	9a05      	ldr	r2, [sp, #20]
 800846c:	2920      	cmp	r1, #32
 800846e:	d818      	bhi.n	80084a2 <__hexnan+0x7e>
 8008470:	9b02      	ldr	r3, [sp, #8]
 8008472:	459b      	cmp	fp, r3
 8008474:	dd13      	ble.n	800849e <__hexnan+0x7a>
 8008476:	454c      	cmp	r4, r9
 8008478:	d206      	bcs.n	8008488 <__hexnan+0x64>
 800847a:	2d07      	cmp	r5, #7
 800847c:	dc04      	bgt.n	8008488 <__hexnan+0x64>
 800847e:	462a      	mov	r2, r5
 8008480:	4649      	mov	r1, r9
 8008482:	4620      	mov	r0, r4
 8008484:	f7ff ffa8 	bl	80083d8 <L_shift>
 8008488:	4544      	cmp	r4, r8
 800848a:	d950      	bls.n	800852e <__hexnan+0x10a>
 800848c:	2300      	movs	r3, #0
 800848e:	f1a4 0904 	sub.w	r9, r4, #4
 8008492:	f844 3c04 	str.w	r3, [r4, #-4]
 8008496:	f8cd b008 	str.w	fp, [sp, #8]
 800849a:	464c      	mov	r4, r9
 800849c:	461d      	mov	r5, r3
 800849e:	9a03      	ldr	r2, [sp, #12]
 80084a0:	e7d7      	b.n	8008452 <__hexnan+0x2e>
 80084a2:	2929      	cmp	r1, #41	; 0x29
 80084a4:	d156      	bne.n	8008554 <__hexnan+0x130>
 80084a6:	3202      	adds	r2, #2
 80084a8:	f8ca 2000 	str.w	r2, [sl]
 80084ac:	f1bb 0f00 	cmp.w	fp, #0
 80084b0:	d050      	beq.n	8008554 <__hexnan+0x130>
 80084b2:	454c      	cmp	r4, r9
 80084b4:	d206      	bcs.n	80084c4 <__hexnan+0xa0>
 80084b6:	2d07      	cmp	r5, #7
 80084b8:	dc04      	bgt.n	80084c4 <__hexnan+0xa0>
 80084ba:	462a      	mov	r2, r5
 80084bc:	4649      	mov	r1, r9
 80084be:	4620      	mov	r0, r4
 80084c0:	f7ff ff8a 	bl	80083d8 <L_shift>
 80084c4:	4544      	cmp	r4, r8
 80084c6:	d934      	bls.n	8008532 <__hexnan+0x10e>
 80084c8:	f1a8 0204 	sub.w	r2, r8, #4
 80084cc:	4623      	mov	r3, r4
 80084ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80084d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80084d6:	429f      	cmp	r7, r3
 80084d8:	d2f9      	bcs.n	80084ce <__hexnan+0xaa>
 80084da:	1b3b      	subs	r3, r7, r4
 80084dc:	f023 0303 	bic.w	r3, r3, #3
 80084e0:	3304      	adds	r3, #4
 80084e2:	3401      	adds	r4, #1
 80084e4:	3e03      	subs	r6, #3
 80084e6:	42b4      	cmp	r4, r6
 80084e8:	bf88      	it	hi
 80084ea:	2304      	movhi	r3, #4
 80084ec:	4443      	add	r3, r8
 80084ee:	2200      	movs	r2, #0
 80084f0:	f843 2b04 	str.w	r2, [r3], #4
 80084f4:	429f      	cmp	r7, r3
 80084f6:	d2fb      	bcs.n	80084f0 <__hexnan+0xcc>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	b91b      	cbnz	r3, 8008504 <__hexnan+0xe0>
 80084fc:	4547      	cmp	r7, r8
 80084fe:	d127      	bne.n	8008550 <__hexnan+0x12c>
 8008500:	2301      	movs	r3, #1
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	2005      	movs	r0, #5
 8008506:	e026      	b.n	8008556 <__hexnan+0x132>
 8008508:	3501      	adds	r5, #1
 800850a:	2d08      	cmp	r5, #8
 800850c:	f10b 0b01 	add.w	fp, fp, #1
 8008510:	dd06      	ble.n	8008520 <__hexnan+0xfc>
 8008512:	4544      	cmp	r4, r8
 8008514:	d9c3      	bls.n	800849e <__hexnan+0x7a>
 8008516:	2300      	movs	r3, #0
 8008518:	f844 3c04 	str.w	r3, [r4, #-4]
 800851c:	2501      	movs	r5, #1
 800851e:	3c04      	subs	r4, #4
 8008520:	6822      	ldr	r2, [r4, #0]
 8008522:	f000 000f 	and.w	r0, r0, #15
 8008526:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800852a:	6022      	str	r2, [r4, #0]
 800852c:	e7b7      	b.n	800849e <__hexnan+0x7a>
 800852e:	2508      	movs	r5, #8
 8008530:	e7b5      	b.n	800849e <__hexnan+0x7a>
 8008532:	9b01      	ldr	r3, [sp, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0df      	beq.n	80084f8 <__hexnan+0xd4>
 8008538:	f04f 32ff 	mov.w	r2, #4294967295
 800853c:	f1c3 0320 	rsb	r3, r3, #32
 8008540:	fa22 f303 	lsr.w	r3, r2, r3
 8008544:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008548:	401a      	ands	r2, r3
 800854a:	f846 2c04 	str.w	r2, [r6, #-4]
 800854e:	e7d3      	b.n	80084f8 <__hexnan+0xd4>
 8008550:	3f04      	subs	r7, #4
 8008552:	e7d1      	b.n	80084f8 <__hexnan+0xd4>
 8008554:	2004      	movs	r0, #4
 8008556:	b007      	add	sp, #28
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800855c <_localeconv_r>:
 800855c:	4800      	ldr	r0, [pc, #0]	; (8008560 <_localeconv_r+0x4>)
 800855e:	4770      	bx	lr
 8008560:	20000164 	.word	0x20000164

08008564 <malloc>:
 8008564:	4b02      	ldr	r3, [pc, #8]	; (8008570 <malloc+0xc>)
 8008566:	4601      	mov	r1, r0
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	f000 bd67 	b.w	800903c <_malloc_r>
 800856e:	bf00      	nop
 8008570:	2000000c 	.word	0x2000000c

08008574 <__ascii_mbtowc>:
 8008574:	b082      	sub	sp, #8
 8008576:	b901      	cbnz	r1, 800857a <__ascii_mbtowc+0x6>
 8008578:	a901      	add	r1, sp, #4
 800857a:	b142      	cbz	r2, 800858e <__ascii_mbtowc+0x1a>
 800857c:	b14b      	cbz	r3, 8008592 <__ascii_mbtowc+0x1e>
 800857e:	7813      	ldrb	r3, [r2, #0]
 8008580:	600b      	str	r3, [r1, #0]
 8008582:	7812      	ldrb	r2, [r2, #0]
 8008584:	1e10      	subs	r0, r2, #0
 8008586:	bf18      	it	ne
 8008588:	2001      	movne	r0, #1
 800858a:	b002      	add	sp, #8
 800858c:	4770      	bx	lr
 800858e:	4610      	mov	r0, r2
 8008590:	e7fb      	b.n	800858a <__ascii_mbtowc+0x16>
 8008592:	f06f 0001 	mvn.w	r0, #1
 8008596:	e7f8      	b.n	800858a <__ascii_mbtowc+0x16>

08008598 <memcpy>:
 8008598:	440a      	add	r2, r1
 800859a:	4291      	cmp	r1, r2
 800859c:	f100 33ff 	add.w	r3, r0, #4294967295
 80085a0:	d100      	bne.n	80085a4 <memcpy+0xc>
 80085a2:	4770      	bx	lr
 80085a4:	b510      	push	{r4, lr}
 80085a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ae:	4291      	cmp	r1, r2
 80085b0:	d1f9      	bne.n	80085a6 <memcpy+0xe>
 80085b2:	bd10      	pop	{r4, pc}

080085b4 <_Balloc>:
 80085b4:	b570      	push	{r4, r5, r6, lr}
 80085b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085b8:	4604      	mov	r4, r0
 80085ba:	460d      	mov	r5, r1
 80085bc:	b976      	cbnz	r6, 80085dc <_Balloc+0x28>
 80085be:	2010      	movs	r0, #16
 80085c0:	f7ff ffd0 	bl	8008564 <malloc>
 80085c4:	4602      	mov	r2, r0
 80085c6:	6260      	str	r0, [r4, #36]	; 0x24
 80085c8:	b920      	cbnz	r0, 80085d4 <_Balloc+0x20>
 80085ca:	4b18      	ldr	r3, [pc, #96]	; (800862c <_Balloc+0x78>)
 80085cc:	4818      	ldr	r0, [pc, #96]	; (8008630 <_Balloc+0x7c>)
 80085ce:	2166      	movs	r1, #102	; 0x66
 80085d0:	f000 ff40 	bl	8009454 <__assert_func>
 80085d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085d8:	6006      	str	r6, [r0, #0]
 80085da:	60c6      	str	r6, [r0, #12]
 80085dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085de:	68f3      	ldr	r3, [r6, #12]
 80085e0:	b183      	cbz	r3, 8008604 <_Balloc+0x50>
 80085e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ea:	b9b8      	cbnz	r0, 800861c <_Balloc+0x68>
 80085ec:	2101      	movs	r1, #1
 80085ee:	fa01 f605 	lsl.w	r6, r1, r5
 80085f2:	1d72      	adds	r2, r6, #5
 80085f4:	0092      	lsls	r2, r2, #2
 80085f6:	4620      	mov	r0, r4
 80085f8:	f000 fc9d 	bl	8008f36 <_calloc_r>
 80085fc:	b160      	cbz	r0, 8008618 <_Balloc+0x64>
 80085fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008602:	e00e      	b.n	8008622 <_Balloc+0x6e>
 8008604:	2221      	movs	r2, #33	; 0x21
 8008606:	2104      	movs	r1, #4
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fc94 	bl	8008f36 <_calloc_r>
 800860e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008610:	60f0      	str	r0, [r6, #12]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e4      	bne.n	80085e2 <_Balloc+0x2e>
 8008618:	2000      	movs	r0, #0
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	6802      	ldr	r2, [r0, #0]
 800861e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008622:	2300      	movs	r3, #0
 8008624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008628:	e7f7      	b.n	800861a <_Balloc+0x66>
 800862a:	bf00      	nop
 800862c:	0800b4de 	.word	0x0800b4de
 8008630:	0800b5dc 	.word	0x0800b5dc

08008634 <_Bfree>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008638:	4605      	mov	r5, r0
 800863a:	460c      	mov	r4, r1
 800863c:	b976      	cbnz	r6, 800865c <_Bfree+0x28>
 800863e:	2010      	movs	r0, #16
 8008640:	f7ff ff90 	bl	8008564 <malloc>
 8008644:	4602      	mov	r2, r0
 8008646:	6268      	str	r0, [r5, #36]	; 0x24
 8008648:	b920      	cbnz	r0, 8008654 <_Bfree+0x20>
 800864a:	4b09      	ldr	r3, [pc, #36]	; (8008670 <_Bfree+0x3c>)
 800864c:	4809      	ldr	r0, [pc, #36]	; (8008674 <_Bfree+0x40>)
 800864e:	218a      	movs	r1, #138	; 0x8a
 8008650:	f000 ff00 	bl	8009454 <__assert_func>
 8008654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008658:	6006      	str	r6, [r0, #0]
 800865a:	60c6      	str	r6, [r0, #12]
 800865c:	b13c      	cbz	r4, 800866e <_Bfree+0x3a>
 800865e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008660:	6862      	ldr	r2, [r4, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008668:	6021      	str	r1, [r4, #0]
 800866a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800866e:	bd70      	pop	{r4, r5, r6, pc}
 8008670:	0800b4de 	.word	0x0800b4de
 8008674:	0800b5dc 	.word	0x0800b5dc

08008678 <__multadd>:
 8008678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800867c:	690d      	ldr	r5, [r1, #16]
 800867e:	4607      	mov	r7, r0
 8008680:	460c      	mov	r4, r1
 8008682:	461e      	mov	r6, r3
 8008684:	f101 0c14 	add.w	ip, r1, #20
 8008688:	2000      	movs	r0, #0
 800868a:	f8dc 3000 	ldr.w	r3, [ip]
 800868e:	b299      	uxth	r1, r3
 8008690:	fb02 6101 	mla	r1, r2, r1, r6
 8008694:	0c1e      	lsrs	r6, r3, #16
 8008696:	0c0b      	lsrs	r3, r1, #16
 8008698:	fb02 3306 	mla	r3, r2, r6, r3
 800869c:	b289      	uxth	r1, r1
 800869e:	3001      	adds	r0, #1
 80086a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086a4:	4285      	cmp	r5, r0
 80086a6:	f84c 1b04 	str.w	r1, [ip], #4
 80086aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086ae:	dcec      	bgt.n	800868a <__multadd+0x12>
 80086b0:	b30e      	cbz	r6, 80086f6 <__multadd+0x7e>
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	dc19      	bgt.n	80086ec <__multadd+0x74>
 80086b8:	6861      	ldr	r1, [r4, #4]
 80086ba:	4638      	mov	r0, r7
 80086bc:	3101      	adds	r1, #1
 80086be:	f7ff ff79 	bl	80085b4 <_Balloc>
 80086c2:	4680      	mov	r8, r0
 80086c4:	b928      	cbnz	r0, 80086d2 <__multadd+0x5a>
 80086c6:	4602      	mov	r2, r0
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <__multadd+0x84>)
 80086ca:	480d      	ldr	r0, [pc, #52]	; (8008700 <__multadd+0x88>)
 80086cc:	21b5      	movs	r1, #181	; 0xb5
 80086ce:	f000 fec1 	bl	8009454 <__assert_func>
 80086d2:	6922      	ldr	r2, [r4, #16]
 80086d4:	3202      	adds	r2, #2
 80086d6:	f104 010c 	add.w	r1, r4, #12
 80086da:	0092      	lsls	r2, r2, #2
 80086dc:	300c      	adds	r0, #12
 80086de:	f7ff ff5b 	bl	8008598 <memcpy>
 80086e2:	4621      	mov	r1, r4
 80086e4:	4638      	mov	r0, r7
 80086e6:	f7ff ffa5 	bl	8008634 <_Bfree>
 80086ea:	4644      	mov	r4, r8
 80086ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086f0:	3501      	adds	r5, #1
 80086f2:	615e      	str	r6, [r3, #20]
 80086f4:	6125      	str	r5, [r4, #16]
 80086f6:	4620      	mov	r0, r4
 80086f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086fc:	0800b550 	.word	0x0800b550
 8008700:	0800b5dc 	.word	0x0800b5dc

08008704 <__s2b>:
 8008704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008708:	460c      	mov	r4, r1
 800870a:	4615      	mov	r5, r2
 800870c:	461f      	mov	r7, r3
 800870e:	2209      	movs	r2, #9
 8008710:	3308      	adds	r3, #8
 8008712:	4606      	mov	r6, r0
 8008714:	fb93 f3f2 	sdiv	r3, r3, r2
 8008718:	2100      	movs	r1, #0
 800871a:	2201      	movs	r2, #1
 800871c:	429a      	cmp	r2, r3
 800871e:	db09      	blt.n	8008734 <__s2b+0x30>
 8008720:	4630      	mov	r0, r6
 8008722:	f7ff ff47 	bl	80085b4 <_Balloc>
 8008726:	b940      	cbnz	r0, 800873a <__s2b+0x36>
 8008728:	4602      	mov	r2, r0
 800872a:	4b19      	ldr	r3, [pc, #100]	; (8008790 <__s2b+0x8c>)
 800872c:	4819      	ldr	r0, [pc, #100]	; (8008794 <__s2b+0x90>)
 800872e:	21ce      	movs	r1, #206	; 0xce
 8008730:	f000 fe90 	bl	8009454 <__assert_func>
 8008734:	0052      	lsls	r2, r2, #1
 8008736:	3101      	adds	r1, #1
 8008738:	e7f0      	b.n	800871c <__s2b+0x18>
 800873a:	9b08      	ldr	r3, [sp, #32]
 800873c:	6143      	str	r3, [r0, #20]
 800873e:	2d09      	cmp	r5, #9
 8008740:	f04f 0301 	mov.w	r3, #1
 8008744:	6103      	str	r3, [r0, #16]
 8008746:	dd16      	ble.n	8008776 <__s2b+0x72>
 8008748:	f104 0909 	add.w	r9, r4, #9
 800874c:	46c8      	mov	r8, r9
 800874e:	442c      	add	r4, r5
 8008750:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008754:	4601      	mov	r1, r0
 8008756:	3b30      	subs	r3, #48	; 0x30
 8008758:	220a      	movs	r2, #10
 800875a:	4630      	mov	r0, r6
 800875c:	f7ff ff8c 	bl	8008678 <__multadd>
 8008760:	45a0      	cmp	r8, r4
 8008762:	d1f5      	bne.n	8008750 <__s2b+0x4c>
 8008764:	f1a5 0408 	sub.w	r4, r5, #8
 8008768:	444c      	add	r4, r9
 800876a:	1b2d      	subs	r5, r5, r4
 800876c:	1963      	adds	r3, r4, r5
 800876e:	42bb      	cmp	r3, r7
 8008770:	db04      	blt.n	800877c <__s2b+0x78>
 8008772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008776:	340a      	adds	r4, #10
 8008778:	2509      	movs	r5, #9
 800877a:	e7f6      	b.n	800876a <__s2b+0x66>
 800877c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008780:	4601      	mov	r1, r0
 8008782:	3b30      	subs	r3, #48	; 0x30
 8008784:	220a      	movs	r2, #10
 8008786:	4630      	mov	r0, r6
 8008788:	f7ff ff76 	bl	8008678 <__multadd>
 800878c:	e7ee      	b.n	800876c <__s2b+0x68>
 800878e:	bf00      	nop
 8008790:	0800b550 	.word	0x0800b550
 8008794:	0800b5dc 	.word	0x0800b5dc

08008798 <__hi0bits>:
 8008798:	0c03      	lsrs	r3, r0, #16
 800879a:	041b      	lsls	r3, r3, #16
 800879c:	b9d3      	cbnz	r3, 80087d4 <__hi0bits+0x3c>
 800879e:	0400      	lsls	r0, r0, #16
 80087a0:	2310      	movs	r3, #16
 80087a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087a6:	bf04      	itt	eq
 80087a8:	0200      	lsleq	r0, r0, #8
 80087aa:	3308      	addeq	r3, #8
 80087ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80087b0:	bf04      	itt	eq
 80087b2:	0100      	lsleq	r0, r0, #4
 80087b4:	3304      	addeq	r3, #4
 80087b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087ba:	bf04      	itt	eq
 80087bc:	0080      	lsleq	r0, r0, #2
 80087be:	3302      	addeq	r3, #2
 80087c0:	2800      	cmp	r0, #0
 80087c2:	db05      	blt.n	80087d0 <__hi0bits+0x38>
 80087c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80087c8:	f103 0301 	add.w	r3, r3, #1
 80087cc:	bf08      	it	eq
 80087ce:	2320      	moveq	r3, #32
 80087d0:	4618      	mov	r0, r3
 80087d2:	4770      	bx	lr
 80087d4:	2300      	movs	r3, #0
 80087d6:	e7e4      	b.n	80087a2 <__hi0bits+0xa>

080087d8 <__lo0bits>:
 80087d8:	6803      	ldr	r3, [r0, #0]
 80087da:	f013 0207 	ands.w	r2, r3, #7
 80087de:	4601      	mov	r1, r0
 80087e0:	d00b      	beq.n	80087fa <__lo0bits+0x22>
 80087e2:	07da      	lsls	r2, r3, #31
 80087e4:	d423      	bmi.n	800882e <__lo0bits+0x56>
 80087e6:	0798      	lsls	r0, r3, #30
 80087e8:	bf49      	itett	mi
 80087ea:	085b      	lsrmi	r3, r3, #1
 80087ec:	089b      	lsrpl	r3, r3, #2
 80087ee:	2001      	movmi	r0, #1
 80087f0:	600b      	strmi	r3, [r1, #0]
 80087f2:	bf5c      	itt	pl
 80087f4:	600b      	strpl	r3, [r1, #0]
 80087f6:	2002      	movpl	r0, #2
 80087f8:	4770      	bx	lr
 80087fa:	b298      	uxth	r0, r3
 80087fc:	b9a8      	cbnz	r0, 800882a <__lo0bits+0x52>
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	2010      	movs	r0, #16
 8008802:	b2da      	uxtb	r2, r3
 8008804:	b90a      	cbnz	r2, 800880a <__lo0bits+0x32>
 8008806:	3008      	adds	r0, #8
 8008808:	0a1b      	lsrs	r3, r3, #8
 800880a:	071a      	lsls	r2, r3, #28
 800880c:	bf04      	itt	eq
 800880e:	091b      	lsreq	r3, r3, #4
 8008810:	3004      	addeq	r0, #4
 8008812:	079a      	lsls	r2, r3, #30
 8008814:	bf04      	itt	eq
 8008816:	089b      	lsreq	r3, r3, #2
 8008818:	3002      	addeq	r0, #2
 800881a:	07da      	lsls	r2, r3, #31
 800881c:	d403      	bmi.n	8008826 <__lo0bits+0x4e>
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	f100 0001 	add.w	r0, r0, #1
 8008824:	d005      	beq.n	8008832 <__lo0bits+0x5a>
 8008826:	600b      	str	r3, [r1, #0]
 8008828:	4770      	bx	lr
 800882a:	4610      	mov	r0, r2
 800882c:	e7e9      	b.n	8008802 <__lo0bits+0x2a>
 800882e:	2000      	movs	r0, #0
 8008830:	4770      	bx	lr
 8008832:	2020      	movs	r0, #32
 8008834:	4770      	bx	lr
	...

08008838 <__i2b>:
 8008838:	b510      	push	{r4, lr}
 800883a:	460c      	mov	r4, r1
 800883c:	2101      	movs	r1, #1
 800883e:	f7ff feb9 	bl	80085b4 <_Balloc>
 8008842:	4602      	mov	r2, r0
 8008844:	b928      	cbnz	r0, 8008852 <__i2b+0x1a>
 8008846:	4b05      	ldr	r3, [pc, #20]	; (800885c <__i2b+0x24>)
 8008848:	4805      	ldr	r0, [pc, #20]	; (8008860 <__i2b+0x28>)
 800884a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800884e:	f000 fe01 	bl	8009454 <__assert_func>
 8008852:	2301      	movs	r3, #1
 8008854:	6144      	str	r4, [r0, #20]
 8008856:	6103      	str	r3, [r0, #16]
 8008858:	bd10      	pop	{r4, pc}
 800885a:	bf00      	nop
 800885c:	0800b550 	.word	0x0800b550
 8008860:	0800b5dc 	.word	0x0800b5dc

08008864 <__multiply>:
 8008864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008868:	4691      	mov	r9, r2
 800886a:	690a      	ldr	r2, [r1, #16]
 800886c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008870:	429a      	cmp	r2, r3
 8008872:	bfb8      	it	lt
 8008874:	460b      	movlt	r3, r1
 8008876:	460c      	mov	r4, r1
 8008878:	bfbc      	itt	lt
 800887a:	464c      	movlt	r4, r9
 800887c:	4699      	movlt	r9, r3
 800887e:	6927      	ldr	r7, [r4, #16]
 8008880:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008884:	68a3      	ldr	r3, [r4, #8]
 8008886:	6861      	ldr	r1, [r4, #4]
 8008888:	eb07 060a 	add.w	r6, r7, sl
 800888c:	42b3      	cmp	r3, r6
 800888e:	b085      	sub	sp, #20
 8008890:	bfb8      	it	lt
 8008892:	3101      	addlt	r1, #1
 8008894:	f7ff fe8e 	bl	80085b4 <_Balloc>
 8008898:	b930      	cbnz	r0, 80088a8 <__multiply+0x44>
 800889a:	4602      	mov	r2, r0
 800889c:	4b44      	ldr	r3, [pc, #272]	; (80089b0 <__multiply+0x14c>)
 800889e:	4845      	ldr	r0, [pc, #276]	; (80089b4 <__multiply+0x150>)
 80088a0:	f240 115d 	movw	r1, #349	; 0x15d
 80088a4:	f000 fdd6 	bl	8009454 <__assert_func>
 80088a8:	f100 0514 	add.w	r5, r0, #20
 80088ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088b0:	462b      	mov	r3, r5
 80088b2:	2200      	movs	r2, #0
 80088b4:	4543      	cmp	r3, r8
 80088b6:	d321      	bcc.n	80088fc <__multiply+0x98>
 80088b8:	f104 0314 	add.w	r3, r4, #20
 80088bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80088c0:	f109 0314 	add.w	r3, r9, #20
 80088c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80088c8:	9202      	str	r2, [sp, #8]
 80088ca:	1b3a      	subs	r2, r7, r4
 80088cc:	3a15      	subs	r2, #21
 80088ce:	f022 0203 	bic.w	r2, r2, #3
 80088d2:	3204      	adds	r2, #4
 80088d4:	f104 0115 	add.w	r1, r4, #21
 80088d8:	428f      	cmp	r7, r1
 80088da:	bf38      	it	cc
 80088dc:	2204      	movcc	r2, #4
 80088de:	9201      	str	r2, [sp, #4]
 80088e0:	9a02      	ldr	r2, [sp, #8]
 80088e2:	9303      	str	r3, [sp, #12]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d80c      	bhi.n	8008902 <__multiply+0x9e>
 80088e8:	2e00      	cmp	r6, #0
 80088ea:	dd03      	ble.n	80088f4 <__multiply+0x90>
 80088ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d05a      	beq.n	80089aa <__multiply+0x146>
 80088f4:	6106      	str	r6, [r0, #16]
 80088f6:	b005      	add	sp, #20
 80088f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fc:	f843 2b04 	str.w	r2, [r3], #4
 8008900:	e7d8      	b.n	80088b4 <__multiply+0x50>
 8008902:	f8b3 a000 	ldrh.w	sl, [r3]
 8008906:	f1ba 0f00 	cmp.w	sl, #0
 800890a:	d024      	beq.n	8008956 <__multiply+0xf2>
 800890c:	f104 0e14 	add.w	lr, r4, #20
 8008910:	46a9      	mov	r9, r5
 8008912:	f04f 0c00 	mov.w	ip, #0
 8008916:	f85e 2b04 	ldr.w	r2, [lr], #4
 800891a:	f8d9 1000 	ldr.w	r1, [r9]
 800891e:	fa1f fb82 	uxth.w	fp, r2
 8008922:	b289      	uxth	r1, r1
 8008924:	fb0a 110b 	mla	r1, sl, fp, r1
 8008928:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800892c:	f8d9 2000 	ldr.w	r2, [r9]
 8008930:	4461      	add	r1, ip
 8008932:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008936:	fb0a c20b 	mla	r2, sl, fp, ip
 800893a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800893e:	b289      	uxth	r1, r1
 8008940:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008944:	4577      	cmp	r7, lr
 8008946:	f849 1b04 	str.w	r1, [r9], #4
 800894a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800894e:	d8e2      	bhi.n	8008916 <__multiply+0xb2>
 8008950:	9a01      	ldr	r2, [sp, #4]
 8008952:	f845 c002 	str.w	ip, [r5, r2]
 8008956:	9a03      	ldr	r2, [sp, #12]
 8008958:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800895c:	3304      	adds	r3, #4
 800895e:	f1b9 0f00 	cmp.w	r9, #0
 8008962:	d020      	beq.n	80089a6 <__multiply+0x142>
 8008964:	6829      	ldr	r1, [r5, #0]
 8008966:	f104 0c14 	add.w	ip, r4, #20
 800896a:	46ae      	mov	lr, r5
 800896c:	f04f 0a00 	mov.w	sl, #0
 8008970:	f8bc b000 	ldrh.w	fp, [ip]
 8008974:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008978:	fb09 220b 	mla	r2, r9, fp, r2
 800897c:	4492      	add	sl, r2
 800897e:	b289      	uxth	r1, r1
 8008980:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008984:	f84e 1b04 	str.w	r1, [lr], #4
 8008988:	f85c 2b04 	ldr.w	r2, [ip], #4
 800898c:	f8be 1000 	ldrh.w	r1, [lr]
 8008990:	0c12      	lsrs	r2, r2, #16
 8008992:	fb09 1102 	mla	r1, r9, r2, r1
 8008996:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800899a:	4567      	cmp	r7, ip
 800899c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089a0:	d8e6      	bhi.n	8008970 <__multiply+0x10c>
 80089a2:	9a01      	ldr	r2, [sp, #4]
 80089a4:	50a9      	str	r1, [r5, r2]
 80089a6:	3504      	adds	r5, #4
 80089a8:	e79a      	b.n	80088e0 <__multiply+0x7c>
 80089aa:	3e01      	subs	r6, #1
 80089ac:	e79c      	b.n	80088e8 <__multiply+0x84>
 80089ae:	bf00      	nop
 80089b0:	0800b550 	.word	0x0800b550
 80089b4:	0800b5dc 	.word	0x0800b5dc

080089b8 <__pow5mult>:
 80089b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089bc:	4615      	mov	r5, r2
 80089be:	f012 0203 	ands.w	r2, r2, #3
 80089c2:	4606      	mov	r6, r0
 80089c4:	460f      	mov	r7, r1
 80089c6:	d007      	beq.n	80089d8 <__pow5mult+0x20>
 80089c8:	4c25      	ldr	r4, [pc, #148]	; (8008a60 <__pow5mult+0xa8>)
 80089ca:	3a01      	subs	r2, #1
 80089cc:	2300      	movs	r3, #0
 80089ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089d2:	f7ff fe51 	bl	8008678 <__multadd>
 80089d6:	4607      	mov	r7, r0
 80089d8:	10ad      	asrs	r5, r5, #2
 80089da:	d03d      	beq.n	8008a58 <__pow5mult+0xa0>
 80089dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089de:	b97c      	cbnz	r4, 8008a00 <__pow5mult+0x48>
 80089e0:	2010      	movs	r0, #16
 80089e2:	f7ff fdbf 	bl	8008564 <malloc>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6270      	str	r0, [r6, #36]	; 0x24
 80089ea:	b928      	cbnz	r0, 80089f8 <__pow5mult+0x40>
 80089ec:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <__pow5mult+0xac>)
 80089ee:	481e      	ldr	r0, [pc, #120]	; (8008a68 <__pow5mult+0xb0>)
 80089f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089f4:	f000 fd2e 	bl	8009454 <__assert_func>
 80089f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089fc:	6004      	str	r4, [r0, #0]
 80089fe:	60c4      	str	r4, [r0, #12]
 8008a00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a08:	b94c      	cbnz	r4, 8008a1e <__pow5mult+0x66>
 8008a0a:	f240 2171 	movw	r1, #625	; 0x271
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7ff ff12 	bl	8008838 <__i2b>
 8008a14:	2300      	movs	r3, #0
 8008a16:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a1a:	4604      	mov	r4, r0
 8008a1c:	6003      	str	r3, [r0, #0]
 8008a1e:	f04f 0900 	mov.w	r9, #0
 8008a22:	07eb      	lsls	r3, r5, #31
 8008a24:	d50a      	bpl.n	8008a3c <__pow5mult+0x84>
 8008a26:	4639      	mov	r1, r7
 8008a28:	4622      	mov	r2, r4
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff ff1a 	bl	8008864 <__multiply>
 8008a30:	4639      	mov	r1, r7
 8008a32:	4680      	mov	r8, r0
 8008a34:	4630      	mov	r0, r6
 8008a36:	f7ff fdfd 	bl	8008634 <_Bfree>
 8008a3a:	4647      	mov	r7, r8
 8008a3c:	106d      	asrs	r5, r5, #1
 8008a3e:	d00b      	beq.n	8008a58 <__pow5mult+0xa0>
 8008a40:	6820      	ldr	r0, [r4, #0]
 8008a42:	b938      	cbnz	r0, 8008a54 <__pow5mult+0x9c>
 8008a44:	4622      	mov	r2, r4
 8008a46:	4621      	mov	r1, r4
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f7ff ff0b 	bl	8008864 <__multiply>
 8008a4e:	6020      	str	r0, [r4, #0]
 8008a50:	f8c0 9000 	str.w	r9, [r0]
 8008a54:	4604      	mov	r4, r0
 8008a56:	e7e4      	b.n	8008a22 <__pow5mult+0x6a>
 8008a58:	4638      	mov	r0, r7
 8008a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a5e:	bf00      	nop
 8008a60:	0800b728 	.word	0x0800b728
 8008a64:	0800b4de 	.word	0x0800b4de
 8008a68:	0800b5dc 	.word	0x0800b5dc

08008a6c <__lshift>:
 8008a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a70:	460c      	mov	r4, r1
 8008a72:	6849      	ldr	r1, [r1, #4]
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a7a:	68a3      	ldr	r3, [r4, #8]
 8008a7c:	4607      	mov	r7, r0
 8008a7e:	4691      	mov	r9, r2
 8008a80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a84:	f108 0601 	add.w	r6, r8, #1
 8008a88:	42b3      	cmp	r3, r6
 8008a8a:	db0b      	blt.n	8008aa4 <__lshift+0x38>
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	f7ff fd91 	bl	80085b4 <_Balloc>
 8008a92:	4605      	mov	r5, r0
 8008a94:	b948      	cbnz	r0, 8008aaa <__lshift+0x3e>
 8008a96:	4602      	mov	r2, r0
 8008a98:	4b2a      	ldr	r3, [pc, #168]	; (8008b44 <__lshift+0xd8>)
 8008a9a:	482b      	ldr	r0, [pc, #172]	; (8008b48 <__lshift+0xdc>)
 8008a9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008aa0:	f000 fcd8 	bl	8009454 <__assert_func>
 8008aa4:	3101      	adds	r1, #1
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	e7ee      	b.n	8008a88 <__lshift+0x1c>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f100 0114 	add.w	r1, r0, #20
 8008ab0:	f100 0210 	add.w	r2, r0, #16
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	4553      	cmp	r3, sl
 8008ab8:	db37      	blt.n	8008b2a <__lshift+0xbe>
 8008aba:	6920      	ldr	r0, [r4, #16]
 8008abc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ac0:	f104 0314 	add.w	r3, r4, #20
 8008ac4:	f019 091f 	ands.w	r9, r9, #31
 8008ac8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008acc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ad0:	d02f      	beq.n	8008b32 <__lshift+0xc6>
 8008ad2:	f1c9 0e20 	rsb	lr, r9, #32
 8008ad6:	468a      	mov	sl, r1
 8008ad8:	f04f 0c00 	mov.w	ip, #0
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	fa02 f209 	lsl.w	r2, r2, r9
 8008ae2:	ea42 020c 	orr.w	r2, r2, ip
 8008ae6:	f84a 2b04 	str.w	r2, [sl], #4
 8008aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aee:	4298      	cmp	r0, r3
 8008af0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008af4:	d8f2      	bhi.n	8008adc <__lshift+0x70>
 8008af6:	1b03      	subs	r3, r0, r4
 8008af8:	3b15      	subs	r3, #21
 8008afa:	f023 0303 	bic.w	r3, r3, #3
 8008afe:	3304      	adds	r3, #4
 8008b00:	f104 0215 	add.w	r2, r4, #21
 8008b04:	4290      	cmp	r0, r2
 8008b06:	bf38      	it	cc
 8008b08:	2304      	movcc	r3, #4
 8008b0a:	f841 c003 	str.w	ip, [r1, r3]
 8008b0e:	f1bc 0f00 	cmp.w	ip, #0
 8008b12:	d001      	beq.n	8008b18 <__lshift+0xac>
 8008b14:	f108 0602 	add.w	r6, r8, #2
 8008b18:	3e01      	subs	r6, #1
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	612e      	str	r6, [r5, #16]
 8008b1e:	4621      	mov	r1, r4
 8008b20:	f7ff fd88 	bl	8008634 <_Bfree>
 8008b24:	4628      	mov	r0, r5
 8008b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b2e:	3301      	adds	r3, #1
 8008b30:	e7c1      	b.n	8008ab6 <__lshift+0x4a>
 8008b32:	3904      	subs	r1, #4
 8008b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b38:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b3c:	4298      	cmp	r0, r3
 8008b3e:	d8f9      	bhi.n	8008b34 <__lshift+0xc8>
 8008b40:	e7ea      	b.n	8008b18 <__lshift+0xac>
 8008b42:	bf00      	nop
 8008b44:	0800b550 	.word	0x0800b550
 8008b48:	0800b5dc 	.word	0x0800b5dc

08008b4c <__mcmp>:
 8008b4c:	b530      	push	{r4, r5, lr}
 8008b4e:	6902      	ldr	r2, [r0, #16]
 8008b50:	690c      	ldr	r4, [r1, #16]
 8008b52:	1b12      	subs	r2, r2, r4
 8008b54:	d10e      	bne.n	8008b74 <__mcmp+0x28>
 8008b56:	f100 0314 	add.w	r3, r0, #20
 8008b5a:	3114      	adds	r1, #20
 8008b5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b6c:	42a5      	cmp	r5, r4
 8008b6e:	d003      	beq.n	8008b78 <__mcmp+0x2c>
 8008b70:	d305      	bcc.n	8008b7e <__mcmp+0x32>
 8008b72:	2201      	movs	r2, #1
 8008b74:	4610      	mov	r0, r2
 8008b76:	bd30      	pop	{r4, r5, pc}
 8008b78:	4283      	cmp	r3, r0
 8008b7a:	d3f3      	bcc.n	8008b64 <__mcmp+0x18>
 8008b7c:	e7fa      	b.n	8008b74 <__mcmp+0x28>
 8008b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b82:	e7f7      	b.n	8008b74 <__mcmp+0x28>

08008b84 <__mdiff>:
 8008b84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b88:	460c      	mov	r4, r1
 8008b8a:	4606      	mov	r6, r0
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4620      	mov	r0, r4
 8008b90:	4690      	mov	r8, r2
 8008b92:	f7ff ffdb 	bl	8008b4c <__mcmp>
 8008b96:	1e05      	subs	r5, r0, #0
 8008b98:	d110      	bne.n	8008bbc <__mdiff+0x38>
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f7ff fd09 	bl	80085b4 <_Balloc>
 8008ba2:	b930      	cbnz	r0, 8008bb2 <__mdiff+0x2e>
 8008ba4:	4b3a      	ldr	r3, [pc, #232]	; (8008c90 <__mdiff+0x10c>)
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	f240 2132 	movw	r1, #562	; 0x232
 8008bac:	4839      	ldr	r0, [pc, #228]	; (8008c94 <__mdiff+0x110>)
 8008bae:	f000 fc51 	bl	8009454 <__assert_func>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbc:	bfa4      	itt	ge
 8008bbe:	4643      	movge	r3, r8
 8008bc0:	46a0      	movge	r8, r4
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008bc8:	bfa6      	itte	ge
 8008bca:	461c      	movge	r4, r3
 8008bcc:	2500      	movge	r5, #0
 8008bce:	2501      	movlt	r5, #1
 8008bd0:	f7ff fcf0 	bl	80085b4 <_Balloc>
 8008bd4:	b920      	cbnz	r0, 8008be0 <__mdiff+0x5c>
 8008bd6:	4b2e      	ldr	r3, [pc, #184]	; (8008c90 <__mdiff+0x10c>)
 8008bd8:	4602      	mov	r2, r0
 8008bda:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008bde:	e7e5      	b.n	8008bac <__mdiff+0x28>
 8008be0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008be4:	6926      	ldr	r6, [r4, #16]
 8008be6:	60c5      	str	r5, [r0, #12]
 8008be8:	f104 0914 	add.w	r9, r4, #20
 8008bec:	f108 0514 	add.w	r5, r8, #20
 8008bf0:	f100 0e14 	add.w	lr, r0, #20
 8008bf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008bf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008bfc:	f108 0210 	add.w	r2, r8, #16
 8008c00:	46f2      	mov	sl, lr
 8008c02:	2100      	movs	r1, #0
 8008c04:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c0c:	fa1f f883 	uxth.w	r8, r3
 8008c10:	fa11 f18b 	uxtah	r1, r1, fp
 8008c14:	0c1b      	lsrs	r3, r3, #16
 8008c16:	eba1 0808 	sub.w	r8, r1, r8
 8008c1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c22:	fa1f f888 	uxth.w	r8, r8
 8008c26:	1419      	asrs	r1, r3, #16
 8008c28:	454e      	cmp	r6, r9
 8008c2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c2e:	f84a 3b04 	str.w	r3, [sl], #4
 8008c32:	d8e7      	bhi.n	8008c04 <__mdiff+0x80>
 8008c34:	1b33      	subs	r3, r6, r4
 8008c36:	3b15      	subs	r3, #21
 8008c38:	f023 0303 	bic.w	r3, r3, #3
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	3415      	adds	r4, #21
 8008c40:	42a6      	cmp	r6, r4
 8008c42:	bf38      	it	cc
 8008c44:	2304      	movcc	r3, #4
 8008c46:	441d      	add	r5, r3
 8008c48:	4473      	add	r3, lr
 8008c4a:	469e      	mov	lr, r3
 8008c4c:	462e      	mov	r6, r5
 8008c4e:	4566      	cmp	r6, ip
 8008c50:	d30e      	bcc.n	8008c70 <__mdiff+0xec>
 8008c52:	f10c 0203 	add.w	r2, ip, #3
 8008c56:	1b52      	subs	r2, r2, r5
 8008c58:	f022 0203 	bic.w	r2, r2, #3
 8008c5c:	3d03      	subs	r5, #3
 8008c5e:	45ac      	cmp	ip, r5
 8008c60:	bf38      	it	cc
 8008c62:	2200      	movcc	r2, #0
 8008c64:	441a      	add	r2, r3
 8008c66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c6a:	b17b      	cbz	r3, 8008c8c <__mdiff+0x108>
 8008c6c:	6107      	str	r7, [r0, #16]
 8008c6e:	e7a3      	b.n	8008bb8 <__mdiff+0x34>
 8008c70:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c74:	fa11 f288 	uxtah	r2, r1, r8
 8008c78:	1414      	asrs	r4, r2, #16
 8008c7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c7e:	b292      	uxth	r2, r2
 8008c80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c84:	f84e 2b04 	str.w	r2, [lr], #4
 8008c88:	1421      	asrs	r1, r4, #16
 8008c8a:	e7e0      	b.n	8008c4e <__mdiff+0xca>
 8008c8c:	3f01      	subs	r7, #1
 8008c8e:	e7ea      	b.n	8008c66 <__mdiff+0xe2>
 8008c90:	0800b550 	.word	0x0800b550
 8008c94:	0800b5dc 	.word	0x0800b5dc

08008c98 <__ulp>:
 8008c98:	b082      	sub	sp, #8
 8008c9a:	ed8d 0b00 	vstr	d0, [sp]
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	4912      	ldr	r1, [pc, #72]	; (8008cec <__ulp+0x54>)
 8008ca2:	4019      	ands	r1, r3
 8008ca4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008ca8:	2900      	cmp	r1, #0
 8008caa:	dd05      	ble.n	8008cb8 <__ulp+0x20>
 8008cac:	2200      	movs	r2, #0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	ec43 2b10 	vmov	d0, r2, r3
 8008cb4:	b002      	add	sp, #8
 8008cb6:	4770      	bx	lr
 8008cb8:	4249      	negs	r1, r1
 8008cba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008cbe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008cc2:	f04f 0200 	mov.w	r2, #0
 8008cc6:	f04f 0300 	mov.w	r3, #0
 8008cca:	da04      	bge.n	8008cd6 <__ulp+0x3e>
 8008ccc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008cd0:	fa41 f300 	asr.w	r3, r1, r0
 8008cd4:	e7ec      	b.n	8008cb0 <__ulp+0x18>
 8008cd6:	f1a0 0114 	sub.w	r1, r0, #20
 8008cda:	291e      	cmp	r1, #30
 8008cdc:	bfda      	itte	le
 8008cde:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008ce2:	fa20 f101 	lsrle.w	r1, r0, r1
 8008ce6:	2101      	movgt	r1, #1
 8008ce8:	460a      	mov	r2, r1
 8008cea:	e7e1      	b.n	8008cb0 <__ulp+0x18>
 8008cec:	7ff00000 	.word	0x7ff00000

08008cf0 <__b2d>:
 8008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf2:	6905      	ldr	r5, [r0, #16]
 8008cf4:	f100 0714 	add.w	r7, r0, #20
 8008cf8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008cfc:	1f2e      	subs	r6, r5, #4
 8008cfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7ff fd48 	bl	8008798 <__hi0bits>
 8008d08:	f1c0 0320 	rsb	r3, r0, #32
 8008d0c:	280a      	cmp	r0, #10
 8008d0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008d8c <__b2d+0x9c>
 8008d12:	600b      	str	r3, [r1, #0]
 8008d14:	dc14      	bgt.n	8008d40 <__b2d+0x50>
 8008d16:	f1c0 0e0b 	rsb	lr, r0, #11
 8008d1a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008d1e:	42b7      	cmp	r7, r6
 8008d20:	ea41 030c 	orr.w	r3, r1, ip
 8008d24:	bf34      	ite	cc
 8008d26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d2a:	2100      	movcs	r1, #0
 8008d2c:	3015      	adds	r0, #21
 8008d2e:	fa04 f000 	lsl.w	r0, r4, r0
 8008d32:	fa21 f10e 	lsr.w	r1, r1, lr
 8008d36:	ea40 0201 	orr.w	r2, r0, r1
 8008d3a:	ec43 2b10 	vmov	d0, r2, r3
 8008d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d40:	42b7      	cmp	r7, r6
 8008d42:	bf3a      	itte	cc
 8008d44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d48:	f1a5 0608 	subcc.w	r6, r5, #8
 8008d4c:	2100      	movcs	r1, #0
 8008d4e:	380b      	subs	r0, #11
 8008d50:	d017      	beq.n	8008d82 <__b2d+0x92>
 8008d52:	f1c0 0c20 	rsb	ip, r0, #32
 8008d56:	fa04 f500 	lsl.w	r5, r4, r0
 8008d5a:	42be      	cmp	r6, r7
 8008d5c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008d60:	ea45 0504 	orr.w	r5, r5, r4
 8008d64:	bf8c      	ite	hi
 8008d66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008d6a:	2400      	movls	r4, #0
 8008d6c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008d70:	fa01 f000 	lsl.w	r0, r1, r0
 8008d74:	fa24 f40c 	lsr.w	r4, r4, ip
 8008d78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d7c:	ea40 0204 	orr.w	r2, r0, r4
 8008d80:	e7db      	b.n	8008d3a <__b2d+0x4a>
 8008d82:	ea44 030c 	orr.w	r3, r4, ip
 8008d86:	460a      	mov	r2, r1
 8008d88:	e7d7      	b.n	8008d3a <__b2d+0x4a>
 8008d8a:	bf00      	nop
 8008d8c:	3ff00000 	.word	0x3ff00000

08008d90 <__d2b>:
 8008d90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d94:	4689      	mov	r9, r1
 8008d96:	2101      	movs	r1, #1
 8008d98:	ec57 6b10 	vmov	r6, r7, d0
 8008d9c:	4690      	mov	r8, r2
 8008d9e:	f7ff fc09 	bl	80085b4 <_Balloc>
 8008da2:	4604      	mov	r4, r0
 8008da4:	b930      	cbnz	r0, 8008db4 <__d2b+0x24>
 8008da6:	4602      	mov	r2, r0
 8008da8:	4b25      	ldr	r3, [pc, #148]	; (8008e40 <__d2b+0xb0>)
 8008daa:	4826      	ldr	r0, [pc, #152]	; (8008e44 <__d2b+0xb4>)
 8008dac:	f240 310a 	movw	r1, #778	; 0x30a
 8008db0:	f000 fb50 	bl	8009454 <__assert_func>
 8008db4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008db8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dbc:	bb35      	cbnz	r5, 8008e0c <__d2b+0x7c>
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	d028      	beq.n	8008e16 <__d2b+0x86>
 8008dc4:	4668      	mov	r0, sp
 8008dc6:	9600      	str	r6, [sp, #0]
 8008dc8:	f7ff fd06 	bl	80087d8 <__lo0bits>
 8008dcc:	9900      	ldr	r1, [sp, #0]
 8008dce:	b300      	cbz	r0, 8008e12 <__d2b+0x82>
 8008dd0:	9a01      	ldr	r2, [sp, #4]
 8008dd2:	f1c0 0320 	rsb	r3, r0, #32
 8008dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dda:	430b      	orrs	r3, r1
 8008ddc:	40c2      	lsrs	r2, r0
 8008dde:	6163      	str	r3, [r4, #20]
 8008de0:	9201      	str	r2, [sp, #4]
 8008de2:	9b01      	ldr	r3, [sp, #4]
 8008de4:	61a3      	str	r3, [r4, #24]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bf14      	ite	ne
 8008dea:	2202      	movne	r2, #2
 8008dec:	2201      	moveq	r2, #1
 8008dee:	6122      	str	r2, [r4, #16]
 8008df0:	b1d5      	cbz	r5, 8008e28 <__d2b+0x98>
 8008df2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008df6:	4405      	add	r5, r0
 8008df8:	f8c9 5000 	str.w	r5, [r9]
 8008dfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e00:	f8c8 0000 	str.w	r0, [r8]
 8008e04:	4620      	mov	r0, r4
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e10:	e7d5      	b.n	8008dbe <__d2b+0x2e>
 8008e12:	6161      	str	r1, [r4, #20]
 8008e14:	e7e5      	b.n	8008de2 <__d2b+0x52>
 8008e16:	a801      	add	r0, sp, #4
 8008e18:	f7ff fcde 	bl	80087d8 <__lo0bits>
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	6163      	str	r3, [r4, #20]
 8008e20:	2201      	movs	r2, #1
 8008e22:	6122      	str	r2, [r4, #16]
 8008e24:	3020      	adds	r0, #32
 8008e26:	e7e3      	b.n	8008df0 <__d2b+0x60>
 8008e28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e30:	f8c9 0000 	str.w	r0, [r9]
 8008e34:	6918      	ldr	r0, [r3, #16]
 8008e36:	f7ff fcaf 	bl	8008798 <__hi0bits>
 8008e3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e3e:	e7df      	b.n	8008e00 <__d2b+0x70>
 8008e40:	0800b550 	.word	0x0800b550
 8008e44:	0800b5dc 	.word	0x0800b5dc

08008e48 <__ratio>:
 8008e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4c:	4688      	mov	r8, r1
 8008e4e:	4669      	mov	r1, sp
 8008e50:	4681      	mov	r9, r0
 8008e52:	f7ff ff4d 	bl	8008cf0 <__b2d>
 8008e56:	a901      	add	r1, sp, #4
 8008e58:	4640      	mov	r0, r8
 8008e5a:	ec55 4b10 	vmov	r4, r5, d0
 8008e5e:	f7ff ff47 	bl	8008cf0 <__b2d>
 8008e62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008e6a:	eba3 0c02 	sub.w	ip, r3, r2
 8008e6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e78:	ec51 0b10 	vmov	r0, r1, d0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bfd6      	itet	le
 8008e80:	460a      	movle	r2, r1
 8008e82:	462a      	movgt	r2, r5
 8008e84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e88:	468b      	mov	fp, r1
 8008e8a:	462f      	mov	r7, r5
 8008e8c:	bfd4      	ite	le
 8008e8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008e92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e96:	4620      	mov	r0, r4
 8008e98:	ee10 2a10 	vmov	r2, s0
 8008e9c:	465b      	mov	r3, fp
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	f7f7 fcd4 	bl	800084c <__aeabi_ddiv>
 8008ea4:	ec41 0b10 	vmov	d0, r0, r1
 8008ea8:	b003      	add	sp, #12
 8008eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008eae <__copybits>:
 8008eae:	3901      	subs	r1, #1
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	1149      	asrs	r1, r1, #5
 8008eb4:	6914      	ldr	r4, [r2, #16]
 8008eb6:	3101      	adds	r1, #1
 8008eb8:	f102 0314 	add.w	r3, r2, #20
 8008ebc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ec0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ec4:	1f05      	subs	r5, r0, #4
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	d30c      	bcc.n	8008ee4 <__copybits+0x36>
 8008eca:	1aa3      	subs	r3, r4, r2
 8008ecc:	3b11      	subs	r3, #17
 8008ece:	f023 0303 	bic.w	r3, r3, #3
 8008ed2:	3211      	adds	r2, #17
 8008ed4:	42a2      	cmp	r2, r4
 8008ed6:	bf88      	it	hi
 8008ed8:	2300      	movhi	r3, #0
 8008eda:	4418      	add	r0, r3
 8008edc:	2300      	movs	r3, #0
 8008ede:	4288      	cmp	r0, r1
 8008ee0:	d305      	bcc.n	8008eee <__copybits+0x40>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ee8:	f845 6f04 	str.w	r6, [r5, #4]!
 8008eec:	e7eb      	b.n	8008ec6 <__copybits+0x18>
 8008eee:	f840 3b04 	str.w	r3, [r0], #4
 8008ef2:	e7f4      	b.n	8008ede <__copybits+0x30>

08008ef4 <__any_on>:
 8008ef4:	f100 0214 	add.w	r2, r0, #20
 8008ef8:	6900      	ldr	r0, [r0, #16]
 8008efa:	114b      	asrs	r3, r1, #5
 8008efc:	4298      	cmp	r0, r3
 8008efe:	b510      	push	{r4, lr}
 8008f00:	db11      	blt.n	8008f26 <__any_on+0x32>
 8008f02:	dd0a      	ble.n	8008f1a <__any_on+0x26>
 8008f04:	f011 011f 	ands.w	r1, r1, #31
 8008f08:	d007      	beq.n	8008f1a <__any_on+0x26>
 8008f0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f0e:	fa24 f001 	lsr.w	r0, r4, r1
 8008f12:	fa00 f101 	lsl.w	r1, r0, r1
 8008f16:	428c      	cmp	r4, r1
 8008f18:	d10b      	bne.n	8008f32 <__any_on+0x3e>
 8008f1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d803      	bhi.n	8008f2a <__any_on+0x36>
 8008f22:	2000      	movs	r0, #0
 8008f24:	bd10      	pop	{r4, pc}
 8008f26:	4603      	mov	r3, r0
 8008f28:	e7f7      	b.n	8008f1a <__any_on+0x26>
 8008f2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f2e:	2900      	cmp	r1, #0
 8008f30:	d0f5      	beq.n	8008f1e <__any_on+0x2a>
 8008f32:	2001      	movs	r0, #1
 8008f34:	e7f6      	b.n	8008f24 <__any_on+0x30>

08008f36 <_calloc_r>:
 8008f36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f38:	fba1 2402 	umull	r2, r4, r1, r2
 8008f3c:	b94c      	cbnz	r4, 8008f52 <_calloc_r+0x1c>
 8008f3e:	4611      	mov	r1, r2
 8008f40:	9201      	str	r2, [sp, #4]
 8008f42:	f000 f87b 	bl	800903c <_malloc_r>
 8008f46:	9a01      	ldr	r2, [sp, #4]
 8008f48:	4605      	mov	r5, r0
 8008f4a:	b930      	cbnz	r0, 8008f5a <_calloc_r+0x24>
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	b003      	add	sp, #12
 8008f50:	bd30      	pop	{r4, r5, pc}
 8008f52:	220c      	movs	r2, #12
 8008f54:	6002      	str	r2, [r0, #0]
 8008f56:	2500      	movs	r5, #0
 8008f58:	e7f8      	b.n	8008f4c <_calloc_r+0x16>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	f7fc fbbe 	bl	80056dc <memset>
 8008f60:	e7f4      	b.n	8008f4c <_calloc_r+0x16>
	...

08008f64 <_free_r>:
 8008f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f66:	2900      	cmp	r1, #0
 8008f68:	d044      	beq.n	8008ff4 <_free_r+0x90>
 8008f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6e:	9001      	str	r0, [sp, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f1a1 0404 	sub.w	r4, r1, #4
 8008f76:	bfb8      	it	lt
 8008f78:	18e4      	addlt	r4, r4, r3
 8008f7a:	f000 fab5 	bl	80094e8 <__malloc_lock>
 8008f7e:	4a1e      	ldr	r2, [pc, #120]	; (8008ff8 <_free_r+0x94>)
 8008f80:	9801      	ldr	r0, [sp, #4]
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	b933      	cbnz	r3, 8008f94 <_free_r+0x30>
 8008f86:	6063      	str	r3, [r4, #4]
 8008f88:	6014      	str	r4, [r2, #0]
 8008f8a:	b003      	add	sp, #12
 8008f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f90:	f000 bab0 	b.w	80094f4 <__malloc_unlock>
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d908      	bls.n	8008faa <_free_r+0x46>
 8008f98:	6825      	ldr	r5, [r4, #0]
 8008f9a:	1961      	adds	r1, r4, r5
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	bf01      	itttt	eq
 8008fa0:	6819      	ldreq	r1, [r3, #0]
 8008fa2:	685b      	ldreq	r3, [r3, #4]
 8008fa4:	1949      	addeq	r1, r1, r5
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	e7ed      	b.n	8008f86 <_free_r+0x22>
 8008faa:	461a      	mov	r2, r3
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	b10b      	cbz	r3, 8008fb4 <_free_r+0x50>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d9fa      	bls.n	8008faa <_free_r+0x46>
 8008fb4:	6811      	ldr	r1, [r2, #0]
 8008fb6:	1855      	adds	r5, r2, r1
 8008fb8:	42a5      	cmp	r5, r4
 8008fba:	d10b      	bne.n	8008fd4 <_free_r+0x70>
 8008fbc:	6824      	ldr	r4, [r4, #0]
 8008fbe:	4421      	add	r1, r4
 8008fc0:	1854      	adds	r4, r2, r1
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	d1e0      	bne.n	8008f8a <_free_r+0x26>
 8008fc8:	681c      	ldr	r4, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	6053      	str	r3, [r2, #4]
 8008fce:	4421      	add	r1, r4
 8008fd0:	6011      	str	r1, [r2, #0]
 8008fd2:	e7da      	b.n	8008f8a <_free_r+0x26>
 8008fd4:	d902      	bls.n	8008fdc <_free_r+0x78>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	e7d6      	b.n	8008f8a <_free_r+0x26>
 8008fdc:	6825      	ldr	r5, [r4, #0]
 8008fde:	1961      	adds	r1, r4, r5
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf04      	itt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	bf04      	itt	eq
 8008fec:	1949      	addeq	r1, r1, r5
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	6054      	str	r4, [r2, #4]
 8008ff2:	e7ca      	b.n	8008f8a <_free_r+0x26>
 8008ff4:	b003      	add	sp, #12
 8008ff6:	bd30      	pop	{r4, r5, pc}
 8008ff8:	20000370 	.word	0x20000370

08008ffc <sbrk_aligned>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	4e0e      	ldr	r6, [pc, #56]	; (8009038 <sbrk_aligned+0x3c>)
 8009000:	460c      	mov	r4, r1
 8009002:	6831      	ldr	r1, [r6, #0]
 8009004:	4605      	mov	r5, r0
 8009006:	b911      	cbnz	r1, 800900e <sbrk_aligned+0x12>
 8009008:	f000 f9f2 	bl	80093f0 <_sbrk_r>
 800900c:	6030      	str	r0, [r6, #0]
 800900e:	4621      	mov	r1, r4
 8009010:	4628      	mov	r0, r5
 8009012:	f000 f9ed 	bl	80093f0 <_sbrk_r>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	d00a      	beq.n	8009030 <sbrk_aligned+0x34>
 800901a:	1cc4      	adds	r4, r0, #3
 800901c:	f024 0403 	bic.w	r4, r4, #3
 8009020:	42a0      	cmp	r0, r4
 8009022:	d007      	beq.n	8009034 <sbrk_aligned+0x38>
 8009024:	1a21      	subs	r1, r4, r0
 8009026:	4628      	mov	r0, r5
 8009028:	f000 f9e2 	bl	80093f0 <_sbrk_r>
 800902c:	3001      	adds	r0, #1
 800902e:	d101      	bne.n	8009034 <sbrk_aligned+0x38>
 8009030:	f04f 34ff 	mov.w	r4, #4294967295
 8009034:	4620      	mov	r0, r4
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	20000374 	.word	0x20000374

0800903c <_malloc_r>:
 800903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009040:	1ccd      	adds	r5, r1, #3
 8009042:	f025 0503 	bic.w	r5, r5, #3
 8009046:	3508      	adds	r5, #8
 8009048:	2d0c      	cmp	r5, #12
 800904a:	bf38      	it	cc
 800904c:	250c      	movcc	r5, #12
 800904e:	2d00      	cmp	r5, #0
 8009050:	4607      	mov	r7, r0
 8009052:	db01      	blt.n	8009058 <_malloc_r+0x1c>
 8009054:	42a9      	cmp	r1, r5
 8009056:	d905      	bls.n	8009064 <_malloc_r+0x28>
 8009058:	230c      	movs	r3, #12
 800905a:	603b      	str	r3, [r7, #0]
 800905c:	2600      	movs	r6, #0
 800905e:	4630      	mov	r0, r6
 8009060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009064:	4e2e      	ldr	r6, [pc, #184]	; (8009120 <_malloc_r+0xe4>)
 8009066:	f000 fa3f 	bl	80094e8 <__malloc_lock>
 800906a:	6833      	ldr	r3, [r6, #0]
 800906c:	461c      	mov	r4, r3
 800906e:	bb34      	cbnz	r4, 80090be <_malloc_r+0x82>
 8009070:	4629      	mov	r1, r5
 8009072:	4638      	mov	r0, r7
 8009074:	f7ff ffc2 	bl	8008ffc <sbrk_aligned>
 8009078:	1c43      	adds	r3, r0, #1
 800907a:	4604      	mov	r4, r0
 800907c:	d14d      	bne.n	800911a <_malloc_r+0xde>
 800907e:	6834      	ldr	r4, [r6, #0]
 8009080:	4626      	mov	r6, r4
 8009082:	2e00      	cmp	r6, #0
 8009084:	d140      	bne.n	8009108 <_malloc_r+0xcc>
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	4631      	mov	r1, r6
 800908a:	4638      	mov	r0, r7
 800908c:	eb04 0803 	add.w	r8, r4, r3
 8009090:	f000 f9ae 	bl	80093f0 <_sbrk_r>
 8009094:	4580      	cmp	r8, r0
 8009096:	d13a      	bne.n	800910e <_malloc_r+0xd2>
 8009098:	6821      	ldr	r1, [r4, #0]
 800909a:	3503      	adds	r5, #3
 800909c:	1a6d      	subs	r5, r5, r1
 800909e:	f025 0503 	bic.w	r5, r5, #3
 80090a2:	3508      	adds	r5, #8
 80090a4:	2d0c      	cmp	r5, #12
 80090a6:	bf38      	it	cc
 80090a8:	250c      	movcc	r5, #12
 80090aa:	4629      	mov	r1, r5
 80090ac:	4638      	mov	r0, r7
 80090ae:	f7ff ffa5 	bl	8008ffc <sbrk_aligned>
 80090b2:	3001      	adds	r0, #1
 80090b4:	d02b      	beq.n	800910e <_malloc_r+0xd2>
 80090b6:	6823      	ldr	r3, [r4, #0]
 80090b8:	442b      	add	r3, r5
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	e00e      	b.n	80090dc <_malloc_r+0xa0>
 80090be:	6822      	ldr	r2, [r4, #0]
 80090c0:	1b52      	subs	r2, r2, r5
 80090c2:	d41e      	bmi.n	8009102 <_malloc_r+0xc6>
 80090c4:	2a0b      	cmp	r2, #11
 80090c6:	d916      	bls.n	80090f6 <_malloc_r+0xba>
 80090c8:	1961      	adds	r1, r4, r5
 80090ca:	42a3      	cmp	r3, r4
 80090cc:	6025      	str	r5, [r4, #0]
 80090ce:	bf18      	it	ne
 80090d0:	6059      	strne	r1, [r3, #4]
 80090d2:	6863      	ldr	r3, [r4, #4]
 80090d4:	bf08      	it	eq
 80090d6:	6031      	streq	r1, [r6, #0]
 80090d8:	5162      	str	r2, [r4, r5]
 80090da:	604b      	str	r3, [r1, #4]
 80090dc:	4638      	mov	r0, r7
 80090de:	f104 060b 	add.w	r6, r4, #11
 80090e2:	f000 fa07 	bl	80094f4 <__malloc_unlock>
 80090e6:	f026 0607 	bic.w	r6, r6, #7
 80090ea:	1d23      	adds	r3, r4, #4
 80090ec:	1af2      	subs	r2, r6, r3
 80090ee:	d0b6      	beq.n	800905e <_malloc_r+0x22>
 80090f0:	1b9b      	subs	r3, r3, r6
 80090f2:	50a3      	str	r3, [r4, r2]
 80090f4:	e7b3      	b.n	800905e <_malloc_r+0x22>
 80090f6:	6862      	ldr	r2, [r4, #4]
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	bf0c      	ite	eq
 80090fc:	6032      	streq	r2, [r6, #0]
 80090fe:	605a      	strne	r2, [r3, #4]
 8009100:	e7ec      	b.n	80090dc <_malloc_r+0xa0>
 8009102:	4623      	mov	r3, r4
 8009104:	6864      	ldr	r4, [r4, #4]
 8009106:	e7b2      	b.n	800906e <_malloc_r+0x32>
 8009108:	4634      	mov	r4, r6
 800910a:	6876      	ldr	r6, [r6, #4]
 800910c:	e7b9      	b.n	8009082 <_malloc_r+0x46>
 800910e:	230c      	movs	r3, #12
 8009110:	603b      	str	r3, [r7, #0]
 8009112:	4638      	mov	r0, r7
 8009114:	f000 f9ee 	bl	80094f4 <__malloc_unlock>
 8009118:	e7a1      	b.n	800905e <_malloc_r+0x22>
 800911a:	6025      	str	r5, [r4, #0]
 800911c:	e7de      	b.n	80090dc <_malloc_r+0xa0>
 800911e:	bf00      	nop
 8009120:	20000370 	.word	0x20000370

08009124 <__ssputs_r>:
 8009124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	688e      	ldr	r6, [r1, #8]
 800912a:	429e      	cmp	r6, r3
 800912c:	4682      	mov	sl, r0
 800912e:	460c      	mov	r4, r1
 8009130:	4690      	mov	r8, r2
 8009132:	461f      	mov	r7, r3
 8009134:	d838      	bhi.n	80091a8 <__ssputs_r+0x84>
 8009136:	898a      	ldrh	r2, [r1, #12]
 8009138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800913c:	d032      	beq.n	80091a4 <__ssputs_r+0x80>
 800913e:	6825      	ldr	r5, [r4, #0]
 8009140:	6909      	ldr	r1, [r1, #16]
 8009142:	eba5 0901 	sub.w	r9, r5, r1
 8009146:	6965      	ldr	r5, [r4, #20]
 8009148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800914c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009150:	3301      	adds	r3, #1
 8009152:	444b      	add	r3, r9
 8009154:	106d      	asrs	r5, r5, #1
 8009156:	429d      	cmp	r5, r3
 8009158:	bf38      	it	cc
 800915a:	461d      	movcc	r5, r3
 800915c:	0553      	lsls	r3, r2, #21
 800915e:	d531      	bpl.n	80091c4 <__ssputs_r+0xa0>
 8009160:	4629      	mov	r1, r5
 8009162:	f7ff ff6b 	bl	800903c <_malloc_r>
 8009166:	4606      	mov	r6, r0
 8009168:	b950      	cbnz	r0, 8009180 <__ssputs_r+0x5c>
 800916a:	230c      	movs	r3, #12
 800916c:	f8ca 3000 	str.w	r3, [sl]
 8009170:	89a3      	ldrh	r3, [r4, #12]
 8009172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	f04f 30ff 	mov.w	r0, #4294967295
 800917c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009180:	6921      	ldr	r1, [r4, #16]
 8009182:	464a      	mov	r2, r9
 8009184:	f7ff fa08 	bl	8008598 <memcpy>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800918e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	6126      	str	r6, [r4, #16]
 8009196:	6165      	str	r5, [r4, #20]
 8009198:	444e      	add	r6, r9
 800919a:	eba5 0509 	sub.w	r5, r5, r9
 800919e:	6026      	str	r6, [r4, #0]
 80091a0:	60a5      	str	r5, [r4, #8]
 80091a2:	463e      	mov	r6, r7
 80091a4:	42be      	cmp	r6, r7
 80091a6:	d900      	bls.n	80091aa <__ssputs_r+0x86>
 80091a8:	463e      	mov	r6, r7
 80091aa:	6820      	ldr	r0, [r4, #0]
 80091ac:	4632      	mov	r2, r6
 80091ae:	4641      	mov	r1, r8
 80091b0:	f000 f980 	bl	80094b4 <memmove>
 80091b4:	68a3      	ldr	r3, [r4, #8]
 80091b6:	1b9b      	subs	r3, r3, r6
 80091b8:	60a3      	str	r3, [r4, #8]
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	4433      	add	r3, r6
 80091be:	6023      	str	r3, [r4, #0]
 80091c0:	2000      	movs	r0, #0
 80091c2:	e7db      	b.n	800917c <__ssputs_r+0x58>
 80091c4:	462a      	mov	r2, r5
 80091c6:	f000 f99b 	bl	8009500 <_realloc_r>
 80091ca:	4606      	mov	r6, r0
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d1e1      	bne.n	8009194 <__ssputs_r+0x70>
 80091d0:	6921      	ldr	r1, [r4, #16]
 80091d2:	4650      	mov	r0, sl
 80091d4:	f7ff fec6 	bl	8008f64 <_free_r>
 80091d8:	e7c7      	b.n	800916a <__ssputs_r+0x46>
	...

080091dc <_svfiprintf_r>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	4698      	mov	r8, r3
 80091e2:	898b      	ldrh	r3, [r1, #12]
 80091e4:	061b      	lsls	r3, r3, #24
 80091e6:	b09d      	sub	sp, #116	; 0x74
 80091e8:	4607      	mov	r7, r0
 80091ea:	460d      	mov	r5, r1
 80091ec:	4614      	mov	r4, r2
 80091ee:	d50e      	bpl.n	800920e <_svfiprintf_r+0x32>
 80091f0:	690b      	ldr	r3, [r1, #16]
 80091f2:	b963      	cbnz	r3, 800920e <_svfiprintf_r+0x32>
 80091f4:	2140      	movs	r1, #64	; 0x40
 80091f6:	f7ff ff21 	bl	800903c <_malloc_r>
 80091fa:	6028      	str	r0, [r5, #0]
 80091fc:	6128      	str	r0, [r5, #16]
 80091fe:	b920      	cbnz	r0, 800920a <_svfiprintf_r+0x2e>
 8009200:	230c      	movs	r3, #12
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	f04f 30ff 	mov.w	r0, #4294967295
 8009208:	e0d1      	b.n	80093ae <_svfiprintf_r+0x1d2>
 800920a:	2340      	movs	r3, #64	; 0x40
 800920c:	616b      	str	r3, [r5, #20]
 800920e:	2300      	movs	r3, #0
 8009210:	9309      	str	r3, [sp, #36]	; 0x24
 8009212:	2320      	movs	r3, #32
 8009214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009218:	f8cd 800c 	str.w	r8, [sp, #12]
 800921c:	2330      	movs	r3, #48	; 0x30
 800921e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093c8 <_svfiprintf_r+0x1ec>
 8009222:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009226:	f04f 0901 	mov.w	r9, #1
 800922a:	4623      	mov	r3, r4
 800922c:	469a      	mov	sl, r3
 800922e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009232:	b10a      	cbz	r2, 8009238 <_svfiprintf_r+0x5c>
 8009234:	2a25      	cmp	r2, #37	; 0x25
 8009236:	d1f9      	bne.n	800922c <_svfiprintf_r+0x50>
 8009238:	ebba 0b04 	subs.w	fp, sl, r4
 800923c:	d00b      	beq.n	8009256 <_svfiprintf_r+0x7a>
 800923e:	465b      	mov	r3, fp
 8009240:	4622      	mov	r2, r4
 8009242:	4629      	mov	r1, r5
 8009244:	4638      	mov	r0, r7
 8009246:	f7ff ff6d 	bl	8009124 <__ssputs_r>
 800924a:	3001      	adds	r0, #1
 800924c:	f000 80aa 	beq.w	80093a4 <_svfiprintf_r+0x1c8>
 8009250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009252:	445a      	add	r2, fp
 8009254:	9209      	str	r2, [sp, #36]	; 0x24
 8009256:	f89a 3000 	ldrb.w	r3, [sl]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 80a2 	beq.w	80093a4 <_svfiprintf_r+0x1c8>
 8009260:	2300      	movs	r3, #0
 8009262:	f04f 32ff 	mov.w	r2, #4294967295
 8009266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800926a:	f10a 0a01 	add.w	sl, sl, #1
 800926e:	9304      	str	r3, [sp, #16]
 8009270:	9307      	str	r3, [sp, #28]
 8009272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009276:	931a      	str	r3, [sp, #104]	; 0x68
 8009278:	4654      	mov	r4, sl
 800927a:	2205      	movs	r2, #5
 800927c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009280:	4851      	ldr	r0, [pc, #324]	; (80093c8 <_svfiprintf_r+0x1ec>)
 8009282:	f7f6 ffad 	bl	80001e0 <memchr>
 8009286:	9a04      	ldr	r2, [sp, #16]
 8009288:	b9d8      	cbnz	r0, 80092c2 <_svfiprintf_r+0xe6>
 800928a:	06d0      	lsls	r0, r2, #27
 800928c:	bf44      	itt	mi
 800928e:	2320      	movmi	r3, #32
 8009290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009294:	0711      	lsls	r1, r2, #28
 8009296:	bf44      	itt	mi
 8009298:	232b      	movmi	r3, #43	; 0x2b
 800929a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800929e:	f89a 3000 	ldrb.w	r3, [sl]
 80092a2:	2b2a      	cmp	r3, #42	; 0x2a
 80092a4:	d015      	beq.n	80092d2 <_svfiprintf_r+0xf6>
 80092a6:	9a07      	ldr	r2, [sp, #28]
 80092a8:	4654      	mov	r4, sl
 80092aa:	2000      	movs	r0, #0
 80092ac:	f04f 0c0a 	mov.w	ip, #10
 80092b0:	4621      	mov	r1, r4
 80092b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b6:	3b30      	subs	r3, #48	; 0x30
 80092b8:	2b09      	cmp	r3, #9
 80092ba:	d94e      	bls.n	800935a <_svfiprintf_r+0x17e>
 80092bc:	b1b0      	cbz	r0, 80092ec <_svfiprintf_r+0x110>
 80092be:	9207      	str	r2, [sp, #28]
 80092c0:	e014      	b.n	80092ec <_svfiprintf_r+0x110>
 80092c2:	eba0 0308 	sub.w	r3, r0, r8
 80092c6:	fa09 f303 	lsl.w	r3, r9, r3
 80092ca:	4313      	orrs	r3, r2
 80092cc:	9304      	str	r3, [sp, #16]
 80092ce:	46a2      	mov	sl, r4
 80092d0:	e7d2      	b.n	8009278 <_svfiprintf_r+0x9c>
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	1d19      	adds	r1, r3, #4
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	9103      	str	r1, [sp, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	bfbb      	ittet	lt
 80092de:	425b      	neglt	r3, r3
 80092e0:	f042 0202 	orrlt.w	r2, r2, #2
 80092e4:	9307      	strge	r3, [sp, #28]
 80092e6:	9307      	strlt	r3, [sp, #28]
 80092e8:	bfb8      	it	lt
 80092ea:	9204      	strlt	r2, [sp, #16]
 80092ec:	7823      	ldrb	r3, [r4, #0]
 80092ee:	2b2e      	cmp	r3, #46	; 0x2e
 80092f0:	d10c      	bne.n	800930c <_svfiprintf_r+0x130>
 80092f2:	7863      	ldrb	r3, [r4, #1]
 80092f4:	2b2a      	cmp	r3, #42	; 0x2a
 80092f6:	d135      	bne.n	8009364 <_svfiprintf_r+0x188>
 80092f8:	9b03      	ldr	r3, [sp, #12]
 80092fa:	1d1a      	adds	r2, r3, #4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	9203      	str	r2, [sp, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	bfb8      	it	lt
 8009304:	f04f 33ff 	movlt.w	r3, #4294967295
 8009308:	3402      	adds	r4, #2
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093d8 <_svfiprintf_r+0x1fc>
 8009310:	7821      	ldrb	r1, [r4, #0]
 8009312:	2203      	movs	r2, #3
 8009314:	4650      	mov	r0, sl
 8009316:	f7f6 ff63 	bl	80001e0 <memchr>
 800931a:	b140      	cbz	r0, 800932e <_svfiprintf_r+0x152>
 800931c:	2340      	movs	r3, #64	; 0x40
 800931e:	eba0 000a 	sub.w	r0, r0, sl
 8009322:	fa03 f000 	lsl.w	r0, r3, r0
 8009326:	9b04      	ldr	r3, [sp, #16]
 8009328:	4303      	orrs	r3, r0
 800932a:	3401      	adds	r4, #1
 800932c:	9304      	str	r3, [sp, #16]
 800932e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009332:	4826      	ldr	r0, [pc, #152]	; (80093cc <_svfiprintf_r+0x1f0>)
 8009334:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009338:	2206      	movs	r2, #6
 800933a:	f7f6 ff51 	bl	80001e0 <memchr>
 800933e:	2800      	cmp	r0, #0
 8009340:	d038      	beq.n	80093b4 <_svfiprintf_r+0x1d8>
 8009342:	4b23      	ldr	r3, [pc, #140]	; (80093d0 <_svfiprintf_r+0x1f4>)
 8009344:	bb1b      	cbnz	r3, 800938e <_svfiprintf_r+0x1b2>
 8009346:	9b03      	ldr	r3, [sp, #12]
 8009348:	3307      	adds	r3, #7
 800934a:	f023 0307 	bic.w	r3, r3, #7
 800934e:	3308      	adds	r3, #8
 8009350:	9303      	str	r3, [sp, #12]
 8009352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009354:	4433      	add	r3, r6
 8009356:	9309      	str	r3, [sp, #36]	; 0x24
 8009358:	e767      	b.n	800922a <_svfiprintf_r+0x4e>
 800935a:	fb0c 3202 	mla	r2, ip, r2, r3
 800935e:	460c      	mov	r4, r1
 8009360:	2001      	movs	r0, #1
 8009362:	e7a5      	b.n	80092b0 <_svfiprintf_r+0xd4>
 8009364:	2300      	movs	r3, #0
 8009366:	3401      	adds	r4, #1
 8009368:	9305      	str	r3, [sp, #20]
 800936a:	4619      	mov	r1, r3
 800936c:	f04f 0c0a 	mov.w	ip, #10
 8009370:	4620      	mov	r0, r4
 8009372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009376:	3a30      	subs	r2, #48	; 0x30
 8009378:	2a09      	cmp	r2, #9
 800937a:	d903      	bls.n	8009384 <_svfiprintf_r+0x1a8>
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0c5      	beq.n	800930c <_svfiprintf_r+0x130>
 8009380:	9105      	str	r1, [sp, #20]
 8009382:	e7c3      	b.n	800930c <_svfiprintf_r+0x130>
 8009384:	fb0c 2101 	mla	r1, ip, r1, r2
 8009388:	4604      	mov	r4, r0
 800938a:	2301      	movs	r3, #1
 800938c:	e7f0      	b.n	8009370 <_svfiprintf_r+0x194>
 800938e:	ab03      	add	r3, sp, #12
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	462a      	mov	r2, r5
 8009394:	4b0f      	ldr	r3, [pc, #60]	; (80093d4 <_svfiprintf_r+0x1f8>)
 8009396:	a904      	add	r1, sp, #16
 8009398:	4638      	mov	r0, r7
 800939a:	f7fc fa47 	bl	800582c <_printf_float>
 800939e:	1c42      	adds	r2, r0, #1
 80093a0:	4606      	mov	r6, r0
 80093a2:	d1d6      	bne.n	8009352 <_svfiprintf_r+0x176>
 80093a4:	89ab      	ldrh	r3, [r5, #12]
 80093a6:	065b      	lsls	r3, r3, #25
 80093a8:	f53f af2c 	bmi.w	8009204 <_svfiprintf_r+0x28>
 80093ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ae:	b01d      	add	sp, #116	; 0x74
 80093b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b4:	ab03      	add	r3, sp, #12
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	462a      	mov	r2, r5
 80093ba:	4b06      	ldr	r3, [pc, #24]	; (80093d4 <_svfiprintf_r+0x1f8>)
 80093bc:	a904      	add	r1, sp, #16
 80093be:	4638      	mov	r0, r7
 80093c0:	f7fc fcd8 	bl	8005d74 <_printf_i>
 80093c4:	e7eb      	b.n	800939e <_svfiprintf_r+0x1c2>
 80093c6:	bf00      	nop
 80093c8:	0800b734 	.word	0x0800b734
 80093cc:	0800b73e 	.word	0x0800b73e
 80093d0:	0800582d 	.word	0x0800582d
 80093d4:	08009125 	.word	0x08009125
 80093d8:	0800b73a 	.word	0x0800b73a
 80093dc:	00000000 	.word	0x00000000

080093e0 <nan>:
 80093e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80093e8 <nan+0x8>
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	00000000 	.word	0x00000000
 80093ec:	7ff80000 	.word	0x7ff80000

080093f0 <_sbrk_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4d06      	ldr	r5, [pc, #24]	; (800940c <_sbrk_r+0x1c>)
 80093f4:	2300      	movs	r3, #0
 80093f6:	4604      	mov	r4, r0
 80093f8:	4608      	mov	r0, r1
 80093fa:	602b      	str	r3, [r5, #0]
 80093fc:	f7f8 fc60 	bl	8001cc0 <_sbrk>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d102      	bne.n	800940a <_sbrk_r+0x1a>
 8009404:	682b      	ldr	r3, [r5, #0]
 8009406:	b103      	cbz	r3, 800940a <_sbrk_r+0x1a>
 8009408:	6023      	str	r3, [r4, #0]
 800940a:	bd38      	pop	{r3, r4, r5, pc}
 800940c:	20000378 	.word	0x20000378

08009410 <strncmp>:
 8009410:	b510      	push	{r4, lr}
 8009412:	b17a      	cbz	r2, 8009434 <strncmp+0x24>
 8009414:	4603      	mov	r3, r0
 8009416:	3901      	subs	r1, #1
 8009418:	1884      	adds	r4, r0, r2
 800941a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800941e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009422:	4290      	cmp	r0, r2
 8009424:	d101      	bne.n	800942a <strncmp+0x1a>
 8009426:	42a3      	cmp	r3, r4
 8009428:	d101      	bne.n	800942e <strncmp+0x1e>
 800942a:	1a80      	subs	r0, r0, r2
 800942c:	bd10      	pop	{r4, pc}
 800942e:	2800      	cmp	r0, #0
 8009430:	d1f3      	bne.n	800941a <strncmp+0xa>
 8009432:	e7fa      	b.n	800942a <strncmp+0x1a>
 8009434:	4610      	mov	r0, r2
 8009436:	e7f9      	b.n	800942c <strncmp+0x1c>

08009438 <__ascii_wctomb>:
 8009438:	b149      	cbz	r1, 800944e <__ascii_wctomb+0x16>
 800943a:	2aff      	cmp	r2, #255	; 0xff
 800943c:	bf85      	ittet	hi
 800943e:	238a      	movhi	r3, #138	; 0x8a
 8009440:	6003      	strhi	r3, [r0, #0]
 8009442:	700a      	strbls	r2, [r1, #0]
 8009444:	f04f 30ff 	movhi.w	r0, #4294967295
 8009448:	bf98      	it	ls
 800944a:	2001      	movls	r0, #1
 800944c:	4770      	bx	lr
 800944e:	4608      	mov	r0, r1
 8009450:	4770      	bx	lr
	...

08009454 <__assert_func>:
 8009454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009456:	4614      	mov	r4, r2
 8009458:	461a      	mov	r2, r3
 800945a:	4b09      	ldr	r3, [pc, #36]	; (8009480 <__assert_func+0x2c>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4605      	mov	r5, r0
 8009460:	68d8      	ldr	r0, [r3, #12]
 8009462:	b14c      	cbz	r4, 8009478 <__assert_func+0x24>
 8009464:	4b07      	ldr	r3, [pc, #28]	; (8009484 <__assert_func+0x30>)
 8009466:	9100      	str	r1, [sp, #0]
 8009468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800946c:	4906      	ldr	r1, [pc, #24]	; (8009488 <__assert_func+0x34>)
 800946e:	462b      	mov	r3, r5
 8009470:	f000 f80e 	bl	8009490 <fiprintf>
 8009474:	f000 fa8c 	bl	8009990 <abort>
 8009478:	4b04      	ldr	r3, [pc, #16]	; (800948c <__assert_func+0x38>)
 800947a:	461c      	mov	r4, r3
 800947c:	e7f3      	b.n	8009466 <__assert_func+0x12>
 800947e:	bf00      	nop
 8009480:	2000000c 	.word	0x2000000c
 8009484:	0800b745 	.word	0x0800b745
 8009488:	0800b752 	.word	0x0800b752
 800948c:	0800b780 	.word	0x0800b780

08009490 <fiprintf>:
 8009490:	b40e      	push	{r1, r2, r3}
 8009492:	b503      	push	{r0, r1, lr}
 8009494:	4601      	mov	r1, r0
 8009496:	ab03      	add	r3, sp, #12
 8009498:	4805      	ldr	r0, [pc, #20]	; (80094b0 <fiprintf+0x20>)
 800949a:	f853 2b04 	ldr.w	r2, [r3], #4
 800949e:	6800      	ldr	r0, [r0, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	f000 f885 	bl	80095b0 <_vfiprintf_r>
 80094a6:	b002      	add	sp, #8
 80094a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094ac:	b003      	add	sp, #12
 80094ae:	4770      	bx	lr
 80094b0:	2000000c 	.word	0x2000000c

080094b4 <memmove>:
 80094b4:	4288      	cmp	r0, r1
 80094b6:	b510      	push	{r4, lr}
 80094b8:	eb01 0402 	add.w	r4, r1, r2
 80094bc:	d902      	bls.n	80094c4 <memmove+0x10>
 80094be:	4284      	cmp	r4, r0
 80094c0:	4623      	mov	r3, r4
 80094c2:	d807      	bhi.n	80094d4 <memmove+0x20>
 80094c4:	1e43      	subs	r3, r0, #1
 80094c6:	42a1      	cmp	r1, r4
 80094c8:	d008      	beq.n	80094dc <memmove+0x28>
 80094ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094d2:	e7f8      	b.n	80094c6 <memmove+0x12>
 80094d4:	4402      	add	r2, r0
 80094d6:	4601      	mov	r1, r0
 80094d8:	428a      	cmp	r2, r1
 80094da:	d100      	bne.n	80094de <memmove+0x2a>
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094e6:	e7f7      	b.n	80094d8 <memmove+0x24>

080094e8 <__malloc_lock>:
 80094e8:	4801      	ldr	r0, [pc, #4]	; (80094f0 <__malloc_lock+0x8>)
 80094ea:	f000 bc11 	b.w	8009d10 <__retarget_lock_acquire_recursive>
 80094ee:	bf00      	nop
 80094f0:	2000037c 	.word	0x2000037c

080094f4 <__malloc_unlock>:
 80094f4:	4801      	ldr	r0, [pc, #4]	; (80094fc <__malloc_unlock+0x8>)
 80094f6:	f000 bc0c 	b.w	8009d12 <__retarget_lock_release_recursive>
 80094fa:	bf00      	nop
 80094fc:	2000037c 	.word	0x2000037c

08009500 <_realloc_r>:
 8009500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	4680      	mov	r8, r0
 8009506:	4614      	mov	r4, r2
 8009508:	460e      	mov	r6, r1
 800950a:	b921      	cbnz	r1, 8009516 <_realloc_r+0x16>
 800950c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009510:	4611      	mov	r1, r2
 8009512:	f7ff bd93 	b.w	800903c <_malloc_r>
 8009516:	b92a      	cbnz	r2, 8009524 <_realloc_r+0x24>
 8009518:	f7ff fd24 	bl	8008f64 <_free_r>
 800951c:	4625      	mov	r5, r4
 800951e:	4628      	mov	r0, r5
 8009520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009524:	f000 fc5c 	bl	8009de0 <_malloc_usable_size_r>
 8009528:	4284      	cmp	r4, r0
 800952a:	4607      	mov	r7, r0
 800952c:	d802      	bhi.n	8009534 <_realloc_r+0x34>
 800952e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009532:	d812      	bhi.n	800955a <_realloc_r+0x5a>
 8009534:	4621      	mov	r1, r4
 8009536:	4640      	mov	r0, r8
 8009538:	f7ff fd80 	bl	800903c <_malloc_r>
 800953c:	4605      	mov	r5, r0
 800953e:	2800      	cmp	r0, #0
 8009540:	d0ed      	beq.n	800951e <_realloc_r+0x1e>
 8009542:	42bc      	cmp	r4, r7
 8009544:	4622      	mov	r2, r4
 8009546:	4631      	mov	r1, r6
 8009548:	bf28      	it	cs
 800954a:	463a      	movcs	r2, r7
 800954c:	f7ff f824 	bl	8008598 <memcpy>
 8009550:	4631      	mov	r1, r6
 8009552:	4640      	mov	r0, r8
 8009554:	f7ff fd06 	bl	8008f64 <_free_r>
 8009558:	e7e1      	b.n	800951e <_realloc_r+0x1e>
 800955a:	4635      	mov	r5, r6
 800955c:	e7df      	b.n	800951e <_realloc_r+0x1e>

0800955e <__sfputc_r>:
 800955e:	6893      	ldr	r3, [r2, #8]
 8009560:	3b01      	subs	r3, #1
 8009562:	2b00      	cmp	r3, #0
 8009564:	b410      	push	{r4}
 8009566:	6093      	str	r3, [r2, #8]
 8009568:	da08      	bge.n	800957c <__sfputc_r+0x1e>
 800956a:	6994      	ldr	r4, [r2, #24]
 800956c:	42a3      	cmp	r3, r4
 800956e:	db01      	blt.n	8009574 <__sfputc_r+0x16>
 8009570:	290a      	cmp	r1, #10
 8009572:	d103      	bne.n	800957c <__sfputc_r+0x1e>
 8009574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009578:	f000 b94a 	b.w	8009810 <__swbuf_r>
 800957c:	6813      	ldr	r3, [r2, #0]
 800957e:	1c58      	adds	r0, r3, #1
 8009580:	6010      	str	r0, [r2, #0]
 8009582:	7019      	strb	r1, [r3, #0]
 8009584:	4608      	mov	r0, r1
 8009586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800958a:	4770      	bx	lr

0800958c <__sfputs_r>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	4606      	mov	r6, r0
 8009590:	460f      	mov	r7, r1
 8009592:	4614      	mov	r4, r2
 8009594:	18d5      	adds	r5, r2, r3
 8009596:	42ac      	cmp	r4, r5
 8009598:	d101      	bne.n	800959e <__sfputs_r+0x12>
 800959a:	2000      	movs	r0, #0
 800959c:	e007      	b.n	80095ae <__sfputs_r+0x22>
 800959e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a2:	463a      	mov	r2, r7
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff ffda 	bl	800955e <__sfputc_r>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d1f3      	bne.n	8009596 <__sfputs_r+0xa>
 80095ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095b0 <_vfiprintf_r>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	460d      	mov	r5, r1
 80095b6:	b09d      	sub	sp, #116	; 0x74
 80095b8:	4614      	mov	r4, r2
 80095ba:	4698      	mov	r8, r3
 80095bc:	4606      	mov	r6, r0
 80095be:	b118      	cbz	r0, 80095c8 <_vfiprintf_r+0x18>
 80095c0:	6983      	ldr	r3, [r0, #24]
 80095c2:	b90b      	cbnz	r3, 80095c8 <_vfiprintf_r+0x18>
 80095c4:	f000 fb06 	bl	8009bd4 <__sinit>
 80095c8:	4b89      	ldr	r3, [pc, #548]	; (80097f0 <_vfiprintf_r+0x240>)
 80095ca:	429d      	cmp	r5, r3
 80095cc:	d11b      	bne.n	8009606 <_vfiprintf_r+0x56>
 80095ce:	6875      	ldr	r5, [r6, #4]
 80095d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	d405      	bmi.n	80095e2 <_vfiprintf_r+0x32>
 80095d6:	89ab      	ldrh	r3, [r5, #12]
 80095d8:	059a      	lsls	r2, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_vfiprintf_r+0x32>
 80095dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095de:	f000 fb97 	bl	8009d10 <__retarget_lock_acquire_recursive>
 80095e2:	89ab      	ldrh	r3, [r5, #12]
 80095e4:	071b      	lsls	r3, r3, #28
 80095e6:	d501      	bpl.n	80095ec <_vfiprintf_r+0x3c>
 80095e8:	692b      	ldr	r3, [r5, #16]
 80095ea:	b9eb      	cbnz	r3, 8009628 <_vfiprintf_r+0x78>
 80095ec:	4629      	mov	r1, r5
 80095ee:	4630      	mov	r0, r6
 80095f0:	f000 f960 	bl	80098b4 <__swsetup_r>
 80095f4:	b1c0      	cbz	r0, 8009628 <_vfiprintf_r+0x78>
 80095f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095f8:	07dc      	lsls	r4, r3, #31
 80095fa:	d50e      	bpl.n	800961a <_vfiprintf_r+0x6a>
 80095fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009600:	b01d      	add	sp, #116	; 0x74
 8009602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009606:	4b7b      	ldr	r3, [pc, #492]	; (80097f4 <_vfiprintf_r+0x244>)
 8009608:	429d      	cmp	r5, r3
 800960a:	d101      	bne.n	8009610 <_vfiprintf_r+0x60>
 800960c:	68b5      	ldr	r5, [r6, #8]
 800960e:	e7df      	b.n	80095d0 <_vfiprintf_r+0x20>
 8009610:	4b79      	ldr	r3, [pc, #484]	; (80097f8 <_vfiprintf_r+0x248>)
 8009612:	429d      	cmp	r5, r3
 8009614:	bf08      	it	eq
 8009616:	68f5      	ldreq	r5, [r6, #12]
 8009618:	e7da      	b.n	80095d0 <_vfiprintf_r+0x20>
 800961a:	89ab      	ldrh	r3, [r5, #12]
 800961c:	0598      	lsls	r0, r3, #22
 800961e:	d4ed      	bmi.n	80095fc <_vfiprintf_r+0x4c>
 8009620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009622:	f000 fb76 	bl	8009d12 <__retarget_lock_release_recursive>
 8009626:	e7e9      	b.n	80095fc <_vfiprintf_r+0x4c>
 8009628:	2300      	movs	r3, #0
 800962a:	9309      	str	r3, [sp, #36]	; 0x24
 800962c:	2320      	movs	r3, #32
 800962e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009632:	f8cd 800c 	str.w	r8, [sp, #12]
 8009636:	2330      	movs	r3, #48	; 0x30
 8009638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097fc <_vfiprintf_r+0x24c>
 800963c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009640:	f04f 0901 	mov.w	r9, #1
 8009644:	4623      	mov	r3, r4
 8009646:	469a      	mov	sl, r3
 8009648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800964c:	b10a      	cbz	r2, 8009652 <_vfiprintf_r+0xa2>
 800964e:	2a25      	cmp	r2, #37	; 0x25
 8009650:	d1f9      	bne.n	8009646 <_vfiprintf_r+0x96>
 8009652:	ebba 0b04 	subs.w	fp, sl, r4
 8009656:	d00b      	beq.n	8009670 <_vfiprintf_r+0xc0>
 8009658:	465b      	mov	r3, fp
 800965a:	4622      	mov	r2, r4
 800965c:	4629      	mov	r1, r5
 800965e:	4630      	mov	r0, r6
 8009660:	f7ff ff94 	bl	800958c <__sfputs_r>
 8009664:	3001      	adds	r0, #1
 8009666:	f000 80aa 	beq.w	80097be <_vfiprintf_r+0x20e>
 800966a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800966c:	445a      	add	r2, fp
 800966e:	9209      	str	r2, [sp, #36]	; 0x24
 8009670:	f89a 3000 	ldrb.w	r3, [sl]
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80a2 	beq.w	80097be <_vfiprintf_r+0x20e>
 800967a:	2300      	movs	r3, #0
 800967c:	f04f 32ff 	mov.w	r2, #4294967295
 8009680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009684:	f10a 0a01 	add.w	sl, sl, #1
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	9307      	str	r3, [sp, #28]
 800968c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009690:	931a      	str	r3, [sp, #104]	; 0x68
 8009692:	4654      	mov	r4, sl
 8009694:	2205      	movs	r2, #5
 8009696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969a:	4858      	ldr	r0, [pc, #352]	; (80097fc <_vfiprintf_r+0x24c>)
 800969c:	f7f6 fda0 	bl	80001e0 <memchr>
 80096a0:	9a04      	ldr	r2, [sp, #16]
 80096a2:	b9d8      	cbnz	r0, 80096dc <_vfiprintf_r+0x12c>
 80096a4:	06d1      	lsls	r1, r2, #27
 80096a6:	bf44      	itt	mi
 80096a8:	2320      	movmi	r3, #32
 80096aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ae:	0713      	lsls	r3, r2, #28
 80096b0:	bf44      	itt	mi
 80096b2:	232b      	movmi	r3, #43	; 0x2b
 80096b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096b8:	f89a 3000 	ldrb.w	r3, [sl]
 80096bc:	2b2a      	cmp	r3, #42	; 0x2a
 80096be:	d015      	beq.n	80096ec <_vfiprintf_r+0x13c>
 80096c0:	9a07      	ldr	r2, [sp, #28]
 80096c2:	4654      	mov	r4, sl
 80096c4:	2000      	movs	r0, #0
 80096c6:	f04f 0c0a 	mov.w	ip, #10
 80096ca:	4621      	mov	r1, r4
 80096cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096d0:	3b30      	subs	r3, #48	; 0x30
 80096d2:	2b09      	cmp	r3, #9
 80096d4:	d94e      	bls.n	8009774 <_vfiprintf_r+0x1c4>
 80096d6:	b1b0      	cbz	r0, 8009706 <_vfiprintf_r+0x156>
 80096d8:	9207      	str	r2, [sp, #28]
 80096da:	e014      	b.n	8009706 <_vfiprintf_r+0x156>
 80096dc:	eba0 0308 	sub.w	r3, r0, r8
 80096e0:	fa09 f303 	lsl.w	r3, r9, r3
 80096e4:	4313      	orrs	r3, r2
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	46a2      	mov	sl, r4
 80096ea:	e7d2      	b.n	8009692 <_vfiprintf_r+0xe2>
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	1d19      	adds	r1, r3, #4
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	9103      	str	r1, [sp, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	bfbb      	ittet	lt
 80096f8:	425b      	neglt	r3, r3
 80096fa:	f042 0202 	orrlt.w	r2, r2, #2
 80096fe:	9307      	strge	r3, [sp, #28]
 8009700:	9307      	strlt	r3, [sp, #28]
 8009702:	bfb8      	it	lt
 8009704:	9204      	strlt	r2, [sp, #16]
 8009706:	7823      	ldrb	r3, [r4, #0]
 8009708:	2b2e      	cmp	r3, #46	; 0x2e
 800970a:	d10c      	bne.n	8009726 <_vfiprintf_r+0x176>
 800970c:	7863      	ldrb	r3, [r4, #1]
 800970e:	2b2a      	cmp	r3, #42	; 0x2a
 8009710:	d135      	bne.n	800977e <_vfiprintf_r+0x1ce>
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	1d1a      	adds	r2, r3, #4
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	9203      	str	r2, [sp, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	bfb8      	it	lt
 800971e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009722:	3402      	adds	r4, #2
 8009724:	9305      	str	r3, [sp, #20]
 8009726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800980c <_vfiprintf_r+0x25c>
 800972a:	7821      	ldrb	r1, [r4, #0]
 800972c:	2203      	movs	r2, #3
 800972e:	4650      	mov	r0, sl
 8009730:	f7f6 fd56 	bl	80001e0 <memchr>
 8009734:	b140      	cbz	r0, 8009748 <_vfiprintf_r+0x198>
 8009736:	2340      	movs	r3, #64	; 0x40
 8009738:	eba0 000a 	sub.w	r0, r0, sl
 800973c:	fa03 f000 	lsl.w	r0, r3, r0
 8009740:	9b04      	ldr	r3, [sp, #16]
 8009742:	4303      	orrs	r3, r0
 8009744:	3401      	adds	r4, #1
 8009746:	9304      	str	r3, [sp, #16]
 8009748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800974c:	482c      	ldr	r0, [pc, #176]	; (8009800 <_vfiprintf_r+0x250>)
 800974e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009752:	2206      	movs	r2, #6
 8009754:	f7f6 fd44 	bl	80001e0 <memchr>
 8009758:	2800      	cmp	r0, #0
 800975a:	d03f      	beq.n	80097dc <_vfiprintf_r+0x22c>
 800975c:	4b29      	ldr	r3, [pc, #164]	; (8009804 <_vfiprintf_r+0x254>)
 800975e:	bb1b      	cbnz	r3, 80097a8 <_vfiprintf_r+0x1f8>
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	3307      	adds	r3, #7
 8009764:	f023 0307 	bic.w	r3, r3, #7
 8009768:	3308      	adds	r3, #8
 800976a:	9303      	str	r3, [sp, #12]
 800976c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800976e:	443b      	add	r3, r7
 8009770:	9309      	str	r3, [sp, #36]	; 0x24
 8009772:	e767      	b.n	8009644 <_vfiprintf_r+0x94>
 8009774:	fb0c 3202 	mla	r2, ip, r2, r3
 8009778:	460c      	mov	r4, r1
 800977a:	2001      	movs	r0, #1
 800977c:	e7a5      	b.n	80096ca <_vfiprintf_r+0x11a>
 800977e:	2300      	movs	r3, #0
 8009780:	3401      	adds	r4, #1
 8009782:	9305      	str	r3, [sp, #20]
 8009784:	4619      	mov	r1, r3
 8009786:	f04f 0c0a 	mov.w	ip, #10
 800978a:	4620      	mov	r0, r4
 800978c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009790:	3a30      	subs	r2, #48	; 0x30
 8009792:	2a09      	cmp	r2, #9
 8009794:	d903      	bls.n	800979e <_vfiprintf_r+0x1ee>
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0c5      	beq.n	8009726 <_vfiprintf_r+0x176>
 800979a:	9105      	str	r1, [sp, #20]
 800979c:	e7c3      	b.n	8009726 <_vfiprintf_r+0x176>
 800979e:	fb0c 2101 	mla	r1, ip, r1, r2
 80097a2:	4604      	mov	r4, r0
 80097a4:	2301      	movs	r3, #1
 80097a6:	e7f0      	b.n	800978a <_vfiprintf_r+0x1da>
 80097a8:	ab03      	add	r3, sp, #12
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	462a      	mov	r2, r5
 80097ae:	4b16      	ldr	r3, [pc, #88]	; (8009808 <_vfiprintf_r+0x258>)
 80097b0:	a904      	add	r1, sp, #16
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7fc f83a 	bl	800582c <_printf_float>
 80097b8:	4607      	mov	r7, r0
 80097ba:	1c78      	adds	r0, r7, #1
 80097bc:	d1d6      	bne.n	800976c <_vfiprintf_r+0x1bc>
 80097be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097c0:	07d9      	lsls	r1, r3, #31
 80097c2:	d405      	bmi.n	80097d0 <_vfiprintf_r+0x220>
 80097c4:	89ab      	ldrh	r3, [r5, #12]
 80097c6:	059a      	lsls	r2, r3, #22
 80097c8:	d402      	bmi.n	80097d0 <_vfiprintf_r+0x220>
 80097ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097cc:	f000 faa1 	bl	8009d12 <__retarget_lock_release_recursive>
 80097d0:	89ab      	ldrh	r3, [r5, #12]
 80097d2:	065b      	lsls	r3, r3, #25
 80097d4:	f53f af12 	bmi.w	80095fc <_vfiprintf_r+0x4c>
 80097d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097da:	e711      	b.n	8009600 <_vfiprintf_r+0x50>
 80097dc:	ab03      	add	r3, sp, #12
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	462a      	mov	r2, r5
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <_vfiprintf_r+0x258>)
 80097e4:	a904      	add	r1, sp, #16
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7fc fac4 	bl	8005d74 <_printf_i>
 80097ec:	e7e4      	b.n	80097b8 <_vfiprintf_r+0x208>
 80097ee:	bf00      	nop
 80097f0:	0800b7a4 	.word	0x0800b7a4
 80097f4:	0800b7c4 	.word	0x0800b7c4
 80097f8:	0800b784 	.word	0x0800b784
 80097fc:	0800b734 	.word	0x0800b734
 8009800:	0800b73e 	.word	0x0800b73e
 8009804:	0800582d 	.word	0x0800582d
 8009808:	0800958d 	.word	0x0800958d
 800980c:	0800b73a 	.word	0x0800b73a

08009810 <__swbuf_r>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	460e      	mov	r6, r1
 8009814:	4614      	mov	r4, r2
 8009816:	4605      	mov	r5, r0
 8009818:	b118      	cbz	r0, 8009822 <__swbuf_r+0x12>
 800981a:	6983      	ldr	r3, [r0, #24]
 800981c:	b90b      	cbnz	r3, 8009822 <__swbuf_r+0x12>
 800981e:	f000 f9d9 	bl	8009bd4 <__sinit>
 8009822:	4b21      	ldr	r3, [pc, #132]	; (80098a8 <__swbuf_r+0x98>)
 8009824:	429c      	cmp	r4, r3
 8009826:	d12b      	bne.n	8009880 <__swbuf_r+0x70>
 8009828:	686c      	ldr	r4, [r5, #4]
 800982a:	69a3      	ldr	r3, [r4, #24]
 800982c:	60a3      	str	r3, [r4, #8]
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	071a      	lsls	r2, r3, #28
 8009832:	d52f      	bpl.n	8009894 <__swbuf_r+0x84>
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	b36b      	cbz	r3, 8009894 <__swbuf_r+0x84>
 8009838:	6923      	ldr	r3, [r4, #16]
 800983a:	6820      	ldr	r0, [r4, #0]
 800983c:	1ac0      	subs	r0, r0, r3
 800983e:	6963      	ldr	r3, [r4, #20]
 8009840:	b2f6      	uxtb	r6, r6
 8009842:	4283      	cmp	r3, r0
 8009844:	4637      	mov	r7, r6
 8009846:	dc04      	bgt.n	8009852 <__swbuf_r+0x42>
 8009848:	4621      	mov	r1, r4
 800984a:	4628      	mov	r0, r5
 800984c:	f000 f92e 	bl	8009aac <_fflush_r>
 8009850:	bb30      	cbnz	r0, 80098a0 <__swbuf_r+0x90>
 8009852:	68a3      	ldr	r3, [r4, #8]
 8009854:	3b01      	subs	r3, #1
 8009856:	60a3      	str	r3, [r4, #8]
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	1c5a      	adds	r2, r3, #1
 800985c:	6022      	str	r2, [r4, #0]
 800985e:	701e      	strb	r6, [r3, #0]
 8009860:	6963      	ldr	r3, [r4, #20]
 8009862:	3001      	adds	r0, #1
 8009864:	4283      	cmp	r3, r0
 8009866:	d004      	beq.n	8009872 <__swbuf_r+0x62>
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	07db      	lsls	r3, r3, #31
 800986c:	d506      	bpl.n	800987c <__swbuf_r+0x6c>
 800986e:	2e0a      	cmp	r6, #10
 8009870:	d104      	bne.n	800987c <__swbuf_r+0x6c>
 8009872:	4621      	mov	r1, r4
 8009874:	4628      	mov	r0, r5
 8009876:	f000 f919 	bl	8009aac <_fflush_r>
 800987a:	b988      	cbnz	r0, 80098a0 <__swbuf_r+0x90>
 800987c:	4638      	mov	r0, r7
 800987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009880:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <__swbuf_r+0x9c>)
 8009882:	429c      	cmp	r4, r3
 8009884:	d101      	bne.n	800988a <__swbuf_r+0x7a>
 8009886:	68ac      	ldr	r4, [r5, #8]
 8009888:	e7cf      	b.n	800982a <__swbuf_r+0x1a>
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <__swbuf_r+0xa0>)
 800988c:	429c      	cmp	r4, r3
 800988e:	bf08      	it	eq
 8009890:	68ec      	ldreq	r4, [r5, #12]
 8009892:	e7ca      	b.n	800982a <__swbuf_r+0x1a>
 8009894:	4621      	mov	r1, r4
 8009896:	4628      	mov	r0, r5
 8009898:	f000 f80c 	bl	80098b4 <__swsetup_r>
 800989c:	2800      	cmp	r0, #0
 800989e:	d0cb      	beq.n	8009838 <__swbuf_r+0x28>
 80098a0:	f04f 37ff 	mov.w	r7, #4294967295
 80098a4:	e7ea      	b.n	800987c <__swbuf_r+0x6c>
 80098a6:	bf00      	nop
 80098a8:	0800b7a4 	.word	0x0800b7a4
 80098ac:	0800b7c4 	.word	0x0800b7c4
 80098b0:	0800b784 	.word	0x0800b784

080098b4 <__swsetup_r>:
 80098b4:	4b32      	ldr	r3, [pc, #200]	; (8009980 <__swsetup_r+0xcc>)
 80098b6:	b570      	push	{r4, r5, r6, lr}
 80098b8:	681d      	ldr	r5, [r3, #0]
 80098ba:	4606      	mov	r6, r0
 80098bc:	460c      	mov	r4, r1
 80098be:	b125      	cbz	r5, 80098ca <__swsetup_r+0x16>
 80098c0:	69ab      	ldr	r3, [r5, #24]
 80098c2:	b913      	cbnz	r3, 80098ca <__swsetup_r+0x16>
 80098c4:	4628      	mov	r0, r5
 80098c6:	f000 f985 	bl	8009bd4 <__sinit>
 80098ca:	4b2e      	ldr	r3, [pc, #184]	; (8009984 <__swsetup_r+0xd0>)
 80098cc:	429c      	cmp	r4, r3
 80098ce:	d10f      	bne.n	80098f0 <__swsetup_r+0x3c>
 80098d0:	686c      	ldr	r4, [r5, #4]
 80098d2:	89a3      	ldrh	r3, [r4, #12]
 80098d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098d8:	0719      	lsls	r1, r3, #28
 80098da:	d42c      	bmi.n	8009936 <__swsetup_r+0x82>
 80098dc:	06dd      	lsls	r5, r3, #27
 80098de:	d411      	bmi.n	8009904 <__swsetup_r+0x50>
 80098e0:	2309      	movs	r3, #9
 80098e2:	6033      	str	r3, [r6, #0]
 80098e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	f04f 30ff 	mov.w	r0, #4294967295
 80098ee:	e03e      	b.n	800996e <__swsetup_r+0xba>
 80098f0:	4b25      	ldr	r3, [pc, #148]	; (8009988 <__swsetup_r+0xd4>)
 80098f2:	429c      	cmp	r4, r3
 80098f4:	d101      	bne.n	80098fa <__swsetup_r+0x46>
 80098f6:	68ac      	ldr	r4, [r5, #8]
 80098f8:	e7eb      	b.n	80098d2 <__swsetup_r+0x1e>
 80098fa:	4b24      	ldr	r3, [pc, #144]	; (800998c <__swsetup_r+0xd8>)
 80098fc:	429c      	cmp	r4, r3
 80098fe:	bf08      	it	eq
 8009900:	68ec      	ldreq	r4, [r5, #12]
 8009902:	e7e6      	b.n	80098d2 <__swsetup_r+0x1e>
 8009904:	0758      	lsls	r0, r3, #29
 8009906:	d512      	bpl.n	800992e <__swsetup_r+0x7a>
 8009908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800990a:	b141      	cbz	r1, 800991e <__swsetup_r+0x6a>
 800990c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009910:	4299      	cmp	r1, r3
 8009912:	d002      	beq.n	800991a <__swsetup_r+0x66>
 8009914:	4630      	mov	r0, r6
 8009916:	f7ff fb25 	bl	8008f64 <_free_r>
 800991a:	2300      	movs	r3, #0
 800991c:	6363      	str	r3, [r4, #52]	; 0x34
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	2300      	movs	r3, #0
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f043 0308 	orr.w	r3, r3, #8
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	b94b      	cbnz	r3, 800994e <__swsetup_r+0x9a>
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009944:	d003      	beq.n	800994e <__swsetup_r+0x9a>
 8009946:	4621      	mov	r1, r4
 8009948:	4630      	mov	r0, r6
 800994a:	f000 fa09 	bl	8009d60 <__smakebuf_r>
 800994e:	89a0      	ldrh	r0, [r4, #12]
 8009950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009954:	f010 0301 	ands.w	r3, r0, #1
 8009958:	d00a      	beq.n	8009970 <__swsetup_r+0xbc>
 800995a:	2300      	movs	r3, #0
 800995c:	60a3      	str	r3, [r4, #8]
 800995e:	6963      	ldr	r3, [r4, #20]
 8009960:	425b      	negs	r3, r3
 8009962:	61a3      	str	r3, [r4, #24]
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	b943      	cbnz	r3, 800997a <__swsetup_r+0xc6>
 8009968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800996c:	d1ba      	bne.n	80098e4 <__swsetup_r+0x30>
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	0781      	lsls	r1, r0, #30
 8009972:	bf58      	it	pl
 8009974:	6963      	ldrpl	r3, [r4, #20]
 8009976:	60a3      	str	r3, [r4, #8]
 8009978:	e7f4      	b.n	8009964 <__swsetup_r+0xb0>
 800997a:	2000      	movs	r0, #0
 800997c:	e7f7      	b.n	800996e <__swsetup_r+0xba>
 800997e:	bf00      	nop
 8009980:	2000000c 	.word	0x2000000c
 8009984:	0800b7a4 	.word	0x0800b7a4
 8009988:	0800b7c4 	.word	0x0800b7c4
 800998c:	0800b784 	.word	0x0800b784

08009990 <abort>:
 8009990:	b508      	push	{r3, lr}
 8009992:	2006      	movs	r0, #6
 8009994:	f000 fa54 	bl	8009e40 <raise>
 8009998:	2001      	movs	r0, #1
 800999a:	f7f8 f919 	bl	8001bd0 <_exit>
	...

080099a0 <__sflush_r>:
 80099a0:	898a      	ldrh	r2, [r1, #12]
 80099a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a6:	4605      	mov	r5, r0
 80099a8:	0710      	lsls	r0, r2, #28
 80099aa:	460c      	mov	r4, r1
 80099ac:	d458      	bmi.n	8009a60 <__sflush_r+0xc0>
 80099ae:	684b      	ldr	r3, [r1, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	dc05      	bgt.n	80099c0 <__sflush_r+0x20>
 80099b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dc02      	bgt.n	80099c0 <__sflush_r+0x20>
 80099ba:	2000      	movs	r0, #0
 80099bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099c2:	2e00      	cmp	r6, #0
 80099c4:	d0f9      	beq.n	80099ba <__sflush_r+0x1a>
 80099c6:	2300      	movs	r3, #0
 80099c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099cc:	682f      	ldr	r7, [r5, #0]
 80099ce:	602b      	str	r3, [r5, #0]
 80099d0:	d032      	beq.n	8009a38 <__sflush_r+0x98>
 80099d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	075a      	lsls	r2, r3, #29
 80099d8:	d505      	bpl.n	80099e6 <__sflush_r+0x46>
 80099da:	6863      	ldr	r3, [r4, #4]
 80099dc:	1ac0      	subs	r0, r0, r3
 80099de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099e0:	b10b      	cbz	r3, 80099e6 <__sflush_r+0x46>
 80099e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099e4:	1ac0      	subs	r0, r0, r3
 80099e6:	2300      	movs	r3, #0
 80099e8:	4602      	mov	r2, r0
 80099ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ec:	6a21      	ldr	r1, [r4, #32]
 80099ee:	4628      	mov	r0, r5
 80099f0:	47b0      	blx	r6
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	d106      	bne.n	8009a06 <__sflush_r+0x66>
 80099f8:	6829      	ldr	r1, [r5, #0]
 80099fa:	291d      	cmp	r1, #29
 80099fc:	d82c      	bhi.n	8009a58 <__sflush_r+0xb8>
 80099fe:	4a2a      	ldr	r2, [pc, #168]	; (8009aa8 <__sflush_r+0x108>)
 8009a00:	40ca      	lsrs	r2, r1
 8009a02:	07d6      	lsls	r6, r2, #31
 8009a04:	d528      	bpl.n	8009a58 <__sflush_r+0xb8>
 8009a06:	2200      	movs	r2, #0
 8009a08:	6062      	str	r2, [r4, #4]
 8009a0a:	04d9      	lsls	r1, r3, #19
 8009a0c:	6922      	ldr	r2, [r4, #16]
 8009a0e:	6022      	str	r2, [r4, #0]
 8009a10:	d504      	bpl.n	8009a1c <__sflush_r+0x7c>
 8009a12:	1c42      	adds	r2, r0, #1
 8009a14:	d101      	bne.n	8009a1a <__sflush_r+0x7a>
 8009a16:	682b      	ldr	r3, [r5, #0]
 8009a18:	b903      	cbnz	r3, 8009a1c <__sflush_r+0x7c>
 8009a1a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a1e:	602f      	str	r7, [r5, #0]
 8009a20:	2900      	cmp	r1, #0
 8009a22:	d0ca      	beq.n	80099ba <__sflush_r+0x1a>
 8009a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a28:	4299      	cmp	r1, r3
 8009a2a:	d002      	beq.n	8009a32 <__sflush_r+0x92>
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	f7ff fa99 	bl	8008f64 <_free_r>
 8009a32:	2000      	movs	r0, #0
 8009a34:	6360      	str	r0, [r4, #52]	; 0x34
 8009a36:	e7c1      	b.n	80099bc <__sflush_r+0x1c>
 8009a38:	6a21      	ldr	r1, [r4, #32]
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b0      	blx	r6
 8009a40:	1c41      	adds	r1, r0, #1
 8009a42:	d1c7      	bne.n	80099d4 <__sflush_r+0x34>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0c4      	beq.n	80099d4 <__sflush_r+0x34>
 8009a4a:	2b1d      	cmp	r3, #29
 8009a4c:	d001      	beq.n	8009a52 <__sflush_r+0xb2>
 8009a4e:	2b16      	cmp	r3, #22
 8009a50:	d101      	bne.n	8009a56 <__sflush_r+0xb6>
 8009a52:	602f      	str	r7, [r5, #0]
 8009a54:	e7b1      	b.n	80099ba <__sflush_r+0x1a>
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a5c:	81a3      	strh	r3, [r4, #12]
 8009a5e:	e7ad      	b.n	80099bc <__sflush_r+0x1c>
 8009a60:	690f      	ldr	r7, [r1, #16]
 8009a62:	2f00      	cmp	r7, #0
 8009a64:	d0a9      	beq.n	80099ba <__sflush_r+0x1a>
 8009a66:	0793      	lsls	r3, r2, #30
 8009a68:	680e      	ldr	r6, [r1, #0]
 8009a6a:	bf08      	it	eq
 8009a6c:	694b      	ldreq	r3, [r1, #20]
 8009a6e:	600f      	str	r7, [r1, #0]
 8009a70:	bf18      	it	ne
 8009a72:	2300      	movne	r3, #0
 8009a74:	eba6 0807 	sub.w	r8, r6, r7
 8009a78:	608b      	str	r3, [r1, #8]
 8009a7a:	f1b8 0f00 	cmp.w	r8, #0
 8009a7e:	dd9c      	ble.n	80099ba <__sflush_r+0x1a>
 8009a80:	6a21      	ldr	r1, [r4, #32]
 8009a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a84:	4643      	mov	r3, r8
 8009a86:	463a      	mov	r2, r7
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b0      	blx	r6
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	dc06      	bgt.n	8009a9e <__sflush_r+0xfe>
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e78e      	b.n	80099bc <__sflush_r+0x1c>
 8009a9e:	4407      	add	r7, r0
 8009aa0:	eba8 0800 	sub.w	r8, r8, r0
 8009aa4:	e7e9      	b.n	8009a7a <__sflush_r+0xda>
 8009aa6:	bf00      	nop
 8009aa8:	20400001 	.word	0x20400001

08009aac <_fflush_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	690b      	ldr	r3, [r1, #16]
 8009ab0:	4605      	mov	r5, r0
 8009ab2:	460c      	mov	r4, r1
 8009ab4:	b913      	cbnz	r3, 8009abc <_fflush_r+0x10>
 8009ab6:	2500      	movs	r5, #0
 8009ab8:	4628      	mov	r0, r5
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	b118      	cbz	r0, 8009ac6 <_fflush_r+0x1a>
 8009abe:	6983      	ldr	r3, [r0, #24]
 8009ac0:	b90b      	cbnz	r3, 8009ac6 <_fflush_r+0x1a>
 8009ac2:	f000 f887 	bl	8009bd4 <__sinit>
 8009ac6:	4b14      	ldr	r3, [pc, #80]	; (8009b18 <_fflush_r+0x6c>)
 8009ac8:	429c      	cmp	r4, r3
 8009aca:	d11b      	bne.n	8009b04 <_fflush_r+0x58>
 8009acc:	686c      	ldr	r4, [r5, #4]
 8009ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0ef      	beq.n	8009ab6 <_fflush_r+0xa>
 8009ad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ad8:	07d0      	lsls	r0, r2, #31
 8009ada:	d404      	bmi.n	8009ae6 <_fflush_r+0x3a>
 8009adc:	0599      	lsls	r1, r3, #22
 8009ade:	d402      	bmi.n	8009ae6 <_fflush_r+0x3a>
 8009ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ae2:	f000 f915 	bl	8009d10 <__retarget_lock_acquire_recursive>
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	4621      	mov	r1, r4
 8009aea:	f7ff ff59 	bl	80099a0 <__sflush_r>
 8009aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009af0:	07da      	lsls	r2, r3, #31
 8009af2:	4605      	mov	r5, r0
 8009af4:	d4e0      	bmi.n	8009ab8 <_fflush_r+0xc>
 8009af6:	89a3      	ldrh	r3, [r4, #12]
 8009af8:	059b      	lsls	r3, r3, #22
 8009afa:	d4dd      	bmi.n	8009ab8 <_fflush_r+0xc>
 8009afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009afe:	f000 f908 	bl	8009d12 <__retarget_lock_release_recursive>
 8009b02:	e7d9      	b.n	8009ab8 <_fflush_r+0xc>
 8009b04:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <_fflush_r+0x70>)
 8009b06:	429c      	cmp	r4, r3
 8009b08:	d101      	bne.n	8009b0e <_fflush_r+0x62>
 8009b0a:	68ac      	ldr	r4, [r5, #8]
 8009b0c:	e7df      	b.n	8009ace <_fflush_r+0x22>
 8009b0e:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <_fflush_r+0x74>)
 8009b10:	429c      	cmp	r4, r3
 8009b12:	bf08      	it	eq
 8009b14:	68ec      	ldreq	r4, [r5, #12]
 8009b16:	e7da      	b.n	8009ace <_fflush_r+0x22>
 8009b18:	0800b7a4 	.word	0x0800b7a4
 8009b1c:	0800b7c4 	.word	0x0800b7c4
 8009b20:	0800b784 	.word	0x0800b784

08009b24 <std>:
 8009b24:	2300      	movs	r3, #0
 8009b26:	b510      	push	{r4, lr}
 8009b28:	4604      	mov	r4, r0
 8009b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b32:	6083      	str	r3, [r0, #8]
 8009b34:	8181      	strh	r1, [r0, #12]
 8009b36:	6643      	str	r3, [r0, #100]	; 0x64
 8009b38:	81c2      	strh	r2, [r0, #14]
 8009b3a:	6183      	str	r3, [r0, #24]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	2208      	movs	r2, #8
 8009b40:	305c      	adds	r0, #92	; 0x5c
 8009b42:	f7fb fdcb 	bl	80056dc <memset>
 8009b46:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <std+0x38>)
 8009b48:	6263      	str	r3, [r4, #36]	; 0x24
 8009b4a:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <std+0x3c>)
 8009b4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b4e:	4b05      	ldr	r3, [pc, #20]	; (8009b64 <std+0x40>)
 8009b50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <std+0x44>)
 8009b54:	6224      	str	r4, [r4, #32]
 8009b56:	6323      	str	r3, [r4, #48]	; 0x30
 8009b58:	bd10      	pop	{r4, pc}
 8009b5a:	bf00      	nop
 8009b5c:	08009e79 	.word	0x08009e79
 8009b60:	08009e9b 	.word	0x08009e9b
 8009b64:	08009ed3 	.word	0x08009ed3
 8009b68:	08009ef7 	.word	0x08009ef7

08009b6c <_cleanup_r>:
 8009b6c:	4901      	ldr	r1, [pc, #4]	; (8009b74 <_cleanup_r+0x8>)
 8009b6e:	f000 b8af 	b.w	8009cd0 <_fwalk_reent>
 8009b72:	bf00      	nop
 8009b74:	08009aad 	.word	0x08009aad

08009b78 <__sfmoreglue>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	2268      	movs	r2, #104	; 0x68
 8009b7c:	1e4d      	subs	r5, r1, #1
 8009b7e:	4355      	muls	r5, r2
 8009b80:	460e      	mov	r6, r1
 8009b82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b86:	f7ff fa59 	bl	800903c <_malloc_r>
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	b140      	cbz	r0, 8009ba0 <__sfmoreglue+0x28>
 8009b8e:	2100      	movs	r1, #0
 8009b90:	e9c0 1600 	strd	r1, r6, [r0]
 8009b94:	300c      	adds	r0, #12
 8009b96:	60a0      	str	r0, [r4, #8]
 8009b98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b9c:	f7fb fd9e 	bl	80056dc <memset>
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}

08009ba4 <__sfp_lock_acquire>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__sfp_lock_acquire+0x8>)
 8009ba6:	f000 b8b3 	b.w	8009d10 <__retarget_lock_acquire_recursive>
 8009baa:	bf00      	nop
 8009bac:	2000037d 	.word	0x2000037d

08009bb0 <__sfp_lock_release>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__sfp_lock_release+0x8>)
 8009bb2:	f000 b8ae 	b.w	8009d12 <__retarget_lock_release_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	2000037d 	.word	0x2000037d

08009bbc <__sinit_lock_acquire>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <__sinit_lock_acquire+0x8>)
 8009bbe:	f000 b8a7 	b.w	8009d10 <__retarget_lock_acquire_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	2000037e 	.word	0x2000037e

08009bc8 <__sinit_lock_release>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__sinit_lock_release+0x8>)
 8009bca:	f000 b8a2 	b.w	8009d12 <__retarget_lock_release_recursive>
 8009bce:	bf00      	nop
 8009bd0:	2000037e 	.word	0x2000037e

08009bd4 <__sinit>:
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	f7ff fff0 	bl	8009bbc <__sinit_lock_acquire>
 8009bdc:	69a3      	ldr	r3, [r4, #24]
 8009bde:	b11b      	cbz	r3, 8009be8 <__sinit+0x14>
 8009be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be4:	f7ff bff0 	b.w	8009bc8 <__sinit_lock_release>
 8009be8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bec:	6523      	str	r3, [r4, #80]	; 0x50
 8009bee:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <__sinit+0x68>)
 8009bf0:	4a13      	ldr	r2, [pc, #76]	; (8009c40 <__sinit+0x6c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bf6:	42a3      	cmp	r3, r4
 8009bf8:	bf04      	itt	eq
 8009bfa:	2301      	moveq	r3, #1
 8009bfc:	61a3      	streq	r3, [r4, #24]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 f820 	bl	8009c44 <__sfp>
 8009c04:	6060      	str	r0, [r4, #4]
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 f81c 	bl	8009c44 <__sfp>
 8009c0c:	60a0      	str	r0, [r4, #8]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 f818 	bl	8009c44 <__sfp>
 8009c14:	2200      	movs	r2, #0
 8009c16:	60e0      	str	r0, [r4, #12]
 8009c18:	2104      	movs	r1, #4
 8009c1a:	6860      	ldr	r0, [r4, #4]
 8009c1c:	f7ff ff82 	bl	8009b24 <std>
 8009c20:	68a0      	ldr	r0, [r4, #8]
 8009c22:	2201      	movs	r2, #1
 8009c24:	2109      	movs	r1, #9
 8009c26:	f7ff ff7d 	bl	8009b24 <std>
 8009c2a:	68e0      	ldr	r0, [r4, #12]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	2112      	movs	r1, #18
 8009c30:	f7ff ff78 	bl	8009b24 <std>
 8009c34:	2301      	movs	r3, #1
 8009c36:	61a3      	str	r3, [r4, #24]
 8009c38:	e7d2      	b.n	8009be0 <__sinit+0xc>
 8009c3a:	bf00      	nop
 8009c3c:	0800b340 	.word	0x0800b340
 8009c40:	08009b6d 	.word	0x08009b6d

08009c44 <__sfp>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	4607      	mov	r7, r0
 8009c48:	f7ff ffac 	bl	8009ba4 <__sfp_lock_acquire>
 8009c4c:	4b1e      	ldr	r3, [pc, #120]	; (8009cc8 <__sfp+0x84>)
 8009c4e:	681e      	ldr	r6, [r3, #0]
 8009c50:	69b3      	ldr	r3, [r6, #24]
 8009c52:	b913      	cbnz	r3, 8009c5a <__sfp+0x16>
 8009c54:	4630      	mov	r0, r6
 8009c56:	f7ff ffbd 	bl	8009bd4 <__sinit>
 8009c5a:	3648      	adds	r6, #72	; 0x48
 8009c5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	d503      	bpl.n	8009c6c <__sfp+0x28>
 8009c64:	6833      	ldr	r3, [r6, #0]
 8009c66:	b30b      	cbz	r3, 8009cac <__sfp+0x68>
 8009c68:	6836      	ldr	r6, [r6, #0]
 8009c6a:	e7f7      	b.n	8009c5c <__sfp+0x18>
 8009c6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c70:	b9d5      	cbnz	r5, 8009ca8 <__sfp+0x64>
 8009c72:	4b16      	ldr	r3, [pc, #88]	; (8009ccc <__sfp+0x88>)
 8009c74:	60e3      	str	r3, [r4, #12]
 8009c76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c7a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c7c:	f000 f847 	bl	8009d0e <__retarget_lock_init_recursive>
 8009c80:	f7ff ff96 	bl	8009bb0 <__sfp_lock_release>
 8009c84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c8c:	6025      	str	r5, [r4, #0]
 8009c8e:	61a5      	str	r5, [r4, #24]
 8009c90:	2208      	movs	r2, #8
 8009c92:	4629      	mov	r1, r5
 8009c94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c98:	f7fb fd20 	bl	80056dc <memset>
 8009c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca8:	3468      	adds	r4, #104	; 0x68
 8009caa:	e7d9      	b.n	8009c60 <__sfp+0x1c>
 8009cac:	2104      	movs	r1, #4
 8009cae:	4638      	mov	r0, r7
 8009cb0:	f7ff ff62 	bl	8009b78 <__sfmoreglue>
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	6030      	str	r0, [r6, #0]
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d1d5      	bne.n	8009c68 <__sfp+0x24>
 8009cbc:	f7ff ff78 	bl	8009bb0 <__sfp_lock_release>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	e7ee      	b.n	8009ca4 <__sfp+0x60>
 8009cc6:	bf00      	nop
 8009cc8:	0800b340 	.word	0x0800b340
 8009ccc:	ffff0001 	.word	0xffff0001

08009cd0 <_fwalk_reent>:
 8009cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	4688      	mov	r8, r1
 8009cd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cdc:	2700      	movs	r7, #0
 8009cde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ce2:	f1b9 0901 	subs.w	r9, r9, #1
 8009ce6:	d505      	bpl.n	8009cf4 <_fwalk_reent+0x24>
 8009ce8:	6824      	ldr	r4, [r4, #0]
 8009cea:	2c00      	cmp	r4, #0
 8009cec:	d1f7      	bne.n	8009cde <_fwalk_reent+0xe>
 8009cee:	4638      	mov	r0, r7
 8009cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf4:	89ab      	ldrh	r3, [r5, #12]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d907      	bls.n	8009d0a <_fwalk_reent+0x3a>
 8009cfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	d003      	beq.n	8009d0a <_fwalk_reent+0x3a>
 8009d02:	4629      	mov	r1, r5
 8009d04:	4630      	mov	r0, r6
 8009d06:	47c0      	blx	r8
 8009d08:	4307      	orrs	r7, r0
 8009d0a:	3568      	adds	r5, #104	; 0x68
 8009d0c:	e7e9      	b.n	8009ce2 <_fwalk_reent+0x12>

08009d0e <__retarget_lock_init_recursive>:
 8009d0e:	4770      	bx	lr

08009d10 <__retarget_lock_acquire_recursive>:
 8009d10:	4770      	bx	lr

08009d12 <__retarget_lock_release_recursive>:
 8009d12:	4770      	bx	lr

08009d14 <__swhatbuf_r>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	460e      	mov	r6, r1
 8009d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	b096      	sub	sp, #88	; 0x58
 8009d20:	4614      	mov	r4, r2
 8009d22:	461d      	mov	r5, r3
 8009d24:	da08      	bge.n	8009d38 <__swhatbuf_r+0x24>
 8009d26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	602a      	str	r2, [r5, #0]
 8009d2e:	061a      	lsls	r2, r3, #24
 8009d30:	d410      	bmi.n	8009d54 <__swhatbuf_r+0x40>
 8009d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d36:	e00e      	b.n	8009d56 <__swhatbuf_r+0x42>
 8009d38:	466a      	mov	r2, sp
 8009d3a:	f000 f903 	bl	8009f44 <_fstat_r>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	dbf1      	blt.n	8009d26 <__swhatbuf_r+0x12>
 8009d42:	9a01      	ldr	r2, [sp, #4]
 8009d44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d4c:	425a      	negs	r2, r3
 8009d4e:	415a      	adcs	r2, r3
 8009d50:	602a      	str	r2, [r5, #0]
 8009d52:	e7ee      	b.n	8009d32 <__swhatbuf_r+0x1e>
 8009d54:	2340      	movs	r3, #64	; 0x40
 8009d56:	2000      	movs	r0, #0
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	b016      	add	sp, #88	; 0x58
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d60 <__smakebuf_r>:
 8009d60:	898b      	ldrh	r3, [r1, #12]
 8009d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d64:	079d      	lsls	r5, r3, #30
 8009d66:	4606      	mov	r6, r0
 8009d68:	460c      	mov	r4, r1
 8009d6a:	d507      	bpl.n	8009d7c <__smakebuf_r+0x1c>
 8009d6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	6123      	str	r3, [r4, #16]
 8009d74:	2301      	movs	r3, #1
 8009d76:	6163      	str	r3, [r4, #20]
 8009d78:	b002      	add	sp, #8
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	ab01      	add	r3, sp, #4
 8009d7e:	466a      	mov	r2, sp
 8009d80:	f7ff ffc8 	bl	8009d14 <__swhatbuf_r>
 8009d84:	9900      	ldr	r1, [sp, #0]
 8009d86:	4605      	mov	r5, r0
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7ff f957 	bl	800903c <_malloc_r>
 8009d8e:	b948      	cbnz	r0, 8009da4 <__smakebuf_r+0x44>
 8009d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d94:	059a      	lsls	r2, r3, #22
 8009d96:	d4ef      	bmi.n	8009d78 <__smakebuf_r+0x18>
 8009d98:	f023 0303 	bic.w	r3, r3, #3
 8009d9c:	f043 0302 	orr.w	r3, r3, #2
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	e7e3      	b.n	8009d6c <__smakebuf_r+0xc>
 8009da4:	4b0d      	ldr	r3, [pc, #52]	; (8009ddc <__smakebuf_r+0x7c>)
 8009da6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	6020      	str	r0, [r4, #0]
 8009dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	9b00      	ldr	r3, [sp, #0]
 8009db4:	6163      	str	r3, [r4, #20]
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	6120      	str	r0, [r4, #16]
 8009dba:	b15b      	cbz	r3, 8009dd4 <__smakebuf_r+0x74>
 8009dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f000 f8d1 	bl	8009f68 <_isatty_r>
 8009dc6:	b128      	cbz	r0, 8009dd4 <__smakebuf_r+0x74>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	f023 0303 	bic.w	r3, r3, #3
 8009dce:	f043 0301 	orr.w	r3, r3, #1
 8009dd2:	81a3      	strh	r3, [r4, #12]
 8009dd4:	89a0      	ldrh	r0, [r4, #12]
 8009dd6:	4305      	orrs	r5, r0
 8009dd8:	81a5      	strh	r5, [r4, #12]
 8009dda:	e7cd      	b.n	8009d78 <__smakebuf_r+0x18>
 8009ddc:	08009b6d 	.word	0x08009b6d

08009de0 <_malloc_usable_size_r>:
 8009de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009de4:	1f18      	subs	r0, r3, #4
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	bfbc      	itt	lt
 8009dea:	580b      	ldrlt	r3, [r1, r0]
 8009dec:	18c0      	addlt	r0, r0, r3
 8009dee:	4770      	bx	lr

08009df0 <_raise_r>:
 8009df0:	291f      	cmp	r1, #31
 8009df2:	b538      	push	{r3, r4, r5, lr}
 8009df4:	4604      	mov	r4, r0
 8009df6:	460d      	mov	r5, r1
 8009df8:	d904      	bls.n	8009e04 <_raise_r+0x14>
 8009dfa:	2316      	movs	r3, #22
 8009dfc:	6003      	str	r3, [r0, #0]
 8009dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009e02:	bd38      	pop	{r3, r4, r5, pc}
 8009e04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e06:	b112      	cbz	r2, 8009e0e <_raise_r+0x1e>
 8009e08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e0c:	b94b      	cbnz	r3, 8009e22 <_raise_r+0x32>
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 f830 	bl	8009e74 <_getpid_r>
 8009e14:	462a      	mov	r2, r5
 8009e16:	4601      	mov	r1, r0
 8009e18:	4620      	mov	r0, r4
 8009e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e1e:	f000 b817 	b.w	8009e50 <_kill_r>
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d00a      	beq.n	8009e3c <_raise_r+0x4c>
 8009e26:	1c59      	adds	r1, r3, #1
 8009e28:	d103      	bne.n	8009e32 <_raise_r+0x42>
 8009e2a:	2316      	movs	r3, #22
 8009e2c:	6003      	str	r3, [r0, #0]
 8009e2e:	2001      	movs	r0, #1
 8009e30:	e7e7      	b.n	8009e02 <_raise_r+0x12>
 8009e32:	2400      	movs	r4, #0
 8009e34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e38:	4628      	mov	r0, r5
 8009e3a:	4798      	blx	r3
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	e7e0      	b.n	8009e02 <_raise_r+0x12>

08009e40 <raise>:
 8009e40:	4b02      	ldr	r3, [pc, #8]	; (8009e4c <raise+0xc>)
 8009e42:	4601      	mov	r1, r0
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	f7ff bfd3 	b.w	8009df0 <_raise_r>
 8009e4a:	bf00      	nop
 8009e4c:	2000000c 	.word	0x2000000c

08009e50 <_kill_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d07      	ldr	r5, [pc, #28]	; (8009e70 <_kill_r+0x20>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	4611      	mov	r1, r2
 8009e5c:	602b      	str	r3, [r5, #0]
 8009e5e:	f7f7 fea7 	bl	8001bb0 <_kill>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	d102      	bne.n	8009e6c <_kill_r+0x1c>
 8009e66:	682b      	ldr	r3, [r5, #0]
 8009e68:	b103      	cbz	r3, 8009e6c <_kill_r+0x1c>
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	bd38      	pop	{r3, r4, r5, pc}
 8009e6e:	bf00      	nop
 8009e70:	20000378 	.word	0x20000378

08009e74 <_getpid_r>:
 8009e74:	f7f7 be94 	b.w	8001ba0 <_getpid>

08009e78 <__sread>:
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e80:	f000 f894 	bl	8009fac <_read_r>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	bfab      	itete	ge
 8009e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e8c:	181b      	addge	r3, r3, r0
 8009e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e92:	bfac      	ite	ge
 8009e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e96:	81a3      	strhlt	r3, [r4, #12]
 8009e98:	bd10      	pop	{r4, pc}

08009e9a <__swrite>:
 8009e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9e:	461f      	mov	r7, r3
 8009ea0:	898b      	ldrh	r3, [r1, #12]
 8009ea2:	05db      	lsls	r3, r3, #23
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	4616      	mov	r6, r2
 8009eaa:	d505      	bpl.n	8009eb8 <__swrite+0x1e>
 8009eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f000 f868 	bl	8009f88 <_lseek_r>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ebe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	4632      	mov	r2, r6
 8009ec6:	463b      	mov	r3, r7
 8009ec8:	4628      	mov	r0, r5
 8009eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ece:	f000 b817 	b.w	8009f00 <_write_r>

08009ed2 <__sseek>:
 8009ed2:	b510      	push	{r4, lr}
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eda:	f000 f855 	bl	8009f88 <_lseek_r>
 8009ede:	1c43      	adds	r3, r0, #1
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	bf15      	itete	ne
 8009ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eee:	81a3      	strheq	r3, [r4, #12]
 8009ef0:	bf18      	it	ne
 8009ef2:	81a3      	strhne	r3, [r4, #12]
 8009ef4:	bd10      	pop	{r4, pc}

08009ef6 <__sclose>:
 8009ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efa:	f000 b813 	b.w	8009f24 <_close_r>
	...

08009f00 <_write_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d07      	ldr	r5, [pc, #28]	; (8009f20 <_write_r+0x20>)
 8009f04:	4604      	mov	r4, r0
 8009f06:	4608      	mov	r0, r1
 8009f08:	4611      	mov	r1, r2
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	602a      	str	r2, [r5, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f7f7 fe85 	bl	8001c1e <_write>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d102      	bne.n	8009f1e <_write_r+0x1e>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	b103      	cbz	r3, 8009f1e <_write_r+0x1e>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	20000378 	.word	0x20000378

08009f24 <_close_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d06      	ldr	r5, [pc, #24]	; (8009f40 <_close_r+0x1c>)
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	f7f7 fe91 	bl	8001c56 <_close>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d102      	bne.n	8009f3e <_close_r+0x1a>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	b103      	cbz	r3, 8009f3e <_close_r+0x1a>
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	20000378 	.word	0x20000378

08009f44 <_fstat_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	4d07      	ldr	r5, [pc, #28]	; (8009f64 <_fstat_r+0x20>)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4608      	mov	r0, r1
 8009f4e:	4611      	mov	r1, r2
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	f7f7 fe8c 	bl	8001c6e <_fstat>
 8009f56:	1c43      	adds	r3, r0, #1
 8009f58:	d102      	bne.n	8009f60 <_fstat_r+0x1c>
 8009f5a:	682b      	ldr	r3, [r5, #0]
 8009f5c:	b103      	cbz	r3, 8009f60 <_fstat_r+0x1c>
 8009f5e:	6023      	str	r3, [r4, #0]
 8009f60:	bd38      	pop	{r3, r4, r5, pc}
 8009f62:	bf00      	nop
 8009f64:	20000378 	.word	0x20000378

08009f68 <_isatty_r>:
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4d06      	ldr	r5, [pc, #24]	; (8009f84 <_isatty_r+0x1c>)
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	4604      	mov	r4, r0
 8009f70:	4608      	mov	r0, r1
 8009f72:	602b      	str	r3, [r5, #0]
 8009f74:	f7f7 fe8b 	bl	8001c8e <_isatty>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d102      	bne.n	8009f82 <_isatty_r+0x1a>
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	b103      	cbz	r3, 8009f82 <_isatty_r+0x1a>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	20000378 	.word	0x20000378

08009f88 <_lseek_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	; (8009fa8 <_lseek_r+0x20>)
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4611      	mov	r1, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f7f7 fe84 	bl	8001ca4 <_lseek>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_lseek_r+0x1e>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_lseek_r+0x1e>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	20000378 	.word	0x20000378

08009fac <_read_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4d07      	ldr	r5, [pc, #28]	; (8009fcc <_read_r+0x20>)
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	602a      	str	r2, [r5, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f7f7 fe12 	bl	8001be4 <_read>
 8009fc0:	1c43      	adds	r3, r0, #1
 8009fc2:	d102      	bne.n	8009fca <_read_r+0x1e>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	b103      	cbz	r3, 8009fca <_read_r+0x1e>
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	bd38      	pop	{r3, r4, r5, pc}
 8009fcc:	20000378 	.word	0x20000378

08009fd0 <atan>:
 8009fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	ec55 4b10 	vmov	r4, r5, d0
 8009fd8:	4bc3      	ldr	r3, [pc, #780]	; (800a2e8 <atan+0x318>)
 8009fda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009fde:	429e      	cmp	r6, r3
 8009fe0:	46ab      	mov	fp, r5
 8009fe2:	dd18      	ble.n	800a016 <atan+0x46>
 8009fe4:	4bc1      	ldr	r3, [pc, #772]	; (800a2ec <atan+0x31c>)
 8009fe6:	429e      	cmp	r6, r3
 8009fe8:	dc01      	bgt.n	8009fee <atan+0x1e>
 8009fea:	d109      	bne.n	800a000 <atan+0x30>
 8009fec:	b144      	cbz	r4, 800a000 <atan+0x30>
 8009fee:	4622      	mov	r2, r4
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	f7f6 f949 	bl	800028c <__adddf3>
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	460d      	mov	r5, r1
 8009ffe:	e006      	b.n	800a00e <atan+0x3e>
 800a000:	f1bb 0f00 	cmp.w	fp, #0
 800a004:	f300 8131 	bgt.w	800a26a <atan+0x29a>
 800a008:	a59b      	add	r5, pc, #620	; (adr r5, 800a278 <atan+0x2a8>)
 800a00a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a00e:	ec45 4b10 	vmov	d0, r4, r5
 800a012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a016:	4bb6      	ldr	r3, [pc, #728]	; (800a2f0 <atan+0x320>)
 800a018:	429e      	cmp	r6, r3
 800a01a:	dc14      	bgt.n	800a046 <atan+0x76>
 800a01c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a020:	429e      	cmp	r6, r3
 800a022:	dc0d      	bgt.n	800a040 <atan+0x70>
 800a024:	a396      	add	r3, pc, #600	; (adr r3, 800a280 <atan+0x2b0>)
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	ee10 0a10 	vmov	r0, s0
 800a02e:	4629      	mov	r1, r5
 800a030:	f7f6 f92c 	bl	800028c <__adddf3>
 800a034:	4baf      	ldr	r3, [pc, #700]	; (800a2f4 <atan+0x324>)
 800a036:	2200      	movs	r2, #0
 800a038:	f7f6 fd6e 	bl	8000b18 <__aeabi_dcmpgt>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d1e6      	bne.n	800a00e <atan+0x3e>
 800a040:	f04f 3aff 	mov.w	sl, #4294967295
 800a044:	e02b      	b.n	800a09e <atan+0xce>
 800a046:	f000 f963 	bl	800a310 <fabs>
 800a04a:	4bab      	ldr	r3, [pc, #684]	; (800a2f8 <atan+0x328>)
 800a04c:	429e      	cmp	r6, r3
 800a04e:	ec55 4b10 	vmov	r4, r5, d0
 800a052:	f300 80bf 	bgt.w	800a1d4 <atan+0x204>
 800a056:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a05a:	429e      	cmp	r6, r3
 800a05c:	f300 80a0 	bgt.w	800a1a0 <atan+0x1d0>
 800a060:	ee10 2a10 	vmov	r2, s0
 800a064:	ee10 0a10 	vmov	r0, s0
 800a068:	462b      	mov	r3, r5
 800a06a:	4629      	mov	r1, r5
 800a06c:	f7f6 f90e 	bl	800028c <__adddf3>
 800a070:	4ba0      	ldr	r3, [pc, #640]	; (800a2f4 <atan+0x324>)
 800a072:	2200      	movs	r2, #0
 800a074:	f7f6 f908 	bl	8000288 <__aeabi_dsub>
 800a078:	2200      	movs	r2, #0
 800a07a:	4606      	mov	r6, r0
 800a07c:	460f      	mov	r7, r1
 800a07e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a082:	4620      	mov	r0, r4
 800a084:	4629      	mov	r1, r5
 800a086:	f7f6 f901 	bl	800028c <__adddf3>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4630      	mov	r0, r6
 800a090:	4639      	mov	r1, r7
 800a092:	f7f6 fbdb 	bl	800084c <__aeabi_ddiv>
 800a096:	f04f 0a00 	mov.w	sl, #0
 800a09a:	4604      	mov	r4, r0
 800a09c:	460d      	mov	r5, r1
 800a09e:	4622      	mov	r2, r4
 800a0a0:	462b      	mov	r3, r5
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	f7f6 faa7 	bl	80005f8 <__aeabi_dmul>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4680      	mov	r8, r0
 800a0b0:	4689      	mov	r9, r1
 800a0b2:	f7f6 faa1 	bl	80005f8 <__aeabi_dmul>
 800a0b6:	a374      	add	r3, pc, #464	; (adr r3, 800a288 <atan+0x2b8>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	4606      	mov	r6, r0
 800a0be:	460f      	mov	r7, r1
 800a0c0:	f7f6 fa9a 	bl	80005f8 <__aeabi_dmul>
 800a0c4:	a372      	add	r3, pc, #456	; (adr r3, 800a290 <atan+0x2c0>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f7f6 f8df 	bl	800028c <__adddf3>
 800a0ce:	4632      	mov	r2, r6
 800a0d0:	463b      	mov	r3, r7
 800a0d2:	f7f6 fa91 	bl	80005f8 <__aeabi_dmul>
 800a0d6:	a370      	add	r3, pc, #448	; (adr r3, 800a298 <atan+0x2c8>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f7f6 f8d6 	bl	800028c <__adddf3>
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	463b      	mov	r3, r7
 800a0e4:	f7f6 fa88 	bl	80005f8 <__aeabi_dmul>
 800a0e8:	a36d      	add	r3, pc, #436	; (adr r3, 800a2a0 <atan+0x2d0>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 f8cd 	bl	800028c <__adddf3>
 800a0f2:	4632      	mov	r2, r6
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	f7f6 fa7f 	bl	80005f8 <__aeabi_dmul>
 800a0fa:	a36b      	add	r3, pc, #428	; (adr r3, 800a2a8 <atan+0x2d8>)
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	f7f6 f8c4 	bl	800028c <__adddf3>
 800a104:	4632      	mov	r2, r6
 800a106:	463b      	mov	r3, r7
 800a108:	f7f6 fa76 	bl	80005f8 <__aeabi_dmul>
 800a10c:	a368      	add	r3, pc, #416	; (adr r3, 800a2b0 <atan+0x2e0>)
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	f7f6 f8bb 	bl	800028c <__adddf3>
 800a116:	4642      	mov	r2, r8
 800a118:	464b      	mov	r3, r9
 800a11a:	f7f6 fa6d 	bl	80005f8 <__aeabi_dmul>
 800a11e:	a366      	add	r3, pc, #408	; (adr r3, 800a2b8 <atan+0x2e8>)
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	4680      	mov	r8, r0
 800a126:	4689      	mov	r9, r1
 800a128:	4630      	mov	r0, r6
 800a12a:	4639      	mov	r1, r7
 800a12c:	f7f6 fa64 	bl	80005f8 <__aeabi_dmul>
 800a130:	a363      	add	r3, pc, #396	; (adr r3, 800a2c0 <atan+0x2f0>)
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f7f6 f8a7 	bl	8000288 <__aeabi_dsub>
 800a13a:	4632      	mov	r2, r6
 800a13c:	463b      	mov	r3, r7
 800a13e:	f7f6 fa5b 	bl	80005f8 <__aeabi_dmul>
 800a142:	a361      	add	r3, pc, #388	; (adr r3, 800a2c8 <atan+0x2f8>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	f7f6 f89e 	bl	8000288 <__aeabi_dsub>
 800a14c:	4632      	mov	r2, r6
 800a14e:	463b      	mov	r3, r7
 800a150:	f7f6 fa52 	bl	80005f8 <__aeabi_dmul>
 800a154:	a35e      	add	r3, pc, #376	; (adr r3, 800a2d0 <atan+0x300>)
 800a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15a:	f7f6 f895 	bl	8000288 <__aeabi_dsub>
 800a15e:	4632      	mov	r2, r6
 800a160:	463b      	mov	r3, r7
 800a162:	f7f6 fa49 	bl	80005f8 <__aeabi_dmul>
 800a166:	a35c      	add	r3, pc, #368	; (adr r3, 800a2d8 <atan+0x308>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	f7f6 f88c 	bl	8000288 <__aeabi_dsub>
 800a170:	4632      	mov	r2, r6
 800a172:	463b      	mov	r3, r7
 800a174:	f7f6 fa40 	bl	80005f8 <__aeabi_dmul>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4640      	mov	r0, r8
 800a17e:	4649      	mov	r1, r9
 800a180:	f7f6 f884 	bl	800028c <__adddf3>
 800a184:	4622      	mov	r2, r4
 800a186:	462b      	mov	r3, r5
 800a188:	f7f6 fa36 	bl	80005f8 <__aeabi_dmul>
 800a18c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	d14b      	bne.n	800a22e <atan+0x25e>
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 f875 	bl	8000288 <__aeabi_dsub>
 800a19e:	e72c      	b.n	8009ffa <atan+0x2a>
 800a1a0:	ee10 0a10 	vmov	r0, s0
 800a1a4:	4b53      	ldr	r3, [pc, #332]	; (800a2f4 <atan+0x324>)
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f7f6 f86d 	bl	8000288 <__aeabi_dsub>
 800a1ae:	4b51      	ldr	r3, [pc, #324]	; (800a2f4 <atan+0x324>)
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	460f      	mov	r7, r1
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7f6 f867 	bl	800028c <__adddf3>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	f7f6 fb41 	bl	800084c <__aeabi_ddiv>
 800a1ca:	f04f 0a01 	mov.w	sl, #1
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	460d      	mov	r5, r1
 800a1d2:	e764      	b.n	800a09e <atan+0xce>
 800a1d4:	4b49      	ldr	r3, [pc, #292]	; (800a2fc <atan+0x32c>)
 800a1d6:	429e      	cmp	r6, r3
 800a1d8:	da1d      	bge.n	800a216 <atan+0x246>
 800a1da:	ee10 0a10 	vmov	r0, s0
 800a1de:	4b48      	ldr	r3, [pc, #288]	; (800a300 <atan+0x330>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f7f6 f850 	bl	8000288 <__aeabi_dsub>
 800a1e8:	4b45      	ldr	r3, [pc, #276]	; (800a300 <atan+0x330>)
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	460f      	mov	r7, r1
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	f7f6 fa00 	bl	80005f8 <__aeabi_dmul>
 800a1f8:	4b3e      	ldr	r3, [pc, #248]	; (800a2f4 <atan+0x324>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f7f6 f846 	bl	800028c <__adddf3>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4630      	mov	r0, r6
 800a206:	4639      	mov	r1, r7
 800a208:	f7f6 fb20 	bl	800084c <__aeabi_ddiv>
 800a20c:	f04f 0a02 	mov.w	sl, #2
 800a210:	4604      	mov	r4, r0
 800a212:	460d      	mov	r5, r1
 800a214:	e743      	b.n	800a09e <atan+0xce>
 800a216:	462b      	mov	r3, r5
 800a218:	ee10 2a10 	vmov	r2, s0
 800a21c:	4939      	ldr	r1, [pc, #228]	; (800a304 <atan+0x334>)
 800a21e:	2000      	movs	r0, #0
 800a220:	f7f6 fb14 	bl	800084c <__aeabi_ddiv>
 800a224:	f04f 0a03 	mov.w	sl, #3
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	e737      	b.n	800a09e <atan+0xce>
 800a22e:	4b36      	ldr	r3, [pc, #216]	; (800a308 <atan+0x338>)
 800a230:	4e36      	ldr	r6, [pc, #216]	; (800a30c <atan+0x33c>)
 800a232:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a236:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a23a:	e9da 2300 	ldrd	r2, r3, [sl]
 800a23e:	f7f6 f823 	bl	8000288 <__aeabi_dsub>
 800a242:	4622      	mov	r2, r4
 800a244:	462b      	mov	r3, r5
 800a246:	f7f6 f81f 	bl	8000288 <__aeabi_dsub>
 800a24a:	4602      	mov	r2, r0
 800a24c:	460b      	mov	r3, r1
 800a24e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a252:	f7f6 f819 	bl	8000288 <__aeabi_dsub>
 800a256:	f1bb 0f00 	cmp.w	fp, #0
 800a25a:	4604      	mov	r4, r0
 800a25c:	460d      	mov	r5, r1
 800a25e:	f6bf aed6 	bge.w	800a00e <atan+0x3e>
 800a262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a266:	461d      	mov	r5, r3
 800a268:	e6d1      	b.n	800a00e <atan+0x3e>
 800a26a:	a51d      	add	r5, pc, #116	; (adr r5, 800a2e0 <atan+0x310>)
 800a26c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a270:	e6cd      	b.n	800a00e <atan+0x3e>
 800a272:	bf00      	nop
 800a274:	f3af 8000 	nop.w
 800a278:	54442d18 	.word	0x54442d18
 800a27c:	bff921fb 	.word	0xbff921fb
 800a280:	8800759c 	.word	0x8800759c
 800a284:	7e37e43c 	.word	0x7e37e43c
 800a288:	e322da11 	.word	0xe322da11
 800a28c:	3f90ad3a 	.word	0x3f90ad3a
 800a290:	24760deb 	.word	0x24760deb
 800a294:	3fa97b4b 	.word	0x3fa97b4b
 800a298:	a0d03d51 	.word	0xa0d03d51
 800a29c:	3fb10d66 	.word	0x3fb10d66
 800a2a0:	c54c206e 	.word	0xc54c206e
 800a2a4:	3fb745cd 	.word	0x3fb745cd
 800a2a8:	920083ff 	.word	0x920083ff
 800a2ac:	3fc24924 	.word	0x3fc24924
 800a2b0:	5555550d 	.word	0x5555550d
 800a2b4:	3fd55555 	.word	0x3fd55555
 800a2b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800a2bc:	bfa2b444 	.word	0xbfa2b444
 800a2c0:	52defd9a 	.word	0x52defd9a
 800a2c4:	3fadde2d 	.word	0x3fadde2d
 800a2c8:	af749a6d 	.word	0xaf749a6d
 800a2cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800a2d0:	fe231671 	.word	0xfe231671
 800a2d4:	3fbc71c6 	.word	0x3fbc71c6
 800a2d8:	9998ebc4 	.word	0x9998ebc4
 800a2dc:	3fc99999 	.word	0x3fc99999
 800a2e0:	54442d18 	.word	0x54442d18
 800a2e4:	3ff921fb 	.word	0x3ff921fb
 800a2e8:	440fffff 	.word	0x440fffff
 800a2ec:	7ff00000 	.word	0x7ff00000
 800a2f0:	3fdbffff 	.word	0x3fdbffff
 800a2f4:	3ff00000 	.word	0x3ff00000
 800a2f8:	3ff2ffff 	.word	0x3ff2ffff
 800a2fc:	40038000 	.word	0x40038000
 800a300:	3ff80000 	.word	0x3ff80000
 800a304:	bff00000 	.word	0xbff00000
 800a308:	0800b808 	.word	0x0800b808
 800a30c:	0800b7e8 	.word	0x0800b7e8

0800a310 <fabs>:
 800a310:	ec51 0b10 	vmov	r0, r1, d0
 800a314:	ee10 2a10 	vmov	r2, s0
 800a318:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a31c:	ec43 2b10 	vmov	d0, r2, r3
 800a320:	4770      	bx	lr
	...

0800a324 <pow>:
 800a324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a326:	ed2d 8b02 	vpush	{d8}
 800a32a:	eeb0 8a40 	vmov.f32	s16, s0
 800a32e:	eef0 8a60 	vmov.f32	s17, s1
 800a332:	ec55 4b11 	vmov	r4, r5, d1
 800a336:	f000 f893 	bl	800a460 <__ieee754_pow>
 800a33a:	4622      	mov	r2, r4
 800a33c:	462b      	mov	r3, r5
 800a33e:	4620      	mov	r0, r4
 800a340:	4629      	mov	r1, r5
 800a342:	ec57 6b10 	vmov	r6, r7, d0
 800a346:	f7f6 fbf1 	bl	8000b2c <__aeabi_dcmpun>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d13b      	bne.n	800a3c6 <pow+0xa2>
 800a34e:	ec51 0b18 	vmov	r0, r1, d8
 800a352:	2200      	movs	r2, #0
 800a354:	2300      	movs	r3, #0
 800a356:	f7f6 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a35a:	b1b8      	cbz	r0, 800a38c <pow+0x68>
 800a35c:	2200      	movs	r2, #0
 800a35e:	2300      	movs	r3, #0
 800a360:	4620      	mov	r0, r4
 800a362:	4629      	mov	r1, r5
 800a364:	f7f6 fbb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d146      	bne.n	800a3fa <pow+0xd6>
 800a36c:	ec45 4b10 	vmov	d0, r4, r5
 800a370:	f000 fe86 	bl	800b080 <finite>
 800a374:	b338      	cbz	r0, 800a3c6 <pow+0xa2>
 800a376:	2200      	movs	r2, #0
 800a378:	2300      	movs	r3, #0
 800a37a:	4620      	mov	r0, r4
 800a37c:	4629      	mov	r1, r5
 800a37e:	f7f6 fbad 	bl	8000adc <__aeabi_dcmplt>
 800a382:	b300      	cbz	r0, 800a3c6 <pow+0xa2>
 800a384:	f7fb f980 	bl	8005688 <__errno>
 800a388:	2322      	movs	r3, #34	; 0x22
 800a38a:	e01b      	b.n	800a3c4 <pow+0xa0>
 800a38c:	ec47 6b10 	vmov	d0, r6, r7
 800a390:	f000 fe76 	bl	800b080 <finite>
 800a394:	b9e0      	cbnz	r0, 800a3d0 <pow+0xac>
 800a396:	eeb0 0a48 	vmov.f32	s0, s16
 800a39a:	eef0 0a68 	vmov.f32	s1, s17
 800a39e:	f000 fe6f 	bl	800b080 <finite>
 800a3a2:	b1a8      	cbz	r0, 800a3d0 <pow+0xac>
 800a3a4:	ec45 4b10 	vmov	d0, r4, r5
 800a3a8:	f000 fe6a 	bl	800b080 <finite>
 800a3ac:	b180      	cbz	r0, 800a3d0 <pow+0xac>
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f7f6 fbb9 	bl	8000b2c <__aeabi_dcmpun>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d0e2      	beq.n	800a384 <pow+0x60>
 800a3be:	f7fb f963 	bl	8005688 <__errno>
 800a3c2:	2321      	movs	r3, #33	; 0x21
 800a3c4:	6003      	str	r3, [r0, #0]
 800a3c6:	ecbd 8b02 	vpop	{d8}
 800a3ca:	ec47 6b10 	vmov	d0, r6, r7
 800a3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	f7f6 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d0f2      	beq.n	800a3c6 <pow+0xa2>
 800a3e0:	eeb0 0a48 	vmov.f32	s0, s16
 800a3e4:	eef0 0a68 	vmov.f32	s1, s17
 800a3e8:	f000 fe4a 	bl	800b080 <finite>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d0ea      	beq.n	800a3c6 <pow+0xa2>
 800a3f0:	ec45 4b10 	vmov	d0, r4, r5
 800a3f4:	f000 fe44 	bl	800b080 <finite>
 800a3f8:	e7c3      	b.n	800a382 <pow+0x5e>
 800a3fa:	4f01      	ldr	r7, [pc, #4]	; (800a400 <pow+0xdc>)
 800a3fc:	2600      	movs	r6, #0
 800a3fe:	e7e2      	b.n	800a3c6 <pow+0xa2>
 800a400:	3ff00000 	.word	0x3ff00000

0800a404 <sqrt>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	ed2d 8b02 	vpush	{d8}
 800a40a:	ec55 4b10 	vmov	r4, r5, d0
 800a40e:	f000 fd55 	bl	800aebc <__ieee754_sqrt>
 800a412:	4622      	mov	r2, r4
 800a414:	462b      	mov	r3, r5
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	eeb0 8a40 	vmov.f32	s16, s0
 800a41e:	eef0 8a60 	vmov.f32	s17, s1
 800a422:	f7f6 fb83 	bl	8000b2c <__aeabi_dcmpun>
 800a426:	b990      	cbnz	r0, 800a44e <sqrt+0x4a>
 800a428:	2200      	movs	r2, #0
 800a42a:	2300      	movs	r3, #0
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f6 fb54 	bl	8000adc <__aeabi_dcmplt>
 800a434:	b158      	cbz	r0, 800a44e <sqrt+0x4a>
 800a436:	f7fb f927 	bl	8005688 <__errno>
 800a43a:	2321      	movs	r3, #33	; 0x21
 800a43c:	6003      	str	r3, [r0, #0]
 800a43e:	2200      	movs	r2, #0
 800a440:	2300      	movs	r3, #0
 800a442:	4610      	mov	r0, r2
 800a444:	4619      	mov	r1, r3
 800a446:	f7f6 fa01 	bl	800084c <__aeabi_ddiv>
 800a44a:	ec41 0b18 	vmov	d8, r0, r1
 800a44e:	eeb0 0a48 	vmov.f32	s0, s16
 800a452:	eef0 0a68 	vmov.f32	s1, s17
 800a456:	ecbd 8b02 	vpop	{d8}
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	0000      	movs	r0, r0
	...

0800a460 <__ieee754_pow>:
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a464:	ed2d 8b06 	vpush	{d8-d10}
 800a468:	b089      	sub	sp, #36	; 0x24
 800a46a:	ed8d 1b00 	vstr	d1, [sp]
 800a46e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a472:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a476:	ea58 0102 	orrs.w	r1, r8, r2
 800a47a:	ec57 6b10 	vmov	r6, r7, d0
 800a47e:	d115      	bne.n	800a4ac <__ieee754_pow+0x4c>
 800a480:	19b3      	adds	r3, r6, r6
 800a482:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a486:	4152      	adcs	r2, r2
 800a488:	4299      	cmp	r1, r3
 800a48a:	4b89      	ldr	r3, [pc, #548]	; (800a6b0 <__ieee754_pow+0x250>)
 800a48c:	4193      	sbcs	r3, r2
 800a48e:	f080 84d2 	bcs.w	800ae36 <__ieee754_pow+0x9d6>
 800a492:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a496:	4630      	mov	r0, r6
 800a498:	4639      	mov	r1, r7
 800a49a:	f7f5 fef7 	bl	800028c <__adddf3>
 800a49e:	ec41 0b10 	vmov	d0, r0, r1
 800a4a2:	b009      	add	sp, #36	; 0x24
 800a4a4:	ecbd 8b06 	vpop	{d8-d10}
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ac:	4b81      	ldr	r3, [pc, #516]	; (800a6b4 <__ieee754_pow+0x254>)
 800a4ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a4b2:	429c      	cmp	r4, r3
 800a4b4:	ee10 aa10 	vmov	sl, s0
 800a4b8:	463d      	mov	r5, r7
 800a4ba:	dc06      	bgt.n	800a4ca <__ieee754_pow+0x6a>
 800a4bc:	d101      	bne.n	800a4c2 <__ieee754_pow+0x62>
 800a4be:	2e00      	cmp	r6, #0
 800a4c0:	d1e7      	bne.n	800a492 <__ieee754_pow+0x32>
 800a4c2:	4598      	cmp	r8, r3
 800a4c4:	dc01      	bgt.n	800a4ca <__ieee754_pow+0x6a>
 800a4c6:	d10f      	bne.n	800a4e8 <__ieee754_pow+0x88>
 800a4c8:	b172      	cbz	r2, 800a4e8 <__ieee754_pow+0x88>
 800a4ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a4ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a4d2:	ea55 050a 	orrs.w	r5, r5, sl
 800a4d6:	d1dc      	bne.n	800a492 <__ieee754_pow+0x32>
 800a4d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a4dc:	18db      	adds	r3, r3, r3
 800a4de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a4e2:	4152      	adcs	r2, r2
 800a4e4:	429d      	cmp	r5, r3
 800a4e6:	e7d0      	b.n	800a48a <__ieee754_pow+0x2a>
 800a4e8:	2d00      	cmp	r5, #0
 800a4ea:	da3b      	bge.n	800a564 <__ieee754_pow+0x104>
 800a4ec:	4b72      	ldr	r3, [pc, #456]	; (800a6b8 <__ieee754_pow+0x258>)
 800a4ee:	4598      	cmp	r8, r3
 800a4f0:	dc51      	bgt.n	800a596 <__ieee754_pow+0x136>
 800a4f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a4f6:	4598      	cmp	r8, r3
 800a4f8:	f340 84ac 	ble.w	800ae54 <__ieee754_pow+0x9f4>
 800a4fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a500:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a504:	2b14      	cmp	r3, #20
 800a506:	dd0f      	ble.n	800a528 <__ieee754_pow+0xc8>
 800a508:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a50c:	fa22 f103 	lsr.w	r1, r2, r3
 800a510:	fa01 f303 	lsl.w	r3, r1, r3
 800a514:	4293      	cmp	r3, r2
 800a516:	f040 849d 	bne.w	800ae54 <__ieee754_pow+0x9f4>
 800a51a:	f001 0101 	and.w	r1, r1, #1
 800a51e:	f1c1 0302 	rsb	r3, r1, #2
 800a522:	9304      	str	r3, [sp, #16]
 800a524:	b182      	cbz	r2, 800a548 <__ieee754_pow+0xe8>
 800a526:	e05f      	b.n	800a5e8 <__ieee754_pow+0x188>
 800a528:	2a00      	cmp	r2, #0
 800a52a:	d15b      	bne.n	800a5e4 <__ieee754_pow+0x184>
 800a52c:	f1c3 0314 	rsb	r3, r3, #20
 800a530:	fa48 f103 	asr.w	r1, r8, r3
 800a534:	fa01 f303 	lsl.w	r3, r1, r3
 800a538:	4543      	cmp	r3, r8
 800a53a:	f040 8488 	bne.w	800ae4e <__ieee754_pow+0x9ee>
 800a53e:	f001 0101 	and.w	r1, r1, #1
 800a542:	f1c1 0302 	rsb	r3, r1, #2
 800a546:	9304      	str	r3, [sp, #16]
 800a548:	4b5c      	ldr	r3, [pc, #368]	; (800a6bc <__ieee754_pow+0x25c>)
 800a54a:	4598      	cmp	r8, r3
 800a54c:	d132      	bne.n	800a5b4 <__ieee754_pow+0x154>
 800a54e:	f1b9 0f00 	cmp.w	r9, #0
 800a552:	f280 8478 	bge.w	800ae46 <__ieee754_pow+0x9e6>
 800a556:	4959      	ldr	r1, [pc, #356]	; (800a6bc <__ieee754_pow+0x25c>)
 800a558:	4632      	mov	r2, r6
 800a55a:	463b      	mov	r3, r7
 800a55c:	2000      	movs	r0, #0
 800a55e:	f7f6 f975 	bl	800084c <__aeabi_ddiv>
 800a562:	e79c      	b.n	800a49e <__ieee754_pow+0x3e>
 800a564:	2300      	movs	r3, #0
 800a566:	9304      	str	r3, [sp, #16]
 800a568:	2a00      	cmp	r2, #0
 800a56a:	d13d      	bne.n	800a5e8 <__ieee754_pow+0x188>
 800a56c:	4b51      	ldr	r3, [pc, #324]	; (800a6b4 <__ieee754_pow+0x254>)
 800a56e:	4598      	cmp	r8, r3
 800a570:	d1ea      	bne.n	800a548 <__ieee754_pow+0xe8>
 800a572:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a576:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a57a:	ea53 030a 	orrs.w	r3, r3, sl
 800a57e:	f000 845a 	beq.w	800ae36 <__ieee754_pow+0x9d6>
 800a582:	4b4f      	ldr	r3, [pc, #316]	; (800a6c0 <__ieee754_pow+0x260>)
 800a584:	429c      	cmp	r4, r3
 800a586:	dd08      	ble.n	800a59a <__ieee754_pow+0x13a>
 800a588:	f1b9 0f00 	cmp.w	r9, #0
 800a58c:	f2c0 8457 	blt.w	800ae3e <__ieee754_pow+0x9de>
 800a590:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a594:	e783      	b.n	800a49e <__ieee754_pow+0x3e>
 800a596:	2302      	movs	r3, #2
 800a598:	e7e5      	b.n	800a566 <__ieee754_pow+0x106>
 800a59a:	f1b9 0f00 	cmp.w	r9, #0
 800a59e:	f04f 0000 	mov.w	r0, #0
 800a5a2:	f04f 0100 	mov.w	r1, #0
 800a5a6:	f6bf af7a 	bge.w	800a49e <__ieee754_pow+0x3e>
 800a5aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a5ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a5b2:	e774      	b.n	800a49e <__ieee754_pow+0x3e>
 800a5b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a5b8:	d106      	bne.n	800a5c8 <__ieee754_pow+0x168>
 800a5ba:	4632      	mov	r2, r6
 800a5bc:	463b      	mov	r3, r7
 800a5be:	4630      	mov	r0, r6
 800a5c0:	4639      	mov	r1, r7
 800a5c2:	f7f6 f819 	bl	80005f8 <__aeabi_dmul>
 800a5c6:	e76a      	b.n	800a49e <__ieee754_pow+0x3e>
 800a5c8:	4b3e      	ldr	r3, [pc, #248]	; (800a6c4 <__ieee754_pow+0x264>)
 800a5ca:	4599      	cmp	r9, r3
 800a5cc:	d10c      	bne.n	800a5e8 <__ieee754_pow+0x188>
 800a5ce:	2d00      	cmp	r5, #0
 800a5d0:	db0a      	blt.n	800a5e8 <__ieee754_pow+0x188>
 800a5d2:	ec47 6b10 	vmov	d0, r6, r7
 800a5d6:	b009      	add	sp, #36	; 0x24
 800a5d8:	ecbd 8b06 	vpop	{d8-d10}
 800a5dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e0:	f000 bc6c 	b.w	800aebc <__ieee754_sqrt>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	9304      	str	r3, [sp, #16]
 800a5e8:	ec47 6b10 	vmov	d0, r6, r7
 800a5ec:	f7ff fe90 	bl	800a310 <fabs>
 800a5f0:	ec51 0b10 	vmov	r0, r1, d0
 800a5f4:	f1ba 0f00 	cmp.w	sl, #0
 800a5f8:	d129      	bne.n	800a64e <__ieee754_pow+0x1ee>
 800a5fa:	b124      	cbz	r4, 800a606 <__ieee754_pow+0x1a6>
 800a5fc:	4b2f      	ldr	r3, [pc, #188]	; (800a6bc <__ieee754_pow+0x25c>)
 800a5fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a602:	429a      	cmp	r2, r3
 800a604:	d123      	bne.n	800a64e <__ieee754_pow+0x1ee>
 800a606:	f1b9 0f00 	cmp.w	r9, #0
 800a60a:	da05      	bge.n	800a618 <__ieee754_pow+0x1b8>
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	2000      	movs	r0, #0
 800a612:	492a      	ldr	r1, [pc, #168]	; (800a6bc <__ieee754_pow+0x25c>)
 800a614:	f7f6 f91a 	bl	800084c <__aeabi_ddiv>
 800a618:	2d00      	cmp	r5, #0
 800a61a:	f6bf af40 	bge.w	800a49e <__ieee754_pow+0x3e>
 800a61e:	9b04      	ldr	r3, [sp, #16]
 800a620:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a624:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a628:	4323      	orrs	r3, r4
 800a62a:	d108      	bne.n	800a63e <__ieee754_pow+0x1de>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4610      	mov	r0, r2
 800a632:	4619      	mov	r1, r3
 800a634:	f7f5 fe28 	bl	8000288 <__aeabi_dsub>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	e78f      	b.n	800a55e <__ieee754_pow+0xfe>
 800a63e:	9b04      	ldr	r3, [sp, #16]
 800a640:	2b01      	cmp	r3, #1
 800a642:	f47f af2c 	bne.w	800a49e <__ieee754_pow+0x3e>
 800a646:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a64a:	4619      	mov	r1, r3
 800a64c:	e727      	b.n	800a49e <__ieee754_pow+0x3e>
 800a64e:	0feb      	lsrs	r3, r5, #31
 800a650:	3b01      	subs	r3, #1
 800a652:	9306      	str	r3, [sp, #24]
 800a654:	9a06      	ldr	r2, [sp, #24]
 800a656:	9b04      	ldr	r3, [sp, #16]
 800a658:	4313      	orrs	r3, r2
 800a65a:	d102      	bne.n	800a662 <__ieee754_pow+0x202>
 800a65c:	4632      	mov	r2, r6
 800a65e:	463b      	mov	r3, r7
 800a660:	e7e6      	b.n	800a630 <__ieee754_pow+0x1d0>
 800a662:	4b19      	ldr	r3, [pc, #100]	; (800a6c8 <__ieee754_pow+0x268>)
 800a664:	4598      	cmp	r8, r3
 800a666:	f340 80fb 	ble.w	800a860 <__ieee754_pow+0x400>
 800a66a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a66e:	4598      	cmp	r8, r3
 800a670:	4b13      	ldr	r3, [pc, #76]	; (800a6c0 <__ieee754_pow+0x260>)
 800a672:	dd0c      	ble.n	800a68e <__ieee754_pow+0x22e>
 800a674:	429c      	cmp	r4, r3
 800a676:	dc0f      	bgt.n	800a698 <__ieee754_pow+0x238>
 800a678:	f1b9 0f00 	cmp.w	r9, #0
 800a67c:	da0f      	bge.n	800a69e <__ieee754_pow+0x23e>
 800a67e:	2000      	movs	r0, #0
 800a680:	b009      	add	sp, #36	; 0x24
 800a682:	ecbd 8b06 	vpop	{d8-d10}
 800a686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68a:	f000 bcf0 	b.w	800b06e <__math_oflow>
 800a68e:	429c      	cmp	r4, r3
 800a690:	dbf2      	blt.n	800a678 <__ieee754_pow+0x218>
 800a692:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <__ieee754_pow+0x25c>)
 800a694:	429c      	cmp	r4, r3
 800a696:	dd19      	ble.n	800a6cc <__ieee754_pow+0x26c>
 800a698:	f1b9 0f00 	cmp.w	r9, #0
 800a69c:	dcef      	bgt.n	800a67e <__ieee754_pow+0x21e>
 800a69e:	2000      	movs	r0, #0
 800a6a0:	b009      	add	sp, #36	; 0x24
 800a6a2:	ecbd 8b06 	vpop	{d8-d10}
 800a6a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6aa:	f000 bcd7 	b.w	800b05c <__math_uflow>
 800a6ae:	bf00      	nop
 800a6b0:	fff00000 	.word	0xfff00000
 800a6b4:	7ff00000 	.word	0x7ff00000
 800a6b8:	433fffff 	.word	0x433fffff
 800a6bc:	3ff00000 	.word	0x3ff00000
 800a6c0:	3fefffff 	.word	0x3fefffff
 800a6c4:	3fe00000 	.word	0x3fe00000
 800a6c8:	41e00000 	.word	0x41e00000
 800a6cc:	4b60      	ldr	r3, [pc, #384]	; (800a850 <__ieee754_pow+0x3f0>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f7f5 fdda 	bl	8000288 <__aeabi_dsub>
 800a6d4:	a354      	add	r3, pc, #336	; (adr r3, 800a828 <__ieee754_pow+0x3c8>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	4604      	mov	r4, r0
 800a6dc:	460d      	mov	r5, r1
 800a6de:	f7f5 ff8b 	bl	80005f8 <__aeabi_dmul>
 800a6e2:	a353      	add	r3, pc, #332	; (adr r3, 800a830 <__ieee754_pow+0x3d0>)
 800a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	460f      	mov	r7, r1
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	f7f5 ff82 	bl	80005f8 <__aeabi_dmul>
 800a6f4:	4b57      	ldr	r3, [pc, #348]	; (800a854 <__ieee754_pow+0x3f4>)
 800a6f6:	4682      	mov	sl, r0
 800a6f8:	468b      	mov	fp, r1
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	4629      	mov	r1, r5
 800a700:	f7f5 ff7a 	bl	80005f8 <__aeabi_dmul>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	a14b      	add	r1, pc, #300	; (adr r1, 800a838 <__ieee754_pow+0x3d8>)
 800a70a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a70e:	f7f5 fdbb 	bl	8000288 <__aeabi_dsub>
 800a712:	4622      	mov	r2, r4
 800a714:	462b      	mov	r3, r5
 800a716:	f7f5 ff6f 	bl	80005f8 <__aeabi_dmul>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	2000      	movs	r0, #0
 800a720:	494d      	ldr	r1, [pc, #308]	; (800a858 <__ieee754_pow+0x3f8>)
 800a722:	f7f5 fdb1 	bl	8000288 <__aeabi_dsub>
 800a726:	4622      	mov	r2, r4
 800a728:	4680      	mov	r8, r0
 800a72a:	4689      	mov	r9, r1
 800a72c:	462b      	mov	r3, r5
 800a72e:	4620      	mov	r0, r4
 800a730:	4629      	mov	r1, r5
 800a732:	f7f5 ff61 	bl	80005f8 <__aeabi_dmul>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f5 ff5b 	bl	80005f8 <__aeabi_dmul>
 800a742:	a33f      	add	r3, pc, #252	; (adr r3, 800a840 <__ieee754_pow+0x3e0>)
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	f7f5 ff56 	bl	80005f8 <__aeabi_dmul>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4650      	mov	r0, sl
 800a752:	4659      	mov	r1, fp
 800a754:	f7f5 fd98 	bl	8000288 <__aeabi_dsub>
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4680      	mov	r8, r0
 800a75e:	4689      	mov	r9, r1
 800a760:	4630      	mov	r0, r6
 800a762:	4639      	mov	r1, r7
 800a764:	f7f5 fd92 	bl	800028c <__adddf3>
 800a768:	2000      	movs	r0, #0
 800a76a:	4632      	mov	r2, r6
 800a76c:	463b      	mov	r3, r7
 800a76e:	4604      	mov	r4, r0
 800a770:	460d      	mov	r5, r1
 800a772:	f7f5 fd89 	bl	8000288 <__aeabi_dsub>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4640      	mov	r0, r8
 800a77c:	4649      	mov	r1, r9
 800a77e:	f7f5 fd83 	bl	8000288 <__aeabi_dsub>
 800a782:	9b04      	ldr	r3, [sp, #16]
 800a784:	9a06      	ldr	r2, [sp, #24]
 800a786:	3b01      	subs	r3, #1
 800a788:	4313      	orrs	r3, r2
 800a78a:	4682      	mov	sl, r0
 800a78c:	468b      	mov	fp, r1
 800a78e:	f040 81e7 	bne.w	800ab60 <__ieee754_pow+0x700>
 800a792:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a848 <__ieee754_pow+0x3e8>
 800a796:	eeb0 8a47 	vmov.f32	s16, s14
 800a79a:	eef0 8a67 	vmov.f32	s17, s15
 800a79e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a7a2:	2600      	movs	r6, #0
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	463b      	mov	r3, r7
 800a7a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7ac:	f7f5 fd6c 	bl	8000288 <__aeabi_dsub>
 800a7b0:	4622      	mov	r2, r4
 800a7b2:	462b      	mov	r3, r5
 800a7b4:	f7f5 ff20 	bl	80005f8 <__aeabi_dmul>
 800a7b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4689      	mov	r9, r1
 800a7c0:	4650      	mov	r0, sl
 800a7c2:	4659      	mov	r1, fp
 800a7c4:	f7f5 ff18 	bl	80005f8 <__aeabi_dmul>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4640      	mov	r0, r8
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	f7f5 fd5c 	bl	800028c <__adddf3>
 800a7d4:	4632      	mov	r2, r6
 800a7d6:	463b      	mov	r3, r7
 800a7d8:	4680      	mov	r8, r0
 800a7da:	4689      	mov	r9, r1
 800a7dc:	4620      	mov	r0, r4
 800a7de:	4629      	mov	r1, r5
 800a7e0:	f7f5 ff0a 	bl	80005f8 <__aeabi_dmul>
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	460d      	mov	r5, r1
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	f7f5 fd4c 	bl	800028c <__adddf3>
 800a7f4:	4b19      	ldr	r3, [pc, #100]	; (800a85c <__ieee754_pow+0x3fc>)
 800a7f6:	4299      	cmp	r1, r3
 800a7f8:	ec45 4b19 	vmov	d9, r4, r5
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	460f      	mov	r7, r1
 800a800:	468b      	mov	fp, r1
 800a802:	f340 82f1 	ble.w	800ade8 <__ieee754_pow+0x988>
 800a806:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a80a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a80e:	4303      	orrs	r3, r0
 800a810:	f000 81e4 	beq.w	800abdc <__ieee754_pow+0x77c>
 800a814:	ec51 0b18 	vmov	r0, r1, d8
 800a818:	2200      	movs	r2, #0
 800a81a:	2300      	movs	r3, #0
 800a81c:	f7f6 f95e 	bl	8000adc <__aeabi_dcmplt>
 800a820:	3800      	subs	r0, #0
 800a822:	bf18      	it	ne
 800a824:	2001      	movne	r0, #1
 800a826:	e72b      	b.n	800a680 <__ieee754_pow+0x220>
 800a828:	60000000 	.word	0x60000000
 800a82c:	3ff71547 	.word	0x3ff71547
 800a830:	f85ddf44 	.word	0xf85ddf44
 800a834:	3e54ae0b 	.word	0x3e54ae0b
 800a838:	55555555 	.word	0x55555555
 800a83c:	3fd55555 	.word	0x3fd55555
 800a840:	652b82fe 	.word	0x652b82fe
 800a844:	3ff71547 	.word	0x3ff71547
 800a848:	00000000 	.word	0x00000000
 800a84c:	bff00000 	.word	0xbff00000
 800a850:	3ff00000 	.word	0x3ff00000
 800a854:	3fd00000 	.word	0x3fd00000
 800a858:	3fe00000 	.word	0x3fe00000
 800a85c:	408fffff 	.word	0x408fffff
 800a860:	4bd5      	ldr	r3, [pc, #852]	; (800abb8 <__ieee754_pow+0x758>)
 800a862:	402b      	ands	r3, r5
 800a864:	2200      	movs	r2, #0
 800a866:	b92b      	cbnz	r3, 800a874 <__ieee754_pow+0x414>
 800a868:	4bd4      	ldr	r3, [pc, #848]	; (800abbc <__ieee754_pow+0x75c>)
 800a86a:	f7f5 fec5 	bl	80005f8 <__aeabi_dmul>
 800a86e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a872:	460c      	mov	r4, r1
 800a874:	1523      	asrs	r3, r4, #20
 800a876:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a87a:	4413      	add	r3, r2
 800a87c:	9305      	str	r3, [sp, #20]
 800a87e:	4bd0      	ldr	r3, [pc, #832]	; (800abc0 <__ieee754_pow+0x760>)
 800a880:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a884:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a888:	429c      	cmp	r4, r3
 800a88a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a88e:	dd08      	ble.n	800a8a2 <__ieee754_pow+0x442>
 800a890:	4bcc      	ldr	r3, [pc, #816]	; (800abc4 <__ieee754_pow+0x764>)
 800a892:	429c      	cmp	r4, r3
 800a894:	f340 8162 	ble.w	800ab5c <__ieee754_pow+0x6fc>
 800a898:	9b05      	ldr	r3, [sp, #20]
 800a89a:	3301      	adds	r3, #1
 800a89c:	9305      	str	r3, [sp, #20]
 800a89e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a8a2:	2400      	movs	r4, #0
 800a8a4:	00e3      	lsls	r3, r4, #3
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	4bc7      	ldr	r3, [pc, #796]	; (800abc8 <__ieee754_pow+0x768>)
 800a8aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8ae:	ed93 7b00 	vldr	d7, [r3]
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	ec53 2b17 	vmov	r2, r3, d7
 800a8b8:	eeb0 9a47 	vmov.f32	s18, s14
 800a8bc:	eef0 9a67 	vmov.f32	s19, s15
 800a8c0:	4682      	mov	sl, r0
 800a8c2:	f7f5 fce1 	bl	8000288 <__aeabi_dsub>
 800a8c6:	4652      	mov	r2, sl
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	460f      	mov	r7, r1
 800a8cc:	462b      	mov	r3, r5
 800a8ce:	ec51 0b19 	vmov	r0, r1, d9
 800a8d2:	f7f5 fcdb 	bl	800028c <__adddf3>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	2000      	movs	r0, #0
 800a8dc:	49bb      	ldr	r1, [pc, #748]	; (800abcc <__ieee754_pow+0x76c>)
 800a8de:	f7f5 ffb5 	bl	800084c <__aeabi_ddiv>
 800a8e2:	ec41 0b1a 	vmov	d10, r0, r1
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	f7f5 fe83 	bl	80005f8 <__aeabi_dmul>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8f8:	9302      	str	r3, [sp, #8]
 800a8fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a8fe:	46ab      	mov	fp, r5
 800a900:	106d      	asrs	r5, r5, #1
 800a902:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a906:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a90a:	ec41 0b18 	vmov	d8, r0, r1
 800a90e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a912:	2200      	movs	r2, #0
 800a914:	4640      	mov	r0, r8
 800a916:	4649      	mov	r1, r9
 800a918:	4614      	mov	r4, r2
 800a91a:	461d      	mov	r5, r3
 800a91c:	f7f5 fe6c 	bl	80005f8 <__aeabi_dmul>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4630      	mov	r0, r6
 800a926:	4639      	mov	r1, r7
 800a928:	f7f5 fcae 	bl	8000288 <__aeabi_dsub>
 800a92c:	ec53 2b19 	vmov	r2, r3, d9
 800a930:	4606      	mov	r6, r0
 800a932:	460f      	mov	r7, r1
 800a934:	4620      	mov	r0, r4
 800a936:	4629      	mov	r1, r5
 800a938:	f7f5 fca6 	bl	8000288 <__aeabi_dsub>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4650      	mov	r0, sl
 800a942:	4659      	mov	r1, fp
 800a944:	f7f5 fca0 	bl	8000288 <__aeabi_dsub>
 800a948:	4642      	mov	r2, r8
 800a94a:	464b      	mov	r3, r9
 800a94c:	f7f5 fe54 	bl	80005f8 <__aeabi_dmul>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4630      	mov	r0, r6
 800a956:	4639      	mov	r1, r7
 800a958:	f7f5 fc96 	bl	8000288 <__aeabi_dsub>
 800a95c:	ec53 2b1a 	vmov	r2, r3, d10
 800a960:	f7f5 fe4a 	bl	80005f8 <__aeabi_dmul>
 800a964:	ec53 2b18 	vmov	r2, r3, d8
 800a968:	ec41 0b19 	vmov	d9, r0, r1
 800a96c:	ec51 0b18 	vmov	r0, r1, d8
 800a970:	f7f5 fe42 	bl	80005f8 <__aeabi_dmul>
 800a974:	a37c      	add	r3, pc, #496	; (adr r3, 800ab68 <__ieee754_pow+0x708>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	4604      	mov	r4, r0
 800a97c:	460d      	mov	r5, r1
 800a97e:	f7f5 fe3b 	bl	80005f8 <__aeabi_dmul>
 800a982:	a37b      	add	r3, pc, #492	; (adr r3, 800ab70 <__ieee754_pow+0x710>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	f7f5 fc80 	bl	800028c <__adddf3>
 800a98c:	4622      	mov	r2, r4
 800a98e:	462b      	mov	r3, r5
 800a990:	f7f5 fe32 	bl	80005f8 <__aeabi_dmul>
 800a994:	a378      	add	r3, pc, #480	; (adr r3, 800ab78 <__ieee754_pow+0x718>)
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	f7f5 fc77 	bl	800028c <__adddf3>
 800a99e:	4622      	mov	r2, r4
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	f7f5 fe29 	bl	80005f8 <__aeabi_dmul>
 800a9a6:	a376      	add	r3, pc, #472	; (adr r3, 800ab80 <__ieee754_pow+0x720>)
 800a9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ac:	f7f5 fc6e 	bl	800028c <__adddf3>
 800a9b0:	4622      	mov	r2, r4
 800a9b2:	462b      	mov	r3, r5
 800a9b4:	f7f5 fe20 	bl	80005f8 <__aeabi_dmul>
 800a9b8:	a373      	add	r3, pc, #460	; (adr r3, 800ab88 <__ieee754_pow+0x728>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f7f5 fc65 	bl	800028c <__adddf3>
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	f7f5 fe17 	bl	80005f8 <__aeabi_dmul>
 800a9ca:	a371      	add	r3, pc, #452	; (adr r3, 800ab90 <__ieee754_pow+0x730>)
 800a9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d0:	f7f5 fc5c 	bl	800028c <__adddf3>
 800a9d4:	4622      	mov	r2, r4
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	462b      	mov	r3, r5
 800a9dc:	4620      	mov	r0, r4
 800a9de:	4629      	mov	r1, r5
 800a9e0:	f7f5 fe0a 	bl	80005f8 <__aeabi_dmul>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f5 fe04 	bl	80005f8 <__aeabi_dmul>
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	ec51 0b18 	vmov	r0, r1, d8
 800a9fc:	f7f5 fc46 	bl	800028c <__adddf3>
 800aa00:	ec53 2b19 	vmov	r2, r3, d9
 800aa04:	f7f5 fdf8 	bl	80005f8 <__aeabi_dmul>
 800aa08:	4622      	mov	r2, r4
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	f7f5 fc3e 	bl	800028c <__adddf3>
 800aa10:	4642      	mov	r2, r8
 800aa12:	4682      	mov	sl, r0
 800aa14:	468b      	mov	fp, r1
 800aa16:	464b      	mov	r3, r9
 800aa18:	4640      	mov	r0, r8
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	f7f5 fdec 	bl	80005f8 <__aeabi_dmul>
 800aa20:	4b6b      	ldr	r3, [pc, #428]	; (800abd0 <__ieee754_pow+0x770>)
 800aa22:	2200      	movs	r2, #0
 800aa24:	4606      	mov	r6, r0
 800aa26:	460f      	mov	r7, r1
 800aa28:	f7f5 fc30 	bl	800028c <__adddf3>
 800aa2c:	4652      	mov	r2, sl
 800aa2e:	465b      	mov	r3, fp
 800aa30:	f7f5 fc2c 	bl	800028c <__adddf3>
 800aa34:	2000      	movs	r0, #0
 800aa36:	4604      	mov	r4, r0
 800aa38:	460d      	mov	r5, r1
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4640      	mov	r0, r8
 800aa40:	4649      	mov	r1, r9
 800aa42:	f7f5 fdd9 	bl	80005f8 <__aeabi_dmul>
 800aa46:	4b62      	ldr	r3, [pc, #392]	; (800abd0 <__ieee754_pow+0x770>)
 800aa48:	4680      	mov	r8, r0
 800aa4a:	4689      	mov	r9, r1
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4629      	mov	r1, r5
 800aa52:	f7f5 fc19 	bl	8000288 <__aeabi_dsub>
 800aa56:	4632      	mov	r2, r6
 800aa58:	463b      	mov	r3, r7
 800aa5a:	f7f5 fc15 	bl	8000288 <__aeabi_dsub>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	460b      	mov	r3, r1
 800aa62:	4650      	mov	r0, sl
 800aa64:	4659      	mov	r1, fp
 800aa66:	f7f5 fc0f 	bl	8000288 <__aeabi_dsub>
 800aa6a:	ec53 2b18 	vmov	r2, r3, d8
 800aa6e:	f7f5 fdc3 	bl	80005f8 <__aeabi_dmul>
 800aa72:	4622      	mov	r2, r4
 800aa74:	4606      	mov	r6, r0
 800aa76:	460f      	mov	r7, r1
 800aa78:	462b      	mov	r3, r5
 800aa7a:	ec51 0b19 	vmov	r0, r1, d9
 800aa7e:	f7f5 fdbb 	bl	80005f8 <__aeabi_dmul>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4630      	mov	r0, r6
 800aa88:	4639      	mov	r1, r7
 800aa8a:	f7f5 fbff 	bl	800028c <__adddf3>
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460f      	mov	r7, r1
 800aa92:	4602      	mov	r2, r0
 800aa94:	460b      	mov	r3, r1
 800aa96:	4640      	mov	r0, r8
 800aa98:	4649      	mov	r1, r9
 800aa9a:	f7f5 fbf7 	bl	800028c <__adddf3>
 800aa9e:	a33e      	add	r3, pc, #248	; (adr r3, 800ab98 <__ieee754_pow+0x738>)
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	4604      	mov	r4, r0
 800aaa8:	460d      	mov	r5, r1
 800aaaa:	f7f5 fda5 	bl	80005f8 <__aeabi_dmul>
 800aaae:	4642      	mov	r2, r8
 800aab0:	ec41 0b18 	vmov	d8, r0, r1
 800aab4:	464b      	mov	r3, r9
 800aab6:	4620      	mov	r0, r4
 800aab8:	4629      	mov	r1, r5
 800aaba:	f7f5 fbe5 	bl	8000288 <__aeabi_dsub>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	4630      	mov	r0, r6
 800aac4:	4639      	mov	r1, r7
 800aac6:	f7f5 fbdf 	bl	8000288 <__aeabi_dsub>
 800aaca:	a335      	add	r3, pc, #212	; (adr r3, 800aba0 <__ieee754_pow+0x740>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f7f5 fd92 	bl	80005f8 <__aeabi_dmul>
 800aad4:	a334      	add	r3, pc, #208	; (adr r3, 800aba8 <__ieee754_pow+0x748>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	4606      	mov	r6, r0
 800aadc:	460f      	mov	r7, r1
 800aade:	4620      	mov	r0, r4
 800aae0:	4629      	mov	r1, r5
 800aae2:	f7f5 fd89 	bl	80005f8 <__aeabi_dmul>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4630      	mov	r0, r6
 800aaec:	4639      	mov	r1, r7
 800aaee:	f7f5 fbcd 	bl	800028c <__adddf3>
 800aaf2:	9a07      	ldr	r2, [sp, #28]
 800aaf4:	4b37      	ldr	r3, [pc, #220]	; (800abd4 <__ieee754_pow+0x774>)
 800aaf6:	4413      	add	r3, r2
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	f7f5 fbc6 	bl	800028c <__adddf3>
 800ab00:	4682      	mov	sl, r0
 800ab02:	9805      	ldr	r0, [sp, #20]
 800ab04:	468b      	mov	fp, r1
 800ab06:	f7f5 fd0d 	bl	8000524 <__aeabi_i2d>
 800ab0a:	9a07      	ldr	r2, [sp, #28]
 800ab0c:	4b32      	ldr	r3, [pc, #200]	; (800abd8 <__ieee754_pow+0x778>)
 800ab0e:	4413      	add	r3, r2
 800ab10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab14:	4606      	mov	r6, r0
 800ab16:	460f      	mov	r7, r1
 800ab18:	4652      	mov	r2, sl
 800ab1a:	465b      	mov	r3, fp
 800ab1c:	ec51 0b18 	vmov	r0, r1, d8
 800ab20:	f7f5 fbb4 	bl	800028c <__adddf3>
 800ab24:	4642      	mov	r2, r8
 800ab26:	464b      	mov	r3, r9
 800ab28:	f7f5 fbb0 	bl	800028c <__adddf3>
 800ab2c:	4632      	mov	r2, r6
 800ab2e:	463b      	mov	r3, r7
 800ab30:	f7f5 fbac 	bl	800028c <__adddf3>
 800ab34:	2000      	movs	r0, #0
 800ab36:	4632      	mov	r2, r6
 800ab38:	463b      	mov	r3, r7
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	460d      	mov	r5, r1
 800ab3e:	f7f5 fba3 	bl	8000288 <__aeabi_dsub>
 800ab42:	4642      	mov	r2, r8
 800ab44:	464b      	mov	r3, r9
 800ab46:	f7f5 fb9f 	bl	8000288 <__aeabi_dsub>
 800ab4a:	ec53 2b18 	vmov	r2, r3, d8
 800ab4e:	f7f5 fb9b 	bl	8000288 <__aeabi_dsub>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4650      	mov	r0, sl
 800ab58:	4659      	mov	r1, fp
 800ab5a:	e610      	b.n	800a77e <__ieee754_pow+0x31e>
 800ab5c:	2401      	movs	r4, #1
 800ab5e:	e6a1      	b.n	800a8a4 <__ieee754_pow+0x444>
 800ab60:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800abb0 <__ieee754_pow+0x750>
 800ab64:	e617      	b.n	800a796 <__ieee754_pow+0x336>
 800ab66:	bf00      	nop
 800ab68:	4a454eef 	.word	0x4a454eef
 800ab6c:	3fca7e28 	.word	0x3fca7e28
 800ab70:	93c9db65 	.word	0x93c9db65
 800ab74:	3fcd864a 	.word	0x3fcd864a
 800ab78:	a91d4101 	.word	0xa91d4101
 800ab7c:	3fd17460 	.word	0x3fd17460
 800ab80:	518f264d 	.word	0x518f264d
 800ab84:	3fd55555 	.word	0x3fd55555
 800ab88:	db6fabff 	.word	0xdb6fabff
 800ab8c:	3fdb6db6 	.word	0x3fdb6db6
 800ab90:	33333303 	.word	0x33333303
 800ab94:	3fe33333 	.word	0x3fe33333
 800ab98:	e0000000 	.word	0xe0000000
 800ab9c:	3feec709 	.word	0x3feec709
 800aba0:	dc3a03fd 	.word	0xdc3a03fd
 800aba4:	3feec709 	.word	0x3feec709
 800aba8:	145b01f5 	.word	0x145b01f5
 800abac:	be3e2fe0 	.word	0xbe3e2fe0
 800abb0:	00000000 	.word	0x00000000
 800abb4:	3ff00000 	.word	0x3ff00000
 800abb8:	7ff00000 	.word	0x7ff00000
 800abbc:	43400000 	.word	0x43400000
 800abc0:	0003988e 	.word	0x0003988e
 800abc4:	000bb679 	.word	0x000bb679
 800abc8:	0800b828 	.word	0x0800b828
 800abcc:	3ff00000 	.word	0x3ff00000
 800abd0:	40080000 	.word	0x40080000
 800abd4:	0800b848 	.word	0x0800b848
 800abd8:	0800b838 	.word	0x0800b838
 800abdc:	a3b5      	add	r3, pc, #724	; (adr r3, 800aeb4 <__ieee754_pow+0xa54>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 fb51 	bl	800028c <__adddf3>
 800abea:	4622      	mov	r2, r4
 800abec:	ec41 0b1a 	vmov	d10, r0, r1
 800abf0:	462b      	mov	r3, r5
 800abf2:	4630      	mov	r0, r6
 800abf4:	4639      	mov	r1, r7
 800abf6:	f7f5 fb47 	bl	8000288 <__aeabi_dsub>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	ec51 0b1a 	vmov	r0, r1, d10
 800ac02:	f7f5 ff89 	bl	8000b18 <__aeabi_dcmpgt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f47f ae04 	bne.w	800a814 <__ieee754_pow+0x3b4>
 800ac0c:	4aa4      	ldr	r2, [pc, #656]	; (800aea0 <__ieee754_pow+0xa40>)
 800ac0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac12:	4293      	cmp	r3, r2
 800ac14:	f340 8108 	ble.w	800ae28 <__ieee754_pow+0x9c8>
 800ac18:	151b      	asrs	r3, r3, #20
 800ac1a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ac1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ac22:	fa4a f303 	asr.w	r3, sl, r3
 800ac26:	445b      	add	r3, fp
 800ac28:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ac2c:	4e9d      	ldr	r6, [pc, #628]	; (800aea4 <__ieee754_pow+0xa44>)
 800ac2e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ac32:	4116      	asrs	r6, r2
 800ac34:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ac38:	2000      	movs	r0, #0
 800ac3a:	ea23 0106 	bic.w	r1, r3, r6
 800ac3e:	f1c2 0214 	rsb	r2, r2, #20
 800ac42:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ac46:	fa4a fa02 	asr.w	sl, sl, r2
 800ac4a:	f1bb 0f00 	cmp.w	fp, #0
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	4620      	mov	r0, r4
 800ac54:	4629      	mov	r1, r5
 800ac56:	bfb8      	it	lt
 800ac58:	f1ca 0a00 	rsblt	sl, sl, #0
 800ac5c:	f7f5 fb14 	bl	8000288 <__aeabi_dsub>
 800ac60:	ec41 0b19 	vmov	d9, r0, r1
 800ac64:	4642      	mov	r2, r8
 800ac66:	464b      	mov	r3, r9
 800ac68:	ec51 0b19 	vmov	r0, r1, d9
 800ac6c:	f7f5 fb0e 	bl	800028c <__adddf3>
 800ac70:	a37b      	add	r3, pc, #492	; (adr r3, 800ae60 <__ieee754_pow+0xa00>)
 800ac72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac76:	2000      	movs	r0, #0
 800ac78:	4604      	mov	r4, r0
 800ac7a:	460d      	mov	r5, r1
 800ac7c:	f7f5 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ac80:	ec53 2b19 	vmov	r2, r3, d9
 800ac84:	4606      	mov	r6, r0
 800ac86:	460f      	mov	r7, r1
 800ac88:	4620      	mov	r0, r4
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	f7f5 fafc 	bl	8000288 <__aeabi_dsub>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4640      	mov	r0, r8
 800ac96:	4649      	mov	r1, r9
 800ac98:	f7f5 faf6 	bl	8000288 <__aeabi_dsub>
 800ac9c:	a372      	add	r3, pc, #456	; (adr r3, 800ae68 <__ieee754_pow+0xa08>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 fca9 	bl	80005f8 <__aeabi_dmul>
 800aca6:	a372      	add	r3, pc, #456	; (adr r3, 800ae70 <__ieee754_pow+0xa10>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	4680      	mov	r8, r0
 800acae:	4689      	mov	r9, r1
 800acb0:	4620      	mov	r0, r4
 800acb2:	4629      	mov	r1, r5
 800acb4:	f7f5 fca0 	bl	80005f8 <__aeabi_dmul>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	f7f5 fae4 	bl	800028c <__adddf3>
 800acc4:	4604      	mov	r4, r0
 800acc6:	460d      	mov	r5, r1
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	4630      	mov	r0, r6
 800acce:	4639      	mov	r1, r7
 800acd0:	f7f5 fadc 	bl	800028c <__adddf3>
 800acd4:	4632      	mov	r2, r6
 800acd6:	463b      	mov	r3, r7
 800acd8:	4680      	mov	r8, r0
 800acda:	4689      	mov	r9, r1
 800acdc:	f7f5 fad4 	bl	8000288 <__aeabi_dsub>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4620      	mov	r0, r4
 800ace6:	4629      	mov	r1, r5
 800ace8:	f7f5 face 	bl	8000288 <__aeabi_dsub>
 800acec:	4642      	mov	r2, r8
 800acee:	4606      	mov	r6, r0
 800acf0:	460f      	mov	r7, r1
 800acf2:	464b      	mov	r3, r9
 800acf4:	4640      	mov	r0, r8
 800acf6:	4649      	mov	r1, r9
 800acf8:	f7f5 fc7e 	bl	80005f8 <__aeabi_dmul>
 800acfc:	a35e      	add	r3, pc, #376	; (adr r3, 800ae78 <__ieee754_pow+0xa18>)
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	4604      	mov	r4, r0
 800ad04:	460d      	mov	r5, r1
 800ad06:	f7f5 fc77 	bl	80005f8 <__aeabi_dmul>
 800ad0a:	a35d      	add	r3, pc, #372	; (adr r3, 800ae80 <__ieee754_pow+0xa20>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 faba 	bl	8000288 <__aeabi_dsub>
 800ad14:	4622      	mov	r2, r4
 800ad16:	462b      	mov	r3, r5
 800ad18:	f7f5 fc6e 	bl	80005f8 <__aeabi_dmul>
 800ad1c:	a35a      	add	r3, pc, #360	; (adr r3, 800ae88 <__ieee754_pow+0xa28>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	f7f5 fab3 	bl	800028c <__adddf3>
 800ad26:	4622      	mov	r2, r4
 800ad28:	462b      	mov	r3, r5
 800ad2a:	f7f5 fc65 	bl	80005f8 <__aeabi_dmul>
 800ad2e:	a358      	add	r3, pc, #352	; (adr r3, 800ae90 <__ieee754_pow+0xa30>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f7f5 faa8 	bl	8000288 <__aeabi_dsub>
 800ad38:	4622      	mov	r2, r4
 800ad3a:	462b      	mov	r3, r5
 800ad3c:	f7f5 fc5c 	bl	80005f8 <__aeabi_dmul>
 800ad40:	a355      	add	r3, pc, #340	; (adr r3, 800ae98 <__ieee754_pow+0xa38>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f7f5 faa1 	bl	800028c <__adddf3>
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	462b      	mov	r3, r5
 800ad4e:	f7f5 fc53 	bl	80005f8 <__aeabi_dmul>
 800ad52:	4602      	mov	r2, r0
 800ad54:	460b      	mov	r3, r1
 800ad56:	4640      	mov	r0, r8
 800ad58:	4649      	mov	r1, r9
 800ad5a:	f7f5 fa95 	bl	8000288 <__aeabi_dsub>
 800ad5e:	4604      	mov	r4, r0
 800ad60:	460d      	mov	r5, r1
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	4640      	mov	r0, r8
 800ad68:	4649      	mov	r1, r9
 800ad6a:	f7f5 fc45 	bl	80005f8 <__aeabi_dmul>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	ec41 0b19 	vmov	d9, r0, r1
 800ad74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad78:	4620      	mov	r0, r4
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f7f5 fa84 	bl	8000288 <__aeabi_dsub>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	ec51 0b19 	vmov	r0, r1, d9
 800ad88:	f7f5 fd60 	bl	800084c <__aeabi_ddiv>
 800ad8c:	4632      	mov	r2, r6
 800ad8e:	4604      	mov	r4, r0
 800ad90:	460d      	mov	r5, r1
 800ad92:	463b      	mov	r3, r7
 800ad94:	4640      	mov	r0, r8
 800ad96:	4649      	mov	r1, r9
 800ad98:	f7f5 fc2e 	bl	80005f8 <__aeabi_dmul>
 800ad9c:	4632      	mov	r2, r6
 800ad9e:	463b      	mov	r3, r7
 800ada0:	f7f5 fa74 	bl	800028c <__adddf3>
 800ada4:	4602      	mov	r2, r0
 800ada6:	460b      	mov	r3, r1
 800ada8:	4620      	mov	r0, r4
 800adaa:	4629      	mov	r1, r5
 800adac:	f7f5 fa6c 	bl	8000288 <__aeabi_dsub>
 800adb0:	4642      	mov	r2, r8
 800adb2:	464b      	mov	r3, r9
 800adb4:	f7f5 fa68 	bl	8000288 <__aeabi_dsub>
 800adb8:	460b      	mov	r3, r1
 800adba:	4602      	mov	r2, r0
 800adbc:	493a      	ldr	r1, [pc, #232]	; (800aea8 <__ieee754_pow+0xa48>)
 800adbe:	2000      	movs	r0, #0
 800adc0:	f7f5 fa62 	bl	8000288 <__aeabi_dsub>
 800adc4:	ec41 0b10 	vmov	d0, r0, r1
 800adc8:	ee10 3a90 	vmov	r3, s1
 800adcc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800add0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800add4:	da2b      	bge.n	800ae2e <__ieee754_pow+0x9ce>
 800add6:	4650      	mov	r0, sl
 800add8:	f000 f95e 	bl	800b098 <scalbn>
 800addc:	ec51 0b10 	vmov	r0, r1, d0
 800ade0:	ec53 2b18 	vmov	r2, r3, d8
 800ade4:	f7ff bbed 	b.w	800a5c2 <__ieee754_pow+0x162>
 800ade8:	4b30      	ldr	r3, [pc, #192]	; (800aeac <__ieee754_pow+0xa4c>)
 800adea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800adee:	429e      	cmp	r6, r3
 800adf0:	f77f af0c 	ble.w	800ac0c <__ieee754_pow+0x7ac>
 800adf4:	4b2e      	ldr	r3, [pc, #184]	; (800aeb0 <__ieee754_pow+0xa50>)
 800adf6:	440b      	add	r3, r1
 800adf8:	4303      	orrs	r3, r0
 800adfa:	d009      	beq.n	800ae10 <__ieee754_pow+0x9b0>
 800adfc:	ec51 0b18 	vmov	r0, r1, d8
 800ae00:	2200      	movs	r2, #0
 800ae02:	2300      	movs	r3, #0
 800ae04:	f7f5 fe6a 	bl	8000adc <__aeabi_dcmplt>
 800ae08:	3800      	subs	r0, #0
 800ae0a:	bf18      	it	ne
 800ae0c:	2001      	movne	r0, #1
 800ae0e:	e447      	b.n	800a6a0 <__ieee754_pow+0x240>
 800ae10:	4622      	mov	r2, r4
 800ae12:	462b      	mov	r3, r5
 800ae14:	f7f5 fa38 	bl	8000288 <__aeabi_dsub>
 800ae18:	4642      	mov	r2, r8
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	f7f5 fe72 	bl	8000b04 <__aeabi_dcmpge>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	f43f aef3 	beq.w	800ac0c <__ieee754_pow+0x7ac>
 800ae26:	e7e9      	b.n	800adfc <__ieee754_pow+0x99c>
 800ae28:	f04f 0a00 	mov.w	sl, #0
 800ae2c:	e71a      	b.n	800ac64 <__ieee754_pow+0x804>
 800ae2e:	ec51 0b10 	vmov	r0, r1, d0
 800ae32:	4619      	mov	r1, r3
 800ae34:	e7d4      	b.n	800ade0 <__ieee754_pow+0x980>
 800ae36:	491c      	ldr	r1, [pc, #112]	; (800aea8 <__ieee754_pow+0xa48>)
 800ae38:	2000      	movs	r0, #0
 800ae3a:	f7ff bb30 	b.w	800a49e <__ieee754_pow+0x3e>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	2100      	movs	r1, #0
 800ae42:	f7ff bb2c 	b.w	800a49e <__ieee754_pow+0x3e>
 800ae46:	4630      	mov	r0, r6
 800ae48:	4639      	mov	r1, r7
 800ae4a:	f7ff bb28 	b.w	800a49e <__ieee754_pow+0x3e>
 800ae4e:	9204      	str	r2, [sp, #16]
 800ae50:	f7ff bb7a 	b.w	800a548 <__ieee754_pow+0xe8>
 800ae54:	2300      	movs	r3, #0
 800ae56:	f7ff bb64 	b.w	800a522 <__ieee754_pow+0xc2>
 800ae5a:	bf00      	nop
 800ae5c:	f3af 8000 	nop.w
 800ae60:	00000000 	.word	0x00000000
 800ae64:	3fe62e43 	.word	0x3fe62e43
 800ae68:	fefa39ef 	.word	0xfefa39ef
 800ae6c:	3fe62e42 	.word	0x3fe62e42
 800ae70:	0ca86c39 	.word	0x0ca86c39
 800ae74:	be205c61 	.word	0xbe205c61
 800ae78:	72bea4d0 	.word	0x72bea4d0
 800ae7c:	3e663769 	.word	0x3e663769
 800ae80:	c5d26bf1 	.word	0xc5d26bf1
 800ae84:	3ebbbd41 	.word	0x3ebbbd41
 800ae88:	af25de2c 	.word	0xaf25de2c
 800ae8c:	3f11566a 	.word	0x3f11566a
 800ae90:	16bebd93 	.word	0x16bebd93
 800ae94:	3f66c16c 	.word	0x3f66c16c
 800ae98:	5555553e 	.word	0x5555553e
 800ae9c:	3fc55555 	.word	0x3fc55555
 800aea0:	3fe00000 	.word	0x3fe00000
 800aea4:	000fffff 	.word	0x000fffff
 800aea8:	3ff00000 	.word	0x3ff00000
 800aeac:	4090cbff 	.word	0x4090cbff
 800aeb0:	3f6f3400 	.word	0x3f6f3400
 800aeb4:	652b82fe 	.word	0x652b82fe
 800aeb8:	3c971547 	.word	0x3c971547

0800aebc <__ieee754_sqrt>:
 800aebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec0:	ec55 4b10 	vmov	r4, r5, d0
 800aec4:	4e55      	ldr	r6, [pc, #340]	; (800b01c <__ieee754_sqrt+0x160>)
 800aec6:	43ae      	bics	r6, r5
 800aec8:	ee10 0a10 	vmov	r0, s0
 800aecc:	ee10 3a10 	vmov	r3, s0
 800aed0:	462a      	mov	r2, r5
 800aed2:	4629      	mov	r1, r5
 800aed4:	d110      	bne.n	800aef8 <__ieee754_sqrt+0x3c>
 800aed6:	ee10 2a10 	vmov	r2, s0
 800aeda:	462b      	mov	r3, r5
 800aedc:	f7f5 fb8c 	bl	80005f8 <__aeabi_dmul>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	4620      	mov	r0, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	f7f5 f9d0 	bl	800028c <__adddf3>
 800aeec:	4604      	mov	r4, r0
 800aeee:	460d      	mov	r5, r1
 800aef0:	ec45 4b10 	vmov	d0, r4, r5
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	2d00      	cmp	r5, #0
 800aefa:	dc10      	bgt.n	800af1e <__ieee754_sqrt+0x62>
 800aefc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800af00:	4330      	orrs	r0, r6
 800af02:	d0f5      	beq.n	800aef0 <__ieee754_sqrt+0x34>
 800af04:	b15d      	cbz	r5, 800af1e <__ieee754_sqrt+0x62>
 800af06:	ee10 2a10 	vmov	r2, s0
 800af0a:	462b      	mov	r3, r5
 800af0c:	ee10 0a10 	vmov	r0, s0
 800af10:	f7f5 f9ba 	bl	8000288 <__aeabi_dsub>
 800af14:	4602      	mov	r2, r0
 800af16:	460b      	mov	r3, r1
 800af18:	f7f5 fc98 	bl	800084c <__aeabi_ddiv>
 800af1c:	e7e6      	b.n	800aeec <__ieee754_sqrt+0x30>
 800af1e:	1512      	asrs	r2, r2, #20
 800af20:	d074      	beq.n	800b00c <__ieee754_sqrt+0x150>
 800af22:	07d4      	lsls	r4, r2, #31
 800af24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800af28:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800af2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800af30:	bf5e      	ittt	pl
 800af32:	0fda      	lsrpl	r2, r3, #31
 800af34:	005b      	lslpl	r3, r3, #1
 800af36:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800af3a:	2400      	movs	r4, #0
 800af3c:	0fda      	lsrs	r2, r3, #31
 800af3e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800af42:	107f      	asrs	r7, r7, #1
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	2516      	movs	r5, #22
 800af48:	4620      	mov	r0, r4
 800af4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800af4e:	1886      	adds	r6, r0, r2
 800af50:	428e      	cmp	r6, r1
 800af52:	bfde      	ittt	le
 800af54:	1b89      	suble	r1, r1, r6
 800af56:	18b0      	addle	r0, r6, r2
 800af58:	18a4      	addle	r4, r4, r2
 800af5a:	0049      	lsls	r1, r1, #1
 800af5c:	3d01      	subs	r5, #1
 800af5e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800af62:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800af66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af6a:	d1f0      	bne.n	800af4e <__ieee754_sqrt+0x92>
 800af6c:	462a      	mov	r2, r5
 800af6e:	f04f 0e20 	mov.w	lr, #32
 800af72:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800af76:	4281      	cmp	r1, r0
 800af78:	eb06 0c05 	add.w	ip, r6, r5
 800af7c:	dc02      	bgt.n	800af84 <__ieee754_sqrt+0xc8>
 800af7e:	d113      	bne.n	800afa8 <__ieee754_sqrt+0xec>
 800af80:	459c      	cmp	ip, r3
 800af82:	d811      	bhi.n	800afa8 <__ieee754_sqrt+0xec>
 800af84:	f1bc 0f00 	cmp.w	ip, #0
 800af88:	eb0c 0506 	add.w	r5, ip, r6
 800af8c:	da43      	bge.n	800b016 <__ieee754_sqrt+0x15a>
 800af8e:	2d00      	cmp	r5, #0
 800af90:	db41      	blt.n	800b016 <__ieee754_sqrt+0x15a>
 800af92:	f100 0801 	add.w	r8, r0, #1
 800af96:	1a09      	subs	r1, r1, r0
 800af98:	459c      	cmp	ip, r3
 800af9a:	bf88      	it	hi
 800af9c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800afa0:	eba3 030c 	sub.w	r3, r3, ip
 800afa4:	4432      	add	r2, r6
 800afa6:	4640      	mov	r0, r8
 800afa8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800afac:	f1be 0e01 	subs.w	lr, lr, #1
 800afb0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800afb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800afb8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800afbc:	d1db      	bne.n	800af76 <__ieee754_sqrt+0xba>
 800afbe:	430b      	orrs	r3, r1
 800afc0:	d006      	beq.n	800afd0 <__ieee754_sqrt+0x114>
 800afc2:	1c50      	adds	r0, r2, #1
 800afc4:	bf13      	iteet	ne
 800afc6:	3201      	addne	r2, #1
 800afc8:	3401      	addeq	r4, #1
 800afca:	4672      	moveq	r2, lr
 800afcc:	f022 0201 	bicne.w	r2, r2, #1
 800afd0:	1063      	asrs	r3, r4, #1
 800afd2:	0852      	lsrs	r2, r2, #1
 800afd4:	07e1      	lsls	r1, r4, #31
 800afd6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800afda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800afde:	bf48      	it	mi
 800afe0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800afe4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800afe8:	4614      	mov	r4, r2
 800afea:	e781      	b.n	800aef0 <__ieee754_sqrt+0x34>
 800afec:	0ad9      	lsrs	r1, r3, #11
 800afee:	3815      	subs	r0, #21
 800aff0:	055b      	lsls	r3, r3, #21
 800aff2:	2900      	cmp	r1, #0
 800aff4:	d0fa      	beq.n	800afec <__ieee754_sqrt+0x130>
 800aff6:	02cd      	lsls	r5, r1, #11
 800aff8:	d50a      	bpl.n	800b010 <__ieee754_sqrt+0x154>
 800affa:	f1c2 0420 	rsb	r4, r2, #32
 800affe:	fa23 f404 	lsr.w	r4, r3, r4
 800b002:	1e55      	subs	r5, r2, #1
 800b004:	4093      	lsls	r3, r2
 800b006:	4321      	orrs	r1, r4
 800b008:	1b42      	subs	r2, r0, r5
 800b00a:	e78a      	b.n	800af22 <__ieee754_sqrt+0x66>
 800b00c:	4610      	mov	r0, r2
 800b00e:	e7f0      	b.n	800aff2 <__ieee754_sqrt+0x136>
 800b010:	0049      	lsls	r1, r1, #1
 800b012:	3201      	adds	r2, #1
 800b014:	e7ef      	b.n	800aff6 <__ieee754_sqrt+0x13a>
 800b016:	4680      	mov	r8, r0
 800b018:	e7bd      	b.n	800af96 <__ieee754_sqrt+0xda>
 800b01a:	bf00      	nop
 800b01c:	7ff00000 	.word	0x7ff00000

0800b020 <with_errno>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	4604      	mov	r4, r0
 800b024:	460d      	mov	r5, r1
 800b026:	4616      	mov	r6, r2
 800b028:	f7fa fb2e 	bl	8005688 <__errno>
 800b02c:	4629      	mov	r1, r5
 800b02e:	6006      	str	r6, [r0, #0]
 800b030:	4620      	mov	r0, r4
 800b032:	bd70      	pop	{r4, r5, r6, pc}

0800b034 <xflow>:
 800b034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b036:	4614      	mov	r4, r2
 800b038:	461d      	mov	r5, r3
 800b03a:	b108      	cbz	r0, 800b040 <xflow+0xc>
 800b03c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b040:	e9cd 2300 	strd	r2, r3, [sp]
 800b044:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b048:	4620      	mov	r0, r4
 800b04a:	4629      	mov	r1, r5
 800b04c:	f7f5 fad4 	bl	80005f8 <__aeabi_dmul>
 800b050:	2222      	movs	r2, #34	; 0x22
 800b052:	b003      	add	sp, #12
 800b054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b058:	f7ff bfe2 	b.w	800b020 <with_errno>

0800b05c <__math_uflow>:
 800b05c:	b508      	push	{r3, lr}
 800b05e:	2200      	movs	r2, #0
 800b060:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b064:	f7ff ffe6 	bl	800b034 <xflow>
 800b068:	ec41 0b10 	vmov	d0, r0, r1
 800b06c:	bd08      	pop	{r3, pc}

0800b06e <__math_oflow>:
 800b06e:	b508      	push	{r3, lr}
 800b070:	2200      	movs	r2, #0
 800b072:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800b076:	f7ff ffdd 	bl	800b034 <xflow>
 800b07a:	ec41 0b10 	vmov	d0, r0, r1
 800b07e:	bd08      	pop	{r3, pc}

0800b080 <finite>:
 800b080:	b082      	sub	sp, #8
 800b082:	ed8d 0b00 	vstr	d0, [sp]
 800b086:	9801      	ldr	r0, [sp, #4]
 800b088:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b08c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b090:	0fc0      	lsrs	r0, r0, #31
 800b092:	b002      	add	sp, #8
 800b094:	4770      	bx	lr
	...

0800b098 <scalbn>:
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	ec55 4b10 	vmov	r4, r5, d0
 800b09e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	462b      	mov	r3, r5
 800b0a6:	b99a      	cbnz	r2, 800b0d0 <scalbn+0x38>
 800b0a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b0ac:	4323      	orrs	r3, r4
 800b0ae:	d036      	beq.n	800b11e <scalbn+0x86>
 800b0b0:	4b39      	ldr	r3, [pc, #228]	; (800b198 <scalbn+0x100>)
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	ee10 0a10 	vmov	r0, s0
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f7f5 fa9d 	bl	80005f8 <__aeabi_dmul>
 800b0be:	4b37      	ldr	r3, [pc, #220]	; (800b19c <scalbn+0x104>)
 800b0c0:	429e      	cmp	r6, r3
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	da10      	bge.n	800b0ea <scalbn+0x52>
 800b0c8:	a32b      	add	r3, pc, #172	; (adr r3, 800b178 <scalbn+0xe0>)
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	e03a      	b.n	800b146 <scalbn+0xae>
 800b0d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b0d4:	428a      	cmp	r2, r1
 800b0d6:	d10c      	bne.n	800b0f2 <scalbn+0x5a>
 800b0d8:	ee10 2a10 	vmov	r2, s0
 800b0dc:	4620      	mov	r0, r4
 800b0de:	4629      	mov	r1, r5
 800b0e0:	f7f5 f8d4 	bl	800028c <__adddf3>
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	e019      	b.n	800b11e <scalbn+0x86>
 800b0ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	3a36      	subs	r2, #54	; 0x36
 800b0f2:	4432      	add	r2, r6
 800b0f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b0f8:	428a      	cmp	r2, r1
 800b0fa:	dd08      	ble.n	800b10e <scalbn+0x76>
 800b0fc:	2d00      	cmp	r5, #0
 800b0fe:	a120      	add	r1, pc, #128	; (adr r1, 800b180 <scalbn+0xe8>)
 800b100:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b104:	da1c      	bge.n	800b140 <scalbn+0xa8>
 800b106:	a120      	add	r1, pc, #128	; (adr r1, 800b188 <scalbn+0xf0>)
 800b108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b10c:	e018      	b.n	800b140 <scalbn+0xa8>
 800b10e:	2a00      	cmp	r2, #0
 800b110:	dd08      	ble.n	800b124 <scalbn+0x8c>
 800b112:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b11a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b11e:	ec45 4b10 	vmov	d0, r4, r5
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b128:	da19      	bge.n	800b15e <scalbn+0xc6>
 800b12a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b12e:	429e      	cmp	r6, r3
 800b130:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b134:	dd0a      	ble.n	800b14c <scalbn+0xb4>
 800b136:	a112      	add	r1, pc, #72	; (adr r1, 800b180 <scalbn+0xe8>)
 800b138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1e2      	bne.n	800b106 <scalbn+0x6e>
 800b140:	a30f      	add	r3, pc, #60	; (adr r3, 800b180 <scalbn+0xe8>)
 800b142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b146:	f7f5 fa57 	bl	80005f8 <__aeabi_dmul>
 800b14a:	e7cb      	b.n	800b0e4 <scalbn+0x4c>
 800b14c:	a10a      	add	r1, pc, #40	; (adr r1, 800b178 <scalbn+0xe0>)
 800b14e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d0b8      	beq.n	800b0c8 <scalbn+0x30>
 800b156:	a10e      	add	r1, pc, #56	; (adr r1, 800b190 <scalbn+0xf8>)
 800b158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b15c:	e7b4      	b.n	800b0c8 <scalbn+0x30>
 800b15e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b162:	3236      	adds	r2, #54	; 0x36
 800b164:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b168:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b16c:	4620      	mov	r0, r4
 800b16e:	4b0c      	ldr	r3, [pc, #48]	; (800b1a0 <scalbn+0x108>)
 800b170:	2200      	movs	r2, #0
 800b172:	e7e8      	b.n	800b146 <scalbn+0xae>
 800b174:	f3af 8000 	nop.w
 800b178:	c2f8f359 	.word	0xc2f8f359
 800b17c:	01a56e1f 	.word	0x01a56e1f
 800b180:	8800759c 	.word	0x8800759c
 800b184:	7e37e43c 	.word	0x7e37e43c
 800b188:	8800759c 	.word	0x8800759c
 800b18c:	fe37e43c 	.word	0xfe37e43c
 800b190:	c2f8f359 	.word	0xc2f8f359
 800b194:	81a56e1f 	.word	0x81a56e1f
 800b198:	43500000 	.word	0x43500000
 800b19c:	ffff3cb0 	.word	0xffff3cb0
 800b1a0:	3c900000 	.word	0x3c900000

0800b1a4 <_init>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	bf00      	nop
 800b1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1aa:	bc08      	pop	{r3}
 800b1ac:	469e      	mov	lr, r3
 800b1ae:	4770      	bx	lr

0800b1b0 <_fini>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr
